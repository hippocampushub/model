{"version":3,"file":"static/chunks/7386-1a0f0ae45773f816.js","mappings":"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","sources":["webpack://_N_E/./src/components/ExperiementalMorphologyUsed/index.tsx","webpack://_N_E/./src/components/Unit/index.tsx","webpack://_N_E/./src/components/Factsheet/index.tsx","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/PranavViewer/PranavViewer.tsx","webpack://_N_E/./src/components/PranavViewer/index.ts","webpack://_N_E/./src/components/Term/index.tsx","webpack://_N_E/./src/hoc/with-preselection.tsx","webpack://_N_E/./src/views/5_predictions/components/Trace.tsx","webpack://_N_E/./src/components/PranavViewer/pranav-viewer.module.css","webpack://_N_E/./src/components/Term/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { Table } from 'antd';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { basePath, dataPath } from '@/config';\n\n\ntype MorphologyTableProps = {\n    currentInstance: string;\n    MorphologyData: any;\n    isMorphologyLibrary?: boolean;\n};\n\nconst ExperimentalMorphologyTable: React.FC<MorphologyTableProps> = ({ currentInstance, MorphologyData, isMorphologyLibrary }) => {\n    const columns = useMemo(() => {\n        const baseColumns = [\n            {\n                title: 'Morphology',\n                dataIndex: 'morphology',\n                key: 'morphology',\n                width: 150,\n                render: (morphology: string, record: any) => (\n                    isMorphologyLibrary ? (\n                        <Link href={`/reconstruction-data/morphology-library/?layer=${record.layer}&etype=${record.etype}&mtype=${record.mtype}&morphology=${morphology}`}>\n                            {morphology}\n                        </Link>\n                    ) : (\n                        <Link href={`/experimental-data/neuronal-morphology/?layer=${record.layer}&mtype=${record.mtype}&instance=${record.morphology}`}>\n                            {morphology}\n                        </Link>\n                    )\n                ),\n            },\n            {\n                title: 'M-type',\n                dataIndex: 'mtype',\n                key: 'mtype',\n                width: 150,\n            },\n\n        ];\n\n        if (!isMorphologyLibrary) {\n            baseColumns.push({\n                title: 'Preview',\n                dataIndex: 'morphology',\n                key: 'preview',\n                width: 220,\n                render: (morphology: string) => (\n                    <Image\n                        src={`${dataPath}/images/1_experimental-data/neuronal-morphology/${morphology}.png`}\n                        alt={`morphology preview ${morphology}`}\n                        width={200}\n                        height={100}\n                        style={{ height: 'auto' }}\n                    />\n                ),\n            });\n        }\n\n        return baseColumns;\n    }, [isMorphologyLibrary]);\n\n    const tableData = useMemo(() => {\n        if (!Array.isArray(MorphologyData)) {\n            // console.error('MorphologyData is not an array:', MorphologyData);\n            return [];\n        }\n\n        let currentModel;\n        if (isMorphologyLibrary) {\n            currentModel = MorphologyData.find(item => item.morphology === currentInstance);\n        } else {\n            currentModel = MorphologyData.find(item => item.name === currentInstance);\n        }\n\n        if (!currentModel) {\n            // console.error('No matching model found for:', currentInstance);\n            // console.log('Available models:', MorphologyData.map(item => isMorphologyLibrary ? item.morphology : item.name));\n            return [];\n        }\n\n        return [{\n            key: currentModel.name || currentModel.morphology,\n            layer: currentModel.layer,\n            mtype: currentModel.mtype,\n            morphology: currentModel.morphology,\n        }];\n    }, [currentInstance, isMorphologyLibrary, MorphologyData]);\n\n    // console.log('Current instance:', currentInstance);\n    // console.log('Table data:', tableData);\n\n    return (\n        <>\n            <Table\n                columns={columns}\n                dataSource={tableData}\n                pagination={false}\n                scroll={{ x: 'max-content' }}\n            />\n            {tableData.length === 0 && (\n                <p>No data found for the current instance: {currentInstance}</p>\n            )}\n        </>\n    );\n};\n\nexport default ExperimentalMorphologyTable;\n","import React from 'react';\n\ntype UnitProps = {\n  value?: string;\n}\n\nconst replacement = {\n  MOhm: 'MΩ',\n};\n\nconst Unit: React.FC<UnitProps> = ({ value = '' }) => {\n  return (\n    <>\n      {replacement[value] ?? value}\n    </>\n  );\n};\n\n\nexport default Unit;\n","import React from 'react';\nimport NumberFormat from '../NumberFormat';\nimport isNil from 'lodash/isNil';\n\nimport Unit from '../Unit';\nimport { termFactory } from '@/components/Term';\n\nconst Term = termFactory();\n\nconst classPrefix = 'factsheet__';\n\nexport type FactsheetEntryType = {\n  name: string;\n  description: string;\n  units?: string;\n  unit?: string;\n  value?: number | string;\n  values?: number[];\n  value_map?: {\n    [key: string]: string | number;\n  };\n};\n\ntype FactsheetProps = {\n  facts: FactsheetEntryType[];\n  className?: string;\n};\n\nconst FactsheetSingleValueEntry: React.FC<{\n  fact: FactsheetEntryType;\n}> = ({\n  fact\n}) => {\n    return (\n      <div className=\"row mt-1\">\n        <div className=\"col-xs-6 col-sm-4 name\">\n          <Term term={fact.name} description={fact.description} />\n        </div>\n        <div className=\"col-xs-6 col-sm-8 value\">\n          {isNil(fact.value)\n            ? (<span>-</span>)\n            : (<span>\n              <NumberFormat value={fact.value} /> <Unit value={fact.units || fact.unit} />\n            </span>)\n          }\n        </div>\n      </div>\n    );\n  };\n\nconst FactsheetSingleMeanStdEntry: React.FC<{\n  fact: FactsheetEntryType;\n}> = ({\n  fact,\n}) => {\n    const mean = fact.value_map?.mean ?? (fact.values?.[0] ?? '-');\n    const std = fact.value_map?.std ?? (fact.values?.[1] ?? '-');\n\n    const formatValue = (value: string | number) => {\n      if (typeof value === 'number') {\n        return value.toFixed(3);\n      }\n      return value;\n    };\n\n    const formatNumberWithoutCommas = (value: string | number) => {\n      if (typeof value === 'number') {\n        return value.toString().replace(/,/g, '');\n      }\n      return value;\n    };\n\n    return (\n      <div className=\"row mt-1\">\n        <div className=\"col-xs-4 name\">\n          <Term term={fact.name} description={fact.description} />\n        </div>\n        <div className=\"col-xs-4 value\">\n          {formatNumberWithoutCommas(formatValue(mean))}\n          {std !== '-' ? <> ± {formatNumberWithoutCommas(formatValue(std))}</> : ''}\n          {fact.units || fact.unit && <> {fact.units || fact.unit}</>}\n        </div>\n      </div>\n    );\n  };\n\nconst FactsheetMapValueEntry: React.FC<{\n  fact: FactsheetEntryType\n}> = ({\n  fact,\n}) => {\n    // @ts-ignore\n    const maxVal = Math.max.apply(null, Object.values(fact.value_map).map(s => parseFloat(s as string)));\n    const unitCode = fact.units || fact.unit;\n\n    // @ts-ignore\n    const valueColumn = Object.entries(fact.value_map).map(([label, value]) => {\n      const barMaxFillRatio = 0.8;\n      const barWidthPct = (parseFloat(value as string) / maxVal) * 100 * barMaxFillRatio;\n\n      return (\n        <div key={label} className=\"row mb-1\">\n          <div className=\"col-xs-6 pos-relative\">\n            {label}\n            <div className=\"bar\" style={{ width: `${barWidthPct}%` }} />\n          </div>\n          <div className=\"col-xs-6\">\n            <NumberFormat value={value} /> <Unit value={unitCode} />\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"row mt-1\">\n        <div className=\"col-xs-6 col-lg-4 name\">\n          <Term term={fact.name} description={fact.description} />\n        </div>\n        <div className=\"col-xs-6 col-lg-8\">{valueColumn}</div>\n      </div>\n    );\n  };\n\nconst FactsheetEntry: React.FC<{\n  fact: FactsheetEntryType\n}> = ({\n  fact\n}) => {\n    if (\n      fact.value_map &&\n      !isNil(fact.value_map.mean) &&\n      !isNil(fact.value_map.std)\n    ) {\n      return (<FactsheetSingleMeanStdEntry fact={fact} />);\n    }\n\n    if (Array.isArray(fact.values)) {\n      return (<FactsheetSingleMeanStdEntry fact={fact} />);\n    }\n\n    if (fact.value_map) {\n      return (<FactsheetMapValueEntry fact={fact} />);\n    }\n\n    return (<FactsheetSingleValueEntry fact={fact} />);\n  };\n\nconst Factsheet: React.FC<FactsheetProps> = ({\n  facts,\n  className = '',\n}) => {\n  return (\n    <div className={`${classPrefix}basis ${className}`}>\n      {facts.map((fact, index) => (\n        <FactsheetEntry key={`${fact.name}-${index}`} fact={fact} />\n      ))}\n    </div>\n  );\n};\n\nexport default Factsheet;\n","import React from 'react';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nexport function formatNumber(value, significantFigures = 5, thousandSeparator = true, prefix = '', suffix = '') {\n  const num = parseFloat(value);\n\n  if (!Number.isFinite(num)) return value;\n\n  const formatted = thousandSeparator\n    ? num.toLocaleString('en', { maximumSignificantDigits: significantFigures })\n    : num.toPrecision(significantFigures);\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  return formatNumber(value, significantFigures, thousandSeparator, prefix, suffix);\n}\n\n\nexport default NumberFormat;\n","import React from \"react\";\nimport { Radio, RadioChangeEvent } from \"antd\";\n\nimport { classNames } from \"@/utils\";\nimport { SwcViewer, SwcViewerLoader } from \"@/views/MorphoViewer/SwcViewer\";\nimport { CellNodes } from \"@/views/MorphoViewer/tools/nodes\";\nimport { basePath } from \"@/config\";\nimport { CellNode, CellNodeType } from \"@/views/MorphoViewer/types\";\nimport { TgdVec3 } from \"@/views/MorphoViewer/tgd\";\n\nimport styles from \"./pranav-viewer.module.css\";\n\nconst COLORS = [\n  \"#004282\",\n  \"#3d6099\",\n  \"#238ec8\",\n  \"#17b2dc\",\n  \"#b0dcf1\",\n  \"#26a065\",\n  \"#99c68e\",\n  \"#fecd70\",\n  \"#e97c1d\",\n  \"#dc1921\",\n];\nexport interface PranavViewerProps {\n  className?: string;\n  url: string;\n}\n\nfunction Options(props: {\n  options: string[];\n  value: string;\n  onChange: (value: string) => void;\n}) {\n  [\n    { label: \"Apple\", value: \"Apple\" },\n    { label: \"Pear\", value: \"Pear\" },\n    { label: \"Orange\", value: \"Orange\", disabled: true },\n  ];\n  return (\n    <Radio.Group\n      options={props.options.map((id) => ({ label: id, value: id }))}\n      onChange={({ target: { value } }: RadioChangeEvent) =>\n        props.onChange(value)\n      }\n      value={props.value}\n      optionType=\"button\"\n      buttonStyle=\"solid\"\n    />\n  );\n}\n\nexport function PranavViewer({ className, url }: PranavViewerProps) {\n  const [type, setType] = React.useState(\"BPAP\");\n  const [field, setField] = React.useState(\"Amplitude\");\n  return (\n    <div className={classNames(styles.main, className)}>\n      <header>\n        <Options options={[\"BPAP\", \"EPSP\"]} value={type} onChange={setType} />\n        <Options\n          options={[\"Amplitude\", \"Delay\"]}\n          value={field}\n          onChange={setField}\n        />\n      </header>\n      <SwcViewer\n        href={`${url}/${type.toLowerCase()}_result.csv`}\n        loader={\n          field === \"Amplitude\" ? pranavLoaderAmplitude : pranavLoaderDelay\n        }\n      />\n    </div>\n  );\n}\n\nasync function pranavLoad(\n  url: string,\n  fields: string[],\n  unit: string\n): Promise<ReturnType<SwcViewerLoader>> {\n  const resp = await fetch(url);\n  if (!resp.ok) throw Error(`Error #${resp.status}: ${resp.statusText}`);\n\n  const text = await resp.text();\n  const [header, ...lines] = text\n    .split(\"\\n\")\n    .filter((line) => line.trim().length > 0);\n  const get = makeGetter(header, fields);\n  let centerCount = 0;\n  let centerX = 0;\n  let centerY = 0;\n  let centerZ = 0;\n  const nodes: CellNode[] = lines.map((line) => {\n    const fields = line.split(\",\");\n    const parent = get.parent(fields);\n    const x = get.x(fields);\n    const y = get.y(fields);\n    const z = get.z(fields);\n    if (parent < 1) {\n      centerCount++;\n      centerX += x;\n      centerY += y;\n      centerZ += z;\n    }\n    const node: CellNode = {\n      type: CellNodeType.Unknown,\n      index: get.id(fields),\n      parent,\n      x,\n      y,\n      z,\n      radius: get.radius(fields),\n      u: get.u(fields),\n      v: get.v(fields),\n    };\n    return node;\n  });\n  nodes.forEach((node, index) => {\n    if (Number.isNaN(node.u)) {\n      console.log(\"🚀 [PranavViewer] index, node = \", index, node); // @FIXME: Remove this line written on 2024-10-23 at 17:18\n    }\n  });\n  const minU = nodes.reduce(\n    (acc, node) => Math.min(acc, node.u),\n    Number.MAX_VALUE\n  );\n  const maxU = nodes.reduce(\n    (acc, node) => Math.max(acc, node.u),\n    -Number.MAX_VALUE\n  );\n  const factor = 1 / (maxU - minU);\n  nodes.forEach((node, index) => {\n    nodes[index].u = factor * (node.u - minU);\n    nodes[index].v = factor * (node.v - minU);\n  });\n  const center =\n    centerCount > 0\n      ? new TgdVec3(centerX, centerY, centerZ).scale(1 / centerCount)\n      : undefined;\n  return {\n    legend: {\n      colorRamp: COLORS,\n      labelMin: `${minU.toFixed(3)} ${unit}`,\n      labelMax: `${maxU.toFixed(3)} ${unit}`,\n    },\n    morphologies: [\n      {\n        nodes: new CellNodes(nodes),\n        colors: COLORS,\n        texture: {\n          magFilter: \"LINEAR\",\n          minFilter: \"LINEAR\",\n        },\n        center,\n      },\n    ],\n  };\n}\n\nconst pranavLoaderAmplitude: SwcViewerLoader = async (url: string) => {\n  return pranavLoad(url, [\"voltage_attenuation\", \"psp_amplitude_ratio\"], \"\");\n};\n\nconst pranavLoaderDelay: SwcViewerLoader = async (url: string) => {\n  return pranavLoad(url, [\"delay\", \"peak_delays\"], \"ms\");\n};\n\nfunction makeGetter(header: string, voltages: string[]) {\n  const fields = header.split(\",\").map((item) => item.trim().toLowerCase());\n  const voltage = voltages.find((v) => fields.indexOf(v) > -1) ?? \"\";\n  fields.indexOf(\"voltage_attenuation\") > -1;\n  return {\n    id: makeFieldGetter(fields.indexOf(\"unique_int_id\")),\n    parent: makeFieldGetter(fields.indexOf(\"parent_unique_int_id\")),\n    x: makeFieldGetter(fields.indexOf(\"x\")),\n    y: makeFieldGetter(fields.indexOf(\"y\")),\n    z: makeFieldGetter(fields.indexOf(\"z\")),\n    radius: makeFieldGetter(fields.indexOf(\"radius\")),\n    u: makeFieldGetter(fields.indexOf(voltage)),\n    v: makeFieldGetter(fields.indexOf(voltage)),\n  };\n}\n\nfunction makeFieldGetter(index: number) {\n  return (items: string[]) => parseFloat(items[index]);\n}\n","export * from \"./PranavViewer\"\n","import React from 'react';\nimport { Tooltip } from 'antd';\n\nimport { TermDescription } from '@/terms';\n\nimport style from './styles.module.scss';\n\ntype TermProps = {\n  term: string;\n  description?: any;\n  className?: string;\n};\n\ntype TermFormatter = (term: string) => string;\n\nexport const termFactory = (termDescription: TermDescription = {}, termFormatter?: TermFormatter) => {\n  const Term: React.FC<TermProps> = ({ className, term, description }) => {\n    const currentDescription = description || termDescription[term];\n    const formattedTerm = termFormatter\n      ? termFormatter(term)\n      : term;\n\n    if (!currentDescription) {\n      return (<span className={className}>{formattedTerm}</span>);\n    }\n\n    return (\n      <Tooltip title={currentDescription} destroyTooltipOnHide={true}>\n        <span className={`${style.container} ${className ?? ''}`}>{formattedTerm}</span>\n      </Tooltip>\n    );\n  };\n\n  return Term;\n};\n","import React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\ntype PreselectionProps = {\n  key: string,\n  defaultQuery: any,\n};\n\nconst withPreselection = (WrappedComponent, options: PreselectionProps) => {\n\n  const WithPreselectionComponent: React.FC = () => {\n    const router = useRouter();\n\n    useEffect(() => {\n      if (!router.isReady) return;\n\n      if (!router.query[options.key]) {\n        const query = options.defaultQuery;\n        router.replace({ query }, undefined, { shallow: true });\n      }\n    }, [router.query]);\n\n    return (<WrappedComponent />);\n  };\n\n  return WithPreselectionComponent;\n}\n\nexport default withPreselection;\n","import React, { useEffect, useState } from 'react';\nimport { Loader2 } from 'lucide-react';\nimport dynamic from 'next/dynamic';\nimport { PlotParams } from 'react-plotly.js';\nimport { graphTheme, themeColors } from '@/constants';\n\nconst Plot = dynamic(() => import('react-plotly.js'), { ssr: false }) as React.ComponentType<PlotParams>;\n\ninterface TraceDataProps {\n    plotData?: {\n        name: string;\n        description: string;\n        units: string | null;\n        value_map: { [key: string]: number[] } | number[][];\n    };\n}\n\nconst PlotlyTraceGraph: React.FC<TraceDataProps> = ({ plotData }) => {\n    const [data, setData] = useState<any[]>([]);\n    const [layout, setLayout] = useState<any>({});\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [hasError, setHasError] = useState<boolean>(false);\n    const [hoveredTraceIndex, setHoveredTraceIndex] = useState<number | null>(null);\n    const [allTracesVisible, setAllTracesVisible] = useState<boolean>(true);\n\n    useEffect(() => {\n        if (!plotData || !plotData.value_map || (Array.isArray(plotData.value_map) && plotData.value_map.length === 0) || Object.keys(plotData.value_map).length === 0) {\n            console.log('No plot data available');\n            setIsLoading(false);\n            setHasError(true);\n            return;\n        }\n\n        try {\n            setIsLoading(true);\n            setHasError(false);\n\n            // Prepare data for Plotly\n            let traces;\n            const maxTime = 5000; // Maximum time in milliseconds\n            if (Array.isArray(plotData.value_map)) {\n                traces = plotData.value_map.map((trace, index) => ({\n                    x: Array.from({ length: trace.length }, (_, i) => i * (maxTime / (trace.length - 1))),\n                    y: trace,\n                    type: 'scatter' as const,\n                    mode: 'lines' as const,\n                    name: `Trace ${index + 1}`,\n                    line: {\n                        color: `hsl(${index * 137.5 % 360}, 70%, 50%)`,\n                        width: 1,\n                    },\n                    visible: allTracesVisible ? true : 'legendonly',\n                }));\n            } else {\n                traces = Object.entries(plotData.value_map).map(([key, trace], index) => ({\n                    x: Array.from({ length: trace.length }, (_, i) => i * (maxTime / (trace.length - 1))),\n                    y: trace,\n                    type: 'scatter' as const,\n                    mode: 'lines' as const,\n                    name: key,\n                    line: {\n                        color: `hsl(${index * 137.5 % 360}, 70%, 50%)`,\n                        width: 1,\n                    },\n                    visible: allTracesVisible ? true : 'legendonly',\n                }));\n            }\n\n            setData(traces);\n\n            // Set up the layout\n            setLayout({\n                xaxis: {\n                    title: { text: 'Time(s)', standoff: 20 },\n                    showticklabels: true,\n                    tickmode: 'array',\n                    tickvals: [0, 1000, 2000, 3000, 4000, 5000],\n                    ticktext: ['0 ms', '1', '2', '3', '4', '5'],\n                    range: [0, maxTime],\n                },\n                yaxis: {\n                    title: { text: plotData.units ? `Voltage (${plotData.units})` : 'Voltage', standoff: 40 },\n                    showticklabels: true,\n                },\n                autosize: true,\n                margin: { l: 60, r: 50, b: 100, t: 50, pad: 4 },\n                hovermode: 'x unified' as const,\n                showlegend: true,\n                legend: { orientation: 'h', x: 0, y: 1.2 },\n                plot_bgcolor: '#EFF1F8',\n                paper_bgcolor: '#EFF1F8',\n            });\n\n            setIsLoading(false);\n        } catch (error) {\n            console.error('Error processing plot data:', error);\n            setIsLoading(false);\n            setHasError(true);\n        }\n    }, [plotData, allTracesVisible]);\n\n    const containerStyle = {\n        width: '100%',\n        height: '500px',\n        position: 'relative' as const,\n    };\n\n    const loaderStyle = {\n        position: 'absolute' as const,\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n    };\n\n    const handleLegendHover = (event: any) => {\n        setHoveredTraceIndex(event.curveNumber);\n    };\n\n    const handleLegendUnhover = () => {\n        setHoveredTraceIndex(null);\n    };\n\n    const toggleAllTraces = () => {\n        setAllTracesVisible(!allTracesVisible);\n        const updatedData = data.map(trace => ({\n            ...trace,\n            visible: !allTracesVisible ? true : 'legendonly',\n        }));\n        setData(updatedData);\n    };\n\n    return (\n        <div>\n            <button\n                onClick={toggleAllTraces}\n                style={{\n                    marginBottom: '1rem',\n                    padding: '0.25rem .5rem',\n                    backgroundColor: graphTheme.blue,\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '3px',\n                    cursor: 'pointer'\n                }}\n            >\n                {allTracesVisible ? 'Hide All Traces' : 'Show All Traces'}\n            </button>\n            <div style={containerStyle}>\n                {isLoading ? (\n                    <div style={loaderStyle}>\n                        <Loader2 className=\"w-8 h-8 animate-spin\" />\n                    </div>\n                ) : hasError || !data.length ? (\n                    <p className=\"text-center text-gray-500 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                        No data available.\n                    </p>\n                ) : (\n                    <Plot\n                        data={data}\n                        layout={layout}\n                        useResizeHandler={true}\n                        style={{ width: '100%', height: '100%' }}\n                        config={{ responsive: true }}\n                        onLegendItemClick={() => false}\n                        onLegendItemHover={handleLegendHover}\n                        onLegendItemUnhover={handleLegendUnhover}\n                    />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default PlotlyTraceGraph;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"pranav-viewer_main__vNeI_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__pHcWR\"};"],"names":["__webpack_exports__","Z","currentInstance","MorphologyData","isMorphologyLibrary","param","columns","useMemo","baseColumns","title","dataIndex","key","width","render","morphology","record","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Link","href","layer","etype","mtype","concat","push","Image","src","dataPath","alt","height","style","tableData","currentModel","isArray","find","item","name","jsxs","Fragment","Table","dataSource","pagination","scroll","x","length","p","replacement","MOhm","components_Unit","value","jsx_runtime","Term","termFactory","FactsheetSingleValueEntry","fact","div","className","term","description","isNil","span","NumberFormat","Unit","units","unit","FactsheetSingleMeanStdEntry","mean","value_map","values","std","formatValue","toFixed","formatNumberWithoutCommas","toString","replace","FactsheetMapValueEntry","maxVal","Math","max","apply","Object","map","s","parseFloat","unitCode","valueColumn","entries","label","barWidthPct","FactsheetEntry","Array","components_Factsheet","facts","index","significantFigures","thousandSeparator","prefix","suffix","formatNumber","num","Number","isFinite","formatted","toLocaleString","maximumSignificantDigits","toPrecision","COLORS","Options","props","Radio","options","id","onChange","target","optionType","buttonStyle","PranavViewer","url","type","setType","React","field","setField","classNames","styles","header","SwcViewer","toLowerCase","loader","pranavLoaderAmplitude","pranavLoaderDelay","pranavLoad","fields","resp","fetch","ok","Error","status","statusText","text","lines","split","filter","line","trim","get","makeGetter","voltages","voltage","indexOf","v","makeFieldGetter","parent","y","z","radius","u","centerCount","centerX","centerY","centerZ","nodes","node","CellNodeType","Unknown","forEach","isNaN","console","log","minU","reduce","acc","min","MAX_VALUE","maxU","factor","center","TgdVec3","scale","undefined","legend","colorRamp","labelMin","labelMax","morphologies","CellNodes","colors","texture","magFilter","minFilter","items","termDescription","termFormatter","currentDescription","formattedTerm","Tooltip","destroyTooltipOnHide","WrappedComponent","router","useRouter","useEffect","isReady","query","defaultQuery","shallow","Plot","dynamic","Promise","all","__webpack_require__","e","then","bind","ssr","plotData","data","setData","useState","layout","setLayout","isLoading","setIsLoading","hasError","setHasError","hoveredTraceIndex","setHoveredTraceIndex","allTracesVisible","setAllTracesVisible","keys","traces","trace","from","_","i","maxTime","mode","color","visible","xaxis","standoff","showticklabels","tickmode","tickvals","ticktext","range","yaxis","autosize","margin","l","r","b","t","pad","hovermode","showlegend","orientation","plot_bgcolor","paper_bgcolor","error","button","onClick","updatedData","marginBottom","padding","backgroundColor","graphTheme","blue","border","borderRadius","cursor","position","top","left","transform","Loader2","useResizeHandler","config","responsive","onLegendItemClick","onLegendItemHover","event","curveNumber","onLegendItemUnhover","module","exports"],"sourceRoot":""}