{"version":3,"sources":["webpack://_N_E/./src/components/NeuronMorphology/withFixedFocusOnMorphology.ts","webpack://_N_E/./src/components/NeuronMorphology/libs/dom.ts","webpack://_N_E/./src/components/NeuronMorphology/libs/text.ts","webpack://_N_E/./src/components/NeuronMorphology/libs/OrientationViewer.ts","webpack://_N_E/./src/components/NeuronMorphology/libs/ScaleViewer.ts","webpack://_N_E/./src/components/NeuronMorphology/MorphoLegend.tsx","webpack://_N_E/./src/components/NeuronMorphology/MorphologyViewer.tsx","webpack://_N_E/./src/components/NeuronMorphology/MorphoWrapper.tsx","webpack://_N_E/./src/components/NeuronMorphology/MorphoViewerContainer.tsx"],"names":["morphoViewer","_threeContext","getMorphoFromCollection","name","morphoName","allNames","Object","keys","this","_morphologyMeshCollection","length","morphoMesh","isInterneuron","children","find","child","userData","typename","getSomaChildren","filter","object","getOrphanedSomaChildren","removeOrphanedSomaChildren","orphanedSoma","remove","getTargetPointFromSoma","targetPoint","getTargetPoint","_pointToTarget","soma","somaBoundingBox","THREE","expandByObject","getCenter","getCameraHeightAtMorpho","_camera","updateMatrixWorld","distance","position","clone","distanceTo","vFOV","fov","Math","PI","tan","focusOnMorphology","fitOffset","box","size","getSize","maxSize","max","x","y","z","fitHeightDistance","atan","fitWidthDistance","aspect","direction","_controls","target","sub","normalize","multiplyScalar","maxDistance","lookAt","copy","near","far","updateProjectionMatrix","rotation","set","update","_render","removeChildren","div","lastChild","removeChild","makeText","text","textProps","apparentFontSize","canvas","fontSize","font","align","baseline","color","document","createElement","ctx","getContext","width","measureText","height","style","textAlign","textBaseline","fillStyle","fillRect","fillText","createTextCanvas","texture","magFilter","needsUpdate","material","map","sprite","textObject","scale","add","console","warn","OrientationViewer","appendChild","context","alpha","antialias","renderer","undefined","setClearColor","setPixelRatio","window","devicePixelRatio","setSize","clientWidth","clientHeight","scene","camera","camPos","orientationHelper","colors","axes","positions","i","geometry","vertices","push","linewidth","line","axisLabel","labelPosition","createOrientationHelper","addEventListener","animate","followCamera","requestedAnimationFrameID","requestAnimationFrame","bind","render","cancelAnimationFrame","ScaleViewer","margins","data","svg","d3","append","attr","range","domain","axis","call","onScaleChange","tickFormat","hasApproximatedSoma","className","morphoviewer","require","swcmorphologyparser","options","ref","React","orientationRef","scaleRef","mv","setMorphoViewer","orientationViewer","setOrientationViewer","scaleViewer","setScaleViewer","hasSomaData","somaMesh","setHex","asPolyline","forEach","current","swcParser","SwcParser","parse","parsedFile","getRawMorphology","points","withFixedFocusOnMorphology","MorphoViewer","up","negate","morphoViewerOptions","addMorphology","error","Error","message","destroy","setFollowCamera","controlEventListenerChangedEvent","removeEventListener","handleOrientationClick","reset","onClick","loading","onPolylineClick","disabled","path","setData","focusOn","somaMode","setOptions","fetch","then","res"],"mappings":"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","file":"static/chunks/699.8733f6b7d04c88ec2ebc.js","sourcesContent":["// @ts-nocheck\nimport * as THREE from 'three';\nimport { Object3D } from 'three';\n\nconst CAMERA_DISTANCE_OFFSET = 1;\n\n// This is a temporary fix\n// THIS CODE IS MEANT TO BE REMOVED\n// that addresses focus problems in the morphoviewer library\n// this higher order function patches a morphoviewer instance\n// with a working focus funciton.\n// https://discourse.threejs.org/t/camera-zoom-to-fit-object/936/24\nconst withFixedFocusOnMorphology = morphoViewer => {\n  morphoViewer._threeContext.getMorphoFromCollection = function(name = null) {\n    let morphoName = name;\n    // if no name of morphology is provided, we take the first one\n    if (!morphoName) {\n      const allNames = Object.keys(this._morphologyMeshCollection);\n      if (allNames.length) {\n        morphoName = allNames[0];\n      } else {\n        return;\n      }\n    }\n    const morphoMesh = this._morphologyMeshCollection[morphoName];\n    return morphoMesh;\n  };\n\n  morphoViewer.isInterneuron = function(): boolean {\n    // Interneurons do not have an apical dendrite, the pinkish colored dendrites\n    const morphoMesh = this._threeContext.getMorphoFromCollection();\n    return !morphoMesh.children.find(\n      child => child?.userData?.typename === 'apical_dendrite'\n    );\n  };\n\n  morphoViewer._threeContext.getSomaChildren = function(): Object3D[] {\n    const morphoMesh = this.getMorphoFromCollection();\n    return (morphoMesh.children as Object3D[]).filter(\n      object => object.userData.typename === 'soma'\n    );\n  };\n\n  morphoViewer._threeContext.getOrphanedSomaChildren = function(): Object3D {\n    // it looks like the orphaned soma construction doesn't have a name\n    // we can use that to reliably get the orphaned soma\n    const morphoMesh = this.getMorphoFromCollection();\n    return (morphoMesh.children as Object3D[]).filter(\n      object => object.name === ''\n    )[0];\n  };\n\n  morphoViewer._threeContext.removeOrphanedSomaChildren = function(): Object3D {\n    // it looks like the orphaned soma construction doesn't have a name\n    // we can use that to reliably get the orphaned soma\n    const morphoMesh = this.getMorphoFromCollection();\n    const orphanedSoma = this.getOrphanedSomaChildren();\n    morphoMesh.remove(orphanedSoma);\n  };\n\n  morphoViewer._threeContext.getTargetPointFromSoma = function(): THREE.Vecor3 {\n    const morphoMesh = this.getMorphoFromCollection();\n    // Get the coordinates for the center of the soma\n    // This will be the point we want the camera to focus on!\n\n    // NOTE: this function falls back to bounding box center even if soma is generated\n    // via orphaned sections\n    let targetPoint = morphoMesh.getTargetPoint();\n\n    // Does the soma exist or was it automatically generated?\n    const somaCenterTargetExists = !!morphoMesh._pointToTarget;\n\n    // If soma was generated using orphaned sections\n    // then we need to get the soma mesh and use the coordintates from that\n    if (!somaCenterTargetExists) {\n      // in the case where the soma was automatically generated\n      // by guessing the shape from the orphaned sections\n      // the soma will be added to the Morphology Object3D last\n      const soma = morphoMesh.children[morphoMesh.children.length - 1];\n\n      const somaBoundingBox = new THREE.Box3();\n      somaBoundingBox.expandByObject(soma);\n\n      // set the new target point from the soma's bounding box\n      // instead of the entire neuron bounding box\n      targetPoint = somaBoundingBox.getCenter(new THREE.Vector3());\n    }\n    return targetPoint;\n  };\n\n  morphoViewer._threeContext.getCameraHeightAtMorpho = function(): number {\n    const targetPoint = this.getTargetPointFromSoma();\n\n    this._camera.updateMatrixWorld();\n\n    const cameraPosVector = (this\n      ._camera as THREE.PerspectiveCamera).position.clone();\n\n    const distance = cameraPosVector.distanceTo(targetPoint);\n\n    // Calculate the visible height (the height of camera frustrum)\n    // at the point it intersects with the morphology soma\n    const vFOV = (this._camera.fov * Math.PI) / 180; // convert vertical fov to radians\n    const height = 2 * Math.tan(vFOV / 2) * distance; // visible height\n\n    return height;\n  };\n\n  morphoViewer._threeContext.focusOnMorphology = function(name = null) {\n    const morphoMesh = this.getMorphoFromCollection(name);\n\n    const fitOffset = CAMERA_DISTANCE_OFFSET;\n\n    const box = new THREE.Box3();\n\n    box.expandByObject(morphoMesh);\n\n    const size = box.getSize(new THREE.Vector3());\n\n    const maxSize = Math.max(size.x, size.y, size.z);\n    const fitHeightDistance =\n      maxSize / (2 * Math.atan((Math.PI * this._camera.fov) / 360));\n    const fitWidthDistance = fitHeightDistance / this._camera.aspect;\n    const distance = fitOffset * Math.max(fitHeightDistance, fitWidthDistance);\n\n    const direction = this._controls.target\n      .clone()\n      .sub(this._camera.position)\n      .normalize()\n      .multiplyScalar(distance);\n\n    this._controls.maxDistance = distance * 10;\n\n    const targetPoint = this.getTargetPointFromSoma();\n\n    // Look at our new center point\n    this._camera.lookAt(targetPoint);\n    // apply soma center coordinates as OrbitControls target\n    // this will center the controls around it for rotation\n    this._controls.target.copy(targetPoint);\n\n    this._camera.near = distance / 100;\n    this._camera.far = distance * 100;\n    this._camera.updateProjectionMatrix();\n\n    this._camera.position.copy(this._controls.target).sub(direction);\n    this._camera.rotation.set(new THREE.Vector3());\n\n    this._controls.update();\n\n    this._render();\n  };\n  return morphoViewer;\n};\n\nexport default withFixedFocusOnMorphology;\n","export const removeChildren = (div: HTMLDivElement) => {\n  while (div.lastChild) {\n    div.removeChild(div.lastChild);\n  }\n};\n","import * as THREE from 'three';\n\nexport type TextProps = {\n  apparentFontSize?: number;\n  fontSize?: number;\n  font?: string;\n  color?: string;\n  align?: CanvasTextAlign;\n  baseline?: CanvasTextBaseline;\n};\n\nexport const createTextCanvas = (text: string, textProps: TextProps) => {\n  const {\n    fontSize = 48,\n    font = 'monospace',\n    align = 'center',\n    baseline = 'middle',\n    color = 'black',\n  } = textProps;\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    return;\n  }\n\n  // Prepare the font to be able to measure\n  ctx.font = `${fontSize}px ${font}`;\n\n  const textMetrics = ctx.measureText(text);\n\n  const width = textMetrics.width;\n  const height = fontSize;\n\n  // Resize canvas to match text size\n  canvas.width = width;\n  canvas.height = height;\n  canvas.style.width = width + 'px';\n  canvas.style.height = height + 'px';\n\n  // Re-apply font since canvas is resized.\n  ctx.font = `${fontSize}px ${font}`;\n  ctx.textAlign = align;\n  ctx.textBaseline = baseline;\n\n  // Make the canvas transparent for simplicity\n  ctx.fillStyle = 'transparent';\n  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  ctx.fillStyle = color;\n  ctx.fillText(text, width / 2, height / 2);\n\n  return canvas;\n};\n\nexport const makeText = (text: string, textProps: TextProps) => {\n  const { apparentFontSize = 5 } = textProps;\n  const canvas = createTextCanvas(text, textProps);\n  if (!canvas) {\n    console.warn('no canvas found when making text');\n    return;\n  }\n  const texture = new THREE.Texture(canvas);\n  texture.magFilter = THREE.NearestFilter;\n  texture.needsUpdate = true;\n  const material = new THREE.SpriteMaterial({ map: texture });\n  const sprite = new THREE.Sprite(material);\n\n  const textObject = new THREE.Object3D();\n\n  sprite.scale.set(\n    (canvas.width / canvas.height) * apparentFontSize,\n    apparentFontSize,\n    1\n  );\n\n  sprite.position.set(0, 1.5, 0);\n\n  textObject.add(sprite);\n  return textObject;\n};\n","import * as THREE from 'three';\nimport { removeChildren } from './dom';\nimport { makeText } from './text';\n\nconst AXES_HELPER_SCALE = 15;\n\nconst createOrientationHelper = (): THREE.Object3D => {\n  const orientationHelper = new THREE.Object3D();\n\n  const colors = ['red', 'green', 'blue'];\n  const axes = ['X', 'Y', 'Z'];\n\n  // We need to swap Y for Z\n  // because three.js uses an uncommon orientation format\n  // therefore we will generate the Axes Helper ourselves\n  const positions = [\n    [AXES_HELPER_SCALE, 0, 0],\n    [0, 0, AXES_HELPER_SCALE],\n    [0, AXES_HELPER_SCALE, 0],\n  ];\n\n  for (let i = 0; i <= 2; i++) {\n    const color = colors[i];\n    const position = new THREE.Vector3(\n      positions[i][0],\n      positions[i][1],\n      positions[i][2]\n    );\n\n    const geometry = new THREE.Geometry();\n    geometry.vertices.push(position, new THREE.Vector3(0, 0, 0));\n    const material = new THREE.LineBasicMaterial({\n      color,\n      linewidth: 1,\n    });\n    const line = new THREE.LineSegments(geometry, material);\n\n    const label = axes[i];\n    const axisLabel = makeText(label, { color });\n    // Make sure the label has a little margin\n    const labelPosition = position.clone().multiplyScalar(1.2);\n    axisLabel?.position.set(labelPosition.x, labelPosition.y, labelPosition.z);\n\n    axisLabel && orientationHelper.add(axisLabel, line);\n  }\n\n  return orientationHelper;\n};\n\nexport default class OrientationViewer {\n  private renderer: THREE.WebGLRenderer | null;\n  private scene: THREE.Scene | null;\n  private camera: THREE.Camera | null;\n  private orientationHelper: THREE.Object3D;\n  private requestedAnimationFrameID: number = 0;\n\n  public followCamera: THREE.Camera | null = null;\n\n  constructor(private div: HTMLDivElement) {\n    const canvas = document.createElement('canvas');\n    div.appendChild(canvas);\n    const context = canvas.getContext('webgl2', {\n      // preserveDrawingBuffer: true,\n      alpha: true,\n      antialias: true,\n    });\n\n    this.renderer = new THREE.WebGLRenderer({\n      canvas,\n      context: context || undefined,\n    });\n    this.renderer.setClearColor(0xffffff, 0);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(div.clientWidth, div.clientHeight);\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      27,\n      div.clientWidth / div.clientHeight,\n      1,\n      50000\n    );\n    const camPos = { x: 0, y: 0, z: 100 };\n    this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n    this.camera.position.x = camPos.x;\n    this.camera.position.y = camPos.y;\n    this.camera.position.z = camPos.z;\n    this.scene.add(this.camera);\n\n    this.orientationHelper = createOrientationHelper();\n    this.scene.add(this.orientationHelper);\n\n    window.addEventListener('resize', () => {\n      this.renderer?.setSize(div.clientWidth, div.clientHeight);\n    });\n\n    this.animate();\n  }\n\n  setFollowCamera(camera: THREE.Camera) {\n    this.followCamera = camera;\n  }\n\n  animate() {\n    this.requestedAnimationFrameID = requestAnimationFrame(\n      this.animate.bind(this)\n    );\n    this.render();\n  }\n\n  render() {\n    if (this.followCamera) {\n      this.camera?.lookAt(this.orientationHelper.position.clone());\n      this.orientationHelper.rotation.copy(this.followCamera.rotation.clone());\n\n      // Invert the orientation of the object\n      // because the camera is inverted (see MorphologyViewer.tsx)\n      this.orientationHelper.scale.x = -1;\n      this.orientationHelper.scale.y = -1;\n      this.orientationHelper.scale.z = -1;\n    }\n    if (this.scene && this.camera && this.renderer) {\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n\n  destroy() {\n    removeChildren(this.div);\n    cancelAnimationFrame(this.requestedAnimationFrameID);\n    this.scene = null;\n    this.renderer = null;\n    this.camera = null;\n  }\n}\n","import * as d3 from 'd3';\nimport { removeChildren } from './dom';\n\nconst min = 0;\n\nexport default class ScaleViewer {\n  private svg: d3.Selection<SVGSVGElement, unknown, null, undefined>;\n  private scale: d3.ScaleLinear<number, number>;\n  private axis: d3.Axis<d3.NumberValue>;\n  constructor(private div: HTMLDivElement, max: number) {\n    const { clientWidth: width, clientHeight: height } = div;\n    const margins = {\n      top: 20,\n      bottom: 20,\n    };\n\n    const data = [min, max];\n    this.svg = d3\n      .select(div)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height);\n\n    this.scale = d3\n      .scaleLinear()\n      .range([height - margins.top, margins.bottom])\n      .domain([d3.min(data) || min, d3.max(data) || max]);\n\n    this.axis = d3.axisRight(this.scale);\n\n    this.svg.append('g').call(this.axis);\n\n    this.onScaleChange(max);\n  }\n\n  onScaleChange(max: number) {\n    this.scale.domain([min, max]);\n    this.svg.call(d3.axisRight(this.scale).tickFormat(x => `${x} μm`));\n  }\n\n  destroy() {\n    this.svg.remove();\n    removeChildren(this.div);\n  }\n}\n","import React from 'react';\n\n// import './morpho-legend.css';\n\nconst MorphoLegend: React.FC<{\n  isInterneuron: boolean;\n  hasApproximatedSoma: boolean;\n}> = ({ isInterneuron, hasApproximatedSoma }) => {\n  return (\n    <div className=\"morpho-legend\">\n      <ul>\n        <li className=\"soma\">Soma {hasApproximatedSoma && '(Approximated)'}</li>\n        <li className=\"axon\">Axon</li>\n\n        {// Interneurons don't have a distinction between Basal / Apical Dendrites\n        isInterneuron ? (\n          <li className=\"basal-dendrites\">Dendrites</li>\n        ) : (\n          <>\n            <li className=\"basal-dendrites\">Basal Dendrites</li>\n            <li className=\"apical-dendrites\">Apical Dendrites</li>\n          </>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default MorphoLegend;\n","import React from 'react';\n\nimport withFixedFocusOnMorphology from './withFixedFocusOnMorphology';\nimport OrientationViewer from './libs/OrientationViewer';\nimport ScaleViewer from './libs/ScaleViewer';\nimport MorphoLegend from './MorphoLegend';\n\n// import './morpho-viewer.css';\n\n// TODO update morphoviewer library with typings\nconst morphoviewer = require('morphoviewer').default;\nconst swcmorphologyparser = require('swcmorphologyparser').default;\n\nexport type MorphoViewerOptions = {\n  asPolyline?: boolean;\n  focusOn?: boolean;\n  onDone?: VoidFunction;\n  somaMode?: string;\n};\n\nexport const MorphologyViewer: React.FC<{\n  data: any;\n  options: MorphoViewerOptions;\n}> = ({ data, options }) => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const orientationRef = React.useRef<HTMLDivElement>(null);\n  const scaleRef = React.useRef<HTMLDivElement>(null);\n  const [mv, setMorphoViewer] = React.useState(null);\n  const [\n    orientationViewer,\n    setOrientationViewer,\n  ] = React.useState<OrientationViewer | null>(null);\n  const [scaleViewer, setScaleViewer] = React.useState<ScaleViewer | null>(\n    null\n  );\n\n  React.useEffect(() => {\n    if (!mv) {\n      return;\n    }\n\n    if (!mv.hasSomaData) {\n      // Change soma color to black\n      const somaMesh = mv._threeContext.getOrphanedSomaChildren();\n      (somaMesh as any)?.material.color.setHex(0x000000);\n    }\n\n    if (mv.hasSomaData && !options.asPolyline) {\n      // remove orphaned soma because real one exists, but two are shown\n      // this is a bug with morphoviewer and will be fixed\n      // TODO update morphoviewer and remove this code.\n      mv._threeContext.removeOrphanedSomaChildren();\n\n      // Change soma color to black\n      mv._threeContext.getSomaChildren().forEach((somaMesh: any) => {\n        somaMesh?.material.color.setHex(0x000000);\n      });\n      mv._threeContext._render();\n    }\n  }, [mv && mv._threeContext]);\n\n  React.useEffect(() => {\n    let morphoViewer: any;\n    if (!ref.current) {\n      return;\n    }\n    try {\n      const swcParser = new swcmorphologyparser.SwcParser();\n      swcParser.parse(data);\n      const parsedFile = swcParser.getRawMorphology();\n\n      const hasSomaData = parsedFile.soma.points.length > 1;\n\n      morphoViewer = withFixedFocusOnMorphology(\n        new morphoviewer.MorphoViewer(ref.current)\n      );\n      morphoViewer.hasSomaData = hasSomaData;\n\n      morphoViewer._threeContext._camera.up.negate();\n      setMorphoViewer(morphoViewer);\n      const morphoViewerOptions = {\n        name: 'morphology',\n        ...options,\n      };\n      morphoViewer.addMorphology(parsedFile, morphoViewerOptions);\n    } catch (error) {\n      throw new Error(`Morphology parsing error: ${error.message}`);\n    }\n    return () => {\n      morphoViewer && morphoViewer.destroy();\n    };\n  }, [ref, data, options]);\n\n  // Orientation Viewer Operations\n  React.useEffect(() => {\n    if (!orientationRef.current) {\n      return;\n    }\n    if (!orientationViewer) {\n      setOrientationViewer(new OrientationViewer(orientationRef.current));\n    }\n    if (mv && orientationViewer) {\n      orientationViewer.setFollowCamera(mv._threeContext._camera);\n    }\n    return () => {\n      orientationViewer?.destroy();\n      setOrientationViewer(null);\n    };\n  }, [orientationRef, mv, options]);\n\n  // Scale Axis Operations\n  React.useEffect(() => {\n    let controlEventListenerChangedEvent: VoidFunction | null = null;\n    if (!scaleRef.current) {\n      return;\n    }\n    if (!scaleViewer) {\n      setScaleViewer(new ScaleViewer(scaleRef.current, 0));\n    }\n    if (mv && scaleViewer) {\n      scaleViewer.onScaleChange(mv._threeContext.getCameraHeightAtMorpho());\n      controlEventListenerChangedEvent = () => {\n        scaleViewer.onScaleChange(mv._threeContext.getCameraHeightAtMorpho());\n      };\n      mv._threeContext._controls.addEventListener(\n        'change',\n        controlEventListenerChangedEvent\n      );\n    }\n    return () => {\n      scaleViewer?.destroy();\n      setScaleViewer(null);\n      mv?._threeContext?._controls?.removeEventListener(\n        'change',\n        controlEventListenerChangedEvent\n      );\n    };\n  }, [scaleRef, mv, options]);\n\n  const handleOrientationClick = () => {\n    mv?._threeContext._controls.reset();\n    mv?._threeContext._camera.up.negate();\n    mv?._threeContext.focusOnMorphology();\n  };\n\n  return (\n    <>\n      <MorphoLegend\n        isInterneuron={!!mv?.isInterneuron()}\n        hasApproximatedSoma={!mv?.hasSomaData}\n      />\n      <div>\n        <div className=\"morpho-viewer\" ref={ref}></div>\n        <div\n          className=\"scale\"\n          ref={scaleRef}\n          onClick={handleOrientationClick}\n        ></div>\n        <div\n          className=\"orientation\"\n          ref={orientationRef}\n          onClick={handleOrientationClick}\n        ></div>\n      </div>\n    </>\n  );\n};\n\nexport default MorphologyViewer;\n","import React from 'react';\nimport { Button } from 'antd';\n\nimport MorphologyViewer, { MorphoViewerOptions } from './MorphologyViewer';\n\n// import './morpho-wrapper.css';\n\nconst MorphoWrapper: React.FC<{\n  loading: boolean;\n  error: Error | null;\n  data: any;\n  options: MorphoViewerOptions;\n  onPolylineClick: VoidFunction;\n}> = ({ loading, error, data, options, onPolylineClick }) => {\n  return (\n    <div className={loading ? 'morpho-wrapper loading' : 'morpho-wrapper'}>\n      <div className=\"actions\">\n        <Button size=\"small\" disabled={loading} onClick={onPolylineClick}>\n          {options.asPolyline ? 'Show as Geometry' : 'Show as Lines'}\n        </Button>\n      </div>\n      {error && <p>{error.message}</p>}\n      {data && !error && <MorphologyViewer data={data} options={options} />}\n    </div>\n  );\n};\n\nexport default MorphoWrapper;\n","import React from 'react';\n\nimport MorphoWrapper from './MorphoWrapper';\nimport { MorphoViewerOptions } from './MorphologyViewer';\n\n\nconst MorphoViewerContainer: React.FC<{\n  path: string;\n}> = ({ path }) => {\n  const [{ loading, error, data }, setData] = React.useState<{\n    loading: boolean;\n    error: Error | null;\n    data: any;\n  }>({\n    loading: true,\n    error: null,\n    data: null,\n  });\n\n  const [options, setOptions] = React.useState<MorphoViewerOptions>({\n    asPolyline: true,\n    focusOn: true,\n    somaMode: 'fromOrphanSections',\n  });\n\n  React.useEffect(() => {\n    fetch(path)\n      .then(res => res.text())\n      .then(data => setData({ data, error: null, loading: false }))\n      .catch(error => setData({ error, data: null, loading: false }));\n  }, [path]);\n\n  const handleAsPolyline = () => {\n    setOptions({\n      ...options,\n      asPolyline: !options.asPolyline,\n    });\n  };\n\n  return (\n    <MorphoWrapper\n      {...{\n        loading,\n        error,\n        data,\n        options,\n        onPolylineClick: handleAsPolyline,\n      }}\n    />\n  );\n};\n\nexport default MorphoViewerContainer;\n"],"sourceRoot":""}