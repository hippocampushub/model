{"version":3,"file":"static/chunks/411.f202385d6dc1da51.js","mappings":"86CAaA,IA0BaA,EAAN,SAAQ,I,mQAAFA,EAOCC,G,iIACJA,IACDC,MAAQ,CAAEC,MAAO,KAAMC,SAAS,G,EAChCC,UAAYC,EAAAA,Y,EACZC,cAAgB,MAErBC,EAAAA,EAAAA,IAAUC,OAAOC,OA3BnB,8J,iBA8BMC,IAAAA,qB,MAAN,W,gCAAA,SAAQ,I,IAGAC,EAGEC,EACFC,E,sEANIT,UAAUU,QAAS,C,gEAEAC,MAAO,GAAqB,OAAnBC,EAAAA,GAAmB,mBACtDC,MAAKC,SAAAA,GAAOA,OAAAA,EAAIC,U,OADbR,EAAiB,EAAH,KAGZC,EAAeD,EAAe,EAAKX,MAAMoB,MAAzCR,WACFC,EAAa,GAAwBD,OAAtBI,EAAAA,GAAmB,KAAc,OAAXJ,GAG3CJ,OAAOC,OAAOY,OAAOR,GAClBI,MACC,SAACK,G,EAWMC,SAAS,CACZrB,MAAO,KACPC,SAAS,I,EAENG,cAAgBgB,EAAaE,QAAQ,CACxCC,IAAK,EAAKrB,UAAUU,QACpBY,YAAa,EAAK1B,MAAM0B,YACxBC,SAAU,EAAK3B,MAAM2B,cAI1BC,OAAM,SAAC1B,GACN2B,QAAQC,IAAI5B,G,EACPqB,SAAS,CAAErB,MAAAA,EAAOC,SAAS,O,8NAItC4B,IAAAA,oB,MAAAA,SAAkB7B,GAChB8B,KAAKT,SAAS,CAAErB,MAAAA,EAAOC,SAAS,M,CAGlC8B,IAAAA,sB,MAAAA,SAAoBC,GAKhBA,EAAUP,WAAaK,KAAKhC,MAAM2B,UAClCO,EAAUd,OAASY,KAAKhC,MAAMoB,MAE9BY,KAAKtB,uB,CAITyB,IAAAA,oB,MAAAA,WACEH,KAAKtB,uB,CAGP0B,IAAAA,uB,MAAAA,WACMC,GAAAA,CAAWL,KAAK1B,gBAClB0B,KAAK1B,kB,CAITgC,IAAAA,S,MAAAA,WACE,IAAMC,EAAYP,KAAKhC,MAAMuC,WAAa,GAE1C,OAAM,SACHC,MAAG,CACFD,UAAY,oBAA6B,OAAVA,GAC/Bd,IAAKO,KAAK5B,e,gCAxFX,CAA0BC,EAAAA,WAyGjC","sources":["webpack://_N_E/./src/components/NexusPlugin/nexus-plugin.tsx"],"sourcesContent":["/**\n * This component requires SystemJS to be available globally (in window)\n */\nimport * as React from 'react';\nimport invariant from 'ts-invariant';\nimport isFunction from 'lodash/isFunction';\nimport { NexusClient, Resource } from '@bbp/nexus-sdk';\n// import { Result } from 'antd';\n\n// import Loading from '../components/Loading';\nimport { nexusPluginBaseUrl } from '../../config';\n\n\nconst PluginError: React.FC<{ error: Error }> = ({ error }) => {\n  return (\n    <p>Plugin failed to render</p>\n    // <Result\n    //   status=\"warning\"\n    //   title=\"Plugin failed to render\"\n    //   subTitle={error.message}\n    // />\n  );\n};\n\nconst warningMessage =\n  'SystemJS not found. ' +\n  'To load plugins, Nexus Web requires SystemJS to be available globally.' +\n  ' You can find out more here https://github.com/systemjs/systemjs';\n\nexport type NexusPluginProps<T> = {\n  name: string;\n  resource: Resource<T>;\n  className?: string;\n};\n\nexport type NexusPluginClassProps<T = any> = NexusPluginProps<T> & {\n  nexusClient: NexusClient;\n};\n\nexport class NexusPlugin extends React.Component<\n  NexusPluginClassProps,\n  { error: Error | null; loading: boolean }\n> {\n  private container: React.RefObject<HTMLDivElement>;\n  private destroyPlugin: (() => void) | null;\n\n  constructor(props: NexusPluginClassProps) {\n    super(props);\n    this.state = { error: null, loading: true };\n    this.container = React.createRef();\n    this.destroyPlugin = null;\n    // @ts-ignore\n    invariant(window.System, warningMessage);\n  }\n\n  async loadExternalPlugin() {\n    if (!this.container.current) return;\n\n    const pluginManifest = await fetch(`${nexusPluginBaseUrl}/manifest.json`)\n      .then(res => res.json());\n\n    const { modulePath } = pluginManifest[this.props.name];\n    const moduleUrl = `${nexusPluginBaseUrl}/${modulePath}`;\n\n    // @ts-ignore\n    window.System.import(moduleUrl)\n      .then(\n        (pluginModule: {\n          default: ({\n            ref,\n            nexusClient,\n            resource,\n          }: {\n            ref: HTMLDivElement | null;\n            nexusClient?: NexusClient;\n            resource: Resource;\n          }) => () => void;\n        }) => {\n          this.setState({\n            error: null,\n            loading: false,\n          });\n          this.destroyPlugin = pluginModule.default({\n            ref: this.container.current,\n            nexusClient: this.props.nexusClient,\n            resource: this.props.resource,\n          });\n        }\n      )\n      .catch((error: Error) => {\n        console.log(error);\n        this.setState({ error, loading: false });\n      });\n  }\n\n  componentDidCatch(error: Error) {\n    this.setState({ error, loading: false });\n  }\n\n  componentWillUpdate(prevProps: NexusPluginClassProps) {\n    // Reload the plugin(and pass in new props to it) when props change\n    // NOTE: will not reload the plugin if nexusClient or goToResource changes\n    // otherwise it will cause too many reloads\n    if (\n      prevProps.resource !== this.props.resource ||\n      prevProps.name !== this.props.name\n    ) {\n      this.loadExternalPlugin();\n    }\n  }\n\n  componentDidMount() {\n    this.loadExternalPlugin();\n  }\n\n  componentWillUnmount() {\n    if (isFunction(this.destroyPlugin)) {\n      this.destroyPlugin();\n    }\n  }\n\n  render() {\n    const className = this.props.className || '';\n\n    return (\n      <div\n        className={`remote-component ${className}`}\n        ref={this.container}\n      />\n      // <Loading\n      //   size=\"big\"\n      //   loading={this.state.loading}\n      //   loadingMessage={<h3>Loading {this.props.pluginName || 'Plugin'}</h3>}\n      // >\n      //   {this.state.error ? (\n      //     <PluginError error={this.state.error} />\n      //   ) : (\n      //     <div className=\"remote-component\" ref={this.container}></div>\n      //   )}\n      // </Loading>\n    );\n  }\n}\n\nexport default NexusPlugin;\n"],"names":["NexusPlugin","props","state","error","loading","container","React","destroyPlugin","invariant","window","System","loadExternalPlugin","pluginManifest","modulePath","moduleUrl","current","fetch","nexusPluginBaseUrl","then","res","json","name","import","pluginModule","setState","default","ref","nexusClient","resource","catch","console","log","componentDidCatch","this","componentWillUpdate","prevProps","componentDidMount","componentWillUnmount","isFunction","render","className","div"],"sourceRoot":""}