{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_highlight_haxe.05ca438b6d3fe2e9.js","mappings":"saA4JAA,EAAAC,OAAA,CApJA,SAAAC,CAAA,EAIA,OACAC,KAAA,OACAC,QAAA,OACAC,SAAA,CACAC,QAAA,uRAIAC,SACA,aACAC,QACA,mBACA,EACAC,SAAA,CACA,CACAC,UAAA,SACAC,MAAA,IACAC,IAAA,IACAH,SAAA,CACAP,EAAAW,gBAAA,CACA,CACAH,UAAA,QACAC,MAAA,SACAC,IAAA,KACA,EACA,CACAF,UAAA,QACAC,MAAA,MACAC,IAAA,MACA,EACA,EAEAV,EAAAY,iBAAA,CACAZ,EAAAa,mBAAA,CACAb,EAAAc,oBAAA,CACAd,EAAAe,aAAA,CACA,CACAP,UAAA,OACAC,MAAA,KACAC,IAAA,GACA,EACA,CACAF,UAAA,OACAC,MAAA,IACAC,IAAA,IACAP,SAAA,CACA,yCACA,CACA,EACA,CACAK,UAAA,OACAC,MAAA,SACAC,IAAA,sBACAM,aAAA,GACAC,WAAA,GACAC,UAAA,CACA,EACA,CACAV,UAAA,OACAC,MAAA,SACAC,IAAA,MACAM,aAAA,GACAC,WAAA,EACA,EACA,CACAT,UAAA,OACAC,MAAA,QACAC,IAAA,MACAM,aAAA,GACAC,WAAA,EACA,EACA,CACAT,UAAA,QACAW,cAAA,OACAT,IAAA,MACAH,SAAA,CAAAP,EAAAoB,UAAA,GAEA,CACAZ,UAAA,QACAW,cAAA,WACAT,IAAA,SACAH,SAAA,CACA,CACAC,UAAA,OACAC,MAAA,MACAC,IAAA,MACAM,aAAA,GACAC,WAAA,EACA,EACA,CACAT,UAAA,OACAC,MAAA,SACAC,IAAA,MACAM,aAAA,GACAC,WAAA,EACA,EACA,CACAT,UAAA,OACAC,MAAA,OACAC,IAAA,MACAM,aAAA,GACAC,WAAA,EACA,EACAjB,EAAAoB,UAAA,CACA,CACAjB,SAAA,CACAC,QAAA,kBACA,CACA,EACA,CACAI,UAAA,QACAC,MAAA,yBACAC,IAAA,SACAO,WAAA,GACAd,SAAA,kBACAI,SAAA,CACA,CACAC,UAAA,UACAC,MAAA,4BACAN,SAAA,qBACAI,SAAA,CACA,CACAC,UAAA,OACAC,MAAAT,EAAAqB,QAAA,CACAH,UAAA,CACA,EACA,EAEAlB,EAAAoB,UAAA,CACA,EAEA,CACAZ,UAAA,WACAW,cAAA,WACAT,IAAA,MACAO,WAAA,GACAK,QAAA,MACAf,SAAA,CAAAP,EAAAoB,UAAA,GAEA,CACAE,QAAA,KACA,CACA","sources":["webpack://_N_E/./node_modules/highlight.js/lib/languages/haxe.js","webpack://_N_E/<anon>"],"sourcesContent":["/*\nLanguage: Haxe\nDescription: Haxe is an open source toolkit based on a modern, high level, strictly typed programming language.\nAuthor: Christopher Kaster <ikasoki@gmail.com> (Based on the actionscript.js language file by Alexander Myadzel)\nContributors: Kenton Hamaluik <kentonh@gmail.com>\nWebsite: https://haxe.org\n*/\n\nfunction haxe(hljs) {\n\n  const HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';\n\n  return {\n    name: 'Haxe',\n    aliases: ['hx'],\n    keywords: {\n      keyword: 'break case cast catch continue default do dynamic else enum extern ' +\n               'for function here if import in inline never new override package private get set ' +\n               'public return static super switch this throw trace try typedef untyped using var while ' +\n               HAXE_BASIC_TYPES,\n      built_in:\n        'trace this',\n      literal:\n        'true false null _'\n    },\n    contains: [\n      {\n        className: 'string', // interpolate-able strings\n        begin: '\\'',\n        end: '\\'',\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          {\n            className: 'subst', // interpolation\n            begin: '\\\\$\\\\{',\n            end: '\\\\}'\n          },\n          {\n            className: 'subst', // interpolation\n            begin: '\\\\$',\n            end: /\\W\\}/\n          }\n        ]\n      },\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'meta', // compiler meta\n        begin: '@:',\n        end: '$'\n      },\n      {\n        className: 'meta', // compiler conditionals\n        begin: '#',\n        end: '$',\n        keywords: {\n          'meta-keyword': 'if else elseif end error'\n        }\n      },\n      {\n        className: 'type', // function types\n        begin: ':[ \\t]*',\n        end: '[^A-Za-z0-9_ \\t\\\\->]',\n        excludeBegin: true,\n        excludeEnd: true,\n        relevance: 0\n      },\n      {\n        className: 'type', // types\n        begin: ':[ \\t]*',\n        end: '\\\\W',\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'type', // instantiation\n        begin: 'new *',\n        end: '\\\\W',\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'class', // enums\n        beginKeywords: 'enum',\n        end: '\\\\{',\n        contains: [hljs.TITLE_MODE]\n      },\n      {\n        className: 'class', // abstracts\n        beginKeywords: 'abstract',\n        end: '[\\\\{$]',\n        contains: [\n          {\n            className: 'type',\n            begin: '\\\\(',\n            end: '\\\\)',\n            excludeBegin: true,\n            excludeEnd: true\n          },\n          {\n            className: 'type',\n            begin: 'from +',\n            end: '\\\\W',\n            excludeBegin: true,\n            excludeEnd: true\n          },\n          {\n            className: 'type',\n            begin: 'to +',\n            end: '\\\\W',\n            excludeBegin: true,\n            excludeEnd: true\n          },\n          hljs.TITLE_MODE\n        ],\n        keywords: {\n          keyword: 'abstract from to'\n        }\n      },\n      {\n        className: 'class', // classes\n        begin: '\\\\b(class|interface) +',\n        end: '[\\\\{$]',\n        excludeEnd: true,\n        keywords: 'class interface',\n        contains: [\n          {\n            className: 'keyword',\n            begin: '\\\\b(extends|implements) +',\n            keywords: 'extends implements',\n            contains: [\n              {\n                className: 'type',\n                begin: hljs.IDENT_RE,\n                relevance: 0\n              }\n            ]\n          },\n          hljs.TITLE_MODE\n        ]\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function',\n        end: '\\\\(',\n        excludeEnd: true,\n        illegal: '\\\\S',\n        contains: [hljs.TITLE_MODE]\n      }\n    ],\n    illegal: /<\\//\n  };\n}\n\nmodule.exports = haxe;\n"],"names":["module","exports","hljs","name","aliases","keywords","keyword","built_in","literal","contains","className","begin","end","BACKSLASH_ESCAPE","QUOTE_STRING_MODE","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","C_NUMBER_MODE","excludeBegin","excludeEnd","relevance","beginKeywords","TITLE_MODE","IDENT_RE","illegal"],"sourceRoot":""}