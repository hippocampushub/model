{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_highlight_groovy.1b47961988a0e809.js","mappings":"waAwCA,SAAAA,SAAAA,CAAA,CAAAC,EAAA,EAAoC,EAEpC,OADAA,EAAAD,QAAA,CAAAA,EACAC,CACA,CAkIAC,EAAAC,OAAA,CAhIA,SAAAC,CAAA,EACA,IAAAC,EAAA,iBACAC,EAAAN,SAAA,CACAI,EAAAG,mBAAA,CACAH,EAAAI,oBAAA,CACAJ,EAAAE,OAAA,CACA,UACA,OACA,CACAG,UAAA,EACAC,SAAA,CACA,CAEAC,MAAA,OACAF,UAAA,CACA,EACA,CACAG,UAAA,SACAD,MAAA,YACA,EACA,GAGA,EACAE,EAAA,CACAD,UAAA,SACAD,MAAA,iBACAD,SAAA,CAAAN,EAAAU,gBAAA,GAEAC,EAAAf,SAAA,CACAI,EAAAY,kBAAA,CACAZ,EAAAa,aAAA,CACA,EACAC,EAAAlB,SAAA,CACA,CACAW,MAAA,MACAQ,IAAA,KACA,EACA,CACAR,MAAA,MACAQ,IAAA,KACA,EACA,CACAR,MAAA,OACAQ,IAAA,OACAV,UAAA,EACA,EACAL,EAAAgB,gBAAA,CACAhB,EAAAiB,iBAAA,CACA,CACA,CACAT,UAAA,QACA,GAGA,OACAU,KAAA,SACAC,SAAA,CACAC,SAAA,aACAC,QAAA,kBACAC,QACA,2TAOA,EACAhB,SAAA,CACAN,EAAAuB,OAAA,EACAC,OAAA,SACAnB,UAAA,EACA,GACAH,EACAY,EACAL,EACAE,EACA,CACAH,UAAA,QACAiB,cAAA,6BACAV,IAAA,KACAW,QAAA,IACApB,SAAA,CACA,CACAmB,cAAA,oBACA,EACAzB,EAAA2B,qBAAA,CACA,EAEA,CACAnB,UAAA,OACAD,MAAA,aACAF,UAAA,CACA,EACA,CAEAG,UAAA,OACAD,MAAAN,EAAA,SACAI,UAAA,CACA,EACA,CAGAE,MAAA,KACAQ,IAAA,IACAV,UAAA,EACAC,SAAA,CACAJ,EACAY,EACAL,EACAE,EACA,OACA,EAEA,CAEAH,UAAA,SACAD,MAAA,SA9IAqB,SAOA,GAAAC,CAAA,EACA,IAAAC,EAAAD,EAAAE,GAAA,IAnBA,EACA,iBAkBAC,EAAAA,EAhBAC,EAAAC,MAAA,CAHA,MAmBAC,IAAA,KACA,OAAAL,CACA,EAVA,MA8IA7B,EAAA,IA9IA,KA+IAmC,aAAA,GACArB,IAAAd,EAAA,IACAI,UAAA,CACA,EACA,CACAqB,QAAA,OACA,CACA","sources":["webpack://_N_E/./node_modules/highlight.js/lib/languages/groovy.js","webpack://_N_E/<anon>"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\n Language: Groovy\n Author: Guillaume Laforge <glaforge@gmail.com>\n Description: Groovy programming language implementation inspired from Vsevolod's Java mode\n Website: https://groovy-lang.org\n */\n\nfunction variants(variants, obj = {}) {\n  obj.variants = variants;\n  return obj;\n}\n\nfunction groovy(hljs) {\n  const IDENT_RE = '[A-Za-z0-9_$]+';\n  const COMMENT = variants([\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    hljs.COMMENT(\n      '/\\\\*\\\\*',\n      '\\\\*/',\n      {\n        relevance: 0,\n        contains: [\n          {\n            // eat up @'s in emails to prevent them to be recognized as doctags\n            begin: /\\w+@/,\n            relevance: 0\n          },\n          {\n            className: 'doctag',\n            begin: '@[A-Za-z]+'\n          }\n        ]\n      }\n    )\n  ]);\n  const REGEXP = {\n    className: 'regexp',\n    begin: /~?\\/[^\\/\\n]+\\//,\n    contains: [ hljs.BACKSLASH_ESCAPE ]\n  };\n  const NUMBER = variants([\n    hljs.BINARY_NUMBER_MODE,\n    hljs.C_NUMBER_MODE\n  ]);\n  const STRING = variants([\n    {\n      begin: /\"\"\"/,\n      end: /\"\"\"/\n    },\n    {\n      begin: /'''/,\n      end: /'''/\n    },\n    {\n      begin: \"\\\\$/\",\n      end: \"/\\\\$\",\n      relevance: 10\n    },\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE\n  ],\n  {\n    className: \"string\"\n  }\n  );\n\n  return {\n    name: 'Groovy',\n    keywords: {\n      built_in: 'this super',\n      literal: 'true false null',\n      keyword:\n            'byte short char int long boolean float double void ' +\n            // groovy specific keywords\n            'def as in assert trait ' +\n            // common keywords with Java\n            'abstract static volatile transient public private protected synchronized final ' +\n            'class interface enum if else for while switch case break default continue ' +\n            'throw throws try catch finally implements extends new import package return instanceof'\n    },\n    contains: [\n      hljs.SHEBANG({\n        binary: \"groovy\",\n        relevance: 10\n      }),\n      COMMENT,\n      STRING,\n      REGEXP,\n      NUMBER,\n      {\n        className: 'class',\n        beginKeywords: 'class interface trait enum',\n        end: /\\{/,\n        illegal: ':',\n        contains: [\n          {\n            beginKeywords: 'extends implements'\n          },\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        className: 'meta',\n        begin: '@[A-Za-z]+',\n        relevance: 0\n      },\n      {\n        // highlight map keys and named parameters as attrs\n        className: 'attr',\n        begin: IDENT_RE + '[ \\t]*:',\n        relevance: 0\n      },\n      {\n        // catch middle element of the ternary operator\n        // to avoid highlight it as a label, named parameter, or map key\n        begin: /\\?/,\n        end: /:/,\n        relevance: 0,\n        contains: [\n          COMMENT,\n          STRING,\n          REGEXP,\n          NUMBER,\n          'self'\n        ]\n      },\n      {\n        // highlight labeled statements\n        className: 'symbol',\n        begin: '^[ \\t]*' + lookahead(IDENT_RE + ':'),\n        excludeBegin: true,\n        end: IDENT_RE + ':',\n        relevance: 0\n      }\n    ],\n    illegal: /#|<\\//\n  };\n}\n\nmodule.exports = groovy;\n"],"names":["variants","obj","module","exports","hljs","IDENT_RE","COMMENT","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","relevance","contains","begin","className","REGEXP","BACKSLASH_ESCAPE","NUMBER","BINARY_NUMBER_MODE","C_NUMBER_MODE","STRING","end","APOS_STRING_MODE","QUOTE_STRING_MODE","name","keywords","built_in","literal","keyword","SHEBANG","binary","beginKeywords","illegal","UNDERSCORE_TITLE_MODE","concat","args","joined","map","x","re","source","join","excludeBegin"],"sourceRoot":""}