{"version":3,"file":"static/chunks/6935-4786046b0294605f.js","mappings":"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","sources":["webpack://_N_E/./src/components/DistributionPlot/index.tsx","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/components/VolumeSectionSelector3D/index.tsx","webpack://_N_E/./src/components/dual-neuron-with-synapses/data/guards.ts","webpack://_N_E/./src/components/dual-neuron-with-synapses/data/data.ts","webpack://_N_E/./src/components/dual-neuron-with-synapses/DualNeuronWithSynapsesView/DualNeuronWithSynapsesView.tsx","webpack://_N_E/./src/components/dual-neuron-with-synapses/DualNeuronWithSynapsesView/index.ts","webpack://_N_E/./src/components/dual-neuron-with-synapses/DualNeuronWithSynapsesView/dual-neuron-with-synapses-view.module.css","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/./src/components/VolumeSectionSelector3D/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["import React, { useMemo, useEffect, useState } from 'react';\nimport {\n    Chart as ChartJS,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n    ChartOptions,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { graphTheme } from '@/constants';\n\nChartJS.register(LinearScale, BarElement, Title, Tooltip, Legend);\n\ninterface PlotDetailsProps {\n    plotData: any;\n    xAxis?: string;\n    yAxis?: string;\n    xAxisTickStep?: number;\n    MeanStd?: { mean: number, std: number };\n}\n\nconst DistributionPlot: React.FC<PlotDetailsProps> = ({\n    plotData,\n    xAxis = 'Value',\n    yAxis = 'Frequency',\n    xAxisTickStep = 1,\n    MeanStd\n}) => {\n    const [windowWidth, setWindowWidth] = useState(0);\n\n    useEffect(() => {\n        if (typeof window !== 'undefined') {\n            setWindowWidth(window.innerWidth);\n\n            const handleResize = () => {\n                setWindowWidth(window.innerWidth);\n            };\n\n            window.addEventListener('resize', handleResize);\n\n            return () => {\n                window.removeEventListener('resize', handleResize);\n            };\n        }\n    }, []);\n\n    const formatScientificNotation = (value: number): string => {\n        if (Math.abs(value) < 1000) {\n            return value.toString();\n        }\n        if (value === 0) return '0';\n        const exponent = Math.floor(Math.log10(Math.abs(value)));\n        const mantissa = value / Math.pow(10, exponent);\n        const roundedMantissa = Math.round(mantissa * 100) / 100;\n        const superscriptDigits = ['⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹'];\n        const superscriptExponent = Math.abs(exponent)\n            .toString()\n            .split('')\n            .map((digit) => superscriptDigits[parseInt(digit)])\n            .join('');\n        return `${roundedMantissa}*10${exponent < 0 ? '⁻' : ''}${superscriptExponent}`;\n    };\n\n    const { dataPoints, units, name, description } = useMemo(() => {\n        if (!plotData) {\n            //console.error('Plot data is undefined or null');\n            return { dataPoints: [], units: null, name: '', description: '' };\n        }\n\n        const createHistogram = (data: number[]) => {\n            const binCount = Math.min(20, data.length);\n            const min = Math.min(...data);\n            const max = Math.max(...data);\n            const binWidth = (max - min) / binCount;\n\n            const bins = Array.from({ length: binCount + 1 }, (_, i) => min + i * binWidth);\n            const counts = new Array(binCount).fill(0);\n\n            data.forEach((value) => {\n                const binIndex = Math.min(\n                    Math.floor((value - min) / binWidth),\n                    binCount - 1\n                );\n                counts[binIndex]++;\n            });\n\n            const dataPoints = counts.map((count, i) => ({\n                x: bins[i],\n                y: count,\n            }));\n\n            return { dataPoints };\n        };\n\n        if (Array.isArray(plotData)) {\n            const { dataPoints } = createHistogram(plotData);\n            return {\n                dataPoints,\n                units: null,\n                name: '',\n                description: '',\n            };\n        } else if (typeof plotData === 'object' && plotData !== null) {\n            if ('freq' in plotData && 'bins' in plotData) {\n                const dataPoints = plotData.bins.map((bin: number, index: number) => ({\n                    x: bin,\n                    y: plotData.freq[index],\n                }));\n                return {\n                    dataPoints,\n                    units: plotData.units,\n                    name: plotData.name || '',\n                    description: plotData.description || '',\n                };\n            } else if ('bins' in plotData && 'counts' in plotData) {\n                const dataPoints = plotData.bins.map((bin: number, index: number) => ({\n                    x: bin,\n                    y: plotData.counts[index],\n                }));\n                return {\n                    dataPoints,\n                    units: null,\n                    name: '',\n                    description: '',\n                };\n            } else if ('values' in plotData && Array.isArray(plotData.values)) {\n                const flatValues = plotData.values.flat();\n                const { dataPoints } = createHistogram(flatValues);\n                return {\n                    dataPoints,\n                    units: null,\n                    name: '',\n                    description: '',\n                };\n            } else {\n                const dataPoints = Object.entries(plotData).map(([key, value]) => ({\n                    x: parseFloat(key),\n                    y: value,\n                }));\n                return {\n                    dataPoints,\n                    units: null,\n                    name: '',\n                    description: '',\n                };\n            }\n        } else {\n            console.error('Unexpected data format', plotData);\n            return { dataPoints: [], units: null, name: '', description: '' };\n        }\n    }, [plotData]);\n\n    const options: ChartOptions<'bar'> = useMemo(\n        () => ({\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    display: false,\n                },\n                tooltip: {\n                    callbacks: {\n                        title: (tooltipItems: any) => {\n                            const index = tooltipItems[0].dataIndex;\n                            const binStart = tooltipItems[0].parsed.x;\n                            const binEnd = dataPoints[index + 1]\n                                ? dataPoints[index + 1].x\n                                : binStart;\n                            return `${binStart} - ${binEnd} ${units || ''}`;\n                        },\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    type: 'linear' as const,\n                    title: {\n                        display: true,\n                        text: xAxis,\n                    },\n                    ticks: {\n                        stepSize: xAxisTickStep,\n                        maxRotation: 0,\n                        minRotation: 0,\n                        callback: function (value) {\n                            return value.toString();\n                        },\n                    },\n                },\n                y: {\n                    title: {\n                        display: true,\n                        text: yAxis,\n                    },\n                    ticks: {\n                        callback: function (value) {\n                            return formatScientificNotation(Number(value));\n                        },\n                    },\n                },\n            },\n        }),\n        [xAxisTickStep, xAxis, yAxis, dataPoints, units]\n    );\n\n    if (dataPoints.length === 0) {\n        return <div>No data available for the plot.</div>;\n    }\n\n    const data = {\n        datasets: [\n            {\n                label: 'Frequency',\n                data: dataPoints,\n                backgroundColor: graphTheme.blue,\n                borderWidth: 0, // Removed borders\n                barPercentage: 0.9, // Adjusted for spacing\n                categoryPercentage: 0.9, // Adjusted for spacing\n            },\n        ],\n    };\n\n    return (\n        <div>\n            {MeanStd && (\n                <div className=\"mt-4\">\n                    <p>Mean: {MeanStd?.mean?.toFixed(4)}</p>\n                    <p>Standard Deviation: {MeanStd?.std?.toFixed(4)}</p>\n                </div>\n            )}\n            {name && <h2>{name}</h2>}\n            {description && <p>{description}</p>}\n            <div style={{ width: '100%', height: '400px' }}>\n                <Bar data={data} options={options} />\n            </div>\n        </div>\n    );\n};\n\nexport default DistributionPlot;\n","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import React, { useEffect, useRef, useCallback, useState } from 'react';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\n\nimport { VolumeSection } from '@/types';\nimport { volumeSections, theme } from '@/constants';\n\nimport { basePath, dataPath } from '@/config';\n\nimport styles from './styles.module.scss';\n\ntype VolumeSectionSelectProps = {\n  value?: VolumeSection | string;\n  onSelect?: (volumeSection: VolumeSection) => void;\n  theme?: number;\n};\n\nconst VolumeSectionSelector3D: React.FC<VolumeSectionSelectProps> = ({\n  value = 'region',\n  onSelect = () => { },\n  theme: themeProp = 2,\n}) => {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const hoveredObjectRef = useRef<THREE.Object3D | null>(null);\n  const selectedVolumeSectionRef = useRef<VolumeSection>(value as VolumeSection);\n  const selectedObjectRef = useRef<THREE.Object3D | null>(null);\n\n  const camera = useRef<THREE.OrthographicCamera | null>(null);\n  const scene = useRef<THREE.Scene | null>(null);\n  const renderer = useRef<THREE.WebGLRenderer | null>(null);\n  const raycaster = useRef<THREE.Raycaster | null>(null);\n  const mouse = useRef(new THREE.Vector2());\n\n  const obj1Ref = useRef<THREE.Object3D | null>(null);\n  const obj2Ref = useRef<THREE.Object3D | null>(null);\n  const obj3Ref = useRef<THREE.Object3D | null>(null);\n\n  const objectsLoadedRef = useRef(false);\n  const [offset, setOffset] = useState(21);\n  const [textSize, setTextSize] = useState(1);\n\n  const handleClick = useCallback(\n    (event) => {\n      if (!objectsLoadedRef.current) return;\n\n      const rect = mountRef.current!.getBoundingClientRect();\n      mouse.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n      mouse.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n      raycaster.current!.setFromCamera(mouse.current, camera.current!);\n      const intersects = raycaster.current!.intersectObjects([obj1Ref.current!, obj2Ref.current!, obj3Ref.current!], true);\n\n      if (intersects.length > 0) {\n        let intersectedObject = intersects[0].object;\n        while (intersectedObject.parent && ![obj1Ref.current, obj2Ref.current, obj3Ref.current].includes(intersectedObject)) {\n          intersectedObject = intersectedObject.parent;\n        }\n\n        if ([obj1Ref.current, obj2Ref.current, obj3Ref.current].includes(intersectedObject)) {\n          const volumeSection = intersectedObject.userData.volumeSection as VolumeSection;\n          if (volumeSection) {\n            updateSelection(volumeSection, intersectedObject);\n            onSelect(volumeSection);\n          }\n        }\n      }\n    },\n    [onSelect, themeProp]\n  );\n\n  const updateSelection = (newVolumeSection: VolumeSection, newSelectedObject: THREE.Object3D) => {\n    if (selectedObjectRef.current) {\n      updateObjectColors(selectedObjectRef.current, theme[themeProp].default, theme[themeProp].hover);\n    }\n\n    updateObjectColors(newSelectedObject, theme[themeProp].selected, 0xffffff);\n\n    selectedVolumeSectionRef.current = newVolumeSection;\n    selectedObjectRef.current = newSelectedObject;\n  };\n\n  const updateObjectColors = (object: THREE.Object3D, mainColor: number, textColor: number) => {\n    object.traverse((child: any) => {\n      if (child instanceof THREE.Mesh) {\n        if (child.name === object.userData.volumeSection) {\n          child.material.color.set(mainColor);\n        }\n        if (child.geometry && child.geometry.type === 'TextGeometry') {\n          child.material.color.set(textColor);\n        }\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    scene.current = new THREE.Scene();\n    scene.current.background = new THREE.Color('#313354');\n\n    const aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\n    camera.current = new THREE.OrthographicCamera(-aspect * 200, aspect * 200, 200, -200, 0.1, 1000);\n    camera.current.position.z = 10;\n\n    renderer.current = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.current.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    renderer.current.setPixelRatio(window.devicePixelRatio);\n    mountRef.current.appendChild(renderer.current.domElement);\n\n    raycaster.current = new THREE.Raycaster();\n\n    const loader = new OBJLoader();\n    loader.load(\n      `${dataPath}/3d/volume-selector/volume-selector.obj`,\n      (obj) => {\n        [obj1Ref, obj2Ref, obj3Ref].forEach((ref, index) => {\n          const newObj = obj.clone();\n          ref.current = newObj;\n          newObj.position.set((index - 1) * offset, 0, 0);\n          newObj.userData.volumeSection = ['region', 'slice', 'cylinder'][index];\n          applyMaterial(newObj, index);\n          scene.current!.add(newObj);\n        });\n\n        const fontLoader = new FontLoader();\n        fontLoader.load(`${basePath}/assets/fonts/Titillium_Web_Light_.json`, (font) => {\n          ['Region', 'Slice', 'Cylinder'].forEach((text, index) => {\n            createText(text, [obj1Ref, obj2Ref, obj3Ref][index].current!, text.toLowerCase(), font);\n          });\n        });\n\n        objectsLoadedRef.current = true;\n\n        if (value) {\n          setInitialSelection(value as VolumeSection);\n        }\n\n        animate();\n      },\n      (xhr) => console.log((xhr.loaded / xhr.total) * 100 + '% loaded'),\n      (error) => console.error('An error happened', error)\n    );\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.current!.render(scene.current!, camera.current!);\n    };\n\n    const handleResize = () => {\n      if (mountRef.current && renderer.current && camera.current) {\n        const width = mountRef.current.clientWidth;\n        const height = mountRef.current.clientHeight;\n        renderer.current.setSize(width, height);\n\n        const aspect = width / height;\n        camera.current.left = -aspect * 200;\n        camera.current.right = aspect * 200;\n        camera.current.top = 200;\n        camera.current.bottom = -200;\n        camera.current.updateProjectionMatrix();\n\n        const newOffset = window.innerWidth < 1400 ? 16 : 21;\n        setOffset(newOffset);\n\n        camera.current.zoom = window.innerWidth < 1200 ? 11 : 16;\n        camera.current.updateProjectionMatrix();\n\n        const newTextSize = window.innerWidth < 1200 ? 1 : 0.8;\n        setTextSize(newTextSize);\n\n        updateTextSize();\n      }\n    };\n\n    const handleMouseMove = (event) => {\n      if (!objectsLoadedRef.current) return;\n\n      const rect = mountRef.current!.getBoundingClientRect();\n      mouse.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n      mouse.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n      raycaster.current!.setFromCamera(mouse.current, camera.current!);\n      const intersects = raycaster.current!.intersectObjects([obj1Ref.current!, obj2Ref.current!, obj3Ref.current!], true);\n\n      if (intersects.length > 0) {\n        let intersectedObject = intersects[0].object;\n        while (intersectedObject.parent && ![obj1Ref.current, obj2Ref.current, obj3Ref.current].includes(intersectedObject)) {\n          intersectedObject = intersectedObject.parent;\n        }\n\n        if (hoveredObjectRef.current !== intersectedObject && selectedObjectRef.current !== intersectedObject) {\n          if (hoveredObjectRef.current && hoveredObjectRef.current !== selectedObjectRef.current) {\n            updateObjectColors(hoveredObjectRef.current, theme[themeProp].default, theme[themeProp].hover);\n          }\n\n          updateObjectColors(intersectedObject, theme[themeProp].hover, theme[themeProp].hover);\n\n          hoveredObjectRef.current = intersectedObject;\n          mountRef.current!.style.cursor = 'pointer';\n        }\n      } else {\n        if (hoveredObjectRef.current && hoveredObjectRef.current !== selectedObjectRef.current) {\n          updateObjectColors(hoveredObjectRef.current, theme[themeProp].default, theme[themeProp].hover);\n          hoveredObjectRef.current = null;\n          mountRef.current!.style.cursor = 'default';\n        }\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    mountRef.current.addEventListener('mousemove', handleMouseMove);\n    mountRef.current.addEventListener('click', handleClick);\n\n    handleResize();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (mountRef.current) {\n        mountRef.current.removeEventListener('mousemove', handleMouseMove);\n        mountRef.current.removeEventListener('click', handleClick);\n        mountRef.current.removeChild(renderer.current!.domElement);\n      }\n    };\n  }, [themeProp]);\n\n  useEffect(() => {\n    if (objectsLoadedRef.current) {\n      [obj1Ref, obj2Ref, obj3Ref].forEach((ref, index) => {\n        if (ref.current) {\n          ref.current.position.set((index - 1) * offset, 0, 0);\n        }\n      });\n    }\n  }, [offset]);\n\n  useEffect(() => {\n    if (objectsLoadedRef.current && value) {\n      setInitialSelection(value as VolumeSection);\n    }\n  }, [value, themeProp]);\n\n  const applyMaterial = (obj: THREE.Object3D, index: number) => {\n    obj.traverse((child) => {\n      if (child instanceof THREE.Mesh) {\n        let material;\n        if (child.name === obj.userData.volumeSection) {\n          material = new THREE.MeshBasicMaterial({\n            color: theme[themeProp].default,\n            transparent: false,\n            opacity: 1,\n            depthWrite: true,\n          });\n          child.renderOrder = 2;\n        } else if (child.name === 'skeleton') {\n          material = new THREE.MeshBasicMaterial({\n            color: theme[themeProp].selectedEdges,\n            transparent: true,\n            opacity: 0,\n            depthWrite: false,\n          });\n          const wireframeGeometry = new THREE.EdgesGeometry(child.geometry);\n          const wireframeMaterial = new THREE.LineBasicMaterial({\n            color: theme[themeProp].default,\n            transparent: true,\n            opacity: 1,\n            depthWrite: false,\n          });\n          const wireframe = new THREE.LineSegments(wireframeGeometry, wireframeMaterial);\n          wireframe.renderOrder = 1;\n          child.add(wireframe);\n        } else {\n          child.visible = false;\n        }\n        if (material) {\n          child.material = material;\n        }\n      }\n    });\n  };\n\n  const createText = (text: string, obj: THREE.Object3D, childName: string, font: THREE.Font) => {\n    const textGeometry = new TextGeometry(text, {\n      font: font,\n      size: textSize,\n      height: 0.2,\n      curveSegments: 32,\n      bevelEnabled: true,\n      bevelThickness: 0.02,\n      bevelSize: 0.02,\n    });\n\n    const textMaterialColor = selectedVolumeSectionRef.current === childName ? 0xffffff : theme[themeProp].hover;\n\n    const textMaterial = new THREE.MeshBasicMaterial({\n      color: textMaterialColor,\n      transparent: false,\n      opacity: 1,\n    });\n    const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n\n    obj.traverse((child) => {\n      if (child instanceof THREE.Mesh && child.name === childName) {\n        textMesh.position.set(0, 0, 0);\n        child.add(textMesh);\n      }\n    });\n  };\n\n  const updateTextSize = () => {\n    ['Region', 'Slice', 'Cylinder'].forEach((text, index) => {\n      const obj = [obj1Ref, obj2Ref, obj3Ref][index].current;\n      if (obj) {\n        obj.traverse((child) => {\n          if (child instanceof THREE.Mesh && child.geometry && child.geometry.type === 'TextGeometry') {\n            const oldTextMesh = child;\n            const parentMesh = oldTextMesh.parent;\n            if (parentMesh) {\n              parentMesh.remove(oldTextMesh);\n              const fontLoader = new FontLoader();\n              fontLoader.load(`${basePath}/assets/fonts/Titillium_Web_Light_.json`, (font) => {\n                createText(text, obj, text.toLowerCase(), font);\n              });\n            }\n          }\n        });\n      }\n    });\n  };\n\n  const setInitialSelection = (initialVolumeSection: VolumeSection) => {\n    const initialObjectRef = [obj1Ref, obj2Ref, obj3Ref].find(\n      (ref) => ref.current?.userData.volumeSection === initialVolumeSection\n    );\n\n    if (initialObjectRef?.current) {\n      updateSelection(initialVolumeSection, initialObjectRef.current);\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.volumeSelector} ref={mountRef}></div>\n      <div className={styles.volumeList}></div>\n    </div>\n  );\n};\n\nexport default VolumeSectionSelector3D;\n","export function isObject(data: unknown): data is Record<string, unknown> {\n  if (!data) return false;\n  if (Array.isArray(data)) return false;\n  return typeof data === \"object\";\n}\n\nexport function isString(data: unknown): data is string {\n  return typeof data === \"string\";\n}\n\nexport function isNumber(data: unknown): data is number {\n  return typeof data === \"number\";\n}\n\nexport function isBoolean(data: unknown): data is boolean {\n  return typeof data === \"boolean\";\n}\n\nexport function isArrayBuffer(data: unknown): data is ArrayBuffer {\n  if (!data) return false;\n  return data instanceof ArrayBuffer;\n}\n\nexport function isStringArray(data: unknown): data is string[] {\n  if (!Array.isArray(data)) return false;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const item of data) {\n    if (!isString(item)) return false;\n  }\n  return true;\n}\n\nexport function assertNumber(\n  data: unknown,\n  name = \"data\"\n): asserts data is number {\n  if (!isNumber(data)) {\n    throw Error(\n      `${name} was expected to be a number but we got ${typeof data}!`\n    );\n  }\n}\n\nexport function assertString(\n  data: unknown,\n  name = \"data\"\n): asserts data is string {\n  if (!isString(data)) {\n    throw Error(\n      `${name} was expected to be a string but we got ${typeof data}!`\n    );\n  }\n}\n\nexport function assertOptionalString(\n  data: unknown,\n  name = \"data\"\n): asserts data is string | undefined {\n  if (data && !isString(data)) {\n    throw Error(\n      `${name} was expected to be a string but we got ${typeof data}!`\n    );\n  }\n}\n\nexport function assertBoolean(\n  data: unknown,\n  name = \"data\"\n): asserts data is boolean {\n  if (!isBoolean(data)) {\n    throw Error(\n      `${name} was expected to be a boolean but we got ${typeof data}!`\n    );\n  }\n}\n\nexport function assertObject(\n  data: unknown,\n  name = \"data\"\n): asserts data is Record<string, unknown> {\n  if (!isObject(data)) {\n    throw Error(\n      `${name} was expected to be an object but we got ${typeof data}!`\n    );\n  }\n}\n\nexport function assertArray(\n  data: unknown,\n  name = \"data\"\n): asserts data is unknown[] {\n  if (!Array.isArray(data)) {\n    throw Error(\n      `${name} was expected to be an Array but we got ${typeof data}!`\n    );\n  }\n}\n\nexport function assertArrayBuffer(\n  data: unknown,\n  name = \"data\"\n): asserts data is ArrayBuffer {\n  if (!isArrayBuffer(data)) {\n    throw Error(\n      `${name} was expected to be an ArrayBuffer but we got ${typeof data}!`\n    );\n  }\n}\n\nexport function assertOptionalArrayBuffer(\n  data: unknown,\n  name = \"data\"\n): asserts data is ArrayBuffer | undefined {\n  if (data && !isArrayBuffer(data)) {\n    throw Error(\n      `${name} was expected to be an ArrayBuffer but we got ${typeof data}!`\n    );\n  }\n}\n\nexport type TypeDef =\n  | \"boolean\"\n  | \"null\"\n  | \"number\"\n  | \"string\"\n  | \"function\"\n  | \"undefined\"\n  | \"unknown\"\n  | [\"number\", { min?: number; max?: number }]\n  | [\"|\", ...TypeDef[]]\n  | [\"?\", TypeDef]\n  | [\"array\", TypeDef]\n  | [`array(${number})`, TypeDef]\n  | [\"map\", TypeDef]\n  | [\"tuple\", ...TypeDef[]]\n  | [\"literal\", ...string[]]\n  | [\"partial\", { [name: string]: TypeDef }]\n  | { [name: string]: TypeDef };\n\nexport function isType<T>(data: unknown, type: TypeDef): data is T {\n  try {\n    assertType<T>(data, type);\n    return true;\n  } catch (ex) {\n    return false;\n  }\n}\n\nexport function assertType<T>(\n  data: unknown,\n  type: TypeDef,\n  prefix = \"data\"\n): asserts data is T {\n  if (type === \"unknown\") return;\n\n  if (type === \"null\") {\n    if (data !== null) {\n      throw Error(`Expected ${prefix} to be null and not a ${typeof data}!`);\n    }\n    return;\n  }\n  if (typeof type === \"string\") {\n    if (typeof data !== type) {\n      throw Error(\n        `Expected ${prefix} to be a ${type} and not a ${typeof data}!`\n      );\n    }\n    return;\n  }\n  if (Array.isArray(type)) {\n    const [kind] = type;\n    switch (kind) {\n      case \"array\":\n        assertTypeArray(data, prefix, type);\n        return;\n      case \"map\":\n        assertTypeMap(data, prefix, type);\n        return;\n      case \"?\":\n        assertTypeOptional(data, prefix, type);\n        return;\n      case \"|\":\n        assertTypeAlternative(data, prefix, type);\n        return;\n      case \"tuple\":\n        assertTypeTuple(data, prefix, type);\n        return;\n      case \"partial\":\n        assertTypePartial(data, prefix, type);\n        return;\n      case \"literal\":\n        assertTypeLiteral(data, prefix, type);\n        return;\n      default:\n        if (kind.startsWith(\"array(\")) {\n          const size = parseInt(\n            kind.substring(\"array(\".length, kind.length - 1),\n            10\n          );\n          assertTypeArrayWithDimension(\n            data,\n            prefix,\n            type as [unknown, TypeDef],\n            size\n          );\n          return;\n        }\n        throw Error(\n          `Don't know how to create a type guard for this kind of type: ${JSON.stringify(\n            type\n          )}`\n        );\n    }\n  }\n\n  if (typeof data !== \"object\")\n    throw Error(`Expected ${prefix} to be an object and not a ${typeof data}!`);\n\n  const obj = data as { [key: string]: unknown };\n  for (const name of Object.keys(type)) {\n    if (typeof name !== \"string\") continue;\n\n    assertType(obj[name], type[name], `${prefix}.${name}`);\n  }\n}\n\nfunction assertTypeTuple(\n  data: unknown,\n  prefix: string,\n  [, ...types]: [\"tuple\", ...TypeDef[]]\n) {\n  assertArray(data);\n  if (types.length !== data.length) {\n    throw Error(\n      `Expected ${prefix} to have ${types.length} elements, not ${data.length}!`\n    );\n  }\n  for (let i = 0; i < types.length; i++) {\n    const type: TypeDef = types[i] as TypeDef;\n    assertType(data[i], type, `${prefix}[$i]`);\n  }\n}\n\nfunction assertTypePartial(\n  data: unknown,\n  prefix: string,\n  [, type]: [\"partial\", { [name: string]: TypeDef }]\n) {\n  assertObject(data, prefix);\n  for (const name of Object.keys(type)) {\n    if (typeof name !== \"string\") continue;\n\n    const attrib: unknown = data[name];\n    if (typeof attrib !== \"undefined\") {\n      assertType(attrib, type[name], `${prefix}.${name}`);\n    }\n  }\n}\n\nfunction assertTypeArray(\n  data: unknown,\n  prefix: string,\n  type: [\"array\", TypeDef]\n) {\n  if (!Array.isArray(data))\n    throw Error(`Expected ${prefix} to be an array and not a ${typeof data}!`);\n  const [, subType] = type;\n  for (let i = 0; i < data.length; i += 1) {\n    assertType(data[i], subType, `${prefix}[${i}]`);\n  }\n}\n\nfunction assertTypeArrayWithDimension(\n  data: unknown,\n  prefix: string,\n  type: [unknown, TypeDef],\n  size: number\n) {\n  if (!Array.isArray(data))\n    throw Error(`Expected ${prefix} to be an array and not a ${typeof data}!`);\n  if (data.length !== size)\n    throw Error(\n      `${prefix} was expected to have a length of ${size}, but we got ${data.length}!`\n    );\n  const [, subType] = type;\n  for (let i = 0; i < data.length; i += 1) {\n    assertType(data[i], subType, `${prefix}[${i}]`);\n  }\n}\n\nfunction assertTypeMap(data: unknown, prefix: string, type: [\"map\", TypeDef]) {\n  if (!isObject(data))\n    throw Error(`Expected ${prefix} to be an object and not a ${typeof data}!`);\n  const [, subType] = type;\n  for (const key of Object.keys(data)) {\n    if (typeof key === \"string\") {\n      assertType(data[key], subType, `${prefix}[${key}]`);\n    }\n  }\n}\n\nfunction assertTypeOptional(\n  data: unknown,\n  prefix: string,\n  type: [\"?\", TypeDef]\n) {\n  if (typeof data === \"undefined\") return;\n\n  const [, optionalType] = type;\n  assertType(data, optionalType, prefix);\n}\n\nfunction assertTypeAlternative(\n  data: unknown,\n  prefix: string,\n  type: [\"|\", ...TypeDef[]]\n) {\n  const [, ...altTypes] = type;\n  let lastException = Error(\n    `No type has been defined for this alternative: ${JSON.stringify(type)}!`\n  );\n  for (const altType of altTypes) {\n    try {\n      assertType(data, altType, prefix);\n      return;\n    } catch (ex) {\n      if (ex instanceof Error) lastException = ex;\n    }\n  }\n  throw lastException;\n}\n\nfunction assertTypeLiteral(\n  data: unknown,\n  prefix: string,\n  type: [\"literal\", ...string[]]\n) {\n  const [, ...literals] = type;\n  for (const literal of literals) {\n    if (data === literal) return;\n  }\n  throw Error(\n    `Expected ${prefix} to be a literal (${literals\n      .map((item) => `\"${item}\"`)\n      .join(\" | \")})!`\n  );\n}\n\n/**\n * Basically, this function checks a `data` against a `type` and returns a `defaultValue`\n * if `data` is not of the expected type.\n *\n * But if the `defaultValue` is a function returning the expected `type`, then `ensureType`\n * can be use to update old data that you have retrieved from local storage, for example.\n *\n * @example\n * ```\n * interface Complex { r: number, i: number }\n * const complex = ensureType<Complex>(data, {r: \"number\", i: \"number\"}, { r: 1, i: 0 })\n * ```\n *\n * @example\n * ```\n * interpace PersonVersion1 {\n *   name: string\n *   female: boolean\n * }\n * interpace PersonVersion2 {\n *   name: string\n *   gender: \"male\" | \"female\" | \"nonbinary\" | \"unknown\"\n * }\n *\n * const data = JSON.parse(LocalStorate.getItem(\"person\") ?? \"null\")\n * const TypePersonVersion1 = {\n *   name: \"string\",\n *   female: \"boolean\"\n * }\n * const TypePersonVersion2 = {\n *   name: \"string\",\n *   gender: [\"literal\", \"male\", \"female\", \"nonbinary\", \"unknown\"]\n * }\n * const person = ensureType<PersonVersion2>(\n *   data,\n *   TypePersonVersion2,\n *   (value: unknown) => {\n *     if (isType<PersonVersion2>(value, TypePersonVersion2)) {\n *       return value\n *     }\n *     if (isType<PersonVersion1>(value, TypePersonVersion1)) {\n *       return {\n *         name: value.name,\n *         gender: value.female === true ? \"female\" : \"unknown\"\n *       }\n *     }\n *     return { name: \"Anonymous\", gender: \"unknown\" }\n *   }\n * )\n * ```\n *\n * @param data Value with unknown type.\n * @param type The type to check against.\n * @param defaultValue If the type doesn't check, we can return `defaultValue`, or call it if this is a function.\n * @returns A value that is of the expected type.\n */\nexport function ensureType<T>(\n  data: unknown,\n  type: TypeDef,\n  defaultValue: T | ((v: unknown) => T)\n): T {\n  if (isType<T>(data, type)) return data;\n\n  return isType<T>(defaultValue, type) ? defaultValue : defaultValue(data);\n}\n","import { decode } from \"@msgpack/msgpack\";\n\nimport {\n  DualNeuronData,\n  NeuronData,\n  NeuronSectionData,\n  NeuronSectionPointData,\n  SynapseData,\n} from \"../types\";\nimport { DualNeuronFile, NeuronFile, SynapseFile } from \"./types\";\nimport { assertType, TypeDef } from \"./guards\";\n\nexport async function fetchDualNeuron(url: string): Promise<DualNeuronData> {\n  const resp = await fetch(url);\n  if (!resp.ok) {\n    throw Error(\n      `Unable to load from \"${url}\": error #${resp.status} ${resp.statusText}`\n    );\n  }\n\n  const buff = await resp.arrayBuffer();\n  const file = decode(buff);\n  assertDualNeuronFile(file);\n  return {\n    pre: convertToNeuronData(file.pre),\n    post: convertToNeuronData(file.post),\n    synapses: file.synapses.map(convertToSynapseData),\n  };\n}\n\nfunction assertDualNeuronFile(file: unknown): asserts file is DualNeuronFile {\n  const typeNeuron: TypeDef = {\n    etype: \"string\",\n    layer: \"string\",\n    me_combo: \"string\",\n    morph_class: \"string\",\n    morphology: \"string\",\n    mtype: \"string\",\n    region: \"string\",\n    synapse_class: \"string\",\n    x: \"number\",\n    y: \"number\",\n    z: \"number\",\n    orientation: [\"array(3)\", [\"array(3)\", \"number\"]],\n    morph: [\"array\", [\"array\", \"number\"]],\n  };\n  assertType(file, {\n    pre: typeNeuron,\n    post: typeNeuron,\n    synapses: [\"array\", [\"array\", \"number\"]],\n  });\n}\n\nfunction convertToNeuronData(file: NeuronFile): NeuronData {\n  return {\n    etype: file.etype,\n    layer: file.layer,\n    meCombo: file.me_combo,\n    morphClass: file.morph_class,\n    morphology: file.morphology,\n    mtype: file.mtype,\n    region: file.region,\n    synapseClass: file.synapse_class,\n    x: file.x,\n    y: file.y,\n    z: file.z,\n    orientation: structuredClone(file.orientation),\n    morph: file.morph.map(convertToNeuronSectionData),\n  };\n}\n\nfunction convertToSynapseData(file: SynapseFile): SynapseData {\n  const [x, y, z, type, preSectionId, postSectionId, preGID, postGID] = file;\n  return {\n    x,\n    y,\n    z,\n    type,\n    preSectionId,\n    postSectionId,\n    preGID,\n    postGID,\n  };\n}\n\nconst SECTION_TYPES = [\"soma\", \"axon\", \"dend\"];\n\nfunction convertToNeuronSectionData(file: number[]): NeuronSectionData {\n  const [sectionType, isBase, ...rest] = file;\n  const points: NeuronSectionPointData[] = [];\n  for (let i = 0; i < rest.length; i += 4) {\n    points.push({\n      x: rest[i + 0],\n      y: rest[i + 1],\n      z: rest[i + 2],\n      r: rest[i + 3] / 2, // Convert diameter into radius.\n    });\n  }\n  return {\n    sectionType: (SECTION_TYPES[sectionType] ?? \"dend\") as\n      | \"soma\"\n      | \"axon\"\n      | \"dend\",\n    isBase: isBase !== 0,\n    points,\n  };\n}\n","import React from \"react\";\n\nimport { classNames } from \"@/utils\";\nimport { fetchDualNeuron } from \"../data\";\nimport { NeuronData, SynapseData } from \"../types\";\n\nimport styles from \"./dual-neuron-with-synapses-view.module.css\";\nimport { basePath } from \"@/config\";\nimport { SwcViewer, SwcViewerLoader } from \"@/views/MorphoViewer/SwcViewer\";\nimport { CellNodes } from \"@/views/MorphoViewer/tools/nodes\";\nimport { CellNode, CellNodeType } from \"@/views/MorphoViewer/types\";\n\nexport interface DualNeuronWithSynapsesViewProps {\n  className?: string;\n  pre: string;\n  post: string;\n}\n\nexport function DualNeuronWithSynapsesView({\n  className,\n  pre,\n  post,\n}: DualNeuronWithSynapsesViewProps) {\n  const combination = checkCombination(pre, post);\n  if (!combination) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-red-500\">\n          No synapse view available for this selection.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <SwcViewer\n      className={classNames(styles.main, className)}\n      href={combination.href}\n      loader={combination.reverse ? loadMsgPackReversed : loadMsgPack}\n      legend={[\n        { label: \"Pre\", color: \"#07f\" },\n        { label: \"Post\", color: \"#f70\" },\n        { label: \"Synapse\", color: \"#ff0\" },\n      ]}\n    />\n  );\n}\n\nconst loadMsgPackReversed: SwcViewerLoader = async (url: string) => {\n  const data = await loadMsgPack(url);\n  data.morphologies[0].colors = [\"#333\", \"#a40\", \"#f70\"];\n  data.morphologies[1].colors = [\"#333\", \"#04a\", \"#07f\"];\n  return data;\n};\n\nconst loadMsgPack: SwcViewerLoader = async (url: string) => {\n  try {\n    const data = await fetchDualNeuron(`${basePath}/${url}`);\n    const nodesPre = convertDualNeuronIntoCellNodes(data.pre);\n    const nodesPost = convertDualNeuronIntoCellNodes(data.post);\n    const radius =\n      Math.max(nodesPre.averageRadius, nodesPost.averageRadius) * 10;\n    return {\n      morphologies: [\n        {\n          colors: [\"#333\", \"#04a\", \"#07f\"],\n          nodes: nodesPre,\n        },\n        {\n          colors: [\"#333\", \"#a40\", \"#f70\"],\n          nodes: nodesPost,\n        },\n        {\n          colors: [\"#ff0\"],\n          nodes: convertSynapsesIntoCellNodes(data.synapses, radius),\n          minRadius: 8,\n          roundness: 24,\n        },\n      ],\n    };\n  } catch (ex) {\n    throw ex;\n  }\n};\n\nfunction convertDualNeuronIntoCellNodes(data: NeuronData): CellNodes {\n  const nodes: CellNode[] = [];\n  const setUV = new Set<number>();\n  for (const section of data.morph) {\n    let parent = -1;\n    for (let i = 0; i < section.points.length; i++) {\n      const point = section.points[i];\n      const index = nodes.length;\n      const type = figureOutType(section.sectionType);\n      const uv = (type - 0.5) / 3;\n      setUV.add(uv);\n      nodes.push({\n        index,\n        parent,\n        type,\n        radius: point.r,\n        x: point.x,\n        y: point.y,\n        z: point.z,\n        u: uv,\n        v: uv,\n      });\n      parent = index;\n    }\n  }\n  return new CellNodes(nodes);\n}\n\nfunction figureOutType(sectionType: string): CellNodeType {\n  switch (sectionType) {\n    case \"soma\":\n      return CellNodeType.Soma;\n    case \"axon\":\n      return CellNodeType.Axon;\n    case \"dend\":\n      return CellNodeType.BasalDendrite;\n    default:\n      return CellNodeType.Unknown;\n  }\n}\n\nfunction convertSynapsesIntoCellNodes(\n  synapses: SynapseData[],\n  radius: number\n): CellNodes {\n  const nodes: CellNode[] = [];\n  for (const synapse of synapses) {\n    const { x, y, z } = synapse;\n    nodes.push({\n      index: nodes.length,\n      parent: -1,\n      type: CellNodeType.Unknown,\n      radius,\n      x,\n      y,\n      z,\n      u: 0,\n      v: 0,\n    });\n    nodes.push({\n      index: nodes.length,\n      parent: nodes.length - 1,\n      type: CellNodeType.Unknown,\n      radius,\n      x,\n      y,\n      z,\n      u: 0,\n      v: 0,\n    });\n  }\n  return new CellNodes(nodes);\n}\n\nconst MAP = {\n  Excitatory: \"SP_PC\",\n  Inhibitory: \"SP_PVBC\",\n  All: \"SLM_PPA\",\n};\n\n/**\n * We don't have files for all the combinations of pre/post.\n * So we need to take something else.\n * @returns `null` if no file matches the combination pre/post.\n */\nfunction checkCombination(\n  pre: string,\n  post: string\n): { href: string; reverse: boolean } | null {\n  pre = MAP[pre] ?? pre;\n  post = MAP[post] ?? post;\n  let reverse = false;\n  const id = `${pre}/${post}`;\n  if (!existingCombinations.has(id)) {\n    const reversedId = `${post}/${pre}`;\n    if (!existingCombinations.has(reversedId)) return null;\n\n    const tmp = pre;\n    pre = post;\n    post = tmp;\n    reverse = true;\n  }\n\n  return {\n    reverse,\n    href: `data/3d/3_digital-reconstruction/connection-viewer/${pre}-${post}.msgpack`,\n  };\n}\n\nconst existingCombinations = new Set<string>([\n  \"SLM_PPA/SO_OLM\",\n  \"SLM_PPA/SO_Tri\",\n  \"SLM_PPA/SP_CCKBC\",\n  \"SLM_PPA/SR_SCA\",\n  \"SO_BP/SLM_PPA\",\n  \"SO_BP/SO_OLM\",\n  \"SO_BP/SO_Tri\",\n  \"SO_BP/SP_CCKBC\",\n  \"SO_BP/SR_SCA\",\n  \"SO_BS/SLM_PPA\",\n  \"SO_BS/SO_BP\",\n  \"SO_BS/SO_OLM\",\n  \"SO_BS/SO_Tri\",\n  \"SO_BS/SP_AA\",\n  \"SO_BS/SP_BS\",\n  \"SO_BS/SP_CCKBC\",\n  \"SO_BS/SP_Ivy\",\n  \"SO_BS/SP_PC\",\n  \"SO_BS/SP_PVBC\",\n  \"SO_BS/SR_SCA\",\n  \"SO_OLM/SR_SCA\",\n  \"SO_Tri/SO_OLM\",\n  \"SO_Tri/SP_CCKBC\",\n  \"SO_Tri/SR_SCA\",\n  \"SP_AA/SP_PC\",\n  \"SP_BS/SLM_PPA\",\n  \"SP_BS/SO_BP\",\n  \"SP_BS/SO_OLM\",\n  \"SP_BS/SO_Tri\",\n  \"SP_BS/SP_CCKBC\",\n  \"SP_BS/SP_Ivy\",\n  \"SP_BS/SR_SCA\",\n  \"SP_CCKBC/SO_OLM\",\n  \"SP_CCKBC/SR_SCA\",\n  \"SP_Ivy/SLM_PPA\",\n  \"SP_Ivy/SO_BP\",\n  \"SP_Ivy/SO_OLM\",\n  \"SP_Ivy/SO_Tri\",\n  \"SP_Ivy/SP_CCKBC\",\n  \"SP_Ivy/SR_SCA\",\n  \"SP_PC/SLM_PPA\",\n  \"SP_PC/SO_BP\",\n  \"SP_PC/SO_OLM\",\n  \"SP_PC/SO_Tri\",\n  \"SP_PC/SP_BS\",\n  \"SP_PC/SP_CCKBC\",\n  \"SP_PC/SP_Ivy\",\n  \"SP_PC/SP_PVBC\",\n  \"SP_PC/SR_SCA\",\n  \"SP_PVBC/SLM_PPA\",\n  \"SP_PVBC/SO_BP\",\n  \"SP_PVBC/SO_OLM\",\n  \"SP_PVBC/SO_Tri\",\n  \"SP_PVBC/SP_BS\",\n  \"SP_PVBC/SP_CCKBC\",\n  \"SP_PVBC/SP_Ivy\",\n  \"SP_PVBC/SR_SCA\",\n]);\n","export * from \"./DualNeuronWithSynapsesView\"\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"dual-neuron-with-synapses-view_main__KQFQ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__NKkJz\",\"volumeSelector\":\"styles_volumeSelector__dN4Dl\",\"volumeList\":\"styles_volumeList__5Src0\",\"volumeSection\":\"styles_volumeSection__yJuJz\",\"active\":\"styles_active__RrlYY\"};"],"names":["ChartJS","register","LinearScale","BarElement","Title","Tooltip","Legend","__webpack_exports__","Z","MeanStd","plotData","xAxis","yAxis","xAxisTickStep","param","windowWidth","setWindowWidth","useState","useEffect","window","innerWidth","handleResize","addEventListener","removeEventListener","formatScientificNotation","Math","abs","value","toString","exponent","floor","log10","mantissa","pow","superscriptDigits","superscriptExponent","split","map","parseInt","digit","join","round","concat","dataPoints","units","name","description","useMemo","createHistogram","binCount","min","data","length","binWidth","max","bins","Array","from","_","i","counts","fill","forEach","binIndex","count","x","y","isArray","console","error","bin","index","freq","values","flatValues","flat","Object","entries","key","parseFloat","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","title","tooltipItems","dataIndex","binStart","parsed","binEnd","scales","type","text","ticks","stepSize","maxRotation","minRotation","callback","Number","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","datasets","label","backgroundColor","graphTheme","blue","borderWidth","barPercentage","categoryPercentage","jsxs","className","p","mean","toFixed","std","h2","style","width","height","Bar","centered","children","styles","classNames","onSelect","theme","themeProp","mountRef","useRef","hoveredObjectRef","selectedVolumeSectionRef","selectedObjectRef","camera","scene","renderer","raycaster","mouse","THREE","obj1Ref","obj2Ref","obj3Ref","objectsLoadedRef","offset","setOffset","textSize","setTextSize","handleClick","useCallback","current","rect","getBoundingClientRect","event","clientX","left","clientY","top","setFromCamera","intersects","intersectObjects","intersectedObject","object","parent","includes","volumeSection","userData","updateSelection","newVolumeSection","newSelectedObject","updateObjectColors","default","hover","selected","mainColor","textColor","traverse","child","material","color","set","geometry","background","aspect","clientWidth","clientHeight","position","z","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","appendChild","domElement","loader","OBJLoader","load","dataPath","ref","newObj","obj","clone","applyMaterial","add","fontLoader","FontLoader","basePath","createText","toLowerCase","font","setInitialSelection","animate","log","xhr","loaded","total","requestAnimationFrame","render","right","bottom","updateProjectionMatrix","newOffset","zoom","newTextSize","updateTextSize","handleMouseMove","cursor","removeChild","transparent","opacity","depthWrite","renderOrder","selectedEdges","wireframeGeometry","wireframeMaterial","wireframe","visible","childName","textGeometry","TextGeometry","size","curveSegments","bevelEnabled","bevelThickness","bevelSize","textMaterialColor","textMaterial","textMesh","parentMesh","oldTextMesh","remove","initialObjectRef","find","initialVolumeSection","isObject","fetchDualNeuron","url","resp","fetch","ok","Error","status","statusText","buff","arrayBuffer","file","decode","assertDualNeuronFile","typeNeuron","etype","layer","me_combo","morph_class","morphology","mtype","region","synapse_class","orientation","morph","assertType","prefix","kind","assertTypeArray","subType","assertTypeMap","keys","assertTypeOptional","optionalType","assertTypeAlternative","altTypes","lastException","JSON","stringify","altType","ex","assertTypeTuple","types","assertArray","assertTypePartial","assertObject","attrib","assertTypeLiteral","literals","literal","item","startsWith","substring","assertTypeArrayWithDimension","pre","post","synapses","convertToNeuronData","convertToSynapseData","meCombo","morphClass","synapseClass","structuredClone","convertToNeuronSectionData","preSectionId","postSectionId","preGID","postGID","SECTION_TYPES","sectionType","isBase","rest","points","push","r","DualNeuronWithSynapsesView","combination","checkCombination","MAP","reverse","id","existingCombinations","has","reversedId","tmp","href","jsx_runtime","SwcViewer","loadMsgPackReversed","loadMsgPack","morphologies","colors","nodesPre","convertDualNeuronIntoCellNodes","nodesPost","radius","averageRadius","nodes","convertSynapsesIntoCellNodes","synapse","CellNodeType","Unknown","u","v","CellNodes","minRadius","roundness","setUV","Set","section","point","figureOutType","Soma","Axon","BasalDendrite","uv","Excitatory","Inhibitory","All","module","exports"],"sourceRoot":""}