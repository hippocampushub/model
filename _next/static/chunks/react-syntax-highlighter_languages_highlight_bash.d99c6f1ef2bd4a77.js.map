{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_highlight_bash.d99c6f1ef2bd4a77.js","mappings":"waAwKAA,EAAAC,OAAA,CAtIA,SAAAC,CAAA,EACA,IAAAC,EAAA,GAYAC,OAAAC,MAAA,CAAAF,EAAA,CACAG,UAAA,WACAC,SAAA,CACA,CAAOC,MAAAC,SA9BP,GAAAC,CAAA,EACA,IAAAC,EAAAD,EAAAE,GAAA,IAXA,EACA,iBAUAC,EAAAA,EARAC,EAAAC,MAAA,CAHA,MAWAC,IAAA,KACA,OAAAL,CACA,EA2BO,qBAGP,wBAjBA,CACAH,MAAA,OACAS,IAAA,KACAC,SAAA,CACA,OACA,CACAV,MAAA,KACAU,SAAA,CAAAf,EAAA,EAEA,EAUA,GAGA,IAAAgB,EAAA,CACAb,UAAA,QACAE,MAAA,OAAAS,IAAA,KACAC,SAAA,CAAAhB,EAAAkB,gBAAA,GAEAC,EAAA,CACAb,MAAA,iBACAc,OAAA,CACAJ,SAAA,CACAhB,EAAAqB,iBAAA,EACAf,MAAA,QACAS,IAAA,QACAX,UAAA,QACA,GACA,CAEA,EACAkB,EAAA,CACAlB,UAAA,SACAE,MAAA,IAAAS,IAAA,IACAC,SAAA,CACAhB,EAAAkB,gBAAA,CACAjB,EACAgB,EACA,EAEAA,EAAAD,QAAA,CAAAO,IAAA,CAAAD,GAUA,IAAAE,EAAA,CACAlB,MAAA,SACAS,IAAA,OACAC,SAAA,CACA,CAAQV,MAAA,gBAAAF,UAAA,UACRJ,EAAAyB,WAAA,CACAxB,EACA,EAaAyB,EAAA1B,EAAA2B,OAAA,EACAC,OAAA,4CACAC,UAAA,EACA,GACAC,EAAA,CACA1B,UAAA,WACAE,MAAA,4BACAyB,YAAA,GACAf,SAAA,CAAAhB,EAAAgC,OAAA,CAAAhC,EAAAiC,UAAA,EAA8C3B,MAAA,eAAoB,CAClEuB,UAAA,CACA,EAEA,OACAK,KAAA,OACAC,QAAA,aACAC,SAAA,CACAC,SAAA,gBACAC,QACA,+DACAC,QACA,aACAC,SAGA,2uBAcA,EACAxB,SAAA,CACAU,EACA1B,EAAA2B,OAAA,GACAG,EACAN,EACAxB,EAAAyC,iBAAA,CACAtB,EACAG,EA3EA,CACAlB,UAAA,GACAE,MAAA,KAEA,EACA,CACAF,UAAA,SACAE,MAAA,IAAAS,IAAA,GACA,EAsEAd,EACA,CAEA","sources":["webpack://_N_E/./node_modules/highlight.js/lib/languages/bash.js","webpack://_N_E/<anon>"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Bash\nAuthor: vah <vahtenberg@gmail.com>\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\nWebsite: https://www.gnu.org/software/bash/\nCategory: common\n*/\n\n/** @type LanguageFn */\nfunction bash(hljs) {\n  const VAR = {};\n  const BRACED_VAR = {\n    begin: /\\$\\{/,\n    end:/\\}/,\n    contains: [\n      \"self\",\n      {\n        begin: /:-/,\n        contains: [ VAR ]\n      } // default values\n    ]\n  };\n  Object.assign(VAR,{\n    className: 'variable',\n    variants: [\n      {begin: concat(/\\$[\\w\\d#@][\\w\\d_]*/,\n        // negative look-ahead tries to avoid matching patterns that are not\n        // Perl at all like $ident$, @ident@, etc.\n        `(?![\\\\w\\\\d])(?![$])`) },\n      BRACED_VAR\n    ]\n  });\n\n  const SUBST = {\n    className: 'subst',\n    begin: /\\$\\(/, end: /\\)/,\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  const HERE_DOC = {\n    begin: /<<-?\\s*(?=\\w+)/,\n    starts: {\n      contains: [\n        hljs.END_SAME_AS_BEGIN({\n          begin: /(\\w+)/,\n          end: /(\\w+)/,\n          className: 'string'\n        })\n      ]\n    }\n  };\n  const QUOTE_STRING = {\n    className: 'string',\n    begin: /\"/, end: /\"/,\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      VAR,\n      SUBST\n    ]\n  };\n  SUBST.contains.push(QUOTE_STRING);\n  const ESCAPED_QUOTE = {\n    className: '',\n    begin: /\\\\\"/\n\n  };\n  const APOS_STRING = {\n    className: 'string',\n    begin: /'/, end: /'/\n  };\n  const ARITHMETIC = {\n    begin: /\\$\\(\\(/,\n    end: /\\)\\)/,\n    contains: [\n      { begin: /\\d+#[0-9a-f]+/, className: \"number\" },\n      hljs.NUMBER_MODE,\n      VAR\n    ]\n  };\n  const SH_LIKE_SHELLS = [\n    \"fish\",\n    \"bash\",\n    \"zsh\",\n    \"sh\",\n    \"csh\",\n    \"ksh\",\n    \"tcsh\",\n    \"dash\",\n    \"scsh\",\n  ];\n  const KNOWN_SHEBANG = hljs.SHEBANG({\n    binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\n    relevance: 10\n  });\n  const FUNCTION = {\n    className: 'function',\n    begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\n    returnBegin: true,\n    contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\\w[\\w\\d_]*/})],\n    relevance: 0\n  };\n\n  return {\n    name: 'Bash',\n    aliases: ['sh', 'zsh'],\n    keywords: {\n      $pattern: /\\b[a-z._-]+\\b/,\n      keyword:\n        'if then else elif fi for while in do done case esac function',\n      literal:\n        'true false',\n      built_in:\n        // Shell built-ins\n        // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n        'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +\n        'trap umask unset ' +\n        // Bash built-ins\n        'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +\n        'read readarray source type typeset ulimit unalias ' +\n        // Shell modifiers\n        'set shopt ' +\n        // Zsh built-ins\n        'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +\n        'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +\n        'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +\n        'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +\n        'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +\n        'zpty zregexparse zsocket zstyle ztcp'\n    },\n    contains: [\n      KNOWN_SHEBANG, // to catch known shells and boost relevancy\n      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang\n      FUNCTION,\n      ARITHMETIC,\n      hljs.HASH_COMMENT_MODE,\n      HERE_DOC,\n      QUOTE_STRING,\n      ESCAPED_QUOTE,\n      APOS_STRING,\n      VAR\n    ]\n  };\n}\n\nmodule.exports = bash;\n"],"names":["module","exports","hljs","VAR","Object","assign","className","variants","begin","concat","args","joined","map","x","re","source","join","end","contains","SUBST","BACKSLASH_ESCAPE","HERE_DOC","starts","END_SAME_AS_BEGIN","QUOTE_STRING","push","ARITHMETIC","NUMBER_MODE","KNOWN_SHEBANG","SHEBANG","binary","relevance","FUNCTION","returnBegin","inherit","TITLE_MODE","name","aliases","keywords","$pattern","keyword","literal","built_in","HASH_COMMENT_MODE"],"sourceRoot":""}