{"version":3,"file":"static/chunks/8100.f66d58bada788223.js","mappings":"wjBAmCO,sBAAMA,oBAAoBC,EAAAA,SAAe,CAgB9C,MAAMC,oBAAqB,CACzB,GAAI,CAAC,IAAI,CAACC,SAAS,CAACC,OAAO,CAAE,OAE7B,IAAMC,EAAiB,MAAMC,MAC3B,GAAsBC,MAAA,CAAnBC,EAAAA,EAAkBA,CAAC,mBACtBC,IAAI,CAAC,GAASC,EAAIC,IAAI,IAElB,CAAEC,WAAAA,CAAU,CAAE,CAAGP,CAAc,CAAC,IAAI,CAACQ,KAAK,CAACC,IAAI,CAAC,CAChDC,EAAY,GAAyBH,MAAAA,CAAtBJ,EAAAA,EAAkBA,CAAC,KAAcD,MAAA,CAAXK,GAE3CI,QAAQC,GAAG,CAAC,gDAAuCZ,GACnDW,QAAQC,GAAG,CACT,uDACAL,EACAG,GAEFC,QAAQC,GAAG,CAAC,4CAAmC,IAAI,CAACJ,KAAK,EAGzDK,OAAOC,MAAM,CAACC,MAAM,CAACL,GAClBN,IAAI,CACH,IAWE,IAAI,CAACY,QAAQ,CAAC,CACZC,MAAO,KACPC,QAAS,EACX,GACA,IAAI,CAACC,aAAa,CAAGC,EAAaC,OAAO,CAAC,CACxCC,IAAK,IAAI,CAACxB,SAAS,CAACC,OAAO,CAC3BwB,YAAa,IAAI,CAACf,KAAK,CAACe,WAAW,CACnCC,SAAU,IAAI,CAAChB,KAAK,CAACgB,QAAQ,EAEjC,GAEDC,KAAK,CAAC,IACLd,QAAQC,GAAG,CAACK,GACZ,IAAI,CAACD,QAAQ,CAAC,CAAEC,MAAAA,EAAOC,QAAS,EAAM,EACxC,EACJ,CAEAQ,kBAAkBT,CAAY,CAAE,CAC9B,IAAI,CAACD,QAAQ,CAAC,CAAEC,MAAAA,EAAOC,QAAS,EAAM,EACxC,CAGAS,oBAAoBC,CAAgC,CAAE,CAKlDA,CAAAA,EAAUJ,QAAQ,GAAK,IAAI,CAAChB,KAAK,CAACgB,QAAQ,EAC1CI,EAAUnB,IAAI,GAAK,IAAI,CAACD,KAAK,CAACC,IAAI,GAElC,IAAI,CAACZ,kBAAkB,EAE3B,CAEAgC,mBAAoB,CAClB,IAAI,CAAChC,kBAAkB,EACzB,CAEAiC,sBAAuB,CACjB,IAAI,CAACX,aAAa,EAAIY,IAAW,IAAI,CAACZ,aAAa,GACrD,IAAI,CAACA,aAAa,EAEtB,CAEAa,QAAS,CACP,IAAMC,EAAY,IAAI,CAACzB,KAAK,CAACyB,SAAS,EAAI,GAE1C,MACE,GAAAC,EAAAC,GAAA,EAACC,MAAAA,CAAIH,UAAW,IAAc/B,MAAA,CAAV+B,GAAaX,IAAK,IAAI,CAACxB,SAAS,EAaxD,CAtGAuC,YAAY7B,CAA4B,CAAE,CACxC,KAAK,CAACA,GACN,IAAI,CAAC8B,KAAK,CAAG,CAAErB,MAAO,KAAMC,QAAS,EAAK,EAC1C,IAAI,CAACpB,SAAS,CAAGF,EAAAA,SAAe,GAChC,IAAI,CAACuB,aAAa,CAAG,KAErBoB,CAAAA,EAAAA,EAAAA,EAAAA,EAAU1B,OAAOC,MAAM,CA3BzB,6JA4BA,CAgGF,CAEA0B,CAAAA,EAAA,QAAe7C","sources":["webpack://_N_E/./src/components/NexusPlugin/nexus-plugin.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import * as React from \"react\";\nimport invariant from \"ts-invariant\";\nimport isFunction from \"lodash/isFunction\";\nimport { NexusClient, Resource } from \"@bbp/nexus-sdk\";\n// import { Result } from 'antd';\n\n// import Loading from '../components/Loading';\nimport { nexusPluginBaseUrl } from \"../../config\";\n\nconst PluginError: React.FC<{ error: Error }> = ({ error }) => {\n  return (\n    <p>Plugin failed to render</p>\n    // <Result\n    //   status=\"warning\"\n    //   title=\"Plugin failed to render\"\n    //   subTitle={error.message}\n    // />\n  );\n};\n\nconst warningMessage =\n  \"SystemJS not found. \" +\n  \"To load plugins, Nexus Web requires SystemJS to be available globally.\" +\n  \" You can find out more here https://github.com/systemjs/systemjs\";\n\nexport type NexusPluginProps<T> = {\n  name: string;\n  resource: Resource<T>;\n  className?: string;\n};\n\nexport type NexusPluginClassProps<T = any> = NexusPluginProps<T> & {\n  nexusClient: NexusClient;\n};\n\nexport class NexusPlugin extends React.Component<\n  NexusPluginClassProps,\n  { error: Error | null; loading: boolean }\n> {\n  private container: React.RefObject<HTMLDivElement>;\n  private destroyPlugin: (() => void) | null;\n\n  constructor(props: NexusPluginClassProps) {\n    super(props);\n    this.state = { error: null, loading: true };\n    this.container = React.createRef();\n    this.destroyPlugin = null;\n    // @ts-ignore\n    invariant(window.System, warningMessage);\n  }\n\n  async loadExternalPlugin() {\n    if (!this.container.current) return;\n\n    const pluginManifest = await fetch(\n      `${nexusPluginBaseUrl}/manifest.json`\n    ).then((res) => res.json());\n\n    const { modulePath } = pluginManifest[this.props.name];\n    const moduleUrl = `${nexusPluginBaseUrl}/${modulePath}`;\n\n    console.log(\"ðŸš€ [nexus-plugin] pluginManifest = \", pluginManifest); // @FIXME: Remove this line written on 2024-10-04 at 16:08\n    console.log(\n      \"ðŸš€ [nexus-plugin] modulePath, moduleUrl = \",\n      modulePath,\n      moduleUrl\n    ); // @FIXME: Remove this line written on 2024-10-04 at 16:04\n    console.log(\"ðŸš€ [nexus-plugin] this.props = \", this.props); // @FIXME: Remove this line written on 2024-10-04 at 16:08\n\n    // @ts-ignore\n    window.System.import(moduleUrl)\n      .then(\n        (pluginModule: {\n          default: ({\n            ref,\n            nexusClient,\n            resource,\n          }: {\n            ref: HTMLDivElement | null;\n            nexusClient?: NexusClient;\n            resource: Resource;\n          }) => () => void;\n        }) => {\n          this.setState({\n            error: null,\n            loading: false,\n          });\n          this.destroyPlugin = pluginModule.default({\n            ref: this.container.current,\n            nexusClient: this.props.nexusClient,\n            resource: this.props.resource,\n          });\n        }\n      )\n      .catch((error: Error) => {\n        console.log(error);\n        this.setState({ error, loading: false });\n      });\n  }\n\n  componentDidCatch(error: Error) {\n    this.setState({ error, loading: false });\n  }\n\n  // eslint-disable-next-line react/no-deprecated\n  componentWillUpdate(prevProps: NexusPluginClassProps) {\n    // Reload the plugin(and pass in new props to it) when props change\n    // NOTE: will not reload the plugin if nexusClient or goToResource changes\n    // otherwise it will cause too many reloads\n    if (\n      prevProps.resource !== this.props.resource ||\n      prevProps.name !== this.props.name\n    ) {\n      this.loadExternalPlugin();\n    }\n  }\n\n  componentDidMount() {\n    this.loadExternalPlugin();\n  }\n\n  componentWillUnmount() {\n    if (this.destroyPlugin && isFunction(this.destroyPlugin)) {\n      this.destroyPlugin();\n    }\n  }\n\n  render() {\n    const className = this.props.className || \"\";\n\n    return (\n      <div className={` ${className}`} ref={this.container} />\n      // <Loading\n      //   size=\"big\"\n      //   loading={this.state.loading}\n      //   loadingMessage={<h3>Loading {this.props.pluginName || 'Plugin'}</h3>}\n      // >\n      //   {this.state.error ? (\n      //     <PluginError error={this.state.error} />\n      //   ) : (\n      //     <div className=\"remote-component\" ref={this.container}></div>\n      //   )}\n      // </Loading>\n    );\n  }\n}\n\nexport default NexusPlugin;\n"],"names":["NexusPlugin","React","loadExternalPlugin","container","current","pluginManifest","fetch","concat","nexusPluginBaseUrl","then","res","json","modulePath","props","name","moduleUrl","console","log","window","System","import","setState","error","loading","destroyPlugin","pluginModule","default","ref","nexusClient","resource","catch","componentDidCatch","componentWillUpdate","prevProps","componentDidMount","componentWillUnmount","isFunction","render","className","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","constructor","state","invariant","__webpack_exports__"],"sourceRoot":""}