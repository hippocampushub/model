{"version":3,"file":"static/chunks/9242-1a3b17daad2af631.js","mappings":"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","sources":["webpack://_N_E/./node_modules/three/examples/jsm/geometries/TextGeometry.js","webpack://_N_E/./node_modules/three/examples/jsm/loaders/FontLoader.js","webpack://_N_E/./node_modules/three/examples/jsm/loaders/OBJLoader.js","webpack://_N_E/<anon>"],"sourcesContent":["/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\nimport {\n\tExtrudeGeometry\n} from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n\n\tconstructor( text, parameters = {} ) {\n\n\t\tconst font = parameters.font;\n\n\t\tif ( font === undefined ) {\n\n\t\t\tsuper(); // generate default extrude geometry\n\n\t\t} else {\n\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\n\n\t\t\t// translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t\t// defaults\n\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\t\tsuper( shapes, parameters );\n\n\t\t}\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n}\n\n\nexport { TextGeometry };\n","import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\nclass FontLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst font = scope.parse( JSON.parse( text ) );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.isFont = true;\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tshapes.push( ...paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nexport { FontLoader, Font };\n","import {\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLineBasicMaterial,\n\tLineSegments,\n\tLoader,\n\tMaterial,\n\tMesh,\n\tMeshPhongMaterial,\n\tPoints,\n\tPointsMaterial,\n\tVector3,\n\tColor\n} from 'three';\n\n// o object_name | g group_name\nconst _object_pattern = /^[og]\\s*(.+)?/;\n// mtllib file_reference\nconst _material_library_pattern = /^mtllib /;\n// usemtl material_name\nconst _material_use_pattern = /^usemtl /;\n// usemap map_name\nconst _map_use_pattern = /^usemap /;\nconst _face_vertex_data_separator_pattern = /\\s+/;\n\nconst _vA = new Vector3();\nconst _vB = new Vector3();\nconst _vC = new Vector3();\n\nconst _ab = new Vector3();\nconst _cb = new Vector3();\n\nconst _color = new Color();\n\nfunction ParserState() {\n\n\tconst state = {\n\t\tobjects: [],\n\t\tobject: {},\n\n\t\tvertices: [],\n\t\tnormals: [],\n\t\tcolors: [],\n\t\tuvs: [],\n\n\t\tmaterials: {},\n\t\tmaterialLibraries: [],\n\n\t\tstartObject: function ( name, fromDeclaration ) {\n\n\t\t\t// If the current object (initial from reset) is not from a g/o declaration in the parsed\n\t\t\t// file. We need to use it for the first parsed g/o to keep things in sync.\n\t\t\tif ( this.object && this.object.fromDeclaration === false ) {\n\n\t\t\t\tthis.object.name = name;\n\t\t\t\tthis.object.fromDeclaration = ( fromDeclaration !== false );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );\n\n\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\tthis.object._finalize( true );\n\n\t\t\t}\n\n\t\t\tthis.object = {\n\t\t\t\tname: name || '',\n\t\t\t\tfromDeclaration: ( fromDeclaration !== false ),\n\n\t\t\t\tgeometry: {\n\t\t\t\t\tvertices: [],\n\t\t\t\t\tnormals: [],\n\t\t\t\t\tcolors: [],\n\t\t\t\t\tuvs: [],\n\t\t\t\t\thasUVIndices: false\n\t\t\t\t},\n\t\t\t\tmaterials: [],\n\t\t\t\tsmooth: true,\n\n\t\t\t\tstartMaterial: function ( name, libraries ) {\n\n\t\t\t\t\tconst previous = this._finalize( false );\n\n\t\t\t\t\t// New usemtl declaration overwrites an inherited material, except if faces were declared\n\t\t\t\t\t// after the material, then it must be preserved for proper MultiMaterial continuation.\n\t\t\t\t\tif ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {\n\n\t\t\t\t\t\tthis.materials.splice( previous.index, 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst material = {\n\t\t\t\t\t\tindex: this.materials.length,\n\t\t\t\t\t\tname: name || '',\n\t\t\t\t\t\tmtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),\n\t\t\t\t\t\tsmooth: ( previous !== undefined ? previous.smooth : this.smooth ),\n\t\t\t\t\t\tgroupStart: ( previous !== undefined ? previous.groupEnd : 0 ),\n\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\tinherited: false,\n\n\t\t\t\t\t\tclone: function ( index ) {\n\n\t\t\t\t\t\t\tconst cloned = {\n\t\t\t\t\t\t\t\tindex: ( typeof index === 'number' ? index : this.index ),\n\t\t\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\t\t\tmtllib: this.mtllib,\n\t\t\t\t\t\t\t\tsmooth: this.smooth,\n\t\t\t\t\t\t\t\tgroupStart: 0,\n\t\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\t\tinherited: false\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcloned.clone = this.clone.bind( cloned );\n\t\t\t\t\t\t\treturn cloned;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.materials.push( material );\n\n\t\t\t\t\treturn material;\n\n\t\t\t\t},\n\n\t\t\t\tcurrentMaterial: function () {\n\n\t\t\t\t\tif ( this.materials.length > 0 ) {\n\n\t\t\t\t\t\treturn this.materials[ this.materials.length - 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t},\n\n\t\t\t\t_finalize: function ( end ) {\n\n\t\t\t\t\tconst lastMultiMaterial = this.currentMaterial();\n\t\t\t\t\tif ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {\n\n\t\t\t\t\t\tlastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n\t\t\t\t\t\tlastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n\t\t\t\t\t\tlastMultiMaterial.inherited = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\t\t\t\t\tif ( end && this.materials.length > 1 ) {\n\n\t\t\t\t\t\tfor ( let mi = this.materials.length - 1; mi >= 0; mi -- ) {\n\n\t\t\t\t\t\t\tif ( this.materials[ mi ].groupCount <= 0 ) {\n\n\t\t\t\t\t\t\t\tthis.materials.splice( mi, 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Guarantee at least one empty material, this makes the creation later more straight forward.\n\t\t\t\t\tif ( end && this.materials.length === 0 ) {\n\n\t\t\t\t\t\tthis.materials.push( {\n\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\tsmooth: this.smooth\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn lastMultiMaterial;\n\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Inherit previous objects material.\n\t\t\t// Spec tells us that a declared material must be set to all objects until a new material is declared.\n\t\t\t// If a usemtl declaration is encountered while this new object is being parsed, it will\n\t\t\t// overwrite the inherited material. Exception being that there was already face declarations\n\t\t\t// to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n\t\t\tif ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {\n\n\t\t\t\tconst declared = previousMaterial.clone( 0 );\n\t\t\t\tdeclared.inherited = true;\n\t\t\t\tthis.object.materials.push( declared );\n\n\t\t\t}\n\n\t\t\tthis.objects.push( this.object );\n\n\t\t},\n\n\t\tfinalize: function () {\n\n\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\tthis.object._finalize( true );\n\n\t\t\t}\n\n\t\t},\n\n\t\tparseVertexIndex: function ( value, len ) {\n\n\t\t\tconst index = parseInt( value, 10 );\n\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t},\n\n\t\tparseNormalIndex: function ( value, len ) {\n\n\t\t\tconst index = parseInt( value, 10 );\n\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t},\n\n\t\tparseUVIndex: function ( value, len ) {\n\n\t\t\tconst index = parseInt( value, 10 );\n\t\t\treturn ( index >= 0 ? index - 1 : index + len / 2 ) * 2;\n\n\t\t},\n\n\t\taddVertex: function ( a, b, c ) {\n\n\t\t\tconst src = this.vertices;\n\t\t\tconst dst = this.object.geometry.vertices;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t},\n\n\t\taddVertexPoint: function ( a ) {\n\n\t\t\tconst src = this.vertices;\n\t\t\tconst dst = this.object.geometry.vertices;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t},\n\n\t\taddVertexLine: function ( a ) {\n\n\t\t\tconst src = this.vertices;\n\t\t\tconst dst = this.object.geometry.vertices;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t},\n\n\t\taddNormal: function ( a, b, c ) {\n\n\t\t\tconst src = this.normals;\n\t\t\tconst dst = this.object.geometry.normals;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t},\n\n\t\taddFaceNormal: function ( a, b, c ) {\n\n\t\t\tconst src = this.vertices;\n\t\t\tconst dst = this.object.geometry.normals;\n\n\t\t\t_vA.fromArray( src, a );\n\t\t\t_vB.fromArray( src, b );\n\t\t\t_vC.fromArray( src, c );\n\n\t\t\t_cb.subVectors( _vC, _vB );\n\t\t\t_ab.subVectors( _vA, _vB );\n\t\t\t_cb.cross( _ab );\n\n\t\t\t_cb.normalize();\n\n\t\t\tdst.push( _cb.x, _cb.y, _cb.z );\n\t\t\tdst.push( _cb.x, _cb.y, _cb.z );\n\t\t\tdst.push( _cb.x, _cb.y, _cb.z );\n\n\t\t},\n\n\t\taddColor: function ( a, b, c ) {\n\n\t\t\tconst src = this.colors;\n\t\t\tconst dst = this.object.geometry.colors;\n\n\t\t\tif ( src[ a ] !== undefined ) dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\tif ( src[ b ] !== undefined ) dst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\tif ( src[ c ] !== undefined ) dst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t},\n\n\t\taddUV: function ( a, b, c ) {\n\n\t\t\tconst src = this.uvs;\n\t\t\tconst dst = this.object.geometry.uvs;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ] );\n\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ] );\n\n\t\t},\n\n\t\taddDefaultUV: function () {\n\n\t\t\tconst dst = this.object.geometry.uvs;\n\n\t\t\tdst.push( 0, 0 );\n\t\t\tdst.push( 0, 0 );\n\t\t\tdst.push( 0, 0 );\n\n\t\t},\n\n\t\taddUVLine: function ( a ) {\n\n\t\t\tconst src = this.uvs;\n\t\t\tconst dst = this.object.geometry.uvs;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\n\t\t},\n\n\t\taddFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {\n\n\t\t\tconst vLen = this.vertices.length;\n\n\t\t\tlet ia = this.parseVertexIndex( a, vLen );\n\t\t\tlet ib = this.parseVertexIndex( b, vLen );\n\t\t\tlet ic = this.parseVertexIndex( c, vLen );\n\n\t\t\tthis.addVertex( ia, ib, ic );\n\t\t\tthis.addColor( ia, ib, ic );\n\n\t\t\t// normals\n\n\t\t\tif ( na !== undefined && na !== '' ) {\n\n\t\t\t\tconst nLen = this.normals.length;\n\n\t\t\t\tia = this.parseNormalIndex( na, nLen );\n\t\t\t\tib = this.parseNormalIndex( nb, nLen );\n\t\t\t\tic = this.parseNormalIndex( nc, nLen );\n\n\t\t\t\tthis.addNormal( ia, ib, ic );\n\n\t\t\t} else {\n\n\t\t\t\tthis.addFaceNormal( ia, ib, ic );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tif ( ua !== undefined && ua !== '' ) {\n\n\t\t\t\tconst uvLen = this.uvs.length;\n\n\t\t\t\tia = this.parseUVIndex( ua, uvLen );\n\t\t\t\tib = this.parseUVIndex( ub, uvLen );\n\t\t\t\tic = this.parseUVIndex( uc, uvLen );\n\n\t\t\t\tthis.addUV( ia, ib, ic );\n\n\t\t\t\tthis.object.geometry.hasUVIndices = true;\n\n\t\t\t} else {\n\n\t\t\t\t// add placeholder values (for inconsistent face definitions)\n\n\t\t\t\tthis.addDefaultUV();\n\n\t\t\t}\n\n\t\t},\n\n\t\taddPointGeometry: function ( vertices ) {\n\n\t\t\tthis.object.geometry.type = 'Points';\n\n\t\t\tconst vLen = this.vertices.length;\n\n\t\t\tfor ( let vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\tconst index = this.parseVertexIndex( vertices[ vi ], vLen );\n\n\t\t\t\tthis.addVertexPoint( index );\n\t\t\t\tthis.addColor( index );\n\n\t\t\t}\n\n\t\t},\n\n\t\taddLineGeometry: function ( vertices, uvs ) {\n\n\t\t\tthis.object.geometry.type = 'Line';\n\n\t\t\tconst vLen = this.vertices.length;\n\t\t\tconst uvLen = this.uvs.length;\n\n\t\t\tfor ( let vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\tthis.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t}\n\n\t\t\tfor ( let uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {\n\n\t\t\t\tthis.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tstate.startObject( '', false );\n\n\treturn state;\n\n}\n\n//\n\nclass OBJLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.materials = null;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tsetMaterials( materials ) {\n\n\t\tthis.materials = materials;\n\n\t\treturn this;\n\n\t}\n\n\tparse( text ) {\n\n\t\tconst state = new ParserState();\n\n\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t}\n\n\t\tif ( text.indexOf( '\\\\\\n' ) !== - 1 ) {\n\n\t\t\t// join lines separated by a line continuation character (\\)\n\t\t\ttext = text.replace( /\\\\\\n/g, '' );\n\n\t\t}\n\n\t\tconst lines = text.split( '\\n' );\n\t\tlet result = [];\n\n\t\tfor ( let i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\tconst line = lines[ i ].trimStart();\n\n\t\t\tif ( line.length === 0 ) continue;\n\n\t\t\tconst lineFirstChar = line.charAt( 0 );\n\n\t\t\t// @todo invoke passed in handler if any\n\t\t\tif ( lineFirstChar === '#' ) continue;\n\n\t\t\tif ( lineFirstChar === 'v' ) {\n\n\t\t\t\tconst data = line.split( _face_vertex_data_separator_pattern );\n\n\t\t\t\tswitch ( data[ 0 ] ) {\n\n\t\t\t\t\tcase 'v':\n\t\t\t\t\t\tstate.vertices.push(\n\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif ( data.length >= 7 ) {\n\n\t\t\t\t\t\t\t_color.setRGB(\n\t\t\t\t\t\t\t\tparseFloat( data[ 4 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 5 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 6 ] )\n\t\t\t\t\t\t\t).convertSRGBToLinear();\n\n\t\t\t\t\t\t\tstate.colors.push( _color.r, _color.g, _color.b );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// if no colors are defined, add placeholders so color and vertex indices match\n\n\t\t\t\t\t\t\tstate.colors.push( undefined, undefined, undefined );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vn':\n\t\t\t\t\t\tstate.normals.push(\n\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vt':\n\t\t\t\t\t\tstate.uvs.push(\n\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\tparseFloat( data[ 2 ] )\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( lineFirstChar === 'f' ) {\n\n\t\t\t\tconst lineData = line.slice( 1 ).trim();\n\t\t\t\tconst vertexData = lineData.split( _face_vertex_data_separator_pattern );\n\t\t\t\tconst faceVertices = [];\n\n\t\t\t\t// Parse the face vertex data into an easy to work with format\n\n\t\t\t\tfor ( let j = 0, jl = vertexData.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst vertex = vertexData[ j ];\n\n\t\t\t\t\tif ( vertex.length > 0 ) {\n\n\t\t\t\t\t\tconst vertexParts = vertex.split( '/' );\n\t\t\t\t\t\tfaceVertices.push( vertexParts );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\t\t\t\tconst v1 = faceVertices[ 0 ];\n\n\t\t\t\tfor ( let j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {\n\n\t\t\t\t\tconst v2 = faceVertices[ j ];\n\t\t\t\t\tconst v3 = faceVertices[ j + 1 ];\n\n\t\t\t\t\tstate.addFace(\n\t\t\t\t\t\tv1[ 0 ], v2[ 0 ], v3[ 0 ],\n\t\t\t\t\t\tv1[ 1 ], v2[ 1 ], v3[ 1 ],\n\t\t\t\t\t\tv1[ 2 ], v2[ 2 ], v3[ 2 ]\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} else if ( lineFirstChar === 'l' ) {\n\n\t\t\t\tconst lineParts = line.substring( 1 ).trim().split( ' ' );\n\t\t\t\tlet lineVertices = [];\n\t\t\t\tconst lineUVs = [];\n\n\t\t\t\tif ( line.indexOf( '/' ) === - 1 ) {\n\n\t\t\t\t\tlineVertices = lineParts;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( let li = 0, llen = lineParts.length; li < llen; li ++ ) {\n\n\t\t\t\t\t\tconst parts = lineParts[ li ].split( '/' );\n\n\t\t\t\t\t\tif ( parts[ 0 ] !== '' ) lineVertices.push( parts[ 0 ] );\n\t\t\t\t\t\tif ( parts[ 1 ] !== '' ) lineUVs.push( parts[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.addLineGeometry( lineVertices, lineUVs );\n\n\t\t\t} else if ( lineFirstChar === 'p' ) {\n\n\t\t\t\tconst lineData = line.slice( 1 ).trim();\n\t\t\t\tconst pointData = lineData.split( ' ' );\n\n\t\t\t\tstate.addPointGeometry( pointData );\n\n\t\t\t} else if ( ( result = _object_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t// o object_name\n\t\t\t\t// or\n\t\t\t\t// g group_name\n\n\t\t\t\t// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n\t\t\t\t// let name = result[ 0 ].slice( 1 ).trim();\n\t\t\t\tconst name = ( ' ' + result[ 0 ].slice( 1 ).trim() ).slice( 1 );\n\n\t\t\t\tstate.startObject( name );\n\n\t\t\t} else if ( _material_use_pattern.test( line ) ) {\n\n\t\t\t\t// material\n\n\t\t\t\tstate.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );\n\n\t\t\t} else if ( _material_library_pattern.test( line ) ) {\n\n\t\t\t\t// mtl file\n\n\t\t\t\tstate.materialLibraries.push( line.substring( 7 ).trim() );\n\n\t\t\t} else if ( _map_use_pattern.test( line ) ) {\n\n\t\t\t\t// the line is parsed but ignored since the loader assumes textures are defined MTL files\n\t\t\t\t// (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n\n\t\t\t\tconsole.warn( 'THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.' );\n\n\t\t\t} else if ( lineFirstChar === 's' ) {\n\n\t\t\t\tresult = line.split( ' ' );\n\n\t\t\t\t// smooth shading\n\n\t\t\t\t// @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n\t\t\t\t// but does not define a usemtl for each face set.\n\t\t\t\t// This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n\t\t\t\t// This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n\t\t\t\t// where explicit usemtl defines geometry groups.\n\t\t\t\t// Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n\t\t\t\t/*\n\t\t\t\t\t * http://paulbourke.net/dataformats/obj/\n\t\t\t\t\t *\n\t\t\t\t\t * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n\t\t\t\t\t * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n\t\t\t\t\t * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n\t\t\t\t\t * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n\t\t\t\t\t * than 0.\"\n\t\t\t\t\t */\n\t\t\t\tif ( result.length > 1 ) {\n\n\t\t\t\t\tconst value = result[ 1 ].trim().toLowerCase();\n\t\t\t\t\tstate.object.smooth = ( value !== '0' && value !== 'off' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ZBrush can produce \"s\" lines #11707\n\t\t\t\t\tstate.object.smooth = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst material = state.object.currentMaterial();\n\t\t\t\tif ( material ) material.smooth = state.object.smooth;\n\n\t\t\t} else {\n\n\t\t\t\t// Handle null terminated files without exception\n\t\t\t\tif ( line === '\\0' ) continue;\n\n\t\t\t\tconsole.warn( 'THREE.OBJLoader: Unexpected line: \"' + line + '\"' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.finalize();\n\n\t\tconst container = new Group();\n\t\tcontainer.materialLibraries = [].concat( state.materialLibraries );\n\n\t\tconst hasPrimitives = ! ( state.objects.length === 1 && state.objects[ 0 ].geometry.vertices.length === 0 );\n\n\t\tif ( hasPrimitives === true ) {\n\n\t\t\tfor ( let i = 0, l = state.objects.length; i < l; i ++ ) {\n\n\t\t\t\tconst object = state.objects[ i ];\n\t\t\t\tconst geometry = object.geometry;\n\t\t\t\tconst materials = object.materials;\n\t\t\t\tconst isLine = ( geometry.type === 'Line' );\n\t\t\t\tconst isPoints = ( geometry.type === 'Points' );\n\t\t\t\tlet hasVertexColors = false;\n\n\t\t\t\t// Skip o/g line declarations that did not follow with any faces\n\t\t\t\tif ( geometry.vertices.length === 0 ) continue;\n\n\t\t\t\tconst buffergeometry = new BufferGeometry();\n\n\t\t\t\tbuffergeometry.setAttribute( 'position', new Float32BufferAttribute( geometry.vertices, 3 ) );\n\n\t\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'normal', new Float32BufferAttribute( geometry.normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\t\thasVertexColors = true;\n\t\t\t\t\tbuffergeometry.setAttribute( 'color', new Float32BufferAttribute( geometry.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.hasUVIndices === true ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'uv', new Float32BufferAttribute( geometry.uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Create materials\n\n\t\t\t\tconst createdMaterials = [];\n\n\t\t\t\tfor ( let mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\tconst sourceMaterial = materials[ mi ];\n\t\t\t\t\tconst materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n\t\t\t\t\tlet material = state.materials[ materialHash ];\n\n\t\t\t\t\tif ( this.materials !== null ) {\n\n\t\t\t\t\t\tmaterial = this.materials.create( sourceMaterial.name );\n\n\t\t\t\t\t\t// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\t\t\t\t\t\tif ( isLine && material && ! ( material instanceof LineBasicMaterial ) ) {\n\n\t\t\t\t\t\t\tconst materialLine = new LineBasicMaterial();\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialLine, material );\n\t\t\t\t\t\t\tmaterialLine.color.copy( material.color );\n\t\t\t\t\t\t\tmaterial = materialLine;\n\n\t\t\t\t\t\t} else if ( isPoints && material && ! ( material instanceof PointsMaterial ) ) {\n\n\t\t\t\t\t\t\tconst materialPoints = new PointsMaterial( { size: 10, sizeAttenuation: false } );\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialPoints, material );\n\t\t\t\t\t\t\tmaterialPoints.color.copy( material.color );\n\t\t\t\t\t\t\tmaterialPoints.map = material.map;\n\t\t\t\t\t\t\tmaterial = materialPoints;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material === undefined ) {\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmaterial = new LineBasicMaterial();\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmaterial = new PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterial = new MeshPhongMaterial();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterial.name = sourceMaterial.name;\n\t\t\t\t\t\tmaterial.flatShading = sourceMaterial.smooth ? false : true;\n\t\t\t\t\t\tmaterial.vertexColors = hasVertexColors;\n\n\t\t\t\t\t\tstate.materials[ materialHash ] = material;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcreatedMaterials.push( material );\n\n\t\t\t\t}\n\n\t\t\t\t// Create mesh\n\n\t\t\t\tlet mesh;\n\n\t\t\t\tif ( createdMaterials.length > 1 ) {\n\n\t\t\t\t\tfor ( let mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\tconst sourceMaterial = materials[ mi ];\n\t\t\t\t\t\tbuffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = object.name;\n\n\t\t\t\tcontainer.add( mesh );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// if there is only the default parser state object with no geometry data, interpret data as point cloud\n\n\t\t\tif ( state.vertices.length > 0 ) {\n\n\t\t\t\tconst material = new PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\tconst buffergeometry = new BufferGeometry();\n\n\t\t\t\tbuffergeometry.setAttribute( 'position', new Float32BufferAttribute( state.vertices, 3 ) );\n\n\t\t\t\tif ( state.colors.length > 0 && state.colors[ 0 ] !== undefined ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'color', new Float32BufferAttribute( state.colors, 3 ) );\n\t\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst points = new Points( buffergeometry, material );\n\t\t\t\tcontainer.add( points );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn container;\n\n\t}\n\n}\n\nexport { OBJLoader };\n"],"names":["TextGeometry","three__WEBPACK_IMPORTED_MODULE_0__","O7d","constructor","text","parameters","font","undefined","shapes","generateShapes","size","depth","height","bevelThickness","bevelSize","bevelEnabled","type","FontLoader","aNw","manager","load","url","onLoad","onProgress","onError","scope","loader","hH6","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","parse","JSON","json","Font","data","isFont","paths","createPaths","chars","Array","from","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","length","char","ret","createPath","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","glyph","glyphs","console","error","familyName","T_1","o","outline","_cachedOutline","split","l","action","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","push","p","pl","toShapes","_object_pattern","_material_library_pattern","_material_use_pattern","_map_use_pattern","_face_vertex_data_separator_pattern","_vA","Pa4","_vB","_vC","_ab","_cb","_color","Ilk","ParserState","state","objects","object","vertices","normals","colors","uvs","materials","materialLibraries","startObject","name","fromDeclaration","previousMaterial","currentMaterial","_finalize","geometry","hasUVIndices","smooth","startMaterial","libraries","previous","inherited","groupCount","splice","index","material","mtllib","isArray","groupStart","groupEnd","clone","cloned","bind","end","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","value","len","parseInt","parseNormalIndex","parseUVIndex","addVertex","a","b","c","src","dst","addVertexPoint","addVertexLine","addNormal","addFaceNormal","fromArray","subVectors","cross","normalize","z","addColor","addUV","addDefaultUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ia","ib","ic","nLen","uvLen","addPointGeometry","vi","addLineGeometry","uvi","OBJLoader","e","itemError","setMaterials","indexOf","replace","lines","result","line","trimStart","lineFirstChar","charAt","parseFloat","setRGB","convertSRGBToLinear","r","g","lineData","slice","trim","vertexData","faceVertices","j","jl","vertex","vertexParts","v1","v2","v3","lineParts","substring","lineVertices","lineUVs","li","llen","parts","pointData","exec","test","warn","toLowerCase","container","ZAu","concat","hasPrimitives","mesh","isLine","isPoints","hasVertexColors","buffergeometry","u9r","setAttribute","a$l","createdMaterials","miLen","sourceMaterial","materialHash","create","nls","UY4","materialPoints","sizeAttenuation","F5T","prototype","copy","call","color","map","materialLine","xoR","flatShading","vertexColors","addGroup","ejS","woe","Kj0","add","points"],"sourceRoot":""}