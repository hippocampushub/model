{"version":3,"file":"static/chunks/pages/digital-reconstructions/connection-anatomy-156be9b9e1e39cac.js","mappings":"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","sources":["webpack://_N_E/?9778","webpack://_N_E/./src/components/LaminarGraph/index.tsx","webpack://_N_E/./src/hoc/with-preselection.tsx","webpack://_N_E/./src/views/3_digital-reconstructions/ConnectionAnatomy.tsx","webpack://_N_E/./src/pages/digital-reconstructions/connection-anatomy.tsx","webpack://_N_E/./node_modules/react-chartjs-2/dist/index.js","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/digital-reconstructions/connection-anatomy\",\n      function () {\n        return require(\"private-next-pages/digital-reconstructions/connection-anatomy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/digital-reconstructions/connection-anatomy\"])\n      });\n    }\n  ","import React, { useEffect, useRef, useMemo, useCallback } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport { graphTheme } from '@/constants';\nimport DownloadButton from '../DownloadButton';\n\nChart.register(...registerables);\n\nconst LaminarGraph = ({ data, height = 500, title, yAxisLabel, theme = 3 }) => {\n    const chartRef = useRef<HTMLCanvasElement>(null);\n    const chartInstance = useRef<Chart | null>(null);\n\n    const getColor = useCallback((index) => {\n        const colors = [graphTheme.blue, graphTheme.yellow, graphTheme.green, graphTheme.red, graphTheme.purple];\n        return colors[index % colors.length];\n    }, []);\n\n    const datasets = useMemo(() => {\n        if (!data || !data.value_map) return [];\n\n        const layers = Object.keys(data.value_map);\n        const cellTypes = Object.keys(data.value_map[layers[0]]);\n\n        return layers.map((layer, index) => ({\n            label: `${layer} (Model)`,\n            data: cellTypes.map(cellType => (data.value_map[layer][cellType] || 0) * 100),\n            backgroundColor: getColor(index),\n            stack: 'Model',\n        }));\n    }, [data, getColor]);\n\n    const hachurePlugin = {\n        id: 'hachurePlugin',\n        afterDatasetsDraw(chart, args, options) {\n            const { ctx, data } = chart;\n            ctx.save();\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = 'white';\n\n            data.datasets.forEach((dataset, datasetIndex) => {\n                if (dataset.stack === 'Exp') {\n                    const meta = chart.getDatasetMeta(datasetIndex);\n                    meta.data.forEach((bar, index) => {\n                        if (dataset.data[index] > 0) {\n                            const { x, y, width, height } = bar.getProps(['x', 'y', 'width', 'height']);\n                            ctx.save();\n                            ctx.beginPath();\n                            ctx.rect(x - width / 2, y, width, height);\n                            ctx.clip();\n                            const lineSpacing = 4;\n                            for (let i = -width; i < height + width; i += lineSpacing) {\n                                ctx.moveTo(x - width / 2, y + i);\n                                ctx.lineTo(x + width / 2, y + i - width);\n                            }\n                            ctx.stroke();\n                            ctx.restore();\n                        }\n                    });\n                }\n            });\n            ctx.restore();\n        }\n    };\n\n    useEffect(() => {\n        if (!chartRef.current || !data || !data.value_map) return;\n\n        const ctx = chartRef.current.getContext('2d');\n        if (!ctx) return; // Ensure that ctx is not null\n\n        const cellTypes = Object.keys(data.value_map[Object.keys(data.value_map)[0]]);\n\n        if (chartInstance.current) {\n            chartInstance.current.destroy();\n        }\n\n        chartInstance.current = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: cellTypes,\n                datasets: datasets,\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    title: {\n                        display: !!title,\n                        text: title || data.name,\n                    },\n                    tooltip: {\n                        mode: 'index',\n                        intersect: false,\n                    },\n                    legend: {\n                        position: 'right',\n                    },\n                },\n                scales: {\n                    x: {\n                        stacked: true,\n                    },\n                    y: {\n                        stacked: true,\n                        beginAtZero: true,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: yAxisLabel || data.unit || 'Percentage',\n                        },\n                    },\n                },\n            },\n            plugins: [hachurePlugin],\n        });\n\n        return () => {\n            if (chartInstance.current) {\n                chartInstance.current.destroy();\n            }\n        };\n    }, [data, datasets, title, yAxisLabel]);\n\n    const downloadData = useCallback(() => {\n        if (!data) return;\n        const jsonString = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(data))}`;\n        const link = document.createElement('a');\n        link.href = jsonString;\n        link.download = `${data.id || 'laminar-data'}.json`;\n        link.click();\n    }, [data]);\n\n    if (!data || !data.value_map) {\n        return <div>No data available</div>;\n    }\n\n    return (\n        <div>\n            <div style={{ height: `${height}px` }}>\n                <canvas ref={chartRef} aria-label=\"Laminar Distribution Graph\" role=\"img\" />\n            </div>\n            <div className=\"mt-4\">\n                <DownloadButton theme={theme} onClick={downloadData}>\n                    Download Data\n                </DownloadButton>\n            </div>\n        </div>\n    );\n};\n\nexport default LaminarGraph;","import React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\ntype PreselectionProps = {\n  key: string,\n  defaultQuery: any,\n};\n\nconst withPreselection = (WrappedComponent, options: PreselectionProps) => {\n\n  const WithPreselectionComponent: React.FC = () => {\n    const router = useRouter();\n\n    useEffect(() => {\n      if (!router.isReady) return;\n\n      if (!router.query[options.key]) {\n        const query = options.defaultQuery;\n        router.replace({ query }, undefined, { shallow: true });\n      }\n    }, [router.query]);\n\n    return (<WrappedComponent />);\n  };\n\n  return WithPreselectionComponent;\n}\n\nexport default withPreselection;\n","import React, { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\n\nimport Filters from \"@/layouts/Filters\";\nimport StickyContainer from \"@/components/StickyContainer\";\nimport Title from \"@/components/Title\";\nimport InfoBox from \"@/components/InfoBox\";\nimport DataContainer from \"@/components/DataContainer\";\nimport Collapsible from \"@/components/Collapsible\";\nimport DistributionPlot from \"@/components/DistributionPlot\";\nimport DownloadButton from \"@/components/DownloadButton\";\nimport List from \"@/components/List\";\nimport VolumeSectionSelector3D from \"@/components/VolumeSectionSelector3D\";\nimport LaminarGraph from \"@/components/LaminarGraph\";\n\nimport { cellGroup, defaultSelection, volumeSections } from \"@/constants\";\nimport { Layer, QuickSelectorEntry, VolumeSection } from \"@/types\";\nimport { dataPath } from \"@/config\";\n\nimport { downloadAsJson } from \"@/utils\";\nimport withPreselection from \"@/hoc/with-preselection\";\nimport { DualNeuronWithSynapsesView } from \"@/components/dual-neuron-with-synapses/DualNeuronWithSynapsesView\";\n\nconst MergedConnectionsView: React.FC = () => {\n  const router = useRouter();\n  const { volume_section, prelayer, postlayer } = router.query as Record<\n    string,\n    string\n  >;\n\n  const [quickSelection, setQuickSelection] = useState<Record<string, string>>({\n    volume_section,\n    prelayer,\n    postlayer,\n  });\n  const [factsheetData, setFactsheetData] = useState<any>(null);\n  const [availablePlots, setAvailablePlots] = useState<Record<string, boolean>>(\n    {}\n  );\n  const [laminarData, setLaminarData] = useState<any>(null);\n  const [laminarDataError, setLaminarDataError] = useState<string | null>(null);\n\n  const theme = 3;\n\n  const setParams = (params: Record<string, string>): void => {\n    const query = { ...router.query, ...params };\n    router.push({ query }, undefined, { shallow: true });\n  };\n\n  useEffect(() => {\n    if (!router.isReady) return;\n\n    if (\n      !router.query.prelayer &&\n      !router.query.volume_section &&\n      !router.query.postlayer\n    ) {\n      const query = defaultSelection.digitalReconstruction.connectionAnatomy;\n      const { volume_section, prelayer, postlayer } = query;\n      setQuickSelection({ volume_section, prelayer, postlayer });\n      router.replace({ query }, undefined, { shallow: true });\n    } else {\n      setQuickSelection({ volume_section, prelayer, postlayer });\n    }\n  }, [router.query]);\n\n  const setVolumeSectionQuery = (volume_section: VolumeSection) => {\n    setQuickSelection((prev) => {\n      const updatedSelection = { ...prev, volume_section };\n      setParams(updatedSelection);\n      return updatedSelection;\n    });\n  };\n\n  const setPreLayerQuery = (prelayer: Layer) => {\n    setQuickSelection((prev) => {\n      const updatedSelection = { ...prev, prelayer };\n      setParams(updatedSelection);\n      return updatedSelection;\n    });\n  };\n\n  const setPostLayerQuery = (postlayer: Layer) => {\n    setQuickSelection((prev) => {\n      const updatedSelection = { ...prev, postlayer };\n      setParams(updatedSelection);\n      return updatedSelection;\n    });\n  };\n\n  const qsEntries: QuickSelectorEntry[] = [\n    {\n      title: \"Volume section\",\n      key: \"volume_section\",\n      values: volumeSections,\n      setFn: setVolumeSectionQuery,\n    },\n    {\n      title: \"Pre-synaptic cell group\",\n      key: \"prelayer\",\n      values: cellGroup,\n      setFn: setPreLayerQuery,\n    },\n    {\n      title: \"Post-synaptic cell group\",\n      key: \"postlayer\",\n      values: cellGroup,\n      setFn: setPostLayerQuery,\n    },\n  ];\n\n  useEffect(() => {\n    if (\n      quickSelection.volume_section &&\n      quickSelection.prelayer &&\n      quickSelection.postlayer\n    ) {\n      fetchFactsheetData();\n      fetchLaminarData();\n    }\n  }, [quickSelection]);\n\n  const fetchFactsheetData = async () => {\n    try {\n      const { volume_section, prelayer, postlayer } = quickSelection;\n      const filePath = `${dataPath}/3_digital-reconstruction/connection-anatomy/${volume_section}/${prelayer}-${postlayer}/distribution-plots.json`;\n      const response = await fetch(filePath);\n      const data = await response.json();\n\n      if (data && Array.isArray(data.values)) {\n        setFactsheetData(data.values);\n        updateAvailablePlots(data.values);\n      } else {\n        console.error(\"Unexpected data format:\", data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching factsheet:\", error);\n    }\n  };\n\n  const fetchLaminarData = async () => {\n    try {\n      const { volume_section, prelayer, postlayer } = quickSelection;\n      const filePath = `${dataPath}/3_digital-reconstruction/connection-anatomy/${volume_section}/${prelayer}-${postlayer}/Connections.json`;\n      console.log(\"Fetching laminar data from:\", filePath);\n\n      const response = await fetch(filePath);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log(\"Fetched laminar data:\", data);\n\n      const laminarDistribution = data.values.find(\n        (plot: any) => plot.id === \"laminar-distribution\"\n      );\n\n      if (!laminarDistribution) {\n        console.warn(\"No laminar distribution data found in the response\");\n        setLaminarDataError(\"No laminar distribution data available for this selection.\");\n        setLaminarData(null);\n      } else {\n        setLaminarData(laminarDistribution);\n        setLaminarDataError(null);\n      }\n    } catch (error) {\n      console.error(\"Error fetching laminar data:\", error);\n      setLaminarDataError(\"Error loading laminar distribution data. Please try again later.\");\n      setLaminarData(null);\n    }\n  };\n\n  const updateAvailablePlots = (plots: any[]) => {\n    const plotIds = [\n      \"bouton-density\",\n      \"sample-convergence-by-connection\",\n      \"sample-convergence-by-synapse\",\n      \"sample-divergence-by-connection\",\n      \"sample-divergence-by-synapse\",\n      \"connection-probability-vs-inter-somatic-distance\",\n    ];\n\n    const availablePlots = plotIds.reduce((acc, id) => {\n      acc[id] = plots.some((plot) => plot.id === id);\n      return acc;\n    }, {} as Record<string, boolean>);\n\n    setAvailablePlots(availablePlots);\n  };\n\n  const getPlotDataById = (id: string) =>\n    factsheetData?.find((plot: any) => plot.id === id);\n\n  const renderPlot = (id: string, title: string, xAxis: string, yAxis: string, xAxisTickStep: number) => {\n    if (!availablePlots[id]) return null;\n\n    const plotData = getPlotDataById(id);\n    return (\n      <Collapsible title={title} id={id} className=\"mt-4\">\n        <div className=\"graph\">\n          <DistributionPlot\n            plotData={plotData}\n            xAxis={xAxis}\n            yAxis={yAxis}\n            xAxisTickStep={xAxisTickStep}\n          />\n        </div>\n        <div className=\"mt-4\">\n          <DownloadButton\n            theme={theme}\n            onClick={() =>\n              downloadAsJson(\n                plotData,\n                `${id}-${quickSelection.volume_section}-${quickSelection.prelayer}-${quickSelection.postlayer}.json`\n              )\n            }\n          >\n            <span\n              style={{ textTransform: \"capitalize\" }}\n              className=\"collapsible-property small\"\n            >\n              {quickSelection.volume_section}\n            </span>\n            {title}\n            <span className=\"!mr-0 collapsible-property small \">\n              {quickSelection.prelayer}\n            </span>{\" \"}\n            -{\" \"}\n            <span className=\"!ml-0 collapsible-property small \">\n              {quickSelection.postlayer}\n            </span>\n          </DownloadButton>\n        </div>\n      </Collapsible>\n    );\n  };\n\n  const renderLaminarDistribution = () => {\n    if (laminarDataError) {\n      return (\n        <Collapsible\n          title=\"Laminar distribution of synapses\"\n          id=\"laminar-distribution-synapses\"\n        >\n          <div className=\"text-center p-4\">\n            <p className=\"text-red-500\">{laminarDataError}</p>\n          </div>\n        </Collapsible>\n      );\n    }\n\n    if (!laminarData) {\n      return (\n        <Collapsible\n          title=\"Laminar distribution of synapses\"\n          id=\"laminar-distribution-synapses\"\n        >\n          <div className=\"text-center p-4\">\n            <p>Loading laminar distribution data...</p>\n          </div>\n        </Collapsible>\n      );\n    }\n\n    return (\n      <Collapsible\n        title=\"Laminar distribution of synapses\"\n        id=\"laminar-distribution-synapses\"\n      >\n        <LaminarGraph\n          data={laminarData}\n          title=\"Laminar Distribution of Synapses\"\n          yAxisLabel=\"Percentage of synapses\"\n        />\n      </Collapsible>\n    );\n  };\n\n  return (\n    <>\n      <Filters\n        theme={theme}\n        hasData={!!quickSelection.prelayer && !!quickSelection.postlayer}\n      >\n        <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n          <div className=\"w-full lg:w-1/2 md:w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n            <StickyContainer>\n              <Title\n                title=\"Connection Anatomy\"\n                subtitle=\"Digital Reconstructions\"\n                theme={theme}\n              />\n              <div role=\"information\">\n                <InfoBox>\n                  <p>\n                    We combined{\" \"}\n                    <Link\n                      href=\"/experimental-data/connection-anatomy/\"\n                      className={`link theme-${theme}`}\n                    >\n                      literature data\n                    </Link>{\" \"}\n                    and predictions on{\" \"}\n                    <Link\n                      href=\"/reconstruction-data/connections/\"\n                      className={`link theme-${theme}`}\n                    >\n                      uncharacterized pathways\n                    </Link>{\" \"}\n                    to reconstruct the CA1 internal connection anatomy and\n                    physiology. The resulting connectome consists of 821 M\n                    synapses. For each circuit, each pathway is analyzed in\n                    terms of number of synapses per connection, divergence,\n                    convergence, connection probability, and synaptic\n                    properties.\n                  </p>\n                </InfoBox>\n              </div>\n            </StickyContainer>\n          </div>\n\n          <div\n            className=\"flex flex-col gap-8 mb-12 md:mb-0 mx-8 md:mx-0 lg:w-1/2 md:w-full flex-grow md:flex-none justify-center\"\n            style={{ maxWidth: \"800px\" }}\n          >\n            <div\n              className={`selector__column selector__column--lg mt-3 theme-${theme}`}\n              style={{ maxWidth: \"auto\" }}\n            >\n              <div className={`selector__head theme-${theme}`}>\n                1. Select a volume section\n              </div>\n              <div className=\"selector__body\">\n                <VolumeSectionSelector3D\n                  value={quickSelection.volume_section}\n                  onSelect={setVolumeSectionQuery}\n                  theme={theme}\n                />\n              </div>\n            </div>\n            <div className=\"flex flex-col lg:flex-row gap-8 flex-grow p-0 m-0\">\n              <div\n                className={`selector__column theme-${theme} flex-1`}\n                style={{ maxWidth: \"auto\" }}\n              >\n                <div className={`selector__head theme-${theme}`}>\n                  2. Select a pre-synaptic cell group\n                </div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={cellGroup}\n                    value={quickSelection.prelayer}\n                    title=\"m-type\"\n                    onSelect={setPreLayerQuery}\n                    theme={theme}\n                  />\n                </div>\n              </div>\n              <div className={`selector__column theme-${theme} flex-1`}>\n                <div className={`selector__head theme-${theme}`}>\n                  3. Select a post-synaptic cell group\n                </div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={cellGroup}\n                    value={quickSelection.postlayer}\n                    title=\"m-type\"\n                    onSelect={setPostLayerQuery}\n                    theme={theme}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <DataContainer\n        visible={\n          !!quickSelection.volume_section &&\n          !!quickSelection.prelayer &&\n          !!quickSelection.postlayer\n        }\n        navItems={[\n          {\n            id: \"bouton-density\",\n            label: \"Bouton density of the presynaptic cells\",\n          },\n          {\n            id: \"sample-convergence-by-connection\",\n            label: \"Number of synapses per connection\",\n          },\n          {\n            id: \"sample-convergence-by-synapse\",\n            label: \"Convergence (synapses)\",\n          },\n          {\n            id: \"sample-divergence-by-connection\",\n            label: \"Divergence (connections)\",\n          },\n          {\n            id: \"sample-divergence-by-synapse\",\n            label: \"Divergence (synapses)\",\n          },\n          {\n            id: \"laminar-distribution-synapses\",\n            label: \"Laminar distribution of synapses\",\n          },\n          {\n            id: \"connection-probability-vs-inter-somatic-distance\",\n            label: \"Connection probability vs inter-somatic distance\",\n          },\n        ]}\n        quickSelectorEntries={qsEntries}\n      >\n        <DualNeuronWithSynapsesView\n          pre={quickSelection.prelayer}\n          post={quickSelection.postlayer}\n        />\n        {renderPlot(\n          \"bouton-density\",\n          \"Bouton density of the presynaptic cells\",\n          \"Bouton density (µm⁻¹)\",\n          \"Count\",\n          0.1\n        )}\n        {renderPlot(\n          \"sample-convergence-by-connection\",\n          \"Number of synapses per connection\",\n          \"Synapse/connection\",\n          \"Count\",\n          100\n        )}\n        {renderPlot(\n          \"sample-convergence-by-synapse\",\n          \"Convergence (synapses)\",\n          \"Synapses\",\n          \"Count\",\n          1000\n        )}\n        {renderLaminarDistribution()}\n        {renderPlot(\n          \"sample-divergence-by-connection\",\n          \"Divergence (connections)\",\n          \"Connections\",\n          \"Count\",\n          500\n        )}\n        {renderPlot(\n          \"sample-divergence-by-synapse\",\n          \"Divergence (synapses)\",\n          \"Synapses\",\n          \"Count\",\n          2000\n        )}\n        {renderPlot(\n          \"connection-probability-vs-inter-somatic-distance\",\n          \"Connection probability vs inter-somatic distance\",\n          \"Inter-somatic distance (µm)\",\n          \"Connection probability\",\n          100\n        )}\n      </DataContainer>\n    </>\n  );\n};\n\nexport default withPreselection(MergedConnectionsView, {\n  key: \"volume_section\",\n  defaultQuery: defaultSelection.digitalReconstruction.connectionAnatomy,\n});\n","import Head from 'next/head';\nimport ConnectionAnatomyView from '@/views/3_digital-reconstructions/ConnectionAnatomy';\n\nexport default function DigRecConnectionsPage() {\n  const metadata = {\n    title: 'Connection Anatomy | Digital Reconstructions | The Hippocampus Hub',\n    description:\n      'Explore the anatomical properties of neuronal connections in hippocampal digital reconstructions. This page features data on synapse numbers, synapse distribution, and connectivity pathways.',\n    keywords: [\n      'Connection Anatomy',\n      'Synapses',\n      'Connectivity Pathways',\n      'Hippocampus',\n      'Digital Reconstructions',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <ConnectionAnatomyView />\n    </>\n  );\n}","import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\n\nconst defaultDatasetIdKey = \"label\";\nfunction reforwardRef(ref, value) {\n    if (typeof ref === \"function\") {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n}\nfunction setOptions(chart, nextOptions) {\n    const options = chart.options;\n    if (options && nextOptions) {\n        Object.assign(options, nextOptions);\n    }\n}\nfunction setLabels(currentData, nextLabels) {\n    currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n    let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n    const addedDatasets = [];\n    currentData.datasets = nextDatasets.map((nextDataset)=>{\n        // given the new set, find it's current match\n        const currentDataset = currentData.datasets.find((dataset)=>dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n        // There is no original to update, so simply add new one\n        if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n            return {\n                ...nextDataset\n            };\n        }\n        addedDatasets.push(currentDataset);\n        Object.assign(currentDataset, nextDataset);\n        return currentDataset;\n    });\n}\nfunction cloneData(data) {\n    let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n    const nextData = {\n        labels: [],\n        datasets: []\n    };\n    setLabels(nextData, data.labels);\n    setDatasets(nextData, data.datasets, datasetIdKey);\n    return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getDatasetAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"dataset\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"nearest\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementsAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"index\", {\n        intersect: true\n    }, false);\n}\n\nfunction ChartComponent(props, ref) {\n    const { height =150 , width =300 , redraw =false , datasetIdKey , type , data , options , plugins =[] , fallbackContent , updateMode , ...canvasProps } = props;\n    const canvasRef = useRef(null);\n    const chartRef = useRef();\n    const renderChart = ()=>{\n        if (!canvasRef.current) return;\n        chartRef.current = new Chart$1(canvasRef.current, {\n            type,\n            data: cloneData(data, datasetIdKey),\n            options: options && {\n                ...options\n            },\n            plugins\n        });\n        reforwardRef(ref, chartRef.current);\n    };\n    const destroyChart = ()=>{\n        reforwardRef(ref, null);\n        if (chartRef.current) {\n            chartRef.current.destroy();\n            chartRef.current = null;\n        }\n    };\n    useEffect(()=>{\n        if (!redraw && chartRef.current && options) {\n            setOptions(chartRef.current, options);\n        }\n    }, [\n        redraw,\n        options\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current) {\n            setLabels(chartRef.current.config.data, data.labels);\n        }\n    }, [\n        redraw,\n        data.labels\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current && data.datasets) {\n            setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n        }\n    }, [\n        redraw,\n        data.datasets\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        if (redraw) {\n            destroyChart();\n            setTimeout(renderChart);\n        } else {\n            chartRef.current.update(updateMode);\n        }\n    }, [\n        redraw,\n        options,\n        data.labels,\n        data.datasets,\n        updateMode\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        destroyChart();\n        setTimeout(renderChart);\n    }, [\n        type\n    ]);\n    useEffect(()=>{\n        renderChart();\n        return ()=>destroyChart();\n    }, []);\n    return /*#__PURE__*/ React.createElement(\"canvas\", Object.assign({\n        ref: canvasRef,\n        role: \"img\",\n        height: height,\n        width: width\n    }, canvasProps), fallbackContent);\n}\nconst Chart = /*#__PURE__*/ forwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n    Chart$1.register(registerables);\n    return /*#__PURE__*/ forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(Chart, Object.assign({}, props, {\n            ref: ref,\n            type: type\n        })));\n}\nconst Line = /* #__PURE__ */ createTypedChart(\"line\", LineController);\nconst Bar = /* #__PURE__ */ createTypedChart(\"bar\", BarController);\nconst Radar = /* #__PURE__ */ createTypedChart(\"radar\", RadarController);\nconst Doughnut = /* #__PURE__ */ createTypedChart(\"doughnut\", DoughnutController);\nconst PolarArea = /* #__PURE__ */ createTypedChart(\"polarArea\", PolarAreaController);\nconst Bubble = /* #__PURE__ */ createTypedChart(\"bubble\", BubbleController);\nconst Pie = /* #__PURE__ */ createTypedChart(\"pie\", PieController);\nconst Scatter = /* #__PURE__ */ createTypedChart(\"scatter\", ScatterController);\n\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };\n//# sourceMappingURL=index.js.map\n"],"names":["window","__NEXT_P","push","__webpack_require__","Chart","register","registerables","__webpack_exports__","Z","data","height","title","yAxisLabel","theme","param","chartRef","useRef","chartInstance","getColor","useCallback","colors","graphTheme","blue","yellow","green","red","purple","index","length","datasets","useMemo","value_map","layers","Object","keys","cellTypes","map","layer","label","concat","cellType","backgroundColor","stack","hachurePlugin","id","afterDatasetsDraw","chart","args","options","ctx","save","lineWidth","strokeStyle","forEach","dataset","datasetIndex","meta","getDatasetMeta","bar","x","y","width","getProps","beginPath","rect","clip","i","moveTo","lineTo","stroke","restore","useEffect","current","getContext","destroy","type","labels","responsive","maintainAspectRatio","plugins","display","text","name","tooltip","mode","intersect","legend","position","scales","stacked","beginAtZero","max","unit","downloadData","jsonString","encodeURIComponent","JSON","stringify","link","document","createElement","href","download","click","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","jsx","style","canvas","ref","aria-label","role","className","DownloadButton","onClick","WrappedComponent","router","useRouter","isReady","query","key","defaultQuery","replace","undefined","shallow","ConnectionAnatomy","withPreselection","volume_section","prelayer","postlayer","quickSelection","setQuickSelection","useState","factsheetData","setFactsheetData","availablePlots","setAvailablePlots","laminarData","setLaminarData","laminarDataError","setLaminarDataError","setParams","params","defaultSelection","digitalReconstruction","connectionAnatomy","setVolumeSectionQuery","updatedSelection","prev","setPreLayerQuery","setPostLayerQuery","qsEntries","values","volumeSections","setFn","cellGroup","fetchFactsheetData","fetchLaminarData","filePath","dataPath","response","fetch","json","Array","isArray","updateAvailablePlots","console","error","log","ok","status","laminarDistribution","find","plot","warn","plotIds","reduce","acc","plots","some","getPlotDataById","renderPlot","xAxis","yAxis","xAxisTickStep","plotData","jsx_runtime","Collapsible","DistributionPlot","downloadAsJson","span","textTransform","Fragment","Filters","hasData","StickyContainer","Title","subtitle","InfoBox","p","Link","maxWidth","VolumeSectionSelector3D","value","onSelect","List","block","list","DataContainer","visible","navItems","quickSelectorEntries","DualNeuronWithSynapsesView","pre","post","LaminarGraph","DigRecConnectionsPage","metadata","description","keywords","author","creator","publisher","Head","content","join","ConnectionAnatomyView","defaultDatasetIdKey","reforwardRef","setDatasets","currentData","nextDatasets","datasetIdKey","arguments","addedDatasets","currentDataset","nextDataset","includes","assign","react__WEBPACK_IMPORTED_MODULE_0__","forwardRef","props","redraw","fallbackContent","updateMode","canvasProps","canvasRef","renderChart","chart_js__WEBPACK_IMPORTED_MODULE_1__","kL","cloneData","nextLabels","nextData","destroyChart","setOptions","nextOptions","config","setTimeout","update","createTypedChart","Line","ST","Bar","vn","Scatter","ho"],"sourceRoot":""}