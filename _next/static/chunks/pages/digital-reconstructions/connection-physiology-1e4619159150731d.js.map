{"version":3,"file":"static/chunks/pages/digital-reconstructions/connection-physiology-1e4619159150731d.js","mappings":"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","sources":["webpack://_N_E/?3621","webpack://_N_E/./src/views/3_digital-reconstructions/ConnectionPhysiology.tsx","webpack://_N_E/./src/pages/digital-reconstructions/connection-physiology.tsx","webpack://_N_E/./src/views/3_digital-reconstructions/components/Trace.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/digital-reconstructions/connection-physiology\",\n      function () {\n        return require(\"private-next-pages/digital-reconstructions/connection-physiology.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/digital-reconstructions/connection-physiology\"])\n      });\n    }\n  ","import React, { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\n\nimport Filters from \"@/layouts/Filters\";\nimport StickyContainer from \"@/components/StickyContainer\";\nimport Title from \"@/components/Title\";\nimport InfoBox from \"@/components/InfoBox\";\nimport DataContainer from \"@/components/DataContainer\";\nimport Collapsible from \"@/components/Collapsible\";\nimport DistibutionPlot from \"@/components/DistributionPlot\";\nimport DownloadButton from \"@/components/DownloadButton\";\nimport List from \"@/components/List\";\nimport TraceGraph from \"./components/Trace\";\n\nimport VolumeSectionSelector3D from \"@/components/VolumeSectionSelector3D\";\nimport { DualNeuronWithSynapsesView } from \"@/components/dual-neuron-with-synapses/DualNeuronWithSynapsesView\";\n\nimport { cellGroup, defaultSelection, volumeSections } from \"@/constants\";\nimport { Layer, QuickSelectorEntry, VolumeSection } from \"@/types\";\nimport { dataPath } from \"@/config\";\n\nimport { downloadAsJson } from \"@/utils\";\n\nconst SynapsesView: React.FC = () => {\n  const router = useRouter();\n  const { volume_section, prelayer, postlayer } = router.query as Record<\n    string,\n    string\n  >;\n\n  const [quickSelection, setQuickSelection] = useState<Record<string, string>>({\n    volume_section,\n    prelayer,\n    postlayer,\n  });\n  const [connViewerReady, setConnViewerReady] = useState<boolean>(false);\n  const [factsheetData, setFactsheetData] = useState<any>(null);\n  const [selectedPlot, setSelectedPlot] = useState<string | null>(null);\n  const [availablePlots, setAvailablePlots] = useState<Record<string, boolean>>(\n    {}\n  );\n  const [laminarPlots, setLaminarPlots] = useState<Record<string, boolean>>({});\n  const [traceData, setTraceData] = useState<any>(null);\n\n  const theme = 3;\n\n  const setParams = (params: Record<string, string>): void => {\n    const query = { ...router.query, ...params };\n    router.push({ query }, undefined, { shallow: true });\n  };\n\n  useEffect(() => {\n    if (!router.isReady) return;\n\n    if (\n      !router.query.prelayer &&\n      !router.query.volume_section &&\n      !router.query.postlayer\n    ) {\n      const query = defaultSelection.digitalReconstruction.synapticPathways;\n      const { volume_section, prelayer, postlayer } = query;\n      setQuickSelection({ volume_section, prelayer, postlayer });\n      router.replace({ query }, undefined, { shallow: true });\n    } else {\n      setQuickSelection({ volume_section, prelayer, postlayer });\n    }\n  }, [router.query]);\n\n  const setVolumeSectionQuery = (volume_section: VolumeSection) => {\n    setQuickSelection((prev) => {\n      const updatedSelection = { ...prev, volume_section };\n      setParams(updatedSelection);\n      setSelectedPlot(null);\n      return updatedSelection;\n    });\n  };\n\n  const setPreLayerQuery = (prelayer: Layer) => {\n    setQuickSelection((prev) => {\n      const updatedSelection = { ...prev, prelayer };\n      setParams(updatedSelection);\n      setSelectedPlot(null);\n      return updatedSelection;\n    });\n  };\n\n  const setPostLayerQuery = (postlayer: Layer) => {\n    setQuickSelection((prev) => {\n      const updatedSelection = { ...prev, postlayer };\n      setParams(updatedSelection);\n      setSelectedPlot(null);\n      return updatedSelection;\n    });\n  };\n\n  const qsEntries: QuickSelectorEntry[] = [\n    {\n      title: \"Volume section\",\n      key: \"volume_section\",\n      values: volumeSections,\n      setFn: setVolumeSectionQuery,\n    },\n    {\n      title: \"Pre-synaptic cell group\",\n      key: \"prelayer\",\n      values: cellGroup,\n      setFn: setPreLayerQuery,\n    },\n    {\n      title: \"Post-synaptic cell group\",\n      key: \"postlayer\",\n      values: cellGroup,\n      setFn: setPostLayerQuery,\n    },\n  ];\n  const fetchTraceData = async () => {\n    try {\n      const response = await fetch(\n        `${dataPath}/3_digital-reconstruction/connection-physiology/${volume_section}/${prelayer}-${postlayer}/trace.json`\n      );\n      const data = await response.json();\n      setTraceData(data);\n    } catch (error) {\n      console.error(\"Error fetching trace data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    setConnViewerReady(false);\n  }, [prelayer, postlayer]);\n\n  useEffect(() => {\n    if (volume_section && prelayer && postlayer) {\n      const distributionPlotFile = `${dataPath}/3_digital-reconstruction/connection-physiology/${volume_section}/${prelayer}-${postlayer}/distribution-plots.json`;\n\n      fetch(distributionPlotFile)\n        .then((response) => response.json())\n        .then((distributionData) => {\n          if (distributionData && Array.isArray(distributionData.values)) {\n            const plots = distributionData.values;\n\n            const availablePlots = {\n              PSPAmplitude: plots.some((plot) => plot.id === \"psp-amplitude\"),\n              PSPCV: plots.some((plot) => plot.id === \"psp-cv\"),\n              SynapsesLatency: plots.some(\n                (plot) => plot.id === \"synapse-latency\"\n              ),\n              SynapsesLatencyFromSimulation: plots.some(\n                (plot) => plot.id === \"synapse-latency-from-simulation\"\n              ),\n              RiseTimeCOnstant: plots.some(\n                (plot) => plot.id === \"rise-time-constant\"\n              ),\n              DecayTimeConstant: plots.some(\n                (plot) => plot.id === \"decay-time-constant\"\n              ),\n              DecayTimeConstantFromSimulation: plots.some(\n                (plot) => plot.id === \"decay-time-constant-from-sumluation\"\n              ),\n              NMDAAMPARatio: plots.some(\n                (plot) => plot.id === \"nmda-ampa-ratio\"\n              ),\n              UParameter: plots.some((plot) => plot.id === \"u-parameter\"),\n              DParameter: plots.some((plot) => plot.id === \"d-parameter\"),\n              FParameter: plots.some((plot) => plot.id === \"f-parameter\"),\n              NRRPParameter: plots.some((plot) => plot.id === \"nrrp-parameter\"),\n              GSYNX: plots.some((plot) => plot.id === \"g-synx\"),\n            };\n\n            fetchTraceData();\n            setAvailablePlots(availablePlots);\n            setFactsheetData([...plots]);\n          } else {\n            console.error(\"Unexpected data format:\", distributionData);\n          }\n        })\n        .catch((error) => console.error(\"Error fetching factsheet:\", error));\n    }\n  }, [volume_section, prelayer, postlayer]);\n\n  const getPlotDataById = (id: string) => {\n    return factsheetData?.find((plot: any) => plot.id === id);\n  };\n\n  return (\n    <>\n      <Filters theme={theme} hasData={!!prelayer && !!postlayer}>\n        <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n          <div className=\"w-full lg:w-1/2 md:w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n            <StickyContainer>\n              <Title\n                title=\"Connection Physiology\"\n                subtitle=\"Digital Reconstructions\"\n                theme={theme}\n              />\n              <div role=\"information\">\n                <InfoBox>\n                  <p>\n                    We assigned{\" \"}\n                    <Link\n                      href={\"/experimental-data/connection-physiology/\"}\n                      className={`link theme-${theme}`}\n                    >\n                      synapse properties\n                    </Link>{\" \"}\n                    to the{\" \"}\n                    <Link\n                      href={\"/digital-reconstructions/connection-anatomy/\"}\n                      className={`link theme-${theme}`}\n                    >\n                      established connections\n                    </Link>\n                    . For each circuit, each pathway is analyzed in terms of\n                    PSP, latency, kinetics, NMDA/AMPA ratio, and short-term\n                    plasticity.\n                  </p>\n                </InfoBox>\n              </div>\n            </StickyContainer>\n          </div>\n\n          <div\n            className=\"flex flex-col gap-8 mb-12 md:mb-0 mx-8 md:mx-0 lg:w-1/2 md:w-full flex-grow md:flex-none justify-center\"\n            style={{ maxWidth: \"800px\" }}\n          >\n            <div\n              className={`selector__column selector__column--lg mt-3 theme-${theme}`}\n              style={{ maxWidth: \"auto\" }}\n            >\n              <div className={`selector__head theme-${theme}`}>\n                1. Select a volume section\n              </div>\n              <div className=\"selector__body\">\n                <VolumeSectionSelector3D\n                  value={volume_section}\n                  onSelect={setVolumeSectionQuery}\n                  theme={theme}\n                />\n              </div>\n            </div>\n            <div className=\"flex flex-col lg:flex-row gap-8 flex-grow p-0 m-0\">\n              <div\n                className={`selector__column theme-${theme} flex-1`}\n                style={{ maxWidth: \"auto\" }}\n              >\n                <div className={`selector__head theme-${theme}`}>\n                  2. Select a pre-synaptic cell group\n                </div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={cellGroup}\n                    value={prelayer}\n                    title=\"m-type\"\n                    onSelect={setPreLayerQuery}\n                    theme={theme}\n                  />\n                </div>\n              </div>\n              <div className={`selector__column theme-${theme} flex-1`}>\n                <div className={`selector__head theme-${theme}`}>\n                  2. Select a post-synaptic cell group\n                </div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={cellGroup}\n                    value={postlayer}\n                    title=\"m-type\"\n                    onSelect={setPostLayerQuery}\n                    theme={theme}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <DataContainer\n        theme={theme}\n        navItems={[\n          { id: \"PSPAmplitudeSection\", label: \"PSP Amplitude\" },\n          { id: \"PSPCVSection\", label: \"PSP CV\" },\n          { id: \"SynapsesLatencySection\", label: \"Synapses Latency\" },\n          { id: \"RiseTimeCOnstantSection\", label: \"Rise Time Constant\" },\n          { id: \"DecayTimeConstantSection\", label: \"Decay Time Constant\" },\n          { id: \"NMDAAMPARatioSection\", label: \"NMAA/AMPA Ratio\" },\n          {\n            id: \"UDFNRRPSection\",\n            label: \"U, D, F, NRRP Parameters and G-SYNX \",\n          },\n          { id: \"TracesSection\", label: \"Trace\" },\n        ]}\n        quickSelectorEntries={qsEntries}\n      >\n        <DualNeuronWithSynapsesView\n          pre={quickSelection.prelayer}\n          post={quickSelection.postlayer}\n        />\n\n        {availablePlots.PSPAmplitude && (\n          <Collapsible\n            title=\"PSP Amplitude\"\n            id=\"PSPAmplitudeSection\"\n            className=\"mt-4\"\n          >\n            <div className=\"graph\">\n              <DistibutionPlot\n                xAxisTickStep={1}\n                plotData={getPlotDataById(\"psp-amplitude\")}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() =>\n                  downloadAsJson(\n                    getPlotDataById(\"psp-amplitude\"),\n                    `psp-amplitude-${volume_section}-${prelayer}-${postlayer}.json`\n                  )\n                }\n              >\n                <span\n                  style={{ textTransform: \"capitalize\" }}\n                  className=\"collapsible-property small\"\n                >\n                  {volume_section}\n                </span>\n                <span className=\"!mr-0 collapsible-property small \">\n                  {prelayer}\n                </span>{\" \"}\n                -{\" \"}\n                <span className=\"!ml-0 collapsible-property small \">\n                  {postlayer}\n                </span>\n                PSP Amplitude\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        {availablePlots.PSPCV && (\n          <Collapsible title=\"PSP CV\" id=\"PSPCVSection\" className=\"mt-4\">\n            <div className=\"graph\">\n              <DistibutionPlot\n                plotData={getPlotDataById(\"psp-cv\")}\n                xAxisTickStep={0.2}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() =>\n                  downloadAsJson(\n                    getPlotDataById(\"psp-cv\"),\n                    `psp-cv-${volume_section}-${prelayer}-${postlayer}.json`\n                  )\n                }\n              >\n                <span\n                  style={{ textTransform: \"capitalize\" }}\n                  className=\"collapsible-property small\"\n                >\n                  {volume_section}\n                </span>\n                <span className=\"!mr-0 collapsible-property small \">\n                  {prelayer}\n                </span>{\" \"}\n                -{\" \"}\n                <span className=\"!ml-0 collapsible-property small \">\n                  {postlayer}\n                </span>\n                PSP CV\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        {(availablePlots.SynapsesLatency ||\n          availablePlots.SynapseLatencyFromSimulation) && (\n          <Collapsible title=\"Synapse latency\" id=\"SynapsesLatencySection\">\n            <div className=\"flex flex-col gap-12\">\n              {availablePlots.SynapsesLatency && (\n                <>\n                  <div className=\"flex flex-col gap-2\">\n                    <div className=\"text-lg mb-2\">Synapse Latency</div>\n                    <div className=\"graph\">\n                      <DistibutionPlot\n                        plotData={getPlotDataById(\"synapse-latency\")}\n                        xAxis=\"Latency\"\n                        yAxis=\"Frequency\"\n                        xAxisTickStep={1}\n                      />\n                    </div>\n                    <div className=\"mt-2\">\n                      <DownloadButton\n                        theme={theme}\n                        onClick={() =>\n                          downloadAsJson(\n                            getPlotDataById(\"synapse-latency\"),\n                            `synapse-latency-${volume_section}-${prelayer}-${postlayer}.json`\n                          )\n                        }\n                      >\n                        <span\n                          style={{ textTransform: \"capitalize\" }}\n                          className=\"collapsible-property small\"\n                        >\n                          {volume_section}\n                        </span>\n                        <span className=\"!mr-0 collapsible-property small\">\n                          {prelayer}\n                        </span>{\" \"}\n                        -{\" \"}\n                        <span className=\"!ml-0 collapsible-property small\">\n                          {postlayer}\n                        </span>\n                        Synapse latency distribution\n                      </DownloadButton>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {availablePlots.SynapsesLatencyFromSimulation && (\n                <>\n                  <div className=\"flex flex-col gap-2\">\n                    <div className=\"text-lg mb-2\">\n                      Synapse Latency for simulation\n                    </div>\n                    <div className=\"graph\">\n                      <DistibutionPlot\n                        plotData={getPlotDataById(\n                          \"synapse-latency-from-simulation\"\n                        )}\n                        xAxis=\"Latency\"\n                        yAxis=\"Frequency\"\n                        xAxisTickStep={1}\n                      />\n                    </div>\n                    <div className=\"mt-2\">\n                      <DownloadButton\n                        theme={theme}\n                        onClick={() =>\n                          downloadAsJson(\n                            getPlotDataById(\"synapses-latency-for-simulation\"),\n                            `synapses-latency-for-simulation-${volume_section}-${prelayer}-${postlayer}.json`\n                          )\n                        }\n                      >\n                        <span\n                          style={{ textTransform: \"capitalize\" }}\n                          className=\"collapsible-property small\"\n                        >\n                          {volume_section}\n                        </span>\n                        <span className=\"!mr-0 collapsible-property small\">\n                          {prelayer}\n                        </span>{\" \"}\n                        -{\" \"}\n                        <span className=\"!ml-0 collapsible-property small\">\n                          {postlayer}\n                        </span>\n                        Synapse latency from simulation\n                      </DownloadButton>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          </Collapsible>\n        )}\n\n        {availablePlots.RiseTimeCOnstant && (\n          <Collapsible\n            title=\"Rise Time Constant\"\n            id=\"RiseTimeCOnstantSection\"\n            className=\"mt-4\"\n          >\n            <div className=\"graph\">\n              <DistibutionPlot\n                xAxisTickStep={1}\n                plotData={getPlotDataById(\"rise-time-constant\")}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() =>\n                  downloadAsJson(\n                    getPlotDataById(\"rise-time-constant\"),\n                    `rise-time-constant-${volume_section}-${prelayer}-${postlayer}.json`\n                  )\n                }\n              >\n                <span\n                  style={{ textTransform: \"capitalize\" }}\n                  className=\"collapsible-property small\"\n                >\n                  {volume_section}\n                </span>\n                <span className=\"!mr-0 collapsible-property small \">\n                  {prelayer}\n                </span>{\" \"}\n                -{\" \"}\n                <span className=\"!ml-0 collapsible-property small \">\n                  {postlayer}\n                </span>\n                Rise Time Constant\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        {(availablePlots.DecayTimeConstant ||\n          availablePlots.DecayTimeConstantFromSimulation) && (\n          <Collapsible\n            title=\"Decay Time Constant\"\n            id=\"DecayTimeConstantSection\"\n          >\n            <div className=\"flex flex-col gap-12\">\n              {availablePlots.DecayTimeConstant && (\n                <>\n                  <div className=\"flex flex-col gap-2\">\n                    <div className=\"text-lg mb-2\">Decay time constant</div>\n                    <div className=\"graph\">\n                      <DistibutionPlot\n                        plotData={getPlotDataById(\"decay-time-constant\")}\n                        xAxis=\"Latency\"\n                        yAxis=\"Frequency\"\n                        xAxisTickStep={1}\n                      />\n                    </div>\n                    <div className=\"mt-2\">\n                      <DownloadButton\n                        theme={theme}\n                        onClick={() =>\n                          downloadAsJson(\n                            getPlotDataById(\"decay-time-constant\"),\n                            `decay-time-constant-${volume_section}-${prelayer}-${postlayer}.json`\n                          )\n                        }\n                      >\n                        <span\n                          style={{ textTransform: \"capitalize\" }}\n                          className=\"collapsible-property small\"\n                        >\n                          {volume_section}\n                        </span>\n                        <span className=\"!mr-0 collapsible-property small\">\n                          {prelayer}\n                        </span>{\" \"}\n                        -{\" \"}\n                        <span className=\"!ml-0 collapsible-property small\">\n                          {postlayer}\n                        </span>\n                        Synapse latency distribution\n                      </DownloadButton>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {availablePlots.DecayTimeConstantFromSimulation && (\n                <>\n                  <div className=\"flex flex-col gap-2\">\n                    <div className=\"text-lg mb-2\">\n                      Decay time constant from simulation\n                    </div>\n                    <div className=\"graph\">\n                      <DistibutionPlot\n                        plotData={getPlotDataById(\n                          \"decay-time-constant-from-sumluation\"\n                        )}\n                        xAxis=\"Latency\"\n                        yAxis=\"Frequency\"\n                        xAxisTickStep={1}\n                      />\n                    </div>\n                    <div className=\"mt-2\">\n                      <DownloadButton\n                        theme={theme}\n                        onClick={() =>\n                          downloadAsJson(\n                            getPlotDataById(\n                              \"decay-time-constant-from-simulation\"\n                            ),\n                            `decay-time-constant-from-simulation-${volume_section}-${prelayer}-${postlayer}.json`\n                          )\n                        }\n                      >\n                        <span\n                          style={{ textTransform: \"capitalize\" }}\n                          className=\"collapsible-property small\"\n                        >\n                          {volume_section}\n                        </span>\n                        <span className=\"!mr-0 collapsible-property small\">\n                          {prelayer}\n                        </span>{\" \"}\n                        -{\" \"}\n                        <span className=\"!ml-0 collapsible-property small\">\n                          {postlayer}\n                        </span>\n                        Synapse latency from simulation\n                      </DownloadButton>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          </Collapsible>\n        )}\n\n        {availablePlots.RiseTimeCOnstant && (\n          <Collapsible\n            title=\"NMAA/AMPA Ratio\"\n            id=\"NMDAAMPARatioSection\"\n            className=\"mt-4\"\n          >\n            <div className=\"graph\">\n              <DistibutionPlot\n                xAxisTickStep={0.5}\n                plotData={getPlotDataById(\"nmda-ampa-ratio\")}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() =>\n                  downloadAsJson(\n                    getPlotDataById(\"nmda-ampa-ratio\"),\n                    `nmda-ampa-ratio-${volume_section}-${prelayer}-${postlayer}.json`\n                  )\n                }\n              >\n                <span\n                  style={{ textTransform: \"capitalize\" }}\n                  className=\"collapsible-property small\"\n                >\n                  {volume_section}\n                </span>\n                <span className=\"!mr-0 collapsible-property small \">\n                  {prelayer}\n                </span>{\" \"}\n                -{\" \"}\n                <span className=\"!ml-0 collapsible-property small \">\n                  {postlayer}\n                </span>\n                NMAA/AMPA Ratio\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        <Collapsible\n          title=\"U, D, F, NRRP Parameters and G-SYNX \"\n          id=\"UDFNRRPSection\"\n          properties={[\"Physiology\"]}\n        >\n          <div className=\"flex flex-col gap-12\">\n            {availablePlots.UParameter && (\n              <div className=\"flex flex-col gap-2\">\n                <div className=\"text-lg mb-2\">U Parameter</div>\n                <div className=\"graph\">\n                  <DistibutionPlot\n                    plotData={getPlotDataById(\"u-parameter\")}\n                    xAxis=\"u_syn\"\n                    yAxis=\"Frequency\"\n                    xAxisTickStep={0.1}\n                  />\n                </div>\n                <div className=\"mt-2\">\n                  <DownloadButton\n                    theme={theme}\n                    onClick={() =>\n                      downloadAsJson(\n                        getPlotDataById(\"u-parameter\"),\n                        `u-parameter-${volume_section}-${prelayer}-${postlayer}.json`\n                      )\n                    }\n                  >\n                    <span\n                      style={{ textTransform: \"capitalize\" }}\n                      className=\"collapsible-property small\"\n                    >\n                      {volume_section}\n                    </span>\n                    <span className=\"!mr-0 collapsible-property small\">\n                      {prelayer}\n                    </span>{\" \"}\n                    -{\" \"}\n                    <span className=\"!ml-0 collapsible-property small\">\n                      {postlayer}\n                    </span>\n                    U Parameter\n                  </DownloadButton>\n                </div>\n              </div>\n            )}\n\n            {availablePlots.DParameter && (\n              <div className=\"flex flex-col gap-2\">\n                <div className=\"text-lg mb-2\">D Parameter</div>\n                <div className=\"graph\">\n                  <DistibutionPlot\n                    plotData={getPlotDataById(\"d-parameter\")}\n                    xAxis=\"d_syn\"\n                    yAxis=\"Frequency\"\n                    xAxisTickStep={500}\n                  />\n                </div>\n                <div className=\"mt-2\">\n                  <DownloadButton\n                    theme={theme}\n                    onClick={() =>\n                      downloadAsJson(\n                        getPlotDataById(\"d-parameter\"),\n                        `d-parameter-${volume_section}-${prelayer}-${postlayer}.json`\n                      )\n                    }\n                  >\n                    <span\n                      style={{ textTransform: \"capitalize\" }}\n                      className=\"collapsible-property small\"\n                    >\n                      {volume_section}\n                    </span>\n                    <span className=\"!mr-0 collapsible-property small\">\n                      {prelayer}\n                    </span>{\" \"}\n                    -{\" \"}\n                    <span className=\"!ml-0 collapsible-property small\">\n                      {postlayer}\n                    </span>\n                    D Parameter\n                  </DownloadButton>\n                </div>\n              </div>\n            )}\n\n            {availablePlots.FParameter && (\n              <div className=\"flex flex-col gap-2\">\n                <div className=\"text-lg mb-2\">F Parameter</div>\n                <div className=\"graph\">\n                  <DistibutionPlot\n                    plotData={getPlotDataById(\"f-parameter\")}\n                    xAxis=\"f_syn\"\n                    yAxis=\"Frequency\"\n                    xAxisTickStep={500}\n                  />\n                </div>\n                <div className=\"mt-2\">\n                  <DownloadButton\n                    theme={theme}\n                    onClick={() =>\n                      downloadAsJson(\n                        getPlotDataById(\"f-parameter\"),\n                        `f-parameter-${volume_section}-${prelayer}-${postlayer}.json`\n                      )\n                    }\n                  >\n                    <span\n                      style={{ textTransform: \"capitalize\" }}\n                      className=\"collapsible-property small\"\n                    >\n                      {volume_section}\n                    </span>\n                    <span className=\"!mr-0 collapsible-property small\">\n                      {prelayer}\n                    </span>{\" \"}\n                    -{\" \"}\n                    <span className=\"!ml-0 collapsible-property small\">\n                      {postlayer}\n                    </span>\n                    F Parameter\n                  </DownloadButton>\n                </div>\n              </div>\n            )}\n\n            {availablePlots.GSYNX && (\n              <div className=\"flex flex-col gap-2\">\n                <div className=\"text-lg mb-2\">G-SYNX</div>\n                <div className=\"graph\">\n                  <DistibutionPlot\n                    plotData={getPlotDataById(\"g-synx\")}\n                    xAxis=\"g_syn\"\n                    yAxis=\"Frequency\"\n                    xAxisTickStep={1}\n                  />\n                </div>\n                <div className=\"mt-2\">\n                  <DownloadButton\n                    theme={theme}\n                    onClick={() =>\n                      downloadAsJson(\n                        getPlotDataById(\"g-synx\"),\n                        `g-synx-${volume_section}-${prelayer}-${postlayer}.json`\n                      )\n                    }\n                  >\n                    <span\n                      style={{ textTransform: \"capitalize\" }}\n                      className=\"collapsible-property small\"\n                    >\n                      {volume_section}\n                    </span>\n                    <span className=\"!mr-0 collapsible-property small\">\n                      {prelayer}\n                    </span>{\" \"}\n                    -{\" \"}\n                    <span className=\"!ml-0 collapsible-property small\">\n                      {postlayer}\n                    </span>\n                    G-SYNX Parameter\n                  </DownloadButton>\n                </div>\n              </div>\n            )}\n\n            {availablePlots.NRRPParameter && (\n              <div className=\"flex flex-col gap-2\">\n                <div className=\"text-lg mb-2\">NRRP Parameter</div>\n                <div className=\"graph\">\n                  <DistibutionPlot\n                    plotData={getPlotDataById(\"nrrp-parameter\")}\n                    xAxis=\"NRRP\"\n                    yAxis=\"Frequency\"\n                    xAxisTickStep={1}\n                  />\n                </div>\n                <div className=\"mt-2\">\n                  <DownloadButton\n                    theme={theme}\n                    onClick={() =>\n                      downloadAsJson(\n                        getPlotDataById(\"nrrp-parameter\"),\n                        `nrrp-parameter-${volume_section}-${prelayer}-${postlayer}.json`\n                      )\n                    }\n                  >\n                    <span\n                      style={{ textTransform: \"capitalize\" }}\n                      className=\"collapsible-property small\"\n                    >\n                      {volume_section}\n                    </span>\n                    <span className=\"!mr-0 collapsible-property small\">\n                      {prelayer}\n                    </span>{\" \"}\n                    -{\" \"}\n                    <span className=\"!ml-0 collapsible-property small\">\n                      {postlayer}\n                    </span>\n                    NRRP Parameter\n                  </DownloadButton>\n                </div>\n              </div>\n            )}\n          </div>\n        </Collapsible>\n\n        <Collapsible title=\"Trace\" id=\"TracesSection\" className=\"mt-4\">\n          {traceData && traceData.individual_traces && traceData.mean_trace && (\n            <>\n              <div className=\"graph\">\n                <TraceGraph plotData={traceData} />\n              </div>\n              <DownloadButton\n                theme={theme}\n                onClick={() =>\n                  downloadAsJson(\n                    getPlotDataById(\"nrrp-parameter\"),\n                    `nrrp-parameter-${volume_section}-${prelayer}-${postlayer}.json`\n                  )\n                }\n              >\n                <span\n                  style={{ textTransform: \"capitalize\" }}\n                  className=\"collapsible-property small\"\n                >\n                  {volume_section}\n                </span>\n                <span className=\"!mr-0 collapsible-property small\">\n                  {prelayer}\n                </span>{\" \"}\n                -{\" \"}\n                <span className=\"!ml-0 collapsible-property small\">\n                  {postlayer}\n                </span>\n                trace\n              </DownloadButton>\n            </>\n          )}\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default SynapsesView;\n","import Head from 'next/head';\nimport ConnectionPhysiologyView from '../../views/3_digital-reconstructions/ConnectionPhysiology';\n\nexport default function ConnectionPhysiologyPage() {\n  const metadata = {\n    title: 'Connection Physiology | Digital Reconstructions | The Hippocampus Hub',\n    description:\n      'Analyze the physiological properties of synaptic connections in digital reconstructions of the hippocampus. This page includes data on synaptic conductance, synapse dynamics, and receptor properties.',\n    keywords: [\n      'Connection Physiology',\n      'Synaptic Conductance',\n      'Hippocampus',\n      'Synapse Dynamics',\n      'Digital Reconstructions',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <ConnectionPhysiologyView />\n    </>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport { Loader2 } from 'lucide-react';\nimport { graphTheme } from '@/constants';\n\nimport * as Plotly from 'plotly.js';\n\nconst Plot = dynamic(() => import('react-plotly.js').then((mod) => mod.default), {\n    ssr: false,\n}) as unknown as React.ComponentType<Plotly.Plot>;\n\ninterface TraceDataProps {\n    plotData?: {\n        individual_traces: number[][];\n        mean_trace: number[];\n    };\n}\n\nconst PlotlyTraceGraph: React.FC<TraceDataProps> = ({ plotData }) => {\n    const [data, setData] = useState<any[]>([]);\n    const [layout, setLayout] = useState<any>({});\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [hasError, setHasError] = useState<boolean>(false);\n\n    useEffect(() => {\n        console.log('TraceGraph received plotData:', plotData);\n        if (!plotData || !plotData.individual_traces || !plotData.mean_trace) {\n            console.log('No plot data available');\n            setIsLoading(false);\n            setHasError(true);\n            return;\n        }\n\n        try {\n            setIsLoading(true);\n            setHasError(false);\n\n            // Helper function to format time\n            const formatTime = (ms: number) => {\n                return ms >= 1000 ? `${(ms / 1000).toFixed(1)}s` : `${ms}ms`;\n            };\n\n            // Update x-axis values and formatting\n            const xValues = Array.from({ length: plotData.mean_trace.length }, (_, i) => i * (5000 / (plotData.mean_trace.length - 1)));\n\n            // Update individual traces data\n            const individualTraces = plotData.individual_traces.map((trace, index) => ({\n                x: xValues,\n                y: trace,\n                type: 'scatter',\n                mode: 'lines',\n                name: `Individual Trace ${index + 1}`,\n                line: { color: `#9EA0B2`, width: 1 },\n                showlegend: false,\n                hovertemplate: 'Time: %{x}<br>Value: %{y:.2f} mV<extra></extra>',\n            }));\n\n            // Update mean trace data\n            const meanTrace = {\n                x: xValues,\n                y: plotData.mean_trace,\n                type: 'scatter',\n                mode: 'lines',\n                name: 'Mean Trace',\n                line: { color: graphTheme.red, width: 3 },\n                hovertemplate: 'Time: %{x}<br>Value: %{y:.2f} mV<extra></extra>',\n            };\n\n            setData([...individualTraces, meanTrace]);\n\n            // Update layout\n            setLayout({\n                title: '',\n                xaxis: {\n                    title: 'Time',\n                    showticklabels: true,\n                    range: [0, 5000],\n                    tickmode: 'array',\n                    tickvals: [0, 1000, 2000, 3000, 4000, 5000],\n                    ticktext: ['0ms', '1s', '2s', '3s', '4s', '5s'],\n                    hoverformat: '.2f',\n                },\n                yaxis: {\n                    title: 'Value (mV)',\n                    showticklabels: true,\n                    hoverformat: '.2f',\n                },\n                autosize: true,\n                margin: { l: 60, r: 50, b: 50, t: 50, pad: 4 },\n                hovermode: 'closest',\n                showlegend: true,\n                legend: { x: 1, xanchor: 'right', y: 1 },\n                plot_bgcolor: '#EFF1F8',\n                paper_bgcolor: '#EFF1F8',\n            });\n\n            setIsLoading(false);\n        } catch (error) {\n            console.error('Error processing plot data:', error);\n            setIsLoading(false);\n            setHasError(true);\n        }\n    }, [plotData]);\n\n    const containerStyle = {\n        width: '100%',\n        height: '500px',\n        position: 'relative' as const,\n    };\n\n    const loaderStyle = {\n        position: 'absolute' as const,\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n    };\n\n    return (\n        <div style={containerStyle}>\n            {isLoading ? (\n                <div style={loaderStyle}>\n                    <Loader2 className=\"w-8 h-8 animate-spin\" />\n                </div>\n            ) : hasError || !data.length ? (\n                <p className=\"text-center text-gray-500 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    No data available.\n                </p>\n            ) : (\n                <Plot\n                    data={data}\n                    layout={layout}\n                    useResizeHandler={true}\n                    style={{ width: '100%', height: '100%' }}\n                    config={{ responsive: true }}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default PlotlyTraceGraph;\n"],"names":["window","__NEXT_P","push","__webpack_require__","ConnectionPhysiology","router","useRouter","volume_section","prelayer","postlayer","query","quickSelection","setQuickSelection","useState","connViewerReady","setConnViewerReady","factsheetData","setFactsheetData","selectedPlot","setSelectedPlot","availablePlots","setAvailablePlots","laminarPlots","setLaminarPlots","traceData","setTraceData","setParams","params","undefined","shallow","useEffect","isReady","defaultSelection","digitalReconstruction","synapticPathways","replace","setVolumeSectionQuery","updatedSelection","prev","setPreLayerQuery","setPostLayerQuery","qsEntries","title","key","values","volumeSections","setFn","cellGroup","fetchTraceData","response","fetch","dataPath","concat","data","json","error","console","distributionPlotFile","then","distributionData","Array","isArray","plots","PSPAmplitude","some","plot","id","PSPCV","SynapsesLatency","SynapsesLatencyFromSimulation","RiseTimeCOnstant","DecayTimeConstant","DecayTimeConstantFromSimulation","NMDAAMPARatio","UParameter","DParameter","FParameter","NRRPParameter","GSYNX","catch","getPlotDataById","find","jsx_runtime","jsxs","Fragment","jsx","Filters","theme","hasData","div","className","StickyContainer","Title","subtitle","role","InfoBox","p","Link","href","style","maxWidth","VolumeSectionSelector3D","value","onSelect","List","block","list","DataContainer","navItems","label","quickSelectorEntries","DualNeuronWithSynapsesView","pre","post","Collapsible","DistibutionPlot","xAxisTickStep","plotData","DownloadButton","onClick","downloadAsJson","span","textTransform","SynapseLatencyFromSimulation","xAxis","yAxis","properties","individual_traces","mean_trace","TraceGraph","ConnectionPhysiologyPage","metadata","description","keywords","author","creator","publisher","Head","meta","name","content","join","ConnectionPhysiologyView","Plot","dynamic","Promise","all","e","bind","mod","default","ssr","__webpack_exports__","Z","param","setData","layout","setLayout","isLoading","setIsLoading","hasError","setHasError","log","xValues","from","length","_","i","individualTraces","map","trace","index","x","y","type","mode","line","color","width","showlegend","hovertemplate","meanTrace","graphTheme","red","xaxis","showticklabels","range","tickmode","tickvals","ticktext","hoverformat","yaxis","autosize","margin","l","r","b","t","pad","hovermode","legend","xanchor","plot_bgcolor","paper_bgcolor","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","height","position","top","left","transform","Loader2","useResizeHandler","config","responsive"],"sourceRoot":""}