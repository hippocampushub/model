{"version":3,"sources":["webpack://_N_E/./src/components/ChannelParamPlot/plot.tsx","webpack://_N_E/./src/components/LayerSelector/index.tsx","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/Unit/index.tsx","webpack://_N_E/./src/queries/http/index.ts","webpack://_N_E/./src/components/HttpData/index.tsx","webpack://_N_E/./src/components/ChannelParamPlot/index.tsx","webpack://_N_E/./src/components/EtypeFactsheet/index.tsx","webpack://_N_E/./src/components/ModelMorphologyFactsheet/index.tsx","webpack://_N_E/./src/components/NeuronMorphology/index.tsx","webpack://_N_E/./src/views/digitalReconstructions/Neurons.tsx","webpack://_N_E/./src/pages/digital-reconstructions/neurons.tsx","webpack://_N_E/?67c8","webpack://_N_E/./src/components/EtypeFactsheet/index.module.scss","webpack://_N_E/./src/components/LayerSelector/styles.module.scss","webpack://_N_E/./src/styles/digital-reconstructions/neurons.module.scss"],"names":["channelParam","canvasEl","useRef","useEffect","plot","maxValue","textBottom","Chart","current","type","data","datasets","fill","parameter","arrayValues","distribution","Array","toString","parser","Parser","equation","formula","replace","expr","parse","getXAxes","map","xVal","evaluate","distance","value","Math","max","apply","getData","label","backgroundColor","labels","options","scales","yAxes","ticks","beginAtZero","suggestedMax","suggestedMin","xAxes","scaleLabel","display","labelString","title","fontSize","text","position","fontWeight","padding","legend","boxWidth","length","Function","call","x","createPlot","destroy","className","styles","ref","width","height","LAYERS","activeLayer","onLayerSelected","layer","onClick","significantFigures","thousandSeparator","prefix","suffix","isNumber","fixed","parseFloat","toPrecision","formatted","toLocaleString","replacement","MOhm","etypeFactsheetPath","instance","basePath","path","children","React","loading","error","state","setState","fetch","then","res","json","dynamic","ssr","Panel","Collapse","featureUnit","voltage_deflection","voltage_deflection_begin","voltage_base","steady_state_voltage","spikecount","time_to_first_spike","time_to_last_spike","inv_time_to_first_spike","inv_first_isi","inv_second_isi","inv_third_isi","inv_fourth_isi","inv_fifth_isi","inv_last_isi","mean_frequency","ahp_depth","AP1_amp","featureLabel","Spikecount","expFeatures","features","tableData","protocols","Object","entries","forEach","protocol","protocolVal","push","measurement","measurementVal","sort","f1","f2","featureName","featureValue","key","feature","unit","toLowerCase","mean","std","tableColumns","dataIndex","render","row","NumberFormat","channelMechanisms","distributions","sections","keys","id","bordered","defaultActiveKey","header","dataSource","columns","pagination","size","tableLayout","section","rawChannelParams","groupBy","flat","channel","channelParams","content","ChannelParamPlot","MorphologyFactsheetSingleValueEntry","fact","name","isNil","Unit","MorphologyFactsheetEntry","neuriteTypes","strPrettify","str","morphologyName","stats","ModelMorphologyStats","getFactsheetEntries","neuriteType","statKey","statValue","includes","mean_soma_radius","filter","max_section_length","neuriteHasStats","MorphoViewerContainer","modelMorphologyRe","router","useRouter","query","currentLayer","currentMtype","mtype","currentEtype","etype","currentInstance","setParams","params","pathname","undefined","shallow","mtypes","models","model","reduce","acc","cur","etypes","instances","memodelArchiveHref","match","Filters","Title","primaryColor","subtitle","InfoBox","color","LayerSelector","List","list","onSelect","anchor","DataContainer","Collapsible","ModelMorphologyFactsheet","download","href","About","MainLayout","window","__NEXT_P","module","exports"],"mappings":"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","file":"static/chunks/pages/digital-reconstructions/neurons-d1a8ec0d128052403553.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport { Parser } from 'expr-eval';\n\nimport styles from './styles.module.scss';\n\n\nexport type ChannelParam = {\n  channel: string;\n  parameter: string;\n  distribution: 'uniform' | string;\n  min?: number;\n  max?: number;\n  formula?: string;\n}\n\ntype ChannelParamPlotProps = {\n  channelParam: ChannelParam;\n}\n\nconst ChannelParamPlot: React.FC<ChannelParamPlotProps> = ({ channelParam }) => {\n  const canvasEl = useRef<HTMLCanvasElement>(null);\n\n  const createPlot = () => {\n    const plotLength = 9;\n    let maxValue = 0.012;\n    let textBottom = '';\n\n    return new Chart(canvasEl?.current, {\n      type: 'line',\n      data: {\n        datasets: [{\n          fill: 'origin',\n          data: getData(channelParam),\n          label: channelParam.parameter,\n          backgroundColor: 'rgba(255, 177, 193, 0.5)',\n        }],\n        labels: getXAxes(),\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: false,\n              suggestedMax: maxValue * 1.6,\n              suggestedMin: 0,\n            },\n          }],\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'µm',\n            },\n          }],\n        },\n        title: {\n          fontSize: 12,\n          text: textBottom,\n          position: 'bottom',\n          display: true,\n          fontWeight: 'normal',\n          padding: 6,\n        },\n        legend: {\n          labels: {\n            boxWidth: 0,\n            fontSize: 12,\n          },\n        },\n      },\n    });\n\n    function getXAxes () {\n      // generate scale with steps\n      return Array.apply(null, {\n        length: plotLength,\n      }).map(Function.call, x => x * 100);\n    }\n\n    function getData (parameter) {\n      let arrayValues = [];\n      switch (parameter.distribution) {\n      case 'uniform':\n        const UNIFORM_CONST = 1;\n        arrayValues = new Array(plotLength).fill(UNIFORM_CONST);\n        maxValue = UNIFORM_CONST;\n        textBottom = UNIFORM_CONST.toString();\n        break;\n      default:\n        const parser = new Parser();\n        const equation = parameter.formula\n          .replace(/math\\.exp/g, 'exp')\n          .replace(/\\{/g, '(')\n          .replace(/\\}/g, ')');\n\n        const expr = parser.parse(equation);\n        arrayValues = getXAxes().map(xVal => expr.evaluate({ distance: xVal, value: 1 }));\n        maxValue = Math.max.apply(null, arrayValues);\n        textBottom = parameter.formula;\n        break;\n      }\n\n      return arrayValues;\n    }\n  };\n\n  useEffect(() => {\n    if (!canvasEl) return;\n\n    const plot = createPlot();\n\n    return () => {\n      if (plot) plot.destroy();\n    };\n  }, [canvasEl]);\n\n  return (\n    <div className={styles.plotContainer}>\n      <canvas ref={canvasEl} width=\"320\" height=\"220\" />\n    </div>\n  );\n};\n\n\nexport default ChannelParamPlot;\n","import React, { ReactChild, ReactFragment } from 'react';\nimport { Layer } from '../../types';\n\nimport styles from './styles.module.scss'\n\n\ntype LayerSelectProps = {\n  activeLayer?: Layer;\n  onLayerSelected?: (layer: Layer) => void;\n};\n\nconst LAYERS: Layer[] = ['SLM', 'SR', 'SP', 'SO'];\n\nconst LayerSelector: React.FC<LayerSelectProps> = ({\n  activeLayer,\n  onLayerSelected = () => {},\n}) => {\n  const selectLayer = (l: Layer): void => onLayerSelected(l);\n\n  return (\n    <div>\n      {LAYERS.map(layer => (\n        <div\n          key={layer}\n          className={`${styles.layer} ${layer === activeLayer ? styles.active : ''}`}\n          onClick={() => selectLayer(layer)}\n        >\n          {layer}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default LayerSelector;\n","import React from 'react';\n\nimport isNumber from 'lodash/isNumber';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  if (!isNumber(value)) return value;\n\n  const fixed = parseFloat(value.toPrecision(significantFigures));\n\n  const formatted = thousandSeparator\n    ? fixed.toLocaleString('en')\n    : fixed;\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\n\nexport default NumberFormat;\n","import React from 'react';\n\ntype UnitProps = {\n  value?: string;\n}\n\nconst replacement = {\n  MOhm: 'MΩ',\n};\n\nconst Unit: React.FC<UnitProps> = ({ value = '' }) => {\n  return (\n    <>\n      {replacement[value] ?? value}\n    </>\n  );\n};\n\n\nexport default Unit;\n","\nimport { basePath } from '../../config';\n\n\nexport const subregionCircuitFactsheetPath = (subregion: string): string => {\n  return `${basePath}/data/model-data/factsheets/REGION/${subregion}/Circuit/factsheet.json`;\n};\n\nexport const regionCircuitFactsheetPath = (): string => {\n  return `${basePath}/data/model-data/factsheets/Circuit/factsheet.json`;\n}\n\nexport const subregionMicrocircuitFactsheetPath = (subregion: string): string => {\n  return `${basePath}/data/model-data/factsheets/REGION/${subregion}/Central/Circuit/factsheet.json`;\n}\n\nexport const etypeFactsheetPath = (\n  instance: string\n): string => {\n  return `${basePath}/data/model-info/${instance}/etype_factsheet.json`;\n}\n\nexport const metypeFactsheetPath = (\n  region: string,\n  mtype: string,\n  etype: string,\n  instance: string,\n) => {\n  return `${basePath}/data/memodel_factsheets/${mtype}/${etype}/${region}/${instance}/me_type_factsheeet.json`;\n}\n\nexport const layerFactsheetPath = (subregion: string, layerNum: number): string => {\n  return `${basePath}/data/model-data/factsheets/REGION/${subregion}/Central/CircuitLayers/${layerNum}/factsheet.json`;\n};\n\nexport const pathwayFactsheetPath = (subregion: string, pathway: string): string => {\n  return `${basePath}/data/model-data/factsheets/REGION/${subregion}/Central/Pathways/${pathway}/factsheet.json`;\n};\n\nexport const expMorphologyFactsheetPath = (morphologyName: string): string => {\n  return `${basePath}/data/exp-morphologies/factsheets/${morphologyName}/morphology_factsheeet.json`;\n};\n\nexport const morphHistogramIndexPath = (region: string, mtype: string) => {\n  return `${basePath}/data/morph-histogram/${region}_Column/${mtype}/histogram-index.json`;\n};\n","import React from 'react';\n\n\ntype HttpDataProps = {\n  path: string;\n  children: (\n    data: any,\n    loading: boolean,\n    error: any,\n  ) => React.ReactNode;\n};\n\nconst HttpData: React.FC<HttpDataProps> = ({ path, children }) => {\n  const [state, setState] = React.useState<{\n    data: any;\n    loading: boolean;\n    error: any;\n  }>({\n    data: null,\n    loading: false,\n    error: null,\n  });\n\n  React.useEffect(() => {\n    if (path) {\n      setState({ ...state, loading: true, data: null });\n      fetch(path)\n        .then(res => res.json())\n        .then(data => setState({ ...state, data, error: false }))\n        .catch(error => setState({ ...state, error, data: null }));\n    }\n  }, [path]);\n\n  if (!path) {\n    return null;\n  }\n\n  if (state.loading || !state.data) {\n    return <p>loading...</p>;\n  }\n  if (state.error) {\n    return <p>An error happened loading the data... Please try again later.</p>;\n  }\n\n  return (\n    <>\n      {children(state.data, state.loading, state.error)}\n    </>\n  );\n};\n\nexport default HttpData;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nexport * from './plot';\n\n\nexport default dynamic(() => import('./plot'), { ssr: false });\n","import React from 'react';\nimport get from 'lodash/get';\nimport groupBy from 'lodash/groupBy';\nimport { Table, Collapse, Popover } from 'antd';\n\nimport NumberFormat from '../NumberFormat';\nimport ChannelParamPlot from '../ChannelParamPlot';\nimport styles from './index.module.scss';\n\n\nconst { Panel } = Collapse;\n\nexport type EtypeFactsheetProps = {\n  data?: any;\n};\n\nconst featureUnit = {\n  voltage_deflection: 'mV',\n  voltage_deflection_begin: 'mV',\n  voltage_base: 'mV',\n  steady_state_voltage: 'mV',\n  spikecount: '',\n  time_to_first_spike: 'ms',\n  time_to_last_spike: 'ms',\n  inv_time_to_first_spike: 'Hz',\n  inv_first_isi: 'Hz',\n  inv_second_isi: 'Hz',\n  inv_third_isi: 'Hz',\n  inv_fourth_isi: 'Hz',\n  inv_fifth_isi: 'Hz',\n  inv_last_isi: 'Hz',\n  mean_frequency: 'ms',\n  ahp_depth: 'mV',\n  AP1_amp: 'mV',\n};\n\nconst featureLabel = {\n  Spikecount: 'spikecount',\n}\n\n\nconst EtypeFactsheet: React.FC<EtypeFactsheetProps> = ({\n  data,\n}) => {\n  // Experimental features table data preparation\n  const expFeatures = data.features;\n\n  const tableData = {};\n  const protocols = [];\n  Object.entries(expFeatures).forEach(([protocol, protocolVal]) => {\n    protocols.push(protocol);\n    Object.entries(protocolVal).forEach(([measurement, measurementVal]) => {\n      Object.entries(measurementVal).sort((f1, f2) => (f1[0] > f2[0] ? 1 : -1)).forEach(([featureName, featureValue]) => {\n        if (!tableData[protocol]) {\n          tableData[protocol] = [];\n        }\n\n        tableData[protocol].push({\n          key: featureName,\n          protocol,\n          measurement,\n          feature: featureLabel[featureName] || featureName,\n          unit: featureUnit[featureName.toLowerCase()],\n          mean: featureValue[0],\n          std: featureValue[1],\n        })\n      });\n    });\n  });\n\n  protocols.sort();\n\n  const tableColumns = [\n    {\n      title: 'Feature',\n      dataIndex: 'feature',\n      render: feature => feature.replace(/\\_/g, ' '),\n    },\n    {\n      title: 'Recording site',\n      dataIndex: 'measurement',\n    },\n    {\n      title: 'Mean',\n      dataIndex: 'mean',\n      render: (mean, row) => <span><NumberFormat value={mean} /> {row.unit}</span>\n    },\n    {\n      title: 'Std',\n      dataIndex: 'std',\n      render: (std, row) => <span><NumberFormat value={std} /> {row.unit}</span>\n    },\n    // {\n    //   title: 'Model fitness',\n    //   dataIndex: 'modelFitness',\n    //   render: modelFitness => <NumberFormat value={modelFitness} />\n    // },\n  ];\n\n  // Channel mechanisms data preparation\n  const channelMechanisms = data.distributions;\n  const sections = Object.keys(channelMechanisms);\n\n  const groupByChannel = (rawChannelParams) => groupBy(rawChannelParams.flat(), 'channel');\n\n  return (\n    <div id=\"etypeFactsheet\" className={styles.container}>\n      <h3>Factsheet</h3>\n      <Collapse\n        className=\"mb-3\"\n        bordered={false}\n        defaultActiveKey={protocols[0]}\n      >\n        {protocols.map(protocol => (\n          <Panel key={protocol} header={<strong>{protocol}</strong>}>\n            <Table\n              dataSource={tableData[protocol]}\n              columns={tableColumns}\n              pagination={false}\n              size=\"small\"\n              tableLayout=\"fixed\"\n              bordered\n            />\n          </Panel>\n        ))}\n      </Collapse>\n\n      <h3>Channel Mechanisms</h3>\n      <div className={styles.mechanisms}>\n        <div className=\"row mb-1\">\n          <div className=\"col-xs-6 col-md-4\"><strong>Sections</strong></div>\n          <div className=\"col-xs-6 col-md-8\"><strong>Mechanisms</strong></div>\n        </div>\n        {sections.map(section => (\n          <div className={`row ${styles.mechanismsRow}`} key={section}>\n            <div className=\"col-xs-6 col-md-4\">{section}</div>\n            <div className=\"col-xs-6 col-md-8\">\n              {Object.entries<any[]>(groupByChannel(channelMechanisms[section])).map(([channel, channelParams]) => (\n                <Popover\n                  key={channel}\n                  title={channel}\n                  content={(\n                    <>\n                      {channelParams.map(channelParam => (\n                        <ChannelParamPlot\n                          key={channelParam.parameter}\n                          channelParam={channelParam}\n                        />\n                      ))}\n                    </>\n                  )}\n                >\n                  <span\n                    className={styles.channelLabel}\n                  >\n                    {channelParams[0].channel}\n                  </span>\n                </Popover>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n\nexport default EtypeFactsheet;\n","import React from 'react';\nimport NumberFormat from '../NumberFormat';\nimport isNil from 'lodash/isNil';\n\nimport Unit from '../Unit';\nimport ModelMorphologyStats from '../../model-morphology-stats.json';\n\n\nconst classPrefix = 'factsheet__';\n\n\ntype MorphologyFactsheetEntryType = {\n  name: string;\n  description?: string;\n  unit?: string;\n  value?: number | string;\n  value_map?: {\n    [key: string]: string | number;\n  };\n};\n\n\ntype MorphologyFactsheetProps = {\n  morphologyName: string;\n  className?: string;\n};\n\n\nconst MorphologyFactsheetSingleValueEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType;\n}> = ({\n  fact\n}) => {\n  return (\n    <div className=\"row mt-1\">\n      <div className=\"col-xs-8 col-sm-4 name\">{fact.name}</div>\n      <div className=\"col-xs-4 col-sm-8 value\">\n        {isNil(fact.value)\n          ? (<span>-</span>)\n          : (<span>\n              <NumberFormat value={fact.value} /> <Unit value={fact.unit} />\n            </span>)\n        }\n      </div>\n    </div>\n  );\n};\n\nconst MorphologyFactsheetEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType\n}> = ({\n  fact\n}) => {\n  return (<MorphologyFactsheetSingleValueEntry fact={fact} />);\n};\n\nconst neuriteTypes = ['all', 'axon', 'apical_dendrite', 'basal_dendrite'];\n\nconst strPrettify = (str) => str ? str.replace(/\\_/g, ' ') : str;\n\nconst MorphologyFactsheet: React.FC<MorphologyFactsheetProps> = ({\n  morphologyName,\n  className = '',\n}) => {\n  const stats = ModelMorphologyStats[morphologyName];\n\n  if (!stats) {\n    return (\n      <p className=\"red\">No morphology stats found</p>\n    );\n  }\n\n  const neuriteHasStats = (neuriteType) => !!stats[neuriteType].max_section_length;\n\n  const getFactsheetEntries = (neuriteType) => {\n    return Object.entries(stats[neuriteType]).map(([statKey, statValue]) => ({\n      name: strPrettify(statKey),\n      unit: (statKey as string).includes('volume') ? 'µm³' : ((statKey as string).includes('length') ? 'µm' : ''),\n      value: statValue\n    }));\n  };\n\n  return (\n    <div id=\"modelMorphologyFactsheet\" className={`${classPrefix}basis ${className}`}>\n      <div className=\"mb-3 mt-3\">\n        <MorphologyFactsheetEntry fact={{\n          name: 'soma diameter',\n          unit: 'µm',\n          value: stats.mean_soma_radius * 2,\n        }} />\n      </div>\n\n      {neuriteTypes.filter(neuriteType => neuriteHasStats(neuriteType)).map(neuriteType => (\n        <div className=\"mb-2\" key={neuriteType}>\n          <strong className=\"text-capitalize\">{strPrettify(neuriteType)}</strong>\n          {getFactsheetEntries(neuriteType).map(fact => (\n            <MorphologyFactsheetEntry key={fact.name} fact={fact as MorphologyFactsheetEntryType} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MorphologyFactsheet;\n","import React from 'react';\nimport dynamic from 'next/dynamic'\n\n\nconst MorphoViewerContainer = dynamic(() => import('./MorphoViewerContainer'), { ssr: false });\n\ntype NeuronMorphologyProps = {\n  path: string;\n};\n\nconst NeuronMorphology: React.FC<NeuronMorphologyProps> = ({ path }) => {\n  return (\n    <MorphoViewerContainer path={path} />\n  );\n};\n\n\nexport default NeuronMorphology;\n","import React from 'react';\n\nimport { useRouter } from 'next/router';\nimport { Button } from 'antd';\n\nimport { etypeFactsheetPath } from '../../queries/http';\nimport Title from '../../components/Title';\nimport LayerSelector from '../../components/LayerSelector';\nimport InfoBox from '../../components/InfoBox';\nimport Filters from '../../layouts/Filters';\nimport HttpData from '../../components/HttpData';\nimport DataContainer from '../../components/DataContainer';\nimport { Layer } from '../../types';\nimport List from '../../components/List';\nimport Collapsible from '../../components/Collapsible';\nimport EtypeFactsheet from '../../components/EtypeFactsheet';\nimport ModelMorphologyFactsheet from '../../components/ModelMorphologyFactsheet';\nimport NeuronMorphology from '../../components/NeuronMorphology';\nimport { basePath } from '../../config';\nimport models from '../../models.json';\n\nimport styles from '../../styles/digital-reconstructions/neurons.module.scss';\n\n\nconst modelMorphologyRe = /^[a-zA-Z0-9]+\\_[a-zA-Z0-9]+\\_[a-zA-Z0-9]+\\_(.+)\\_[a-zA-Z0-9]+$/;\n\n\nconst Neurons: React.FC = () => {\n  const router = useRouter();\n\n  const query = {\n    ...router?.query\n  };\n\n  const currentLayer: Layer = query.layer as Layer;\n  const currentMtype: string = query.mtype as string;\n  const currentEtype: string = query.etype as string;\n  const currentInstance: string = query.instance as string;\n\n  const setParams = (params: Record<string, string>): void => {\n    const query = {\n      ...{\n        layer: currentLayer,\n        mtype: currentMtype,\n        etype: currentEtype,\n        instance: currentInstance,\n      },\n      ...params,\n    };\n    router.push({ query, pathname: router.pathname }, undefined, { shallow: true });\n  };\n\n  const setLayer = (layer: Layer) => {\n    setParams({\n      layer,\n      mtype: null,\n      etype: null,\n      instance: null,\n    })\n  };\n  const setMtype = (mtype: string) => {\n    setParams({\n      mtype,\n      etype: null,\n      instance: null,\n    })\n  };\n  const setEtype = (etype: string) => {\n    setParams({\n      etype,\n      instance: null,\n    })\n  };\n  const setInstance = (instance: string) => {\n    setParams({ instance })\n  };\n\n  const mtypes = currentLayer\n    ? models\n      .filter(model => model.layer === currentLayer)\n      .map(model => model.mtype)\n      .reduce((acc, cur) => acc.includes(cur) ? acc : [...acc, cur], [])\n      .sort()\n    : [];\n\n  const etypes = currentMtype\n    ? models\n      .filter(model => model.mtype === currentMtype)\n      .map(model => model.etype)\n      .reduce((acc, cur) => acc.includes(cur) ? acc : [...acc, cur], [])\n      .sort()\n    : [];\n\n  const instances = currentEtype\n    ? models\n      .filter(model => model.mtype === currentMtype && model.etype === currentEtype)\n      .map(model => model.name)\n      .sort()\n    : [];\n\n  const getMorphologyDistribution = (morphologyResource: any) => {\n    return morphologyResource.distribution.find((d: any) => d.name.match(/\\.asc$/i));\n  };\n\n  const memodelArchiveHref = `https://object.cscs.ch/v1/AUTH_c0a333ecf7c045809321ce9d9ecdfdea/hippocampus_optimization/rat/CA1/v4.0.5/optimizations_Python3/${currentInstance}/${currentInstance}.zip?bluenaas=true`;\n\n  const morphologyName = currentInstance\n    ? currentInstance.match(modelMorphologyRe)[1]\n    : null;\n\n  return (\n    <>\n      <Filters>\n        <div className=\"row bottom-xs w-100\">\n          <div className=\"col-xs-12 col-lg-6\">\n            <Title\n              primaryColor=\"grey-1\"\n              title={<span>Neurons</span>}\n              subtitle=\"Digital Reconstructions\"\n            />\n            <InfoBox\n              color=\"grey-1\"\n              text=\"We reconstructed the 3D morphology of single neurons and classified them into morphological types (m-types). In addition, we recorded electrical traces from the same cell types and classified the traces into electrical types (e-types). Finally, we mapped the e-types expressed in each m-type to account for the observed diversity of morpho-electrical subtypes (me-types).\"\n            />\n          </div>\n          <div className=\"col-xs-12 col-lg-6\">\n            <div className={styles.selector}>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>1. Choose a layer</div>\n                <div className={styles.selectorBody}>\n                  <LayerSelector\n                    activeLayer={currentLayer}\n                    onLayerSelected={setLayer}\n                  />\n                </div>\n              </div>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>2. Select model</div>\n                <div className={styles.selectorBody}>\n                  <List\n                    className=\"mb-2\"\n                    list={mtypes}\n                    value={currentMtype}\n                    title={`M-type ${mtypes.length ? '(' + mtypes.length + ')' : ''}`}\n                    color=\"grey-1\"\n                    onSelect={setMtype}\n                  />\n                  <List\n                    className=\"mb-2\"\n                    list={etypes}\n                    value={currentEtype}\n                    title={`E-type ${etypes.length ? '(' + etypes.length + ')' : ''}`}\n                    color=\"grey-1\"\n                    onSelect={setEtype}\n                  />\n                  <List\n                    list={instances}\n                    value={currentInstance}\n                    title={`ME-type instance ${instances.length ? '(' + instances.length + ')' : ''}`}\n                    color=\"grey-1\"\n                    onSelect={setInstance}\n                    anchor=\"data\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <div id=\"data\" />\n\n      {!!currentInstance && <DataContainer >\n        <Collapsible className=\"mt-4\" title={`Model instance ${currentInstance} Factsheet`}>\n          <h3>Anatomy</h3>\n          <ModelMorphologyFactsheet morphologyName={morphologyName} />\n\n          <div className=\"row end-xs mt-3 mb-4\">\n            <div className=\"col\">\n              <Button\n                type=\"primary\"\n                download\n                href={memodelArchiveHref}\n              >\n                Download model\n              </Button>\n            </div>\n          </div>\n\n          <h3 className=\"mb-3\">Morphology</h3>\n          <NeuronMorphology path={`${basePath}/data/model-morphologies-swc/${morphologyName}.swc`} />\n          <div className=\"row end-xs mt-3 mb-3\">\n            <div className=\"col\">\n              <Button\n                type=\"primary\"\n                download\n                href={`${basePath}/data/model-morphologies-asc/${morphologyName}.asc`}\n              >\n                Download morphology\n              </Button>\n            </div>\n          </div>\n        </Collapsible>\n\n        <Collapsible className=\"mt-4\" title={`E-Type ${currentEtype} Factsheet`}>\n          <HttpData path={etypeFactsheetPath(currentInstance)}>\n            {data => (\n              <>\n                <EtypeFactsheet data={data} />\n                <div className=\"text-right mt-3 mb-3\">\n                  <Button\n                    type=\"primary\"\n                    href={etypeFactsheetPath(currentInstance)}\n                    download\n                  >\n                    Download factsheet\n                  </Button>\n                </div>\n              </>\n            )}\n          </HttpData>\n          {/* TODO: add experimental traces used for model fitting */}\n        </Collapsible>\n\n      </DataContainer>}\n    </>\n  );\n};\n\nexport default Neurons;\n","import React from 'react';\n\nimport MainLayout from '../../layouts/MainLayout';\nimport NeuronsView from '../../views/digitalReconstructions/Neurons';\n\n\nexport default function About() {\n  return (\n    <MainLayout>\n      <NeuronsView />\n    </MainLayout>\n  );\n};\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/digital-reconstructions/neurons\",\n      function () {\n        return require(\"private-next-pages/digital-reconstructions/neurons.tsx\");\n      }\n    ]);\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mechanisms\":\"EtypeFactsheet_mechanisms__3CSqg\",\"mechanismsRow\":\"EtypeFactsheet_mechanismsRow__3lud9\",\"channelLabel\":\"EtypeFactsheet_channelLabel__1wOJ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layer\":\"styles_layer__uUJ49\",\"active\":\"styles_active__1RUjp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"neurons_selector__2DgdB\",\"selectorColumn\":\"neurons_selectorColumn__1Ifs_\",\"selectorHead\":\"neurons_selectorHead__2rPY0\",\"selectorBody\":\"neurons_selectorBody__2qh5E\"};"],"sourceRoot":""}