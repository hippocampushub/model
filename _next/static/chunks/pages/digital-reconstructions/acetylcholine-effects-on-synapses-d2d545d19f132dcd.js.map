{"version":3,"file":"static/chunks/pages/digital-reconstructions/acetylcholine-effects-on-synapses-d2d545d19f132dcd.js","mappings":"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","sources":["webpack://_N_E/?8d03","webpack://_N_E/./src/components/DistributionPlot/index.tsx","webpack://_N_E/./src/components/List/index.tsx","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/views/3_digital-reconstructions/acetylcholine/CustomPlot.tsx","webpack://_N_E/./src/views/3_digital-reconstructions/AcetylcholineEffectsOnSynapses.tsx","webpack://_N_E/./src/pages/digital-reconstructions/acetylcholine-effects-on-synapses.tsx","webpack://_N_E/./src/views/3_digital-reconstructions/components/Trace.tsx","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/digital-reconstructions/acetylcholine-effects-on-synapses\",\n      function () {\n        return require(\"private-next-pages/digital-reconstructions/acetylcholine-effects-on-synapses.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/digital-reconstructions/acetylcholine-effects-on-synapses\"])\n      });\n    }\n  ","import React, { useMemo, useEffect, useState } from 'react';\nimport {\n    Chart as ChartJS,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n    ChartOptions,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { graphTheme } from '@/constants';\n\nChartJS.register(LinearScale, BarElement, Title, Tooltip, Legend);\n\ninterface PlotDetailsProps {\n    plotData: any;\n    xAxis?: string;\n    yAxis?: string;\n    xAxisTickStep?: number;\n    MeanStd?: { mean: number, std: number };\n}\n\nconst DistributionPlot: React.FC<PlotDetailsProps> = ({\n    plotData,\n    xAxis = 'Value',\n    yAxis = 'Frequency',\n    xAxisTickStep = 1,\n    MeanStd\n}) => {\n    const [windowWidth, setWindowWidth] = useState(0);\n\n    useEffect(() => {\n        if (typeof window !== 'undefined') {\n            setWindowWidth(window.innerWidth);\n\n            const handleResize = () => {\n                setWindowWidth(window.innerWidth);\n            };\n\n            window.addEventListener('resize', handleResize);\n\n            return () => {\n                window.removeEventListener('resize', handleResize);\n            };\n        }\n    }, []);\n\n    const formatScientificNotation = (value: number): string => {\n        if (Math.abs(value) < 1000) {\n            return value.toString();\n        }\n        if (value === 0) return '0';\n        const exponent = Math.floor(Math.log10(Math.abs(value)));\n        const mantissa = value / Math.pow(10, exponent);\n        const roundedMantissa = Math.round(mantissa * 100) / 100;\n        const superscriptDigits = ['⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹'];\n        const superscriptExponent = Math.abs(exponent)\n            .toString()\n            .split('')\n            .map((digit) => superscriptDigits[parseInt(digit)])\n            .join('');\n        return `${roundedMantissa}*10${exponent < 0 ? '⁻' : ''}${superscriptExponent}`;\n    };\n\n    const { dataPoints, units, name, description } = useMemo(() => {\n        if (!plotData) {\n            //console.error('Plot data is undefined or null');\n            return { dataPoints: [], units: null, name: '', description: '' };\n        }\n\n        const createHistogram = (data: number[]) => {\n            const binCount = Math.min(20, data.length);\n            const min = Math.min(...data);\n            const max = Math.max(...data);\n            const binWidth = (max - min) / binCount;\n\n            const bins = Array.from({ length: binCount + 1 }, (_, i) => min + i * binWidth);\n            const counts = new Array(binCount).fill(0);\n\n            data.forEach((value) => {\n                const binIndex = Math.min(\n                    Math.floor((value - min) / binWidth),\n                    binCount - 1\n                );\n                counts[binIndex]++;\n            });\n\n            const dataPoints = counts.map((count, i) => ({\n                x: bins[i],\n                y: count,\n            }));\n\n            return { dataPoints };\n        };\n\n        if (Array.isArray(plotData)) {\n            const { dataPoints } = createHistogram(plotData);\n            return {\n                dataPoints,\n                units: null,\n                name: '',\n                description: '',\n            };\n        } else if (typeof plotData === 'object' && plotData !== null) {\n            if ('freq' in plotData && 'bins' in plotData) {\n                const dataPoints = plotData.bins.map((bin: number, index: number) => ({\n                    x: bin,\n                    y: plotData.freq[index],\n                }));\n                return {\n                    dataPoints,\n                    units: plotData.units,\n                    name: plotData.name || '',\n                    description: plotData.description || '',\n                };\n            } else if ('bins' in plotData && 'counts' in plotData) {\n                const dataPoints = plotData.bins.map((bin: number, index: number) => ({\n                    x: bin,\n                    y: plotData.counts[index],\n                }));\n                return {\n                    dataPoints,\n                    units: null,\n                    name: '',\n                    description: '',\n                };\n            } else if ('values' in plotData && Array.isArray(plotData.values)) {\n                const flatValues = plotData.values.flat();\n                const { dataPoints } = createHistogram(flatValues);\n                return {\n                    dataPoints,\n                    units: null,\n                    name: '',\n                    description: '',\n                };\n            } else {\n                const dataPoints = Object.entries(plotData).map(([key, value]) => ({\n                    x: parseFloat(key),\n                    y: value,\n                }));\n                return {\n                    dataPoints,\n                    units: null,\n                    name: '',\n                    description: '',\n                };\n            }\n        } else {\n            console.error('Unexpected data format', plotData);\n            return { dataPoints: [], units: null, name: '', description: '' };\n        }\n    }, [plotData]);\n\n    const options: ChartOptions<'bar'> = useMemo(\n        () => ({\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    display: false,\n                },\n                tooltip: {\n                    callbacks: {\n                        title: (tooltipItems: any) => {\n                            const index = tooltipItems[0].dataIndex;\n                            const binStart = tooltipItems[0].parsed.x;\n                            const binEnd = dataPoints[index + 1]\n                                ? dataPoints[index + 1].x\n                                : binStart;\n                            return `${binStart} - ${binEnd} ${units || ''}`;\n                        },\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    type: 'linear' as const,\n                    title: {\n                        display: true,\n                        text: xAxis,\n                    },\n                    ticks: {\n                        stepSize: xAxisTickStep,\n                        maxRotation: 0,\n                        minRotation: 0,\n                        callback: function (value) {\n                            return value.toString();\n                        },\n                    },\n                },\n                y: {\n                    title: {\n                        display: true,\n                        text: yAxis,\n                    },\n                    ticks: {\n                        callback: function (value) {\n                            return formatScientificNotation(Number(value));\n                        },\n                    },\n                },\n            },\n        }),\n        [xAxisTickStep, xAxis, yAxis, dataPoints, units]\n    );\n\n    if (dataPoints.length === 0) {\n        return <div>No data available for the plot.</div>;\n    }\n\n    const data = {\n        datasets: [\n            {\n                label: 'Frequency',\n                data: dataPoints,\n                backgroundColor: graphTheme.blue,\n                borderWidth: 0, // Removed borders\n                barPercentage: 0.9, // Adjusted for spacing\n                categoryPercentage: 0.9, // Adjusted for spacing\n            },\n        ],\n    };\n\n    return (\n        <div>\n            {MeanStd && (\n                <div className=\"mt-4\">\n                    <p>Mean: {MeanStd?.mean?.toFixed(4)}</p>\n                    <p>Standard Deviation: {MeanStd?.std?.toFixed(4)}</p>\n                </div>\n            )}\n            {name && <h2>{name}</h2>}\n            {description && <p>{description}</p>}\n            <div style={{ width: '100%', height: '400px' }}>\n                <Bar data={data} options={options} />\n            </div>\n        </div>\n    );\n};\n\nexport default DistributionPlot;\n","import React from 'react';\n\nimport { Color } from '../../types';\n\n\nconst classPrefixList = 'list__';\nconst classPrefixListElement = 'list-element__';\n\ntype ListProps = {\n  title?: string;\n  list: string[];\n  value?: string;\n  onSelect?: (s: string) => void;\n  color?: Color;\n  anchor?: string;\n  block?: boolean;\n  className?: string;\n  theme?: number;\n  grow?: boolean\n};\n\nconst List: React.FC<ListProps> = ({\n  title,\n  list,\n  value,\n  onSelect = () => { },\n  color,\n  theme = 1,\n  className = '',\n  block = false,\n  grow\n}) => {\n  const handleSelectedElement = (element: string) => onSelect(element);\n\n  return (\n    <div\n      className={`${classPrefixList}basis  ${grow && 'flex-1 !flex flex-col'} set-accent-color--${color} selected theme-${theme} ${className} ${block ? 'block' : ''}`}\n      role=\"radiogroup\"\n    >\n      {title && <p className={`theme-${theme}`}>{title}</p>}\n      <div className={`elements ${grow && 'flex-grow'}`}>\n        {list.map(element => (\n          <div\n            key={element}\n            role=\"radio\"\n            aria-checked={value === element}\n            tabIndex={0}\n            className={`${classPrefixListElement}basis theme-${theme} ${value === element ? 'selected ' : ''}`}\n            onClick={() => handleSelectedElement(element)}\n            title={element}\n          >\n            {element}\n          </div>\n\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import { Layer, NeuriteType, VolumeSection, AchConcentration, CellGroup, Theme, GraphTheme, ThemeColors } from './types';\nimport NeuronModelLibrary from './views/2_reconstruction-data/NeuronModelLibrary';\nimport AcetylcholineView from './views/4_validations/Acetylcholine';\n\nexport const layers: Layer[] = [\n  'SLM',\n  'SR',\n  'SP',\n  'SO',\n];\n\nexport const theme: Theme = {\n  1: { default: 0x44405B, hover: 0x7D656F, selected: 0xB68983, selectedEdges: 0xEFAE97 },\n  2: { default: 0x44405B, hover: 0x7B5B6A, selected: 0xB37579, selectedEdges: 0xEA9088 },\n  3: { default: 0x44405B, hover: 0x715970, selected: 0x9F7184, selectedEdges: 0xCC8A99 },\n  4: { default: 0x44405B, hover: 0x625D77, selected: 0x807B92, selectedEdges: 0x9E98AE },\n  5: { default: 0x393D5E, hover: 0x595D79, selected: 0x6E7B97, selectedEdges: 0x8398B5 },\n};\n\nexport const graphTheme: GraphTheme = {\n  red: \"#C46785\",\n  blue: \"#3b4165\",\n  green: \"#7FD982\",\n  purple: \"#7F5482\",\n  yellow: \"#f9f871\",\n};\n\nexport const themeColors: ThemeColors = {\n  experimental_data: \"#EFAE97\",\n  reconstruction_data: \"#EA9088\",\n  digital_reconstruction: \"#CC8A99\",\n  validations: \"#9E98AE\",\n  predictions: \"#8398B5\",\n};\n\n\n\nexport const neuriteTypes: NeuriteType[] = [\n  'all',\n  'axon',\n  'apical',\n  'basal',\n  'dendrite',\n  'soma',\n\n];\n\nexport const volumeSections: VolumeSection[] = [\n  'region',\n  'slice',\n  'cylinder',\n];\n\n\nexport const achConcentrations: AchConcentration[] = [\n  '0um',\n  '10um',\n  '100um'\n];\n\nexport const cellGroup: CellGroup[] = [\n  'All',\n  'Excitatory',\n  'Inhibitory',\n  'SLM_PPA',\n  'SO_BP',\n  'SO_BS',\n  'SO_OLM',\n  'SO_Tri',\n  'SP_AA',\n  'SP_BS',\n  'SP_CCKBC',\n  'SP_Ivy',\n  'SP_PC',\n  'SP_PVBC',\n  'SR_SCA'\n]\n\nexport const defaultSelection = {\n  experimentalData: {\n    layerAnatomy: {\n      layer: 'SLM',\n    },\n    neuronMorphology: {\n      layer: 'SLM',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    neuronElectrophysiology: {\n      etype: 'bAC',\n      etype_instance: '95810035',\n    },\n  },\n  reconstructionData: {\n    volume: {\n      volume_section: 'region',\n    },\n    cellComposition: {\n      volume_section: 'region',\n    },\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: 'CA1_int_bAC_011127HP1_20190329115610',\n    },\n  },\n  digitalReconstruction: {\n    region: {\n      volume_section: 'region',\n    },\n    morphologyLibrary: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      morphology: '011127HP1',\n    },\n    schafferCollateral: {\n      volume_section: 'region',\n      prelayer: 'SC',\n      postlayer: 'All'\n    },\n    connectionAnatomy: {\n      volume_section: 'region',\n      prelayer: 'All',\n      postlayer: 'All'\n    },\n    connectionPhysiology: {\n      volume_section: 'region',\n      prelayer: 'all',\n      postlayer: 'all'\n    },\n    acetylcholineEffectsOnCell: {\n      morphology: \"450290\",\n      etype: \"cNAC\",\n      mtype: \"SO_BP\"\n    },\n    acetylcholineEffectsOnSynapses: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory'\n    },\n\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    NeuronModelLibrary: {\n      mtype: 'SO_BP',\n      etype: 'cNAC',\n      morphology: '980120A_-_Scale_x1.000_y0.900_z1.000'\n    },\n    synapticPathways: {\n      volume_section: 'slice',\n      prelayer: 'All',\n      postlayer: 'All',\n    },\n    acetylcholine: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory',\n    },\n  },\n\n};\n\nexport const neuriteColor: Record<NeuriteType, string> = {\n  all: '#1fcf1f',\n  axon: '#1111ff',\n  apical: '#f442ad',\n  basal: '#ff1111',\n  dendrite: '#ff1111',\n  soma: '#000',\n};\n","import React, { useMemo } from 'react';\nimport DistributionPlot from '@/components/DistributionPlot';\n\nconst CustomPlot = ({ plotData }) => {\n    const processedData = useMemo(() => {\n        if (!plotData || !plotData.value) {\n            return null;\n        }\n\n        // Check if the value is already an array (for PSP and CV distributions)\n        if (Array.isArray(plotData.value)) {\n            return plotData.value;\n        }\n\n        // For u_syn distribution, we need to create a histogram\n        if (plotData.id === 'u_syn-distribution') {\n            const values = plotData.value;\n            const bins = 20; // You can adjust this number\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            const binWidth = (max - min) / bins;\n\n            const histogram = new Array(bins).fill(0);\n            values.forEach(value => {\n                const binIndex = Math.min(Math.floor((value - min) / binWidth), bins - 1);\n                histogram[binIndex]++;\n            });\n\n            return {\n                bins: Array.from({ length: bins }, (_, i) => min + (i + 0.5) * binWidth),\n                counts: histogram\n            };\n        }\n\n        return null;\n    }, [plotData]);\n\n    if (!processedData) {\n        return <div>No data available for this plot.</div>;\n    }\n\n    return (\n        <DistributionPlot\n            plotData={processedData}\n            xAxis={plotData.units || 'Value'}\n            yAxis=\"Frequency\"\n        />\n    );\n};\n\nexport default CustomPlot;","import React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\n\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\nimport CustomPlot from './acetylcholine/CustomPlot';\nimport TraceGraph from './components/Trace';\nimport List from '@/components/List';\nimport DownloadButton from '@/components/DownloadButton';\n\nimport { cellGroup, defaultSelection, achConcentrations } from '@/constants';\nimport { Layer, QuickSelectorEntry, AchConcentration } from '@/types';\nimport { dataPath } from '@/config';\nimport { downloadAsJson } from '@/utils';\n\nconst AcetylcholineEffectOnSynapsesView: React.FC = () => {\n  const router = useRouter();\n  const { ach_concentration, prelayer, postlayer } = router.query as Record<string, string>;\n\n  const [quickSelection, setQuickSelection] = useState({ ach_concentration, prelayer, postlayer });\n  const [factsheetData, setFactsheetData] = useState<any>(null);\n  const [traceData, setTraceData] = useState<any>(null);\n  const [availablePlots, setAvailablePlots] = useState({\n    PSPDistribution: false,\n    CVDistribution: false,\n    USYNDistribution: false,\n  });\n\n  const theme = 3;\n  const filteredCellGroup = cellGroup.filter(cell => cell !== 'All');\n\n  useEffect(() => {\n    if (!router.isReady) return;\n\n    if (!ach_concentration && !prelayer && !postlayer) {\n      const { ach_concentration, prelayer, postlayer } = defaultSelection.digitalReconstruction.acetylcholineEffectsOnSynapses;\n      setQuickSelection({ ach_concentration, prelayer, postlayer });\n      router.replace({ query: { ach_concentration, prelayer, postlayer } }, undefined, { shallow: true });\n    } else {\n      setQuickSelection({ ach_concentration, prelayer, postlayer });\n    }\n  }, [router.isReady, ach_concentration, prelayer, postlayer]);\n\n  useEffect(() => {\n    if (ach_concentration && prelayer && postlayer) {\n      fetchFactsheetData();\n      fetchTraceData();\n    }\n  }, [ach_concentration, prelayer, postlayer]);\n\n  const fetchFactsheetData = async () => {\n    try {\n      const response = await fetch(`${dataPath}/3_digital-reconstruction/acetylcholine-effect-on-synapses/${ach_concentration}/${prelayer}-${postlayer}/Ach_effect_on_synapse.json`);\n      const data = await response.json();\n      if (data && Array.isArray(data.values)) {\n        setFactsheetData(data.values);\n        setAvailablePlots({\n          PSPDistribution: data.values.some((plot: any) => plot.id === 'psp-amp-distribution'),\n          CVDistribution: data.values.some((plot: any) => plot.id === 'cv-distribution'),\n          USYNDistribution: data.values.some((plot: any) => plot.id === 'u_syn-distribution'),\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching factsheet:', error);\n    }\n  };\n\n  const fetchTraceData = async () => {\n    try {\n      const response = await fetch(`${dataPath}/3_digital-reconstruction/acetylcholine-effect-on-synapses/${ach_concentration}/${prelayer}-${postlayer}/trace.json`);\n      const data = await response.json();\n      console.log('Trace data:', data); // Log the fetched data\n      setTraceData(data);\n    } catch (error) {\n      console.error('Error fetching trace data:', error);\n    }\n  };\n\n  const setParams = (params: Partial<typeof quickSelection>) => {\n    const updatedSelection = { ...quickSelection, ...params };\n    setQuickSelection(updatedSelection);\n    router.push({ query: updatedSelection }, undefined, { shallow: true });\n  };\n\n  const qsEntries: QuickSelectorEntry[] = [\n    {\n      title: 'Acetylcholine concentration',\n      key: 'ach_concentration',\n      values: achConcentrations,\n      setFn: (value: AchConcentration) => setParams({ ach_concentration: value }),\n    },\n    {\n      title: 'Pre-synaptic cell group',\n      key: 'prelayer',\n      values: filteredCellGroup,\n      setFn: (value: Layer) => setParams({ prelayer: value }),\n    },\n    {\n      title: 'Post-synaptic cell group',\n      key: 'postlayer',\n      values: filteredCellGroup,\n      setFn: (value: Layer) => setParams({ postlayer: value }),\n    },\n  ];\n\n  const getPlotDataById = (id: string) => factsheetData?.find((plot: any) => plot.id === id);\n\n  return (\n    <>\n      <Filters theme={theme} hasData={!!prelayer && !!postlayer}>\n        <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n          <div className=\"w-full lg:w-1/2 md:w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n            <StickyContainer>\n              <Title\n                title=\"Acetylcholine - Effects on Synapses\"\n                subtitle=\"Digital Reconstructions\"\n                theme={theme}\n              />\n              <InfoBox>\n                <p>\n                  We applied the <Link className={`link theme-${theme}`} href=\"/reconstruction-data/acetylcholine-effects-on-synapses/\">dose-effect curves</Link> to predict the effect of acetylcholine on synapse short-term plasticity.\n                </p>\n              </InfoBox>\n            </StickyContainer>\n          </div>\n\n          <div className=\"flex flex-col gap-8 mb-12 md:mb-0 mx-8 md:mx-0 lg:w-1/2 md:w-full flex-grow md:flex-none justify-center\" style={{ maxWidth: '800px' }}>\n            <div className={`selector__column selector__column--lg mt-3 theme-${theme}`}>\n              <div className={`selector__head theme-${theme}`}>1. Select a concentration</div>\n              <div className=\"selector__body\">\n                <List\n                  block\n                  list={achConcentrations}\n                  value={quickSelection.ach_concentration}\n                  title=\"concentrations\"\n                  onSelect={(value) => setParams({ ach_concentration: value })}\n                  theme={theme}\n                />\n              </div>\n            </div>\n            <div className=\"flex flex-col lg:flex-row gap-8 flex-grow p-0 m-0\">\n              <div className={`selector__column theme-${theme} flex-1`}>\n                <div className={`selector__head theme-${theme}`}>2. Select a pre-synaptic cell group</div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={filteredCellGroup}\n                    value={quickSelection.prelayer}\n                    title=\"m-type\"\n                    onSelect={(value) => setParams({ prelayer: value })}\n                    theme={theme}\n                  />\n                </div>\n              </div>\n              <div className={`selector__column theme-${theme} flex-1`}>\n                <div className={`selector__head theme-${theme}`}>3. Select a post-synaptic cell group</div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={filteredCellGroup}\n                    value={quickSelection.postlayer}\n                    title=\"m-type\"\n                    onSelect={(value) => setParams({ postlayer: value })}\n                    theme={theme}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <DataContainer\n        theme={theme}\n        navItems={[\n          { label: 'Distribution', isTitle: true },\n          { id: 'PSPDistributionSection', label: 'PSP amp distribution' },\n          { id: 'CVDistributionSection', label: 'CV distribution' },\n          { id: 'USYNDistributionSection', label: 'u_syn distribution' },\n          { label: 'Trace', isTitle: true },\n          { id: 'traceSection', label: 'Mean & Indivudial trace' },\n        ]}\n        quickSelectorEntries={qsEntries}\n      >\n        {availablePlots.PSPDistribution && (\n          <Collapsible title=\"PSP amp distribution\" id=\"PSPDistributionSection\" className=\"mt-4\">\n            <div className=\"graph\">\n              <CustomPlot plotData={getPlotDataById('psp-amp-distribution')} />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() => downloadAsJson(getPlotDataById('psp-amp-distribution'), `psp-amp-distribution-${ach_concentration}-${prelayer}-${postlayer}.json`)}\n              >\n                <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{ach_concentration}</span>\n                PSP amp distribution\n                <span className='!mr-0 collapsible-property small'>{prelayer}</span> - <span className='!ml-0 collapsible-property small'>{postlayer}</span>\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        {availablePlots.CVDistribution && (\n          <Collapsible title=\"CV distribution\" id=\"CVDistributionSection\" className=\"mt-4\">\n            <div className=\"graph\">\n              <CustomPlot plotData={getPlotDataById('cv-distribution')} />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() => downloadAsJson(getPlotDataById('cv-distribution'), `cv-distribution-${ach_concentration}-${prelayer}-${postlayer}.json`)}\n              >\n                <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{ach_concentration}</span>\n                CV distribution\n                <span className='!mr-0 collapsible-property small'>{prelayer}</span> - <span className='!ml-0 collapsible-property small'>{postlayer}</span>\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        {availablePlots.USYNDistribution && (\n          <Collapsible title=\"u_syn distribution\" id=\"USYNDistributionSection\" className=\"mt-4\">\n            <div className=\"graph\">\n              <CustomPlot plotData={getPlotDataById('u_syn-distribution')} />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() => downloadAsJson(getPlotDataById('u_syn-distribution'), `u_syn-distribution-${ach_concentration}-${prelayer}-${postlayer}.json`)}\n              >\n                <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{ach_concentration}</span>\n                u_syn distribution\n                <span className='!mr-0 collapsible-property small'>{prelayer}</span> - <span className='!ml-0 collapsible-property small'>{postlayer}</span>\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        <Collapsible title=\"Trace\" id=\"traceSection\" className=\"mt-4\">\n\n          {traceData && traceData.individual_trace && traceData.mean_trace ? (\n            <>\n              <div className=\"graph\">\n                <TraceGraph plotData={{\n                  individual_traces: traceData.individual_trace,\n                  mean_trace: traceData.mean_trace\n                }} />\n              </div>\n              <div className=\"mt-4\">\n                <DownloadButton\n                  theme={theme}\n                  onClick={() => downloadAsJson(traceData, `trace-${ach_concentration}-${prelayer}-${postlayer}.json`)}\n                >\n                  <span style={{ textTransform: \"capitalize\" }} className=\"collapsible-property small\">\n                    {ach_concentration}\n                  </span>\n                  <span className=\"!mr-0 collapsible-property small\">{prelayer}</span> -{\" \"}\n                  <span className=\"!ml-0 collapsible-property small\">{postlayer}</span>\n                  trace\n                </DownloadButton>\n              </div>\n            </>\n          ) : (\n            <p>Trace data is not available.</p>\n          )}\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default AcetylcholineEffectOnSynapsesView;\n","import Head from 'next/head';\nimport AcetylcholineView from '@/views/3_digital-reconstructions/AcetylcholineEffectsOnSynapses';\n\nexport default function AcetylcholinePage() {\n  const metadata = {\n    title: 'Acetylcholine - Effects on Synapses | Digital Reconstructions | The Hippocampus Hub',\n    description:\n      'Explore the effects of acetylcholine (ACh) on synaptic plasticity in hippocampal neurons. This page presents dose-effect relationships and key parameters that influence short-term plasticity in synapses.',\n    keywords: [\n      'Acetylcholine',\n      'Synapses',\n      'Short-Term Plasticity',\n      'Dose-Effect',\n      'Hippocampus',\n      'Digital Reconstructions',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <AcetylcholineView />\n    </>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport { Loader2 } from 'lucide-react';\nimport { graphTheme } from '@/constants';\n\nimport * as Plotly from 'plotly.js';\n\nconst Plot = dynamic(() => import('react-plotly.js').then((mod) => mod.default), {\n    ssr: false,\n}) as unknown as React.ComponentType<Plotly.Plot>;\n\ninterface TraceDataProps {\n    plotData?: {\n        individual_traces: number[][];\n        mean_trace: number[];\n    };\n}\n\nconst PlotlyTraceGraph: React.FC<TraceDataProps> = ({ plotData }) => {\n    const [data, setData] = useState<any[]>([]);\n    const [layout, setLayout] = useState<any>({});\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [hasError, setHasError] = useState<boolean>(false);\n\n    useEffect(() => {\n        console.log('TraceGraph received plotData:', plotData);\n        if (!plotData || !plotData.individual_traces || !plotData.mean_trace) {\n            console.log('No plot data available');\n            setIsLoading(false);\n            setHasError(true);\n            return;\n        }\n\n        try {\n            setIsLoading(true);\n            setHasError(false);\n\n            // Helper function to format time\n            const formatTime = (ms: number) => {\n                return ms >= 1000 ? `${(ms / 1000).toFixed(1)}s` : `${ms}ms`;\n            };\n\n            // Update x-axis values and formatting\n            const xValues = Array.from({ length: plotData.mean_trace.length }, (_, i) => i * (5000 / (plotData.mean_trace.length - 1)));\n\n            // Update individual traces data\n            const individualTraces = plotData.individual_traces.map((trace, index) => ({\n                x: xValues,\n                y: trace,\n                type: 'scatter',\n                mode: 'lines',\n                name: `Individual Trace ${index + 1}`,\n                line: { color: `#9EA0B2`, width: 1 },\n                showlegend: false,\n                hovertemplate: 'Time: %{x}<br>Value: %{y:.2f} mV<extra></extra>',\n            }));\n\n            // Update mean trace data\n            const meanTrace = {\n                x: xValues,\n                y: plotData.mean_trace,\n                type: 'scatter',\n                mode: 'lines',\n                name: 'Mean Trace',\n                line: { color: graphTheme.red, width: 3 },\n                hovertemplate: 'Time: %{x}<br>Value: %{y:.2f} mV<extra></extra>',\n            };\n\n            setData([...individualTraces, meanTrace]);\n\n            // Update layout\n            setLayout({\n                title: '',\n                xaxis: {\n                    title: 'Time',\n                    showticklabels: true,\n                    range: [0, 5000],\n                    tickmode: 'array',\n                    tickvals: [0, 1000, 2000, 3000, 4000, 5000],\n                    ticktext: ['0ms', '1s', '2s', '3s', '4s', '5s'],\n                    hoverformat: '.2f',\n                },\n                yaxis: {\n                    title: 'Value (mV)',\n                    showticklabels: true,\n                    hoverformat: '.2f',\n                },\n                autosize: true,\n                margin: { l: 60, r: 50, b: 50, t: 50, pad: 4 },\n                hovermode: 'closest',\n                showlegend: true,\n                legend: { x: 1, xanchor: 'right', y: 1 },\n                plot_bgcolor: '#EFF1F8',\n                paper_bgcolor: '#EFF1F8',\n            });\n\n            setIsLoading(false);\n        } catch (error) {\n            console.error('Error processing plot data:', error);\n            setIsLoading(false);\n            setHasError(true);\n        }\n    }, [plotData]);\n\n    const containerStyle = {\n        width: '100%',\n        height: '500px',\n        position: 'relative' as const,\n    };\n\n    const loaderStyle = {\n        position: 'absolute' as const,\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n    };\n\n    return (\n        <div style={containerStyle}>\n            {isLoading ? (\n                <div style={loaderStyle}>\n                    <Loader2 className=\"w-8 h-8 animate-spin\" />\n                </div>\n            ) : hasError || !data.length ? (\n                <p className=\"text-center text-gray-500 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    No data available.\n                </p>\n            ) : (\n                <Plot\n                    data={data}\n                    layout={layout}\n                    useResizeHandler={true}\n                    style={{ width: '100%', height: '100%' }}\n                    config={{ responsive: true }}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default PlotlyTraceGraph;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};"],"names":["window","__NEXT_P","push","__webpack_require__","ChartJS","register","LinearScale","BarElement","Title","Tooltip","Legend","__webpack_exports__","Z","MeanStd","plotData","xAxis","yAxis","xAxisTickStep","param","windowWidth","setWindowWidth","useState","useEffect","innerWidth","handleResize","addEventListener","removeEventListener","formatScientificNotation","Math","abs","value","toString","exponent","floor","log10","mantissa","pow","superscriptDigits","superscriptExponent","split","map","parseInt","digit","join","round","concat","dataPoints","units","name","description","useMemo","createHistogram","binCount","min","data","length","binWidth","max","bins","Array","from","_","i","counts","fill","forEach","binIndex","count","x","y","isArray","console","error","bin","index","freq","values","flatValues","flat","Object","entries","key","parseFloat","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","title","tooltipItems","dataIndex","binStart","parsed","binEnd","scales","type","text","ticks","stepSize","maxRotation","minRotation","callback","Number","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","datasets","label","backgroundColor","graphTheme","blue","borderWidth","barPercentage","categoryPercentage","jsxs","className","p","mean","toFixed","std","h2","style","width","height","Bar","list","onSelect","color","theme","block","grow","handleSelectedElement","element","role","aria-checked","tabIndex","onClick","centered","children","styles","classNames","layers","default","hover","selected","selectedEdges","red","green","purple","yellow","themeColors","experimental_data","reconstruction_data","digital_reconstruction","validations","predictions","neuriteTypes","volumeSections","achConcentrations","cellGroup","defaultSelection","experimentalData","layerAnatomy","layer","neuronMorphology","mtype","instance","neuronElectrophysiology","etype","etype_instance","reconstructionData","volume","volume_section","cellComposition","neurons","digitalReconstruction","region","morphologyLibrary","morphology","schafferCollateral","prelayer","postlayer","connectionAnatomy","connectionPhysiology","acetylcholineEffectsOnCell","acetylcholineEffectsOnSynapses","ach_concentration","NeuronModelLibrary","synapticPathways","acetylcholine","neuriteColor","all","axon","apical","basal","dendrite","soma","acetylcholine_CustomPlot","processedData","id","histogram","jsx_runtime","DistributionPlot","AcetylcholineEffectsOnSynapses","router","useRouter","query","quickSelection","setQuickSelection","factsheetData","setFactsheetData","traceData","setTraceData","availablePlots","setAvailablePlots","PSPDistribution","CVDistribution","USYNDistribution","filteredCellGroup","filter","cell","isReady","replace","undefined","shallow","fetchFactsheetData","fetchTraceData","response","fetch","dataPath","json","some","plot","log","setParams","updatedSelection","params","qsEntries","setFn","getPlotDataById","find","Fragment","Filters","hasData","StickyContainer","subtitle","InfoBox","Link","href","maxWidth","List","DataContainer","navItems","isTitle","quickSelectorEntries","Collapsible","CustomPlot","DownloadButton","downloadAsJson","span","textTransform","individual_trace","mean_trace","TraceGraph","individual_traces","AcetylcholinePage","metadata","keywords","author","creator","publisher","Head","meta","content","AcetylcholineView","Plot","dynamic","Promise","e","then","bind","mod","ssr","setData","layout","setLayout","isLoading","setIsLoading","hasError","setHasError","xValues","individualTraces","trace","mode","line","showlegend","hovertemplate","meanTrace","xaxis","showticklabels","range","tickmode","tickvals","ticktext","hoverformat","yaxis","autosize","margin","l","r","b","t","pad","hovermode","xanchor","plot_bgcolor","paper_bgcolor","position","top","left","transform","Loader2","useResizeHandler","config","module","exports"],"sourceRoot":""}