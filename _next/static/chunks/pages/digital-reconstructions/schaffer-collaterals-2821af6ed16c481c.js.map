{"version":3,"file":"static/chunks/pages/digital-reconstructions/schaffer-collaterals-2821af6ed16c481c.js","mappings":"4aACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,gDACA,WACA,OAAeC,EAAQ,MACvB,EACA,gGCgBAC,CAAAA,EAAAC,CAAA,CAZ4C,OAAC,CAAEC,SAAAA,CAAQ,CAAEC,QAAAA,EAAU,EAAI,CAAE,CAAAC,EACrE,MACI,GAAAC,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAW,GAAoBC,MAAA,CAAjBC,IAAAA,SAAAA,CAAiB,wCAEhC,GAAAL,EAAAM,GAAA,EAACJ,MAAAA,CAAIC,UAAY,yCACZL,GAAW,GAAAE,EAAAM,GAAA,EAACC,EAAAA,GAAQA,CAAAA,CAACJ,UAAW,GAAeC,MAAA,CAAZC,IAAAA,IAAAA,CAAY,SAGpD,GAAAL,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,sBAAa,IAAEN,OAG1C,iGCRAW,EAAAA,EAAOA,CAACC,QAAQ,CAACC,EAAAA,EAAWA,CAAEC,EAAAA,EAAUA,CAAEC,EAAAA,EAAKA,CAAEC,EAAAA,CAAOA,CAAEC,EAAAA,EAAMA,EAoOhEnB,EAAAC,CAAA,CA1NqD,QA6MvBmB,EACcA,KA9MU,CAClDC,SAAAA,CAAQ,CACRC,MAAAA,EAAQ,OAAO,CACfC,MAAAA,EAAQ,WAAW,CACnBC,cAAAA,EAAgB,CAAC,CACjBJ,QAAAA,CAAO,CACV,CAAAhB,EACS,CAACqB,EAAaC,EAAe,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,GAE/CC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KAC6B,CAC/BF,EAAe9B,OAAOiC,UAAU,EAEhC,IAAMC,aAAe,KACjBJ,EAAe9B,OAAOiC,UAAU,CACpC,EAIA,OAFAjC,OAAOmC,gBAAgB,CAAC,SAAUD,cAE3B,KACHlC,OAAOoC,mBAAmB,CAAC,SAAUF,aACzC,CACJ,CACJ,EAAG,EAAE,EAEL,IAAMG,yBAA2B,IAC7B,GAAIC,IAAAA,KAAKC,GAAG,CAACC,GACT,OAAOA,EAAMC,QAAQ,GAEzB,GAAID,IAAAA,EAAa,MAAO,IACxB,IAAME,EAAWJ,KAAKK,KAAK,CAACL,KAAKM,KAAK,CAACN,KAAKC,GAAG,CAACC,KAC1CK,EAAWL,EAAQF,KAAKQ,GAAG,CAAC,GAAIJ,GAEhCK,EAAoB,CAAC,IAAK,OAAK,OAAK,OAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,CACtEC,EAAsBV,KAAKC,GAAG,CAACG,GAChCD,QAAQ,GACRQ,KAAK,CAAC,IACNC,GAAG,CAAC,GAAWH,CAAiB,CAACI,SAASC,GAAO,EACjDC,IAAI,CAAC,IACV,MAAO,GAAwBX,MAAAA,CAPPJ,KAAKgB,KAAK,CAACT,IAAAA,GAAkB,IAO3B,OAA+BG,MAAAA,CAA1BN,EAAW,EAAI,IAAM,IAAyB7B,MAAA,CAApBmC,EAC7D,EAEM,CAAEO,WAAAA,CAAU,CAAEC,MAAAA,CAAK,CAAEC,KAAAA,CAAI,CAAEC,YAAAA,CAAW,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KACrD,GAAI,CAAClC,EAED,MAAO,CAAE8B,WAAY,EAAE,CAAEC,MAAO,KAAMC,KAAM,GAAIC,YAAa,EAAG,EAGpE,IAAME,gBAAkB,IACpB,IAAMC,EAAWvB,KAAKwB,GAAG,CAAC,GAAIC,EAAKC,MAAM,EACnCF,EAAMxB,KAAKwB,GAAG,IAAIC,GAElBE,EAAW,CAACC,KADDA,GAAG,IAAIH,GACAD,CAAAA,EAAOD,EAEzBM,EAAOC,MAAMC,IAAI,CAAC,CAAEL,OAAQH,EAAW,CAAE,EAAG,CAACS,EAAGC,IAAMT,EAAMS,EAAIN,GAChEO,EAAS,MAAUX,GAAUY,IAAI,CAAC,GAExCV,EAAKW,OAAO,CAAC,IACT,IAAMC,EAAWrC,KAAKwB,GAAG,CACrBxB,KAAKK,KAAK,CAAC,CAACH,EAAQsB,CAAAA,EAAOG,GAC3BJ,EAAW,EAEfW,CAAAA,CAAM,CAACG,EAAS,EACpB,GAEA,IAAMpB,EAAaiB,EAAOtB,GAAG,CAAC,CAAC0B,EAAOL,IAAO,EACzCM,EAAGV,CAAI,CAACI,EAAE,CACVO,EAAGF,CACP,IAEA,MAAO,CAAErB,WAAAA,CAAW,CACxB,EAEA,GAAIa,MAAMW,OAAO,CAACtD,GAAW,CACzB,GAAM,CAAE8B,WAAAA,CAAU,CAAE,CAAGK,gBAAgBnC,GACvC,MAAO,CACH8B,WAAAA,EACAC,MAAO,KACPC,KAAM,GACNC,YAAa,EACjB,CACJ,CAAO,GAAI,iBAAOjC,GAAyBA,OAAAA,EA8CvC,OADAuD,QAAQC,KAAK,CAAC,yBAA0BxD,GACjC,CAAE8B,WAAY,EAAE,CAAEC,MAAO,KAAMC,KAAM,GAAIC,YAAa,EAAG,EA7ChE,GAAI,SAAUjC,GAAY,SAAUA,EAAU,CAC1C,IAAM8B,EAAa9B,EAAS0C,IAAI,CAACjB,GAAG,CAAC,CAACgC,EAAaC,IAAmB,EAClEN,EAAGK,EACHJ,EAAGrD,EAAS2D,IAAI,CAACD,EAAM,CAC3B,GACA,MAAO,CACH5B,WAAAA,EACAC,MAAO/B,EAAS+B,KAAK,CACrBC,KAAMhC,EAASgC,IAAI,EAAI,GACvBC,YAAajC,EAASiC,WAAW,EAAI,EACzC,CACJ,CAAO,GAAI,SAAUjC,GAAY,WAAYA,EAAU,CACnD,IAAM8B,EAAa9B,EAAS0C,IAAI,CAACjB,GAAG,CAAC,CAACgC,EAAaC,IAAmB,EAClEN,EAAGK,EACHJ,EAAGrD,EAAS+C,MAAM,CAACW,EAAM,CAC7B,GACA,MAAO,CACH5B,WAAAA,EACAC,MAAO,KACPC,KAAM,GACNC,YAAa,EACjB,CACJ,CAAO,GAAI,WAAYjC,GAAY2C,MAAMW,OAAO,CAACtD,EAAS4D,MAAM,EAAG,CAC/D,IAAMC,EAAa7D,EAAS4D,MAAM,CAACE,IAAI,GACjC,CAAEhC,WAAAA,CAAU,CAAE,CAAGK,gBAAgB0B,GACvC,MAAO,CACH/B,WAAAA,EACAC,MAAO,KACPC,KAAM,GACNC,YAAa,EACjB,CACJ,CAAO,CACH,IAAMH,EAAaiC,OAAOC,OAAO,CAAChE,GAAUyB,GAAG,CAAC,OAAC,CAACwC,EAAKlD,EAAM,CAAAhC,QAAM,CAC/DqE,EAAGc,WAAWD,GACdZ,EAAGtC,CACP,IACA,MAAO,CACHe,WAAAA,EACAC,MAAO,KACPC,KAAM,GACNC,YAAa,EACjB,CACJ,CAKR,EAAG,CAACjC,EAAS,EAEPmE,EAA+BjC,CAAAA,EAAAA,EAAAA,OAAAA,EACjC,IAAO,EACHkC,WAAY,GACZC,oBAAqB,GACrBC,QAAS,CACLC,OAAQ,CACJC,QAAS,EACb,EACAC,QAAS,CACLC,UAAW,CACPC,MAAO,IACH,IAAMjB,EAAQkB,CAAY,CAAC,EAAE,CAACC,SAAS,CACjCC,EAAWF,CAAY,CAAC,EAAE,CAACG,MAAM,CAAC3B,CAAC,CACnC4B,EAASlD,CAAU,CAAC4B,EAAQ,EAAE,CAC9B5B,CAAU,CAAC4B,EAAQ,EAAE,CAACN,CAAC,CACvB0B,EACN,MAAO,GAAiBE,MAAAA,CAAdF,EAAS,OAAe/C,MAAAA,CAAViD,EAAO,KAAe5F,MAAA,CAAZ2C,GAAS,GAC/C,CACJ,CACJ,CACJ,EACAkD,OAAQ,CACJ7B,EAAG,CACC8B,KAAM,SACNP,MAAO,CACHH,QAAS,GACTW,KAAMlF,CACV,EACAmF,MAAO,CACHC,SAAUlF,EACVmF,YAAa,EACbC,YAAa,EACbC,SAAU,SAAUzE,CAAK,EACrB,OAAOA,EAAMC,QAAQ,EACzB,CACJ,CACJ,EACAqC,EAAG,CACCsB,MAAO,CACHH,QAAS,GACTW,KAAMjF,CACV,EACAkF,MAAO,CACHI,SAAU,SAAUzE,CAAK,EACrB,OAAOH,yBAAyB6E,OAAO1E,GAC3C,CACJ,CACJ,CACJ,CACJ,GACA,CAACZ,EAAeF,EAAOC,EAAO4B,EAAYC,EAAM,EAGpD,GAAID,IAAAA,EAAWS,MAAM,CACjB,MAAO,GAAAvD,EAAAM,GAAA,EAACJ,MAAAA,UAAI,oCAGhB,IAAMoD,EAAO,CACToD,SAAU,CACN,CACIC,MAAO,YACPrD,KAAMR,EACN8D,gBAAiBC,EAAAA,EAAUA,CAACC,IAAI,CAChCC,YAAa,EACbC,cAAe,GACfC,mBAAoB,EACxB,EACH,EAGL,MACI,GAAAjH,EAAAC,IAAA,EAACC,MAAAA,WACIa,GACG,GAAAf,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,iBACX,GAAAH,EAAAC,IAAA,EAACiH,IAAAA,WAAE,SAAOnG,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAASoG,IAAI,GAAbpG,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAeqG,OAAO,CAAC,MACjC,GAAApH,EAAAC,IAAA,EAACiH,IAAAA,WAAE,uBAAqBnG,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAASsG,GAAG,GAAZtG,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAcqG,OAAO,CAAC,SAGrDpE,GAAQ,GAAAhD,EAAAM,GAAA,EAACgH,KAAAA,UAAItE,IACbC,GAAe,GAAAjD,EAAAM,GAAA,EAAC4G,IAAAA,UAAGjE,IACpB,GAAAjD,EAAAM,GAAA,EAACJ,MAAAA,CAAIqH,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQ,WACzC,GAAAzH,EAAAM,GAAA,EAACoH,EAAAA,EAAGA,CAAAA,CAACpE,KAAMA,EAAM6B,QAASA,QAI1C,iGC1OAwC,EAAAA,EAAKA,CAAClH,QAAQ,IAAImH,EAAAA,EAAaA,EAgJ/BjI,EAAAC,CAAA,CA9IqB,OAAC,CAAE0D,KAAAA,CAAI,CAAEmE,OAAAA,EAAS,GAAG,CAAE9B,MAAAA,CAAK,CAAEkC,WAAAA,CAAU,CAAEC,MAAAA,EAAQ,CAAC,CAAE,CAAA/H,EAChEgI,EAAWC,CAAAA,EAAAA,EAAAA,MAAAA,EAA0B,MACrCC,EAAgBD,CAAAA,EAAAA,EAAAA,MAAAA,EAAqB,MAErCE,EAAWC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,IACzB,IAAMC,EAAS,CAACvB,EAAAA,EAAUA,CAACC,IAAI,CAAED,EAAAA,EAAUA,CAACwB,MAAM,CAAExB,EAAAA,EAAUA,CAACyB,KAAK,CAAEzB,EAAAA,EAAUA,CAAC0B,GAAG,CAAE1B,EAAAA,EAAUA,CAAC2B,MAAM,CAAC,CACxG,OAAOJ,CAAM,CAAC1D,EAAQ0D,EAAO7E,MAAM,CAAC,EACrC,EAAE,EAECmD,EAAWxD,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KACrB,GAAI,CAACI,GAAQ,CAACA,EAAKmF,SAAS,CAAE,MAAO,EAAE,CAEvC,IAAMC,EAAS3D,OAAO4D,IAAI,CAACrF,EAAKmF,SAAS,EACnCG,EAAY7D,OAAO4D,IAAI,CAACrF,EAAKmF,SAAS,CAACC,CAAM,CAAC,EAAE,CAAC,EAEvD,OAAOA,EAAOjG,GAAG,CAAC,CAACoG,EAAOnE,IAAW,EACjCiC,MAAO,GAASvG,MAAA,CAANyI,EAAM,YAChBvF,KAAMsF,EAAUnG,GAAG,CAACqG,GAAY,IAACxF,CAAAA,EAAKmF,SAAS,CAACI,EAAM,CAACC,EAAS,EAAI,IACpElC,gBAAiBsB,EAASxD,GAC1BqE,MAAO,OACX,GACJ,EAAG,CAACzF,EAAM4E,EAAS,EAEbc,EAAgB,CAClBC,GAAI,gBACJC,kBAAkBC,CAAK,CAAEC,CAAI,CAAEjE,CAAO,EAClC,GAAM,CAAEkE,IAAAA,CAAG,CAAE/F,KAAAA,CAAI,CAAE,CAAG6F,EACtBE,EAAIC,IAAI,GACRD,EAAIE,SAAS,CAAG,EAChBF,EAAIG,WAAW,CAAG,QAElBlG,EAAKoD,QAAQ,CAACzC,OAAO,CAAC,CAACwF,EAASC,KAC5B,GAAID,QAAAA,EAAQV,KAAK,CAAY,CACzB,IAAMY,EAAOR,EAAMS,cAAc,CAACF,GAClCC,EAAKrG,IAAI,CAACW,OAAO,CAAC,CAAC4F,EAAKnF,KACpB,GAAI+E,EAAQnG,IAAI,CAACoB,EAAM,CAAG,EAAG,CACzB,GAAM,CAAEN,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEmD,MAAAA,CAAK,CAAEC,OAAAA,CAAM,CAAE,CAAGoC,EAAIC,QAAQ,CAAC,CAAC,IAAK,IAAK,QAAS,SAAS,EAC1ET,EAAIC,IAAI,GACRD,EAAIU,SAAS,GACbV,EAAIW,IAAI,CAAC5F,EAAIoD,EAAQ,EAAGnD,EAAGmD,EAAOC,GAClC4B,EAAIY,IAAI,GAER,IAAK,IAAInG,EAAI,CAAC0D,EAAO1D,EAAI2D,EAASD,EAAO1D,GADrB,EAEhBuF,EAAIa,MAAM,CAAC9F,EAAIoD,EAAQ,EAAGnD,EAAIP,GAC9BuF,EAAIc,MAAM,CAAC/F,EAAIoD,EAAQ,EAAGnD,EAAIP,EAAI0D,GAEtC6B,EAAIe,MAAM,GACVf,EAAIgB,OAAO,EACf,CACJ,EACJ,CACJ,GACAhB,EAAIgB,OAAO,EACf,CACJ,EAEA9I,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACN,GAAI,CAACwG,EAASuC,OAAO,EAAI,CAAChH,GAAQ,CAACA,EAAKmF,SAAS,CAAE,OAEnD,IAAMY,EAAMtB,EAASuC,OAAO,CAACC,UAAU,CAAC,MACxC,GAAI,CAAClB,EAAK,OAEV,IAAMT,EAAY7D,OAAO4D,IAAI,CAACrF,EAAKmF,SAAS,CAAC1D,OAAO4D,IAAI,CAACrF,EAAKmF,SAAS,CAAC,CAAC,EAAE,CAAC,EA8C5E,OA5CIR,EAAcqC,OAAO,EACrBrC,EAAcqC,OAAO,CAACE,OAAO,GAGjCvC,EAAcqC,OAAO,CAAG,IAAI3C,EAAAA,EAAKA,CAAC0B,EAAK,CACnCnD,KAAM,MACN5C,KAAM,CACFmH,OAAQ7B,EACRlC,SAAUA,CACd,EACAvB,QAAS,CACLC,WAAY,GACZC,oBAAqB,GACrBC,QAAS,CACLK,MAAO,CACHH,QAAS,CAAC,CAACG,EACXQ,KAAMR,GAASrC,EAAKN,IAAI,EAE5ByC,QAAS,CACLiF,KAAM,QACNC,UAAW,EACf,EACApF,OAAQ,CACJqF,SAAU,OACd,CACJ,EACA3E,OAAQ,CACJ7B,EAAG,CACCyG,QAAS,EACb,EACAxG,EAAG,CACCwG,QAAS,GACTC,YAAa,GACbrH,IAAK,IACLkC,MAAO,CACHH,QAAS,GACTW,KAAM0B,GAAcvE,EAAKyH,IAAI,EAAI,YACrC,CACJ,CACJ,CACJ,EACAzF,QAAS,CAAC0D,EAAc,GAGrB,KACCf,EAAcqC,OAAO,EACrBrC,EAAcqC,OAAO,CAACE,OAAO,EAErC,CACJ,EAAG,CAAClH,EAAMoD,EAAUf,EAAOkC,EAAW,EAEtC,IAAMmD,EAAe7C,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAC7B,GAAI,CAAC7E,EAAM,OACX,IAAM2H,EAAa,gCAAyE7K,MAAA,CAAzC8K,mBAAmBC,KAAKC,SAAS,CAAC9H,KAC/E+H,EAAOC,SAASC,aAAa,CAAC,IACpCF,CAAAA,EAAKG,IAAI,CAAGP,EACZI,EAAKI,QAAQ,CAAG,GAA6BrL,MAAA,CAA1BkD,EAAK2F,EAAE,EAAI,eAAe,SAC7CoC,EAAKK,KAAK,EACd,EAAG,CAACpI,EAAK,SAET,GAAcA,EAAKmF,SAAS,CAKxB,GAAAzI,EAAAC,IAAA,EAACC,MAAAA,WACG,GAAAF,EAAAM,GAAA,EAACJ,MAAAA,CAAIqH,MAAO,CAAEE,OAAQ,GAAUrH,MAAA,CAAPqH,EAAO,KAAI,WAChC,GAAAzH,EAAAM,GAAA,EAACqL,SAAAA,CAAOC,IAAK7D,EAAU8D,aAAW,6BAA6BC,KAAK,UAExE,GAAA9L,EAAAM,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACX,GAAAH,EAAAM,GAAA,EAACyL,EAAAA,CAAcA,CAAAA,CAACjE,MAAOA,EAAOkE,QAAShB,WAAc,uBATtD,GAAAhL,EAAAM,GAAA,EAACJ,MAAAA,UAAI,qBAepB,8DCvFAP,EAAAC,CAAA,CAvCkC,OAAC,CACjC+F,MAAAA,CAAK,CACLsG,KAAAA,CAAI,CACJlK,MAAAA,CAAK,CACLmK,SAAAA,EAAW,KAAQ,CAAC,CACpBC,MAAAA,CAAK,CACLrE,MAAAA,EAAQ,CAAC,CACT3H,UAAAA,EAAY,EAAE,CACdiM,MAAAA,EAAQ,EAAK,CACbC,KAAAA,CAAI,CACL,CAAAtM,EACOuM,sBAAwB,GAAqBJ,EAASK,GAE5D,MACE,GAAAvM,EAAAC,IAAA,EAACC,MAAAA,CACCC,UAAW,GAA4BkM,MAAAA,CA/BrB,SA+BY,WAA8DF,MAAAA,CAArDE,GAAQ,wBAAwB,uBAA6CvE,MAAAA,CAAxBqE,EAAM,oBAA2BhM,MAAAA,CAAT2H,EAAM,KAAgBsE,MAAAA,CAAbjM,EAAU,KAAwBC,MAAA,CAArBgM,EAAQ,QAAU,IAC5JN,KAAK,uBAEJnG,GAAS,GAAA3F,EAAAM,GAAA,EAAC4G,IAAAA,CAAE/G,UAAW,SAAeC,MAAA,CAAN0H,YAAUnC,IAC3C,GAAA3F,EAAAM,GAAA,EAACJ,MAAAA,CAAIC,UAAW,YAAgCC,MAAA,CAApBiM,GAAQ,sBACjCJ,EAAKxJ,GAAG,CAAC8J,GACR,GAAAvM,EAAAM,GAAA,EAACJ,MAAAA,CAEC4L,KAAK,QACLU,eAAczK,IAAUwK,EACxBE,SAAU,EACVtM,UAAW,GAAwC2H,MAAAA,CAzChC,iBAyCkB,gBAAuB/F,MAAAA,CAAT+F,EAAM,KAAwC1H,MAAA,CAArC2B,IAAUwK,EAAU,YAAc,IAC9FP,QAAS,IAAMM,sBAAsBC,GACrC5G,MAAO4G,WAENA,GARIA,QAejB,yGCzCA5M,CAAAA,EAAAC,CAAA,CARwD,OAAC,CAAE8M,SAAAA,CAAQ,CAAE7M,SAAAA,CAAQ,CAAE,CAAAE,QAC7E,GAAAC,EAAAM,GAAA,EAACJ,MAAAA,CAAIC,UAAWE,IAAAA,WAAAA,UACd,GAAAL,EAAAM,GAAA,EAACJ,MAAAA,CAAIC,UAAWwM,IAAWtM,IAAAA,SAAAA,CAAkBqM,EAAWrM,GAAAA,CAAAA,sBAAAA,CAAgC,aACrFR,KAEC,qJC+URF,CAAAA,EAAAC,CAAA,CA1UoE,OAAC,CACnEmC,MAAAA,EAAQ,QAAQ,CAChBmK,SAAAA,EAAW,KAAQ,CAAC,CACpBpE,MAAO8E,EAAY,CAAC,CACrB,CAAA7M,EACO8M,EAAW7E,CAAAA,EAAAA,EAAAA,MAAAA,EAAuB,MAClC8E,EAAmB9E,CAAAA,EAAAA,EAAAA,MAAAA,EAA8B,MACjD+E,EAA2B/E,CAAAA,EAAAA,EAAAA,MAAAA,EAAsBjG,GACjDiL,EAAoBhF,CAAAA,EAAAA,EAAAA,MAAAA,EAA8B,MAElDiF,EAASjF,CAAAA,EAAAA,EAAAA,MAAAA,EAAwC,MACjDkF,EAAQlF,CAAAA,EAAAA,EAAAA,MAAAA,EAA2B,MACnCmF,EAAWnF,CAAAA,EAAAA,EAAAA,MAAAA,EAAmC,MAC9CoF,EAAYpF,CAAAA,EAAAA,EAAAA,MAAAA,EAA+B,MAC3CqF,EAAQrF,CAAAA,EAAAA,EAAAA,MAAAA,EAAO,IAAIsF,EAAAA,GAAa,EAEhCC,EAAUvF,CAAAA,EAAAA,EAAAA,MAAAA,EAA8B,MACxCwF,EAAUxF,CAAAA,EAAAA,EAAAA,MAAAA,EAA8B,MACxCyF,EAAUzF,CAAAA,EAAAA,EAAAA,MAAAA,EAA8B,MAExC0F,EAAmB1F,CAAAA,EAAAA,EAAAA,MAAAA,EAAO,IAC1B,CAAC2F,EAAQC,EAAU,CAAGtM,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC/B,CAACuM,EAAUC,EAAY,CAAGxM,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,GAEnCyM,EAAc5F,CAAAA,EAAAA,EAAAA,WAAAA,EAClB,IACE,GAAI,CAACuF,EAAiBpD,OAAO,CAAE,OAE/B,IAAMN,EAAO6C,EAASvC,OAAO,CAAE0D,qBAAqB,EACpDX,CAAAA,EAAM/C,OAAO,CAAClG,CAAC,CAAG,CAAE6J,EAAMC,OAAO,CAAGlE,EAAKmE,IAAI,EAAInE,EAAKxC,KAAK,CAAI,EAAI,EACnE6F,EAAM/C,OAAO,CAACjG,CAAC,CAAG,IAAE,EAAC4J,EAAMG,OAAO,CAAGpE,EAAKqE,GAAG,EAAIrE,EAAKvC,MAAM,CAAI,EAAI,EAEpE2F,EAAU9C,OAAO,CAAEgE,aAAa,CAACjB,EAAM/C,OAAO,CAAE2C,EAAO3C,OAAO,EAC9D,IAAMiE,EAAanB,EAAU9C,OAAO,CAAEkE,gBAAgB,CAAC,CAACjB,EAAQjD,OAAO,CAAGkD,EAAQlD,OAAO,CAAGmD,EAAQnD,OAAO,CAAE,CAAE,IAE/G,GAAIiE,EAAWhL,MAAM,CAAG,EAAG,CACzB,IAAIkL,EAAoBF,CAAU,CAAC,EAAE,CAACG,MAAM,CAC5C,KAAOD,EAAkBE,MAAM,EAAI,CAAC,CAACpB,EAAQjD,OAAO,CAAEkD,EAAQlD,OAAO,CAAEmD,EAAQnD,OAAO,CAAC,CAACsE,QAAQ,CAACH,IAC/FA,EAAoBA,EAAkBE,MAAM,CAG9C,GAAI,CAACpB,EAAQjD,OAAO,CAAEkD,EAAQlD,OAAO,CAAEmD,EAAQnD,OAAO,CAAC,CAACsE,QAAQ,CAACH,GAAoB,CACnF,IAAMI,EAAgBJ,EAAkBK,QAAQ,CAACD,aAAa,CAC1DA,IACFE,gBAAgBF,EAAeJ,GAC/BvC,EAAS2C,GAEb,CACF,CACF,EACA,CAAC3C,EAAUU,EAAU,EAGjBmC,gBAAkB,CAACC,EAAiCC,KACpDjC,EAAkB1C,OAAO,EAC3B4E,mBAAmBlC,EAAkB1C,OAAO,CAAExC,EAAAA,EAAK,CAAC8E,EAAU,CAACuC,OAAO,CAAErH,EAAAA,EAAK,CAAC8E,EAAU,CAACwC,KAAK,EAGhGF,mBAAmBD,EAAmBnH,EAAAA,EAAK,CAAC8E,EAAU,CAACyC,QAAQ,CAAE,UAEjEtC,EAAyBzC,OAAO,CAAG0E,EACnChC,EAAkB1C,OAAO,CAAG2E,CAC9B,EAEMC,mBAAqB,CAACR,EAAwBY,EAAmBC,KACrEb,EAAOc,QAAQ,CAAC,IACVC,aAAiBnC,EAAAA,GAAU,GACzBmC,EAAMzM,IAAI,GAAK0L,EAAOI,QAAQ,CAACD,aAAa,EAC9CY,EAAMC,QAAQ,CAACvD,KAAK,CAACwD,GAAG,CAACL,GAEvBG,EAAMG,QAAQ,EAAIH,iBAAAA,EAAMG,QAAQ,CAAC1J,IAAI,EACvCuJ,EAAMC,QAAQ,CAACvD,KAAK,CAACwD,GAAG,CAACJ,GAG/B,EACF,EAEAhO,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR,GAAI,CAACsL,EAASvC,OAAO,CAAE,MAEvB4C,CAAAA,EAAM5C,OAAO,CAAG,IAAIgD,EAAAA,GAAW,CAC/BJ,EAAM5C,OAAO,CAACuF,UAAU,CAAG,IAAIvC,EAAAA,GAAW,CAAC,WAE3C,IAAMwC,EAASjD,EAASvC,OAAO,CAACyF,WAAW,CAAGlD,EAASvC,OAAO,CAAC0F,YAAY,CAC3E/C,EAAO3C,OAAO,CAAG,IAAIgD,EAAAA,GAAwB,CAAC,MAACwC,CAAS,EAAKA,IAAAA,EAAc,IAAK,KAAM,GAAK,KAC3F7C,EAAO3C,OAAO,CAACM,QAAQ,CAACqF,CAAC,CAAG,GAE5B9C,EAAS7C,OAAO,CAAG,IAAIgD,EAAAA,GAAmB,CAAC,CAAE4C,UAAW,GAAMC,MAAO,EAAK,GAC1EhD,EAAS7C,OAAO,CAAC8F,OAAO,CAACvD,EAASvC,OAAO,CAACyF,WAAW,CAAElD,EAASvC,OAAO,CAAC0F,YAAY,EACpF7C,EAAS7C,OAAO,CAAC+F,aAAa,CAAC9Q,OAAO+Q,gBAAgB,EACtDzD,EAASvC,OAAO,CAACiG,WAAW,CAACpD,EAAS7C,OAAO,CAACkG,UAAU,EAExDpD,EAAU9C,OAAO,CAAG,IAAIgD,EAAAA,GAAe,CAEvC,IAAMmD,EAAS,IAAIC,EAAAA,CAASA,CAC5BD,EAAOE,IAAI,CACT,GAAYvQ,MAAA,CAATwQ,EAAAA,EAAQA,CAAC,2CACZ,IACE,CAACrD,EAASC,EAASC,EAAQ,CAACxJ,OAAO,CAAC,CAAC2H,EAAKlH,KACxC,IAAMmM,EAASC,EAAIC,KAAK,EACxBnF,CAAAA,EAAItB,OAAO,CAAGuG,EACdA,EAAOjG,QAAQ,CAAC+E,GAAG,CAAC,CAACjL,EAAQ,GAAKiJ,EAAQ,EAAG,GAC7CkD,EAAO/B,QAAQ,CAACD,aAAa,CAAG,CAAC,SAAU,QAAS,WAAW,CAACnK,EAAM,CACtEsM,cAAcH,EAAQnM,GACtBwI,EAAM5C,OAAO,CAAE2G,GAAG,CAACJ,EACrB,GAEA,IAAMK,EAAa,IAAIC,EAAAA,CAAUA,CACjCD,EAAWP,IAAI,CAAC,GAAYvQ,MAAA,CAATgR,EAAAA,EAAQA,CAAC,2CAA0C,IACpE,CAAC,SAAU,QAAS,WAAW,CAACnN,OAAO,CAAC,CAACkC,EAAMzB,KAC7C2M,WAAWlL,EAAM,CAACoH,EAASC,EAASC,EAAQ,CAAC/I,EAAM,CAAC4F,OAAO,CAAGnE,EAAKmL,WAAW,GAAIC,EACpF,EACF,GAEA7D,EAAiBpD,OAAO,CAAG,GAEvBvI,GACFyP,oBAAoBzP,GAGtB0P,SACF,EACA,GAASlN,QAAQmN,GAAG,CAACC,EAAKC,MAAM,CAAGD,EAAIE,KAAK,CAAI,IAAM,YACtD,GAAWtN,QAAQC,KAAK,CAAC,oBAAqBA,IAGhD,IAAMiN,QAAU,KACdK,sBAAsBL,SACtBtE,EAAS7C,OAAO,CAAEyH,MAAM,CAAC7E,EAAM5C,OAAO,CAAG2C,EAAO3C,OAAO,CACzD,EAEM7I,aAAe,KACnB,GAAIoL,EAASvC,OAAO,EAAI6C,EAAS7C,OAAO,EAAI2C,EAAO3C,OAAO,CAAE,CAC1D,IAAM9C,EAAQqF,EAASvC,OAAO,CAACyF,WAAW,CACpCtI,EAASoF,EAASvC,OAAO,CAAC0F,YAAY,CAC5C7C,EAAS7C,OAAO,CAAC8F,OAAO,CAAC5I,EAAOC,GAEhC,IAAMqI,EAAStI,EAAQC,CACvBwF,CAAAA,EAAO3C,OAAO,CAAC6D,IAAI,CAAG,MAAC2B,CAAS,EAChC7C,EAAO3C,OAAO,CAAC0H,KAAK,CAAGlC,IAAAA,EACvB7C,EAAO3C,OAAO,CAAC+D,GAAG,CAAG,IACrBpB,EAAO3C,OAAO,CAAC2H,MAAM,CAAG,KACxBhF,EAAO3C,OAAO,CAAC4H,sBAAsB,GAErC,IAAMC,EAAY5S,OAAOiC,UAAU,CAAG,KAAO,GAAK,GAClDoM,EAAUuE,GAEVlF,EAAO3C,OAAO,CAAC8H,IAAI,CAAG7S,OAAOiC,UAAU,CAAG,KAAO,GAAK,GACtDyL,EAAO3C,OAAO,CAAC4H,sBAAsB,GAErC,IAAMG,EAAc9S,OAAOiC,UAAU,CAAG,KAAO,EAAI,GACnDsM,EAAYuE,GAEZC,gBACF,CACF,EAEMC,gBAAkB,IACtB,GAAI,CAAC7E,EAAiBpD,OAAO,CAAE,OAE/B,IAAMN,EAAO6C,EAASvC,OAAO,CAAE0D,qBAAqB,EACpDX,CAAAA,EAAM/C,OAAO,CAAClG,CAAC,CAAG,CAAE6J,EAAMC,OAAO,CAAGlE,EAAKmE,IAAI,EAAInE,EAAKxC,KAAK,CAAI,EAAI,EACnE6F,EAAM/C,OAAO,CAACjG,CAAC,CAAG,IAAE,EAAC4J,EAAMG,OAAO,CAAGpE,EAAKqE,GAAG,EAAIrE,EAAKvC,MAAM,CAAI,EAAI,EAEpE2F,EAAU9C,OAAO,CAAEgE,aAAa,CAACjB,EAAM/C,OAAO,CAAE2C,EAAO3C,OAAO,EAC9D,IAAMiE,EAAanB,EAAU9C,OAAO,CAAEkE,gBAAgB,CAAC,CAACjB,EAAQjD,OAAO,CAAGkD,EAAQlD,OAAO,CAAGmD,EAAQnD,OAAO,CAAE,CAAE,IAE/G,GAAIiE,EAAWhL,MAAM,CAAG,EAAG,CACzB,IAAIkL,EAAoBF,CAAU,CAAC,EAAE,CAACG,MAAM,CAC5C,KAAOD,EAAkBE,MAAM,EAAI,CAAC,CAACpB,EAAQjD,OAAO,CAAEkD,EAAQlD,OAAO,CAAEmD,EAAQnD,OAAO,CAAC,CAACsE,QAAQ,CAACH,IAC/FA,EAAoBA,EAAkBE,MAAM,CAG1C7B,EAAiBxC,OAAO,GAAKmE,GAAqBzB,EAAkB1C,OAAO,GAAKmE,IAC9E3B,EAAiBxC,OAAO,EAAIwC,EAAiBxC,OAAO,GAAK0C,EAAkB1C,OAAO,EACpF4E,mBAAmBpC,EAAiBxC,OAAO,CAAExC,EAAAA,EAAK,CAAC8E,EAAU,CAACuC,OAAO,CAAErH,EAAAA,EAAK,CAAC8E,EAAU,CAACwC,KAAK,EAG/FF,mBAAmBT,EAAmB3G,EAAAA,EAAK,CAAC8E,EAAU,CAACwC,KAAK,CAAEtH,EAAAA,EAAK,CAAC8E,EAAU,CAACwC,KAAK,EAEpFtC,EAAiBxC,OAAO,CAAGmE,EAC3B5B,EAASvC,OAAO,CAAE/C,KAAK,CAACiL,MAAM,CAAG,UAErC,MACM1F,EAAiBxC,OAAO,EAAIwC,EAAiBxC,OAAO,GAAK0C,EAAkB1C,OAAO,GACpF4E,mBAAmBpC,EAAiBxC,OAAO,CAAExC,EAAAA,EAAK,CAAC8E,EAAU,CAACuC,OAAO,CAAErH,EAAAA,EAAK,CAAC8E,EAAU,CAACwC,KAAK,EAC7FtC,EAAiBxC,OAAO,CAAG,KAC3BuC,EAASvC,OAAO,CAAE/C,KAAK,CAACiL,MAAM,CAAG,UAGvC,EAQA,OANAjT,OAAOmC,gBAAgB,CAAC,SAAUD,cAClCoL,EAASvC,OAAO,CAAC5I,gBAAgB,CAAC,YAAa6Q,iBAC/C1F,EAASvC,OAAO,CAAC5I,gBAAgB,CAAC,QAASqM,GAE3CtM,eAEO,KACLlC,OAAOoC,mBAAmB,CAAC,SAAUF,cACjCoL,EAASvC,OAAO,GAClBuC,EAASvC,OAAO,CAAC3I,mBAAmB,CAAC,YAAa4Q,iBAClD1F,EAASvC,OAAO,CAAC3I,mBAAmB,CAAC,QAASoM,GAC9ClB,EAASvC,OAAO,CAACmI,WAAW,CAACtF,EAAS7C,OAAO,CAAEkG,UAAU,EAE7D,CACF,EAAG,CAAC5D,EAAU,EAEdrL,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJmM,EAAiBpD,OAAO,EAC1B,CAACiD,EAASC,EAASC,EAAQ,CAACxJ,OAAO,CAAC,CAAC2H,EAAKlH,KACpCkH,EAAItB,OAAO,EACbsB,EAAItB,OAAO,CAACM,QAAQ,CAAC+E,GAAG,CAAC,CAACjL,EAAQ,GAAKiJ,EAAQ,EAAG,EAEtD,EAEJ,EAAG,CAACA,EAAO,EAEXpM,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJmM,EAAiBpD,OAAO,EAAIvI,GAC9ByP,oBAAoBzP,EAExB,EAAG,CAACA,EAAO6K,EAAU,EAErB,IAAMoE,cAAgB,CAACF,EAAqBpM,KAC1CoM,EAAItB,QAAQ,CAAC,IACX,GAAIC,aAAiBnC,EAAAA,GAAU,CAAE,CAC/B,IAAIoC,EACJ,GAAID,EAAMzM,IAAI,GAAK8N,EAAIhC,QAAQ,CAACD,aAAa,CAC3Ca,EAAW,IAAIpC,EAAAA,GAAuB,CAAC,CACrCnB,MAAOrE,EAAAA,EAAK,CAAC8E,EAAU,CAACuC,OAAO,CAC/BuD,YAAa,GACbC,QAAS,EACTC,WAAY,EACd,GACAnD,EAAMoD,WAAW,CAAG,OACf,GAAIpD,aAAAA,EAAMzM,IAAI,CAAiB,CACpC0M,EAAW,IAAIpC,EAAAA,GAAuB,CAAC,CACrCnB,MAAOrE,EAAAA,EAAK,CAAC8E,EAAU,CAACkG,aAAa,CACrCJ,YAAa,GACbC,QAAS,EACTC,WAAY,EACd,GACA,IAAMG,EAAoB,IAAIzF,EAAAA,GAAmB,CAACmC,EAAMG,QAAQ,EAC1DoD,EAAoB,IAAI1F,EAAAA,GAAuB,CAAC,CACpDnB,MAAOrE,EAAAA,EAAK,CAAC8E,EAAU,CAACuC,OAAO,CAC/BuD,YAAa,GACbC,QAAS,EACTC,WAAY,EACd,GACMK,EAAY,IAAI3F,EAAAA,GAAkB,CAACyF,EAAmBC,EAC5DC,CAAAA,EAAUJ,WAAW,CAAG,EACxBpD,EAAMwB,GAAG,CAACgC,EACZ,MACExD,EAAMyD,OAAO,CAAG,GAEdxD,GACFD,CAAAA,EAAMC,QAAQ,CAAGA,CAAAA,CAErB,CACF,EACF,EAEM2B,WAAa,CAAClL,EAAc2K,EAAqBqC,EAAmB5B,KACxE,IAAM6B,EAAe,IAAIC,EAAAA,CAAYA,CAAClN,EAAM,CAC1CoL,KAAMA,EACN+B,KAAMzF,EACNpG,OAAQ,GACR8L,cAAe,GACfC,aAAc,GACdC,eAAgB,IAChBC,UAAW,GACb,GAEMC,EAAoB5G,EAAyBzC,OAAO,GAAK6I,EAAY,SAAWrL,EAAAA,EAAK,CAAC8E,EAAU,CAACwC,KAAK,CAEtGwE,EAAe,IAAItG,EAAAA,GAAuB,CAAC,CAC/CnB,MAAOwH,EACPjB,YAAa,GACbC,QAAS,CACX,GACMkB,EAAW,IAAIvG,EAAAA,GAAU,CAAC8F,EAAcQ,GAE9C9C,EAAItB,QAAQ,CAAC,IACPC,aAAiBnC,EAAAA,GAAU,EAAImC,EAAMzM,IAAI,GAAKmQ,IAChDU,EAASjJ,QAAQ,CAAC+E,GAAG,CAAC,EAAG,EAAG,GAC5BF,EAAMwB,GAAG,CAAC4C,GAEd,EACF,EAEMvB,eAAiB,KACrB,CAAC,SAAU,QAAS,WAAW,CAACrO,OAAO,CAAC,CAACkC,EAAMzB,KAC7C,IAAMoM,EAAM,CAACvD,EAASC,EAASC,EAAQ,CAAC/I,EAAM,CAAC4F,OAAO,CAClDwG,GACFA,EAAItB,QAAQ,CAAC,IACX,GAAIC,aAAiBnC,EAAAA,GAAU,EAAImC,EAAMG,QAAQ,EAAIH,iBAAAA,EAAMG,QAAQ,CAAC1J,IAAI,CAAqB,CAE3F,IAAM4N,EAAaC,EAAYpF,MAAM,CACrC,GAAImF,EAAY,CACdA,EAAWE,MAAM,CAHCvE,GAIlB,IAAMyB,EAAa,IAAIC,EAAAA,CAAUA,CACjCD,EAAWP,IAAI,CAAC,GAAYvQ,MAAA,CAATgR,EAAAA,EAAQA,CAAC,2CAA0C,IACpEC,WAAWlL,EAAM2K,EAAK3K,EAAKmL,WAAW,GAAIC,EAC5C,EACF,CACF,CACF,EAEJ,EACF,EAEMC,oBAAsB,IAC1B,IAAMyC,EAAmB,CAAC1G,EAASC,EAASC,EAAQ,CAACyG,IAAI,CACvD,QAAStI,QAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAAItB,OAAO,GAAXsB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAakD,QAAQ,CAACD,aAAa,IAAKsF,IAG/CF,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAkB3J,OAAO,GAC3ByE,gBAAgBoF,EAAsBF,EAAiB3J,OAAO,CAElE,EAEA,MACE,GAAAtK,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAWE,IAAAA,SAAAA,WACd,GAAAL,EAAAM,GAAA,EAACJ,MAAAA,CAAIC,UAAWE,IAAAA,cAAAA,CAAuBuL,IAAKiB,IAC5C,GAAA7M,EAAAM,GAAA,EAACJ,MAAAA,CAAIC,UAAWE,IAAAA,UAAAA,KAGtB,6SCvVO,IAAMqI,EAAkB,CAC7B,MACA,KACA,KACA,KACD,CAEYZ,EAAe,CAC1B,EAAG,CAAEqH,QAAS,QAAUC,MAAO,QAAUC,SAAU,SAAUyD,cAAe,QAAS,EACrF,EAAG,CAAE3D,QAAS,QAAUC,MAAO,QAAUC,SAAU,SAAUyD,cAAe,QAAS,EACrF,EAAG,CAAE3D,QAAS,QAAUC,MAAO,QAAUC,SAAU,SAAUyD,cAAe,QAAS,EACrF,EAAG,CAAE3D,QAAS,QAAUC,MAAO,QAAUC,SAAU,QAAUyD,cAAe,QAAS,EACrF,EAAG,CAAE3D,QAAS,QAAUC,MAAO,QAAUC,SAAU,QAAUyD,cAAe,OAAS,CACvF,EAEajM,EAAyB,CACpC0B,IAAK,UACLzB,KAAM,UACNwB,MAAO,UACPE,OAAQ,UACRH,OAAQ,SACV,EAEa+L,EAA2B,CACtCC,kBAAmB,UACnBC,oBAAqB,UACrBC,uBAAwB,UACxBC,YAAa,UACbC,YAAa,SACf,EAIaC,EAA8B,CACzC,MACA,OACA,SACA,QACA,WACA,OAED,CAEYC,EAAkC,CAC7C,SACA,QACA,WACD,CAGYC,EAAwC,CACnD,MACA,OACA,QACD,CAEYC,EAAyB,CACpC,MACA,aACA,aACA,UACA,QACA,QACA,SACA,SACA,QACA,QACA,WACA,SACA,QACA,UACA,SACD,CAEYC,EAAmB,CAC9BC,iBAAkB,CAChBC,aAAc,CACZnM,MAAO,KACT,EACAoM,iBAAkB,CAChBpM,MAAO,MACPqM,MAAO,UACPC,SAAU,WACZ,EACAC,wBAAyB,CACvBC,MAAO,MACPC,eAAgB,UAClB,CACF,EACAC,mBAAoB,CAClBC,OAAQ,CACNC,eAAgB,QAClB,EACAC,gBAAiB,CACfD,eAAgB,QAClB,EACAE,QAAS,CACP9M,MAAO,MACPwM,MAAO,MACPH,MAAO,UACPC,SAAU,sCACZ,CACF,EACAS,sBAAuB,CACrBC,OAAQ,CACNJ,eAAgB,QAClB,EACAK,kBAAmB,CACjBjN,MAAO,MACPwM,MAAO,MACPH,MAAO,UACPa,WAAY,WACd,EACAC,mBAAoB,CAClBP,eAAgB,SAChBQ,SAAU,KACVC,UAAW,KACb,EACAC,kBAAmB,CACjBV,eAAgB,SAChBQ,SAAU,MACVC,UAAW,KACb,EACAE,qBAAsB,CACpBX,eAAgB,SAChBQ,SAAU,MACVC,UAAW,KACb,EACAG,2BAA4B,CAC1BN,WAAY,SACZV,MAAO,OACPH,MAAO,OACT,EACAoB,+BAAgC,CAC9BC,kBAAmB,MACnBN,SAAU,aACVC,UAAW,YACb,EAEAP,QAAS,CACP9M,MAAO,MACPwM,MAAO,MACPH,MAAO,UACPC,SAAU,WACZ,EACAqB,mBAAoB,CAClBtB,MAAO,QACPG,MAAO,OACPU,WAAY,sCACd,EACAU,iBAAkB,CAChBhB,eAAgB,QAChBQ,SAAU,MACVC,UAAW,KACb,EACAQ,cAAe,CACbH,kBAAmB,MACnBN,SAAU,aACVC,UAAW,YACb,CACF,CAEF,EAEaS,EAA4C,CACvDC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,MAAO,UACPC,SAAU,UACVC,KAAM,MACR,0ECnJAtX,CAAAA,EAAAC,CAAA,CApByB,CAACsX,EAAkB/R,IAEE,KAC1C,IAAMgS,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,IAWf,MATA7V,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR,GAAK4V,EAAOE,OAAO,EAEf,CAACF,EAAOG,KAAK,CAACnS,EAAQF,GAAG,CAAC,CAAE,CAC9B,IAAMqS,EAAQnS,EAAQoS,YAAY,CAClCJ,EAAOK,OAAO,CAAC,CAAEF,MAAAA,CAAM,EAAGG,KAAAA,EAAW,CAAEC,QAAS,EAAK,EACvD,CACF,EAAG,CAACP,EAAOG,KAAK,CAAC,EAET,GAAAtX,EAAAM,GAAA,EAAC4W,EAAAA,CAAAA,EACX,gXCmxBFS,EAAeC,CAAAA,EAAAA,EAAAA,CAAAA,EA9wB2B,SAsRlBC,EACDA,EAtRrB,IAAMV,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,IACT,CAAE3B,eAAAA,CAAc,CAAEQ,SAAAA,CAAQ,CAAEC,UAAAA,CAAS,CAAE,CAAGiB,EAAOG,KAAK,CAEtD,CAACQ,EAAWC,EAAa,CAAGzW,CAAAA,EAAAA,EAAAA,QAAAA,EAAc,MAC1C,CAAC0W,EAAgBC,EAAkB,CAAG3W,CAAAA,EAAAA,EAAAA,QAAAA,EAAiC,CAAEmU,eAAAA,EAAgBQ,SAAAA,EAAUC,UAAAA,CAAU,GAC7G,CAACgC,EAAeC,EAAiB,CAAG7W,CAAAA,EAAAA,EAAAA,QAAAA,EAAc,MAClD,CAAC8W,EAAcC,EAAgB,CAAG/W,CAAAA,EAAAA,EAAAA,QAAAA,EAAc,MAChD,CAACgX,EAAgBC,EAAkB,CAAGjX,CAAAA,EAAAA,EAAAA,QAAAA,EAAkC,CAAC,GACzE,CAACkX,EAAkBC,EAAoB,CAAGnX,CAAAA,EAAAA,EAAAA,QAAAA,EAAkC,CAAC,GAC7E,CAACoX,EAAaC,EAAe,CAAGrX,CAAAA,EAAAA,EAAAA,QAAAA,EAAc,MAIpDC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR,GAAK4V,EAAOE,OAAO,EAEnB,GAAI,EAAQC,KAAK,CAACrB,QAAQ,EAAKkB,EAAOG,KAAK,CAAC7B,cAAc,EAAK0B,EAAOG,KAAK,CAACpB,SAAS,CAMnF+B,EAAkB,CAAExC,eAAAA,EAAgBQ,SAAUA,GAAY,MAAOC,UAAAA,CAAU,OANU,CACrF,IAAMoB,EAAQxC,EAAAA,gBAAgBA,CAACc,qBAAqB,CAACI,kBAAkB,CACjE,CAAEP,eAAAA,CAAc,CAAEQ,SAAAA,CAAQ,CAAEC,UAAAA,CAAS,CAAE,CAAGoB,EAChDW,EAAkB,CAAExC,eAAAA,EAAgBQ,SAAUA,GAAY,KAAMC,UAAAA,CAAU,GAC1EiB,EAAOK,OAAO,CAAC,CAAEF,MAAO,CAAE,GAAGA,CAAK,CAAErB,SAAUA,GAAY,IAAK,CAAE,EAAGwB,KAAAA,EAAW,CAAEC,QAAS,EAAK,EACjG,EAGF,EAAG,CAACP,EAAOG,KAAK,CAAC,EAEjB/V,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJkU,GAAkBQ,GAAYC,IAChC0C,qBACAC,iBACAC,mBACAC,mBAEJ,EAAG,CAACtD,EAAgBQ,EAAUC,EAAU,EAExC,IAAM0C,mBAAqB,UACzB,GAAI,CACF,IAAMI,EAAW,MAAMC,MAAM,GAA6DxD,MAAAA,CAA1D7E,EAAAA,EAAQA,CAAC,mDAAuEsF,MAAAA,CAAtBT,EAAe,SAAiBrV,MAAA,CAAV8V,EAAU,6BACpH5S,EAAO,MAAM0V,EAASE,IAAI,GAC5B5V,GAAQK,MAAMW,OAAO,CAAChB,EAAKsB,MAAM,IACnCuT,EAAiB7U,EAAKsB,MAAM,EAC5B2T,EAAkB,CAChBY,sBAAuB7V,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,4BAAAA,EAAKpQ,EAAE,EACvDqQ,6BAA8BhW,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,oCAAAA,EAAKpQ,EAAE,EAC9DsQ,0BAA2BjW,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,iCAAAA,EAAKpQ,EAAE,EAC3DuQ,8BAA+BlW,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,qCAAAA,EAAKpQ,EAAE,EAC/DwQ,2BAA4BnW,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,kCAAAA,EAAKpQ,EAAE,EAC5DyQ,aAAcpW,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,kBAAAA,EAAKpQ,EAAE,EAC9C0Q,MAAOrW,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,WAAAA,EAAKpQ,EAAE,EACvC2Q,eAAgBtW,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,oBAAAA,EAAKpQ,EAAE,EAChD4Q,6BAA8BvW,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,mCAAAA,EAAKpQ,EAAE,EAC9D6Q,uBAAwBxW,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,sCAAAA,EAAKpQ,EAAE,EACxD8Q,kBAAmBzW,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,wBAAAA,EAAKpQ,EAAE,EACnD+Q,cAAe1W,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,oBAAAA,EAAKpQ,EAAE,EAC/CgR,WAAY3W,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,gBAAAA,EAAKpQ,EAAE,EAC5CiR,WAAY5W,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,gBAAAA,EAAKpQ,EAAE,EAC5CkR,MAAO7W,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,WAAAA,EAAKpQ,EAAE,EACvCmR,cAAe9W,EAAKsB,MAAM,CAACwU,IAAI,CAACC,GAAQA,mBAAAA,EAAKpQ,EAAE,CACjD,GAEJ,CAAE,MAAOzE,EAAO,CACdD,QAAQC,KAAK,CAAC,4BAA6BA,EAC7C,CACF,EAEMqU,eAAiB,UACrB,GAAI,CACF,IAAMG,EAAW,MAAMC,MAAM,GAA6DxD,MAAAA,CAA1D7E,EAAAA,EAAQA,CAAC,mDAAuEsF,MAAAA,CAAtBT,EAAe,SAAiBrV,MAAA,CAAV8V,EAAU,gBACpH5S,EAAO,MAAM0V,EAASE,IAAI,GAChCnB,EAAazU,EACf,CAAE,MAAOkB,EAAO,CACdD,QAAQC,KAAK,CAAC,6BAA8BA,EAC9C,CACF,EAEMsU,iBAAmB,UACvB,GAAI,CACF,IAAME,EAAW,MAAMC,MAAM,GAA6DxD,MAAAA,CAA1D7E,EAAAA,EAAQA,CAAC,mDAAuEsF,MAAAA,CAAtBT,EAAe,SAAiBrV,MAAA,CAAV8V,EAAU,+BACpH5S,EAAO,MAAM0V,EAASE,IAAI,GAC1BmB,EAAc/W,EAAKsB,MAAM,CAACsP,IAAI,CAACmF,GAAQA,yBAAAA,EAAKpQ,EAAE,EACpDoP,EAAgBgC,EAClB,CAAE,MAAO7V,EAAO,CACdD,QAAQC,KAAK,CAAC,+BAAgCA,EAChD,CACF,EAEMuU,iBAAmB,UACvB,GAAI,CACF,IAAMC,EAAW,MAAMC,MAAM,GAA6DxD,MAAAA,CAA1D7E,EAAAA,EAAQA,CAAC,mDAAuEsF,MAAAA,CAAtBT,EAAe,SAAiBrV,MAAA,CAAV8V,EAAU,+BACpH5S,EAAO,MAAM0V,EAASE,IAAI,GAChCP,EAAerV,EAAKsB,MAAM,EAE1B6T,EAAoB,CAClBU,sBAAuB7V,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAiDA,QAAzCA,4BAAAA,EAAKrR,EAAE,EAAkCqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IACjH+V,6BAA8BhW,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAyDA,QAAjDA,oCAAAA,EAAKrR,EAAE,EAA0CqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAChIgW,0BAA2BjW,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAsDA,QAA9CA,iCAAAA,EAAKrR,EAAE,EAAuCqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAC1HiW,8BAA+BlW,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAA0DA,QAAlDA,qCAAAA,EAAKrR,EAAE,EAA2CqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAClIkW,2BAA4BnW,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAuDA,QAA/CA,kCAAAA,EAAKrR,EAAE,EAAwCqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAC5HmW,aAAcpW,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAuCA,QAA/BA,kBAAAA,EAAKrR,EAAE,EAAwBqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAC9FoW,MAAOrW,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAgCA,QAAxBA,WAAAA,EAAKrR,EAAE,EAAiBqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAChFqW,eAAgBtW,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAyCA,QAAjCA,oBAAAA,EAAKrR,EAAE,EAA0BqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAClGsW,6BAA8BvW,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAwDA,QAAhDA,mCAAAA,EAAKrR,EAAE,EAAyCqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAC/HuW,uBAAwBxW,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAA2DA,QAAnDA,sCAAAA,EAAKrR,EAAE,EAA4CqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAC5HwW,kBAAmBzW,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAA6CA,QAArCA,wBAAAA,EAAKrR,EAAE,EAA8BqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IACzGyW,cAAe1W,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAyCA,QAAjCA,oBAAAA,EAAKrR,EAAE,EAA0BqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IACjG0W,WAAY3W,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAqCA,QAA7BA,gBAAAA,EAAKrR,EAAE,EAAsBqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAC1F2W,WAAY5W,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAqCA,QAA7BA,gBAAAA,EAAKrR,EAAE,EAAsBqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAC1F4W,MAAO7W,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAgCA,QAAxBA,WAAAA,EAAKrR,EAAE,EAAiBqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,IAChF6W,cAAe9W,EAAKsB,MAAM,CAACwU,IAAI,CAACkB,QAAwCA,QAAhCA,mBAAAA,EAAKrR,EAAE,EAAyBqR,CAAAA,OAAAA,CAAAA,EAAAA,EAAK1V,MAAM,GAAX0V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAa/W,MAAM,IAAK,GAClG,EACF,CAAE,MAAOiB,EAAO,CACdD,QAAQC,KAAK,CAAC,gCAAiCA,EACjD,CACF,EAEM+V,UAAY,IAChB,IAAMjD,EAAQ,CAAE,GAAGH,EAAOG,KAAK,CAAE,GAAGkD,CAAM,EAC1CrD,EAAO1X,IAAI,CAAC,CAAE6X,MAAAA,CAAM,EAAGG,KAAAA,EAAW,CAAEC,QAAS,EAAK,EACpD,EAEM+C,sBAAwB,IAC5BxC,EAAkByC,IAChB,IAAMC,EAAmB,CAAE,GAAGD,CAAI,CAAEjF,eAAAA,CAAe,EAEnD,OADA8E,UAAUI,GACHA,CACT,EACF,EAEMC,iBAAmB,IACvB3C,EAAkByC,IAChB,IAAMC,EAAmB,CAAE,GAAGD,CAAI,CAAEzE,SAAAA,CAAS,EAE7C,OADAsE,UAAUI,GACHA,CACT,EACF,EAEME,kBAAoB,IACxB5C,EAAkByC,IAChB,IAAMC,EAAmB,CAAE,GAAGD,CAAI,CAAExE,UAAAA,CAAU,EAE9C,OADAqE,UAAUI,GACHA,CACT,EACF,EAEMG,EAAkC,CACtC,CACEnV,MAAO,iBACPV,IAAK,iBACLL,OAAQ+P,EAAAA,EAAcA,CACtBoG,MAAON,qBACT,EACA,CACE9U,MAAO,0BACPV,IAAK,WACLL,OAAQ,CAAC,KAAK,CACdmW,MAAOH,gBACT,EACA,CACEjV,MAAO,2BACPV,IAAK,YACLL,OAAQiQ,EAAAA,EAASA,CACjBkG,MAAOF,iBACT,EACD,CAEKG,gBAAkB,GACf9C,MAAAA,EAAAA,KAAAA,EAAAA,EAAehE,IAAI,CAAC,GAAemF,EAAKpQ,EAAE,GAAKA,GAGlD4O,mBAAqB,IACzB,IAAMvU,EAAOoV,MAAAA,EAAAA,KAAAA,EAAAA,EAAaxE,IAAI,CAAC,GAAeoG,EAAKrR,EAAE,GAAKA,GAC1D,OAAO3F,EAAO,CAAE6D,KAAM7D,EAAKsB,MAAM,CAAC,EAAE,CAAEyC,IAAK/D,EAAKsB,MAAM,CAAC,EAAE,EAAK,IAChE,EAEA,MACE,GAAAqW,EAAAhb,IAAA,EAAAgb,EAAAC,QAAA,YACE,GAAAD,EAAA3a,GAAA,EAAC6a,EAAAA,CAAOA,CAAAA,CAACrT,MArKC,EAqKasT,QAAS,CAAC,CAACnF,GAAY,CAAC,CAACC,WAC9C,GAAA+E,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,2EACb,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,uEACb,GAAA8a,EAAAhb,IAAA,EAACob,EAAAA,CAAeA,CAAAA,WACd,GAAAJ,EAAA3a,GAAA,EAACM,EAAAA,CAAKA,CAAAA,CACJ+E,MAAM,uBACN2V,SAAS,0BACTxT,MA5KA,IA8KF,GAAAmT,EAAA3a,GAAA,EAACJ,MAAAA,CAAI4L,KAAK,uBACR,GAAAmP,EAAAhb,IAAA,EAACsb,EAAAA,CAAOA,CAAAA,WACN,GAAAN,EAAA3a,GAAA,EAAC4G,IAAAA,UAAE,4LAGH,GAAA+T,EAAAhb,IAAA,EAACub,KAAAA,WACC,GAAAP,EAAAhb,IAAA,EAACwb,KAAAA,WAAG,SAAM,GAAAR,EAAA3a,GAAA,EAACob,IAAIA,CAACvb,UAAW,cAAoBC,MAAA,CApLnD,GAoLsDoL,KAAM,qDAA6C,SAAW,gKAChH,GAAAyP,EAAAhb,IAAA,EAACwb,KAAAA,WAAG,+DAA4D,GAAAR,EAAA3a,GAAA,EAACob,IAAIA,CAACvb,UAAW,cAAoBC,MAAA,CArLzG,GAqL4GoL,KAAM,qDAA6C,SAAW,oGAMhL,GAAAyP,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,0GAA0GoH,MAAO,CAAEoU,SAAU,OAAQ,YAClJ,GAAAV,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAW,oDAA0DC,MAAA,CA5LtE,GA4LyEmH,MAAO,CAAEoU,SAAU,MAAO,YACrG,GAAAV,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAW,wBAA8BC,MAAA,CA7L5C,YA6L+C,+BACjD,GAAA6a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,0BACb,GAAA8a,EAAA3a,GAAA,EAACsb,EAAAA,CAAuBA,CAAAA,CACtB7Z,MAAO0T,EACPvJ,SAAUuO,sBACV3S,MAlMF,SAsMJ,GAAAmT,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,8DACb,GAAA8a,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAW,0BAAgCC,MAAA,CAvM9C,EAuM8C,WAAUmH,MAAO,CAAEoU,SAAU,MAAO,YAClF,GAAAV,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAW,wBAA8BC,MAAA,CAxM9C,YAwMiD,wCACjD,GAAA6a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,0BACb,GAAA8a,EAAA3a,GAAA,EAACub,EAAAA,CAAIA,CAAAA,CACHzP,MAAK,GACLH,KAAM,CAAC,KAAK,CACZlK,MAAOkU,GAAY,MACnBtQ,MAAM,SACNuG,SAAU0O,iBACV9S,MAhNJ,SAoNF,GAAAmT,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAW,0BAAgCC,MAAA,CApN9C,EAoN8C,qBAC9C,GAAA6a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAW,wBAA8BC,MAAA,CArN9C,YAqNiD,yCACjD,GAAA6a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,0BACb,GAAA8a,EAAA3a,GAAA,EAACub,EAAAA,CAAIA,CAAAA,CACHzP,MAAK,GACLH,KAAM4I,EAAAA,EAASA,CACf9S,MAAOmU,EACPvQ,MAAM,SACNuG,SAAU2O,kBACV/S,MA7NJ,oBAoOV,GAAAmT,EAAAhb,IAAA,EAAC6b,EAAAA,CAAaA,CAAAA,CACZhU,MArOQ,EAsORiU,SAAU,CACR,CAAEpV,MAAO,UAAWqV,QAAS,EAAK,EAClC,CAAE/S,GAAI,iCAAkCtC,MAAO,mCAAoC,EACnF,CAAEsC,GAAI,8BAA+BtC,MAAO,8BAA+B,EAC3E,CAAEsC,GAAI,4BAA6BtC,MAAO,2BAA4B,EACtE,CAAEsC,GAAI,qCAAsCtC,MAAO,2BAA4B,EAC/E,CAAEsC,GAAI,uCAAwCtC,MAAO,+BAAgC,EACrF,CAAEsC,GAAI,qCAAsCtC,MAAO,4BAA6B,EAChF,CAAEA,MAAO,aAAcqV,QAAS,EAAK,EACrC,CAAE/S,GAAI,sBAAuBtC,MAAO,qBAAsB,EAC1D,CAAEsC,GAAI,eAAgBtC,MAAO,cAAe,EAC5C,CAAEsC,GAAI,wBAAyBtC,MAAO,uBAAwB,EAC9D,CAAEsC,GAAI,kBAAmBtC,MAAO,0BAA2B,EAC3D,CAAEsC,GAAI,2BAA4BtC,MAAO,2BAA4B,EACrE,CAAEsC,GAAI,uBAAwBtC,MAAO,uBAAwB,EAC7D,CAAEsC,GAAI,oBAAqBtC,MAAO,qBAAsB,EACxD,CAAEsC,GAAI,gBAAiBtC,MAAO,QAAS,EACxC,CACDsV,qBAAsBnB,YAGtB,GAAAG,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAA3a,GAAA,EAAC4b,EAAAA,CAASA,CAAAA,CAACpc,QAAS,YAClB,GAAAmb,EAAAhb,IAAA,EAACkc,OAAAA,CAAKhc,UAAU,sBAAY,gCAA6B,GAAA8a,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,yBAAgB,qBAI5FmY,EAAea,qBAAqB,EACnC,GAAA8B,EAAAhb,IAAA,EAACmc,EAAAA,CAAWA,CAAAA,CAACzW,MAAM,iDAAiDsD,GAAG,iCAAiCoT,WAAY,CAAC,UAAU,WAC7H,GAAApB,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,2BAC1B/Z,MAAM,QACNC,MAAM,YACNC,cAAe,EACfJ,QAAS,CACPoG,KAAI,OAAE0Q,CAAAA,EAAAA,mBAAmB,6BAAnBA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA+C1Q,IAAI,CACzDE,IAAG,OAAEwQ,CAAAA,EAAAA,mBAAmB,6BAAnBA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA+CxQ,GAAG,MAO7D,GAAA4T,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MApRA,EAqRAkE,QAAS,IAAMuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAevB,gBAAgB,2BAA4B,2BAA6C/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAC7I,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCAA8BsV,IAAsB,iDAE5G,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC8V,IAAgB,MAAG,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC+V,YAOpIoC,EAAegB,4BAA4B,EAC1C,GAAA2B,EAAAhb,IAAA,EAACmc,EAAAA,CAAWA,CAAAA,CAACzW,MAAM,wCAAwCsD,GAAG,8BAA8BoT,WAAY,CAAC,UAAU,WACjH,GAAApB,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,mCAC1B/Z,MAAM,aACNC,MAAM,YACNC,cAAe,OAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MA3SA,EA4SAkE,QAAS,IAAMuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAevB,gBAAgB,mCAAoC,mCAAqD/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAC7J,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCAA8BsV,IAAsB,wCAE5G,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC8V,IAAgB,MAAG,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC+V,YAOpIoC,EAAeiB,yBAAyB,EACvC,GAAA0B,EAAAhb,IAAA,EAACmc,EAAAA,CAAWA,CAAAA,CAACzW,MAAM,qCAAqCsD,GAAG,4BAA4BoT,WAAY,CAAC,UAAU,WAC5G,GAAApB,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,gCAC1B/Z,MAAM,aACNC,MAAM,YACNC,cAAe,OAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MAlUA,EAmUAkE,QAAS,IAAMuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAevB,gBAAgB,iCAAkC,iCAAmD/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBACzJ,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCAA8BsV,IAAsB,qCAE5G,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC8V,IAAgB,MAAG,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC+V,YAQrI,GAAA+E,EAAAhb,IAAA,EAACmc,EAAAA,CAAWA,CAAAA,CAACzW,MAAM,mCAAmCsD,GAAG,qCAAqCoT,WAAY,CAAC,UAAU,WACnH,GAAApB,EAAA3a,GAAA,EAAC4G,IAAAA,UAAE,YACH,GAAA+T,EAAA3a,GAAA,EAACmc,EAAAA,CAAYA,CAAAA,CAACnZ,KAAM8U,EAAczS,MAAO8R,KAAAA,EAAW5P,WAAY4P,KAAAA,OAGjEa,EAAekB,6BAA6B,EAC3C,GAAAyB,EAAAhb,IAAA,EAACmc,EAAAA,CAAWA,CAAAA,CAACzW,MAAM,yCAAyCsD,GAAG,uCAAuCoT,WAAY,CAAC,UAAU,WAC3H,GAAApB,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,oCAC1B/Z,MAAM,cACNC,MAAM,YACNC,cAAe,QAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MA/VA,EAgWAkE,QAAS,IAAMuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAevB,gBAAgB,oCAAqC,oCAAsD/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAC/J,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCAA8BsV,IAAsB,yCAE5G,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC8V,IAAgB,MAAG,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC+V,YAOpIoC,EAAemB,0BAA0B,EACxC,GAAAwB,EAAAhb,IAAA,EAACmc,EAAAA,CAAWA,CAAAA,CAACzW,MAAM,sCAAsCsD,GAAG,qCAAqCoT,WAAY,CAAC,UAAU,WACtH,GAAApB,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,iCAC1B/Z,MAAM,cACNC,MAAM,YACNC,cAAe,QAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MAtXA,EAuXAkE,QAAS,IAAMuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAevB,gBAAgB,iCAAkC,iCAAmD/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBACzJ,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCAA8BsV,IAAsB,sCAE5G,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC8V,IAAgB,MAAG,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC+V,YAOpIoC,EAAeoB,YAAY,EAC1B,GAAAuB,EAAAhb,IAAA,EAACmc,EAAAA,CAAWA,CAAAA,CAACzW,MAAM,gBAAgBsD,GAAG,sBAAsBoT,WAAY,CAAC,aAAa,WACpF,GAAApB,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,iBAC1B/Z,MAAM,gBACNC,MAAM,YACNC,cAAe,MAInB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MA9YA,EA+YAkE,QAAS,IAAMuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAevB,gBAAgB,iBAAkB,iBAAmC/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBACzH,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCAA8BsV,IAAsB,gBAE5G,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC8V,IAAgB,MAAG,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC+V,YAMpIoC,EAAeqB,KAAK,EACnB,GAAAsB,EAAAhb,IAAA,EAACmc,EAAAA,CAAWA,CAAAA,CAACzW,MAAM,SAASsD,GAAG,eAAeoT,WAAY,CAAC,aAAa,WACtE,GAAApB,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,UAC1B/Z,MAAM,SACNC,MAAM,YACNC,cAAe,MAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MApaA,EAqaAkE,QAAS,IAAMuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAevB,gBAAgB,UAAW,UAA4B/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAC3G,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCAA8BsV,IAAsB,SAE5G,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC8V,IAAgB,MAAG,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC+V,YAOnIoC,CAAAA,EAAesB,cAAc,EAAItB,EAAeuB,4BAA4B,GAC5E,GAAAoB,EAAA3a,GAAA,EAAC8b,EAAAA,CAAWA,CAAAA,CACVzW,MAAM,+BACNsD,GAAG,wBACHoT,WAAY,CAAC,aAAa,UAE1B,GAAApB,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,iCAEZmY,EAAesB,cAAc,EAC5B,GAAAqB,EAAA3a,GAAA,EAAA2a,EAAAC,QAAA,WACE,GAAAD,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,gCACb,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,wBAAe,oBAC9B,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,mBAC1B/Z,MAAM,UACNC,MAAM,gBAGV,GAAA+Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MApcR,EAqcQkE,QAAS,IACPuQ,CAAAA,EAAAA,EAAAA,EAAAA,EACEvB,gBAAgB,mBAChB,mBAAqC/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAI/D,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCACrDsV,IACI,+BAEP,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC8V,IAAgB,KAAG,IACvE,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC+V,cAO7DoC,EAAeuB,4BAA4B,EAC1C,GAAAoB,EAAA3a,GAAA,EAAA2a,EAAAC,QAAA,WACE,GAAAD,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,gCACb,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,wBAAe,mCAC9B,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,kCAC1B/Z,MAAM,UACNC,MAAM,YACNC,cAAe,MAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MAteR,EAueQkE,QAAS,IACPuQ,CAAAA,EAAAA,EAAAA,EAAAA,EACEvB,gBAAgB,kCAChB,kCAAoD/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAI9E,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCACrDsV,IACI,iCAEP,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC8V,IAAgB,KAAG,IACvE,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC+V,mBAWlEoC,EAAewB,sBAAsB,EACnC,GAAAmB,EAAAhb,IAAA,EAACmc,EAAAA,CAAWA,CAAAA,CAACzW,MAAM,kCAAkCsD,GAAG,kBAAkBoT,WAAY,CAAC,aAAa,WAClG,GAAApB,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,qCAC1B/Z,MAAM,YACNC,MAAM,YACNC,cAAe,MAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MA1gBF,EA2gBEkE,QAAS,IAAMuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAevB,gBAAgB,qCAAsC,qCAAuD/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBACjK,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCAA8BsV,IAAsB,kCAE5G,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC8V,IAAgB,MAAG,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC+V,YAQtIoC,EAAeyB,iBAAiB,EAC/B,GAAAkB,EAAA3a,GAAA,EAAC8b,EAAAA,CAAWA,CAAAA,CACVzW,MAAM,mCACNsD,GAAG,2BACHoT,WAAY,CAAC,aAAa,UAE1B,GAAApB,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,gCACb,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,uBAC1B/Z,MAAM,aACNC,MAAM,YACNC,cAAe,MAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MAviBF,EAwiBEkE,QAAS,IACPuQ,CAAAA,EAAAA,EAAAA,EAAAA,EACEvB,gBAAgB,uBAChB,uBAAyC/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAInE,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCACrDsV,IAEH,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC8V,IAAgB,KAAG,IACvE,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC+V,IAAiB,6CAS7EoC,EAAe0B,aAAa,EAC1B,GAAAiB,EAAAhb,IAAA,EAACmc,EAAAA,CAAWA,CAAAA,CAACzW,MAAM,+BAA+BsD,GAAG,uBAAuBoT,WAAY,CAAC,aAAa,WACpG,GAAApB,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdnb,cAAe,EACfH,SAAUga,gBAAgB,uBAE9B,GAAAC,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MArkBF,EAskBEkE,QAAS,IAAMuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAevB,gBAAgB,mBAAoB,mBAAqC/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAC7H,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCAA8BsV,IACtF,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC8V,IAAgB,MAAG,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,6CAAqC+V,IAAiB,uCAexJ,GAAA+E,EAAA3a,GAAA,EAAC8b,EAAAA,CAAWA,CAAAA,CACVzW,MAAM,gCACNsD,GAAG,oBACHoT,WAAY,CAAC,aAAa,UAE1B,GAAApB,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,iCACZmY,EAAe2B,UAAU,EACxB,GAAAgB,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,gCACb,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,wBAAe,gBAC9B,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,eAC1B/Z,MAAM,QACNC,MAAM,YACNC,cAAe,MAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MA1mBJ,EA2mBIkE,QAAS,IACPuQ,CAAAA,EAAAA,EAAAA,EAAAA,EACEvB,gBAAgB,eAChB,eAAiC/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAI3D,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCACrDsV,IAEH,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC8V,IAAgB,KAAG,IACvE,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC+V,IAAiB,sBAO5EoC,EAAe4B,UAAU,EACxB,GAAAe,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,gCACb,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,wBAAe,gBAC9B,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,eAC1B/Z,MAAM,QACNC,MAAM,YACNC,cAAe,QAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MA1oBJ,EA2oBIkE,QAAS,IACPuQ,CAAAA,EAAAA,EAAAA,EAAAA,EACEvB,gBAAgB,eAChB,eAAiC/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAI3D,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCACrDsV,IAEH,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC8V,IAAgB,KAAG,IACvE,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC+V,IAAiB,sBAQ5EoC,EAAe6B,KAAK,EACnB,GAAAc,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,gCACb,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,wBAAe,WAC9B,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,UAC1B/Z,MAAM,QACNC,MAAM,YACNC,cAAe,MAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MA3qBJ,EA4qBIkE,QAAS,IACPuQ,CAAAA,EAAAA,EAAAA,EAAAA,EACEvB,gBAAgB,UAChB,UAA4B/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAItD,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCACrDsV,IAEH,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC8V,IAAgB,KAAG,IACvE,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC+V,IAAiB,2BAQ5EoC,EAAe8B,aAAa,EAC3B,GAAAa,EAAAhb,IAAA,EAACC,MAAAA,CAAIC,UAAU,gCACb,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,wBAAe,mBAC9B,GAAA8a,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACgc,EAAAA,CAAeA,CAAAA,CACdtb,SAAUga,gBAAgB,kBAC1B/Z,MAAM,OACNC,MAAM,YACNC,cAAe,MAGnB,GAAA8Z,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,gBACb,GAAA8a,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MA5sBJ,EA6sBIkE,QAAS,IACPuQ,CAAAA,EAAAA,EAAAA,EAAAA,EACEvB,gBAAgB,kBAChB,kBAAoC/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAI9D,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCACrDsV,IAEH,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC8V,IAAgB,KAAG,IACvE,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC+V,IAAiB,8BAUjF,GAAA+E,EAAA3a,GAAA,EAAC8b,EAAAA,CAAWA,CAAAA,CAACzW,MAAM,QAAQsD,GAAG,gBAAgB9I,UAAU,gBACrD2X,GAAaA,EAAU4E,iBAAiB,EAAI5E,EAAU6E,UAAU,EAC/D,GAAA1B,EAAAhb,IAAA,EAAAgb,EAAAC,QAAA,YACE,GAAAD,EAAA3a,GAAA,EAACJ,MAAAA,CAAIC,UAAU,iBACb,GAAA8a,EAAA3a,GAAA,EAACsc,EAAAA,CAAUA,CAAAA,CAAC5b,SAAU8W,MAExB,GAAAmD,EAAAhb,IAAA,EAAC8L,EAAAA,CAAcA,CAAAA,CACbjE,MAzuBA,EA0uBAkE,QAAS,IACPuQ,CAAAA,EAAAA,EAAAA,EAAAA,EACEvB,gBAAgB,kBAChB,kBAAoC/E,MAAAA,CAAlBR,EAAe,KAAeS,MAAAA,CAAZD,EAAS,KAAa7V,MAAA,CAAV8V,EAAU,oBAI9D,GAAA+E,EAAA3a,GAAA,EAAC6b,OAAAA,CAAK5U,MAAO,CAAEiV,cAAe,YAAa,EAAGrc,UAAU,sCACrDsV,IAEH,GAAAwF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC8V,IAAgB,KAAG,IACvE,GAAAgF,EAAA3a,GAAA,EAAC6b,OAAAA,CAAKhc,UAAU,4CAAoC+V,IAAiB,qBAWrF,EAIE,CACEjR,IAAK,iBACLsS,aAAczC,EAAAA,gBAAgBA,CAACc,qBAAqB,CAACI,kBAAkB,GC3yB5D,SAAS6G,0BACtB,IAAMC,EAAW,CACfnX,MAAO,uEACP1C,YACE,oNACF8Z,SAAU,CACR,uBACA,cACA,cACA,0BACA,mBACA,eACA,qBACD,CACDC,OAAQ,qBACRC,QAAS,0BACTC,UAAW,qBACb,EAEA,MACE,GAAAjC,EAAAhb,IAAA,EAAAgb,EAAAC,QAAA,YACE,GAAAD,EAAAhb,IAAA,EAACkd,IAAIA,WACH,GAAAlC,EAAA3a,GAAA,EAACqF,QAAAA,UAAOmX,EAASnX,KAAK,GACtB,GAAAsV,EAAA3a,GAAA,EAACqJ,OAAAA,CAAK3G,KAAK,cAAcoa,QAASN,EAAS7Z,WAAW,GACtD,GAAAgY,EAAA3a,GAAA,EAACqJ,OAAAA,CAAK3G,KAAK,WAAWoa,QAASN,EAASC,QAAQ,CAACna,IAAI,CAAC,QACtD,GAAAqY,EAAA3a,GAAA,EAACqJ,OAAAA,CAAK3G,KAAK,SAASoa,QAASN,EAASE,MAAM,GAC5C,GAAA/B,EAAA3a,GAAA,EAACqJ,OAAAA,CAAK3G,KAAK,UAAUoa,QAASN,EAASG,OAAO,GAC9C,GAAAhC,EAAA3a,GAAA,EAACqJ,OAAAA,CAAK3G,KAAK,YAAYoa,QAASN,EAASI,SAAS,MAGpD,GAAAjC,EAAA3a,GAAA,EAAC+c,EAAuBA,CAAAA,KAG9B,yGC7BA,IAAMC,EAAOC,IAAQ,IAAMC,QAAA5G,GAAA,EAAAlX,EAAA+d,CAAA,OAAA/d,EAAA+d,CAAA,SAAAC,IAAA,CAAAhe,EAAAie,IAAA,CAAAje,EAAA,QAA0Bge,IAAI,CAAC,GAASE,EAAIzO,OAAO,2CAC1E0O,IAAK,IAoITle,CAAAA,EAAAC,CAAA,CA1HmD,OAAC,CAAEoB,SAAAA,CAAQ,CAAE,CAAAjB,EACtD,CAACuD,EAAMwa,EAAQ,CAAGxc,CAAAA,EAAAA,EAAAA,QAAAA,EAAgB,EAAE,EACpC,CAACyc,EAAQC,EAAU,CAAG1c,CAAAA,EAAAA,EAAAA,QAAAA,EAAc,CAAC,GACrC,CAAC2c,EAAWC,EAAa,CAAG5c,CAAAA,EAAAA,EAAAA,QAAAA,EAAkB,IAC9C,CAAC6c,EAAUC,EAAY,CAAG9c,CAAAA,EAAAA,EAAAA,QAAAA,EAAkB,UAElDC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KAEN,GADAgD,QAAQmN,GAAG,CAAC,gCAAiC1Q,GACzC,CAACA,GAAY,CAACA,EAAS0b,iBAAiB,EAAI,CAAC1b,EAAS2b,UAAU,CAAE,CAClEpY,QAAQmN,GAAG,CAAC,0BACZwM,EAAa,IACbE,EAAY,IACZ,MACJ,CAEA,GAAI,CACAF,EAAa,IACbE,EAAY,IAQZ,IAAMC,EAAU1a,MAAMC,IAAI,CAAC,CAAEL,OAAQvC,EAAS2b,UAAU,CAACpZ,MAAM,EAAI,CAACM,EAAGC,IAAMA,EAAK,KAAQ9C,CAAAA,EAAS2b,UAAU,CAACpZ,MAAM,CAAG,KAGjH+a,EAAmBtd,EAAS0b,iBAAiB,CAACja,GAAG,CAAC,CAAC8b,EAAO7Z,IAAW,EACvEN,EAAGia,EACHha,EAAGka,EACHrY,KAAM,UACNwE,KAAM,QACN1H,KAAM,oBAA8B5C,MAAA,CAAVsE,EAAQ,GAClC8Z,KAAM,CAAErS,MAAQ,UAAU3E,MAAO,CAAE,EACnCiX,WAAY,GACZC,cAAe,iDACnB,IAGMC,EAAY,CACdva,EAAGia,EACHha,EAAGrD,EAAS2b,UAAU,CACtBzW,KAAM,UACNwE,KAAM,QACN1H,KAAM,aACNwb,KAAM,CAAErS,MAAOtF,EAAAA,EAAUA,CAAC0B,GAAG,CAAEf,MAAO,CAAE,EACxCkX,cAAe,iDACnB,EAEAZ,EAAQ,IAAIQ,EAAkBK,EAAU,EAGxCX,EAAU,CACNrY,MAAO,GACPiZ,MAAO,CACHjZ,MAAO,OACPkZ,eAAgB,GAChBC,MAAO,CAAC,EAAG,IAAK,CAChBC,SAAU,QACVC,SAAU,CAAC,EAAG,IAAM,IAAM,IAAM,IAAM,IAAK,CAC3CC,SAAU,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAK,CAC/CC,YAAa,KACjB,EACAC,MAAO,CACHxZ,MAAO,aACPkZ,eAAgB,GAChBK,YAAa,KACjB,EACAE,SAAU,GACVC,OAAQ,CAAEC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,IAAK,CAAE,EAC7CC,UAAW,UACXlB,WAAY,GACZlZ,OAAQ,CAAEnB,EAAG,EAAGwb,QAAS,QAASvb,EAAG,CAAE,EACvCwb,aAAc,UACdC,cAAe,SACnB,GAEA5B,EAAa,GACjB,CAAE,MAAO1Z,EAAO,CACZD,QAAQC,KAAK,CAAC,8BAA+BA,GAC7C0Z,EAAa,IACbE,EAAY,GAChB,CACJ,EAAG,CAACpd,EAAS,EAgBT,GAAAhB,EAAAM,GAAA,EAACJ,MAAAA,CAAIqH,MAdc,CACnBC,MAAO,OACPC,OAAQ,QACRmD,SAAU,UACd,WAWSqT,EACG,GAAAje,EAAAM,GAAA,EAACJ,MAAAA,CAAIqH,MAVG,CAChBqD,SAAU,WACVyD,IAAK,MACLF,KAAM,MACN4R,UAAW,uBACf,WAMgB,GAAA/f,EAAAM,GAAA,EAAC0f,EAAAA,CAAOA,CAAAA,CAAC7f,UAAU,2BAEvBge,GAAY,CAAC7a,EAAKC,MAAM,CACxB,GAAAvD,EAAAM,GAAA,EAAC4G,IAAAA,CAAE/G,UAAU,2GAAkG,uBAI/G,GAAAH,EAAAM,GAAA,EAACgd,EAAAA,CACGha,KAAMA,EACNya,OAAQA,EACRkC,iBAAkB,GAClB1Y,MAAO,CAAEC,MAAO,OAAQC,OAAQ,MAAO,EACvCyY,OAAQ,CAAE9a,WAAY,EAAK,KAK/C,qBCzIA+a,EAAAC,OAAA,EAAkB,kFCAlBD,EAAAC,OAAA,EAAkB,sJCAlBD,EAAAC,OAAA,EAAkB","sources":["webpack://_N_E/?a9f0","webpack://_N_E/./src/components/AuthorBox/AuthorBox.tsx","webpack://_N_E/./src/components/DistributionPlot/index.tsx","webpack://_N_E/./src/components/LaminarGraph/index.tsx","webpack://_N_E/./src/components/List/index.tsx","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/components/VolumeSectionSelector3D/index.tsx","webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/hoc/with-preselection.tsx","webpack://_N_E/./src/views/3_digital-reconstructions/SchafferCollaterals.tsx","webpack://_N_E/./src/pages/digital-reconstructions/schaffer-collaterals.tsx","webpack://_N_E/./src/views/3_digital-reconstructions/components/Trace.tsx","webpack://_N_E/./src/components/AuthorBox/styles.module.scss","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/./src/components/VolumeSectionSelector3D/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/digital-reconstructions/schaffer-collaterals\",\n      function () {\n        return require(\"private-next-pages/digital-reconstructions/schaffer-collaterals.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/digital-reconstructions/schaffer-collaterals\"])\n      });\n    }\n  ","import React, { ReactChild, ReactFragment } from 'react';\nimport { TfiWrite } from \"react-icons/tfi\";\n\nimport styles from './styles.module.scss';\n\ntype AuthorBoxProps = {\n    children: ReactChild | ReactFragment;\n    hasIcon?: boolean;\n};\n\nconst AuthorBox: React.FC<AuthorBoxProps> = ({ children, hasIcon = true }) => {\n    return (\n        <div className={`${styles.authorBox} flex flex-row flex-grow-0`}>\n\n            <div className={`flex justify-center pt-1 mr-2`}>\n                {hasIcon && <TfiWrite className={`${styles.icon} `} />}\n            </div>\n\n            <div className='flex-grow' > {children}</div>\n        </div>\n    );\n};\nexport default AuthorBox;","import React, { useMemo, useEffect, useState } from 'react';\nimport {\n    Chart as ChartJS,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n    ChartOptions,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { graphTheme } from '@/constants';\n\nChartJS.register(LinearScale, BarElement, Title, Tooltip, Legend);\n\ninterface PlotDetailsProps {\n    plotData: any;\n    xAxis?: string;\n    yAxis?: string;\n    xAxisTickStep?: number;\n    MeanStd?: { mean: number, std: number };\n}\n\nconst DistributionPlot: React.FC<PlotDetailsProps> = ({\n    plotData,\n    xAxis = 'Value',\n    yAxis = 'Frequency',\n    xAxisTickStep = 1,\n    MeanStd\n}) => {\n    const [windowWidth, setWindowWidth] = useState(0);\n\n    useEffect(() => {\n        if (typeof window !== 'undefined') {\n            setWindowWidth(window.innerWidth);\n\n            const handleResize = () => {\n                setWindowWidth(window.innerWidth);\n            };\n\n            window.addEventListener('resize', handleResize);\n\n            return () => {\n                window.removeEventListener('resize', handleResize);\n            };\n        }\n    }, []);\n\n    const formatScientificNotation = (value: number): string => {\n        if (Math.abs(value) < 1000) {\n            return value.toString();\n        }\n        if (value === 0) return '0';\n        const exponent = Math.floor(Math.log10(Math.abs(value)));\n        const mantissa = value / Math.pow(10, exponent);\n        const roundedMantissa = Math.round(mantissa * 100) / 100;\n        const superscriptDigits = ['⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹'];\n        const superscriptExponent = Math.abs(exponent)\n            .toString()\n            .split('')\n            .map((digit) => superscriptDigits[parseInt(digit)])\n            .join('');\n        return `${roundedMantissa}*10${exponent < 0 ? '⁻' : ''}${superscriptExponent}`;\n    };\n\n    const { dataPoints, units, name, description } = useMemo(() => {\n        if (!plotData) {\n            //console.error('Plot data is undefined or null');\n            return { dataPoints: [], units: null, name: '', description: '' };\n        }\n\n        const createHistogram = (data: number[]) => {\n            const binCount = Math.min(20, data.length);\n            const min = Math.min(...data);\n            const max = Math.max(...data);\n            const binWidth = (max - min) / binCount;\n\n            const bins = Array.from({ length: binCount + 1 }, (_, i) => min + i * binWidth);\n            const counts = new Array(binCount).fill(0);\n\n            data.forEach((value) => {\n                const binIndex = Math.min(\n                    Math.floor((value - min) / binWidth),\n                    binCount - 1\n                );\n                counts[binIndex]++;\n            });\n\n            const dataPoints = counts.map((count, i) => ({\n                x: bins[i],\n                y: count,\n            }));\n\n            return { dataPoints };\n        };\n\n        if (Array.isArray(plotData)) {\n            const { dataPoints } = createHistogram(plotData);\n            return {\n                dataPoints,\n                units: null,\n                name: '',\n                description: '',\n            };\n        } else if (typeof plotData === 'object' && plotData !== null) {\n            if ('freq' in plotData && 'bins' in plotData) {\n                const dataPoints = plotData.bins.map((bin: number, index: number) => ({\n                    x: bin,\n                    y: plotData.freq[index],\n                }));\n                return {\n                    dataPoints,\n                    units: plotData.units,\n                    name: plotData.name || '',\n                    description: plotData.description || '',\n                };\n            } else if ('bins' in plotData && 'counts' in plotData) {\n                const dataPoints = plotData.bins.map((bin: number, index: number) => ({\n                    x: bin,\n                    y: plotData.counts[index],\n                }));\n                return {\n                    dataPoints,\n                    units: null,\n                    name: '',\n                    description: '',\n                };\n            } else if ('values' in plotData && Array.isArray(plotData.values)) {\n                const flatValues = plotData.values.flat();\n                const { dataPoints } = createHistogram(flatValues);\n                return {\n                    dataPoints,\n                    units: null,\n                    name: '',\n                    description: '',\n                };\n            } else {\n                const dataPoints = Object.entries(plotData).map(([key, value]) => ({\n                    x: parseFloat(key),\n                    y: value,\n                }));\n                return {\n                    dataPoints,\n                    units: null,\n                    name: '',\n                    description: '',\n                };\n            }\n        } else {\n            console.error('Unexpected data format', plotData);\n            return { dataPoints: [], units: null, name: '', description: '' };\n        }\n    }, [plotData]);\n\n    const options: ChartOptions<'bar'> = useMemo(\n        () => ({\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    display: false,\n                },\n                tooltip: {\n                    callbacks: {\n                        title: (tooltipItems: any) => {\n                            const index = tooltipItems[0].dataIndex;\n                            const binStart = tooltipItems[0].parsed.x;\n                            const binEnd = dataPoints[index + 1]\n                                ? dataPoints[index + 1].x\n                                : binStart;\n                            return `${binStart} - ${binEnd} ${units || ''}`;\n                        },\n                    },\n                },\n            },\n            scales: {\n                x: {\n                    type: 'linear' as const,\n                    title: {\n                        display: true,\n                        text: xAxis,\n                    },\n                    ticks: {\n                        stepSize: xAxisTickStep,\n                        maxRotation: 0,\n                        minRotation: 0,\n                        callback: function (value) {\n                            return value.toString();\n                        },\n                    },\n                },\n                y: {\n                    title: {\n                        display: true,\n                        text: yAxis,\n                    },\n                    ticks: {\n                        callback: function (value) {\n                            return formatScientificNotation(Number(value));\n                        },\n                    },\n                },\n            },\n        }),\n        [xAxisTickStep, xAxis, yAxis, dataPoints, units]\n    );\n\n    if (dataPoints.length === 0) {\n        return <div>No data available for the plot.</div>;\n    }\n\n    const data = {\n        datasets: [\n            {\n                label: 'Frequency',\n                data: dataPoints,\n                backgroundColor: graphTheme.blue,\n                borderWidth: 0, // Removed borders\n                barPercentage: 0.9, // Adjusted for spacing\n                categoryPercentage: 0.9, // Adjusted for spacing\n            },\n        ],\n    };\n\n    return (\n        <div>\n            {MeanStd && (\n                <div className=\"mt-4\">\n                    <p>Mean: {MeanStd?.mean?.toFixed(4)}</p>\n                    <p>Standard Deviation: {MeanStd?.std?.toFixed(4)}</p>\n                </div>\n            )}\n            {name && <h2>{name}</h2>}\n            {description && <p>{description}</p>}\n            <div style={{ width: '100%', height: '400px' }}>\n                <Bar data={data} options={options} />\n            </div>\n        </div>\n    );\n};\n\nexport default DistributionPlot;\n","import React, { useEffect, useRef, useMemo, useCallback } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport { graphTheme } from '@/constants';\nimport DownloadButton from '../DownloadButton';\n\nChart.register(...registerables);\n\nconst LaminarGraph = ({ data, height = 500, title, yAxisLabel, theme = 3 }) => {\n    const chartRef = useRef<HTMLCanvasElement>(null);\n    const chartInstance = useRef<Chart | null>(null);\n\n    const getColor = useCallback((index) => {\n        const colors = [graphTheme.blue, graphTheme.yellow, graphTheme.green, graphTheme.red, graphTheme.purple];\n        return colors[index % colors.length];\n    }, []);\n\n    const datasets = useMemo(() => {\n        if (!data || !data.value_map) return [];\n\n        const layers = Object.keys(data.value_map);\n        const cellTypes = Object.keys(data.value_map[layers[0]]);\n\n        return layers.map((layer, index) => ({\n            label: `${layer} (Model)`,\n            data: cellTypes.map(cellType => (data.value_map[layer][cellType] || 0) * 100),\n            backgroundColor: getColor(index),\n            stack: 'Model',\n        }));\n    }, [data, getColor]);\n\n    const hachurePlugin = {\n        id: 'hachurePlugin',\n        afterDatasetsDraw(chart, args, options) {\n            const { ctx, data } = chart;\n            ctx.save();\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = 'white';\n\n            data.datasets.forEach((dataset, datasetIndex) => {\n                if (dataset.stack === 'Exp') {\n                    const meta = chart.getDatasetMeta(datasetIndex);\n                    meta.data.forEach((bar, index) => {\n                        if (dataset.data[index] > 0) {\n                            const { x, y, width, height } = bar.getProps(['x', 'y', 'width', 'height']);\n                            ctx.save();\n                            ctx.beginPath();\n                            ctx.rect(x - width / 2, y, width, height);\n                            ctx.clip();\n                            const lineSpacing = 4;\n                            for (let i = -width; i < height + width; i += lineSpacing) {\n                                ctx.moveTo(x - width / 2, y + i);\n                                ctx.lineTo(x + width / 2, y + i - width);\n                            }\n                            ctx.stroke();\n                            ctx.restore();\n                        }\n                    });\n                }\n            });\n            ctx.restore();\n        }\n    };\n\n    useEffect(() => {\n        if (!chartRef.current || !data || !data.value_map) return;\n\n        const ctx = chartRef.current.getContext('2d');\n        if (!ctx) return; // Ensure that ctx is not null\n\n        const cellTypes = Object.keys(data.value_map[Object.keys(data.value_map)[0]]);\n\n        if (chartInstance.current) {\n            chartInstance.current.destroy();\n        }\n\n        chartInstance.current = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: cellTypes,\n                datasets: datasets,\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    title: {\n                        display: !!title,\n                        text: title || data.name,\n                    },\n                    tooltip: {\n                        mode: 'index',\n                        intersect: false,\n                    },\n                    legend: {\n                        position: 'right',\n                    },\n                },\n                scales: {\n                    x: {\n                        stacked: true,\n                    },\n                    y: {\n                        stacked: true,\n                        beginAtZero: true,\n                        max: 100,\n                        title: {\n                            display: true,\n                            text: yAxisLabel || data.unit || 'Percentage',\n                        },\n                    },\n                },\n            },\n            plugins: [hachurePlugin],\n        });\n\n        return () => {\n            if (chartInstance.current) {\n                chartInstance.current.destroy();\n            }\n        };\n    }, [data, datasets, title, yAxisLabel]);\n\n    const downloadData = useCallback(() => {\n        if (!data) return;\n        const jsonString = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(data))}`;\n        const link = document.createElement('a');\n        link.href = jsonString;\n        link.download = `${data.id || 'laminar-data'}.json`;\n        link.click();\n    }, [data]);\n\n    if (!data || !data.value_map) {\n        return <div>No data available</div>;\n    }\n\n    return (\n        <div>\n            <div style={{ height: `${height}px` }}>\n                <canvas ref={chartRef} aria-label=\"Laminar Distribution Graph\" role=\"img\" />\n            </div>\n            <div className=\"mt-4\">\n                <DownloadButton theme={theme} onClick={downloadData}>\n                    Download Data\n                </DownloadButton>\n            </div>\n        </div>\n    );\n};\n\nexport default LaminarGraph;","import React from 'react';\n\nimport { Color } from '../../types';\n\n\nconst classPrefixList = 'list__';\nconst classPrefixListElement = 'list-element__';\n\ntype ListProps = {\n  title?: string;\n  list: string[];\n  value?: string;\n  onSelect?: (s: string) => void;\n  color?: Color;\n  anchor?: string;\n  block?: boolean;\n  className?: string;\n  theme?: number;\n  grow?: boolean\n};\n\nconst List: React.FC<ListProps> = ({\n  title,\n  list,\n  value,\n  onSelect = () => { },\n  color,\n  theme = 1,\n  className = '',\n  block = false,\n  grow\n}) => {\n  const handleSelectedElement = (element: string) => onSelect(element);\n\n  return (\n    <div\n      className={`${classPrefixList}basis  ${grow && 'flex-1 !flex flex-col'} set-accent-color--${color} selected theme-${theme} ${className} ${block ? 'block' : ''}`}\n      role=\"radiogroup\"\n    >\n      {title && <p className={`theme-${theme}`}>{title}</p>}\n      <div className={`elements ${grow && 'flex-grow'}`}>\n        {list.map(element => (\n          <div\n            key={element}\n            role=\"radio\"\n            aria-checked={value === element}\n            tabIndex={0}\n            className={`${classPrefixListElement}basis theme-${theme} ${value === element ? 'selected ' : ''}`}\n            onClick={() => handleSelectedElement(element)}\n            title={element}\n          >\n            {element}\n          </div>\n\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import React, { useEffect, useRef, useCallback, useState } from 'react';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\n\nimport { VolumeSection } from '@/types';\nimport { volumeSections, theme } from '@/constants';\n\nimport { basePath, dataPath } from '@/config';\n\nimport styles from './styles.module.scss';\n\ntype VolumeSectionSelectProps = {\n  value?: VolumeSection | string;\n  onSelect?: (volumeSection: VolumeSection) => void;\n  theme?: number;\n};\n\nconst VolumeSectionSelector3D: React.FC<VolumeSectionSelectProps> = ({\n  value = 'region',\n  onSelect = () => { },\n  theme: themeProp = 2,\n}) => {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const hoveredObjectRef = useRef<THREE.Object3D | null>(null);\n  const selectedVolumeSectionRef = useRef<VolumeSection>(value as VolumeSection);\n  const selectedObjectRef = useRef<THREE.Object3D | null>(null);\n\n  const camera = useRef<THREE.OrthographicCamera | null>(null);\n  const scene = useRef<THREE.Scene | null>(null);\n  const renderer = useRef<THREE.WebGLRenderer | null>(null);\n  const raycaster = useRef<THREE.Raycaster | null>(null);\n  const mouse = useRef(new THREE.Vector2());\n\n  const obj1Ref = useRef<THREE.Object3D | null>(null);\n  const obj2Ref = useRef<THREE.Object3D | null>(null);\n  const obj3Ref = useRef<THREE.Object3D | null>(null);\n\n  const objectsLoadedRef = useRef(false);\n  const [offset, setOffset] = useState(21);\n  const [textSize, setTextSize] = useState(1);\n\n  const handleClick = useCallback(\n    (event) => {\n      if (!objectsLoadedRef.current) return;\n\n      const rect = mountRef.current!.getBoundingClientRect();\n      mouse.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n      mouse.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n      raycaster.current!.setFromCamera(mouse.current, camera.current!);\n      const intersects = raycaster.current!.intersectObjects([obj1Ref.current!, obj2Ref.current!, obj3Ref.current!], true);\n\n      if (intersects.length > 0) {\n        let intersectedObject = intersects[0].object;\n        while (intersectedObject.parent && ![obj1Ref.current, obj2Ref.current, obj3Ref.current].includes(intersectedObject)) {\n          intersectedObject = intersectedObject.parent;\n        }\n\n        if ([obj1Ref.current, obj2Ref.current, obj3Ref.current].includes(intersectedObject)) {\n          const volumeSection = intersectedObject.userData.volumeSection as VolumeSection;\n          if (volumeSection) {\n            updateSelection(volumeSection, intersectedObject);\n            onSelect(volumeSection);\n          }\n        }\n      }\n    },\n    [onSelect, themeProp]\n  );\n\n  const updateSelection = (newVolumeSection: VolumeSection, newSelectedObject: THREE.Object3D) => {\n    if (selectedObjectRef.current) {\n      updateObjectColors(selectedObjectRef.current, theme[themeProp].default, theme[themeProp].hover);\n    }\n\n    updateObjectColors(newSelectedObject, theme[themeProp].selected, 0xffffff);\n\n    selectedVolumeSectionRef.current = newVolumeSection;\n    selectedObjectRef.current = newSelectedObject;\n  };\n\n  const updateObjectColors = (object: THREE.Object3D, mainColor: number, textColor: number) => {\n    object.traverse((child: any) => {\n      if (child instanceof THREE.Mesh) {\n        if (child.name === object.userData.volumeSection) {\n          child.material.color.set(mainColor);\n        }\n        if (child.geometry && child.geometry.type === 'TextGeometry') {\n          child.material.color.set(textColor);\n        }\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    scene.current = new THREE.Scene();\n    scene.current.background = new THREE.Color('#313354');\n\n    const aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\n    camera.current = new THREE.OrthographicCamera(-aspect * 200, aspect * 200, 200, -200, 0.1, 1000);\n    camera.current.position.z = 10;\n\n    renderer.current = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.current.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    renderer.current.setPixelRatio(window.devicePixelRatio);\n    mountRef.current.appendChild(renderer.current.domElement);\n\n    raycaster.current = new THREE.Raycaster();\n\n    const loader = new OBJLoader();\n    loader.load(\n      `${dataPath}/3d/volume-selector/volume-selector.obj`,\n      (obj) => {\n        [obj1Ref, obj2Ref, obj3Ref].forEach((ref, index) => {\n          const newObj = obj.clone();\n          ref.current = newObj;\n          newObj.position.set((index - 1) * offset, 0, 0);\n          newObj.userData.volumeSection = ['region', 'slice', 'cylinder'][index];\n          applyMaterial(newObj, index);\n          scene.current!.add(newObj);\n        });\n\n        const fontLoader = new FontLoader();\n        fontLoader.load(`${basePath}/assets/fonts/Titillium_Web_Light_.json`, (font) => {\n          ['Region', 'Slice', 'Cylinder'].forEach((text, index) => {\n            createText(text, [obj1Ref, obj2Ref, obj3Ref][index].current!, text.toLowerCase(), font);\n          });\n        });\n\n        objectsLoadedRef.current = true;\n\n        if (value) {\n          setInitialSelection(value as VolumeSection);\n        }\n\n        animate();\n      },\n      (xhr) => console.log((xhr.loaded / xhr.total) * 100 + '% loaded'),\n      (error) => console.error('An error happened', error)\n    );\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.current!.render(scene.current!, camera.current!);\n    };\n\n    const handleResize = () => {\n      if (mountRef.current && renderer.current && camera.current) {\n        const width = mountRef.current.clientWidth;\n        const height = mountRef.current.clientHeight;\n        renderer.current.setSize(width, height);\n\n        const aspect = width / height;\n        camera.current.left = -aspect * 200;\n        camera.current.right = aspect * 200;\n        camera.current.top = 200;\n        camera.current.bottom = -200;\n        camera.current.updateProjectionMatrix();\n\n        const newOffset = window.innerWidth < 1400 ? 16 : 21;\n        setOffset(newOffset);\n\n        camera.current.zoom = window.innerWidth < 1200 ? 11 : 16;\n        camera.current.updateProjectionMatrix();\n\n        const newTextSize = window.innerWidth < 1200 ? 1 : 0.8;\n        setTextSize(newTextSize);\n\n        updateTextSize();\n      }\n    };\n\n    const handleMouseMove = (event) => {\n      if (!objectsLoadedRef.current) return;\n\n      const rect = mountRef.current!.getBoundingClientRect();\n      mouse.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n      mouse.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n      raycaster.current!.setFromCamera(mouse.current, camera.current!);\n      const intersects = raycaster.current!.intersectObjects([obj1Ref.current!, obj2Ref.current!, obj3Ref.current!], true);\n\n      if (intersects.length > 0) {\n        let intersectedObject = intersects[0].object;\n        while (intersectedObject.parent && ![obj1Ref.current, obj2Ref.current, obj3Ref.current].includes(intersectedObject)) {\n          intersectedObject = intersectedObject.parent;\n        }\n\n        if (hoveredObjectRef.current !== intersectedObject && selectedObjectRef.current !== intersectedObject) {\n          if (hoveredObjectRef.current && hoveredObjectRef.current !== selectedObjectRef.current) {\n            updateObjectColors(hoveredObjectRef.current, theme[themeProp].default, theme[themeProp].hover);\n          }\n\n          updateObjectColors(intersectedObject, theme[themeProp].hover, theme[themeProp].hover);\n\n          hoveredObjectRef.current = intersectedObject;\n          mountRef.current!.style.cursor = 'pointer';\n        }\n      } else {\n        if (hoveredObjectRef.current && hoveredObjectRef.current !== selectedObjectRef.current) {\n          updateObjectColors(hoveredObjectRef.current, theme[themeProp].default, theme[themeProp].hover);\n          hoveredObjectRef.current = null;\n          mountRef.current!.style.cursor = 'default';\n        }\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    mountRef.current.addEventListener('mousemove', handleMouseMove);\n    mountRef.current.addEventListener('click', handleClick);\n\n    handleResize();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (mountRef.current) {\n        mountRef.current.removeEventListener('mousemove', handleMouseMove);\n        mountRef.current.removeEventListener('click', handleClick);\n        mountRef.current.removeChild(renderer.current!.domElement);\n      }\n    };\n  }, [themeProp]);\n\n  useEffect(() => {\n    if (objectsLoadedRef.current) {\n      [obj1Ref, obj2Ref, obj3Ref].forEach((ref, index) => {\n        if (ref.current) {\n          ref.current.position.set((index - 1) * offset, 0, 0);\n        }\n      });\n    }\n  }, [offset]);\n\n  useEffect(() => {\n    if (objectsLoadedRef.current && value) {\n      setInitialSelection(value as VolumeSection);\n    }\n  }, [value, themeProp]);\n\n  const applyMaterial = (obj: THREE.Object3D, index: number) => {\n    obj.traverse((child) => {\n      if (child instanceof THREE.Mesh) {\n        let material;\n        if (child.name === obj.userData.volumeSection) {\n          material = new THREE.MeshBasicMaterial({\n            color: theme[themeProp].default,\n            transparent: false,\n            opacity: 1,\n            depthWrite: true,\n          });\n          child.renderOrder = 2;\n        } else if (child.name === 'skeleton') {\n          material = new THREE.MeshBasicMaterial({\n            color: theme[themeProp].selectedEdges,\n            transparent: true,\n            opacity: 0,\n            depthWrite: false,\n          });\n          const wireframeGeometry = new THREE.EdgesGeometry(child.geometry);\n          const wireframeMaterial = new THREE.LineBasicMaterial({\n            color: theme[themeProp].default,\n            transparent: true,\n            opacity: 1,\n            depthWrite: false,\n          });\n          const wireframe = new THREE.LineSegments(wireframeGeometry, wireframeMaterial);\n          wireframe.renderOrder = 1;\n          child.add(wireframe);\n        } else {\n          child.visible = false;\n        }\n        if (material) {\n          child.material = material;\n        }\n      }\n    });\n  };\n\n  const createText = (text: string, obj: THREE.Object3D, childName: string, font: THREE.Font) => {\n    const textGeometry = new TextGeometry(text, {\n      font: font,\n      size: textSize,\n      height: 0.2,\n      curveSegments: 32,\n      bevelEnabled: true,\n      bevelThickness: 0.02,\n      bevelSize: 0.02,\n    });\n\n    const textMaterialColor = selectedVolumeSectionRef.current === childName ? 0xffffff : theme[themeProp].hover;\n\n    const textMaterial = new THREE.MeshBasicMaterial({\n      color: textMaterialColor,\n      transparent: false,\n      opacity: 1,\n    });\n    const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n\n    obj.traverse((child) => {\n      if (child instanceof THREE.Mesh && child.name === childName) {\n        textMesh.position.set(0, 0, 0);\n        child.add(textMesh);\n      }\n    });\n  };\n\n  const updateTextSize = () => {\n    ['Region', 'Slice', 'Cylinder'].forEach((text, index) => {\n      const obj = [obj1Ref, obj2Ref, obj3Ref][index].current;\n      if (obj) {\n        obj.traverse((child) => {\n          if (child instanceof THREE.Mesh && child.geometry && child.geometry.type === 'TextGeometry') {\n            const oldTextMesh = child;\n            const parentMesh = oldTextMesh.parent;\n            if (parentMesh) {\n              parentMesh.remove(oldTextMesh);\n              const fontLoader = new FontLoader();\n              fontLoader.load(`${basePath}/assets/fonts/Titillium_Web_Light_.json`, (font) => {\n                createText(text, obj, text.toLowerCase(), font);\n              });\n            }\n          }\n        });\n      }\n    });\n  };\n\n  const setInitialSelection = (initialVolumeSection: VolumeSection) => {\n    const initialObjectRef = [obj1Ref, obj2Ref, obj3Ref].find(\n      (ref) => ref.current?.userData.volumeSection === initialVolumeSection\n    );\n\n    if (initialObjectRef?.current) {\n      updateSelection(initialVolumeSection, initialObjectRef.current);\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.volumeSelector} ref={mountRef}></div>\n      <div className={styles.volumeList}></div>\n    </div>\n  );\n};\n\nexport default VolumeSectionSelector3D;\n","import { Layer, NeuriteType, VolumeSection, AchConcentration, CellGroup, Theme, GraphTheme, ThemeColors } from './types';\nimport NeuronModelLibrary from './views/2_reconstruction-data/NeuronModelLibrary';\nimport AcetylcholineView from './views/4_validations/Acetylcholine';\n\nexport const layers: Layer[] = [\n  'SLM',\n  'SR',\n  'SP',\n  'SO',\n];\n\nexport const theme: Theme = {\n  1: { default: 0x44405B, hover: 0x7D656F, selected: 0xB68983, selectedEdges: 0xEFAE97 },\n  2: { default: 0x44405B, hover: 0x7B5B6A, selected: 0xB37579, selectedEdges: 0xEA9088 },\n  3: { default: 0x44405B, hover: 0x715970, selected: 0x9F7184, selectedEdges: 0xCC8A99 },\n  4: { default: 0x44405B, hover: 0x625D77, selected: 0x807B92, selectedEdges: 0x9E98AE },\n  5: { default: 0x393D5E, hover: 0x595D79, selected: 0x6E7B97, selectedEdges: 0x8398B5 },\n};\n\nexport const graphTheme: GraphTheme = {\n  red: \"#C46785\",\n  blue: \"#3b4165\",\n  green: \"#7FD982\",\n  purple: \"#7F5482\",\n  yellow: \"#f9f871\",\n};\n\nexport const themeColors: ThemeColors = {\n  experimental_data: \"#EFAE97\",\n  reconstruction_data: \"#EA9088\",\n  digital_reconstruction: \"#CC8A99\",\n  validations: \"#9E98AE\",\n  predictions: \"#8398B5\",\n};\n\n\n\nexport const neuriteTypes: NeuriteType[] = [\n  'all',\n  'axon',\n  'apical',\n  'basal',\n  'dendrite',\n  'soma',\n\n];\n\nexport const volumeSections: VolumeSection[] = [\n  'region',\n  'slice',\n  'cylinder',\n];\n\n\nexport const achConcentrations: AchConcentration[] = [\n  '0um',\n  '10um',\n  '100um'\n];\n\nexport const cellGroup: CellGroup[] = [\n  'All',\n  'Excitatory',\n  'Inhibitory',\n  'SLM_PPA',\n  'SO_BP',\n  'SO_BS',\n  'SO_OLM',\n  'SO_Tri',\n  'SP_AA',\n  'SP_BS',\n  'SP_CCKBC',\n  'SP_Ivy',\n  'SP_PC',\n  'SP_PVBC',\n  'SR_SCA'\n]\n\nexport const defaultSelection = {\n  experimentalData: {\n    layerAnatomy: {\n      layer: 'SLM',\n    },\n    neuronMorphology: {\n      layer: 'SLM',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    neuronElectrophysiology: {\n      etype: 'bAC',\n      etype_instance: '95810035',\n    },\n  },\n  reconstructionData: {\n    volume: {\n      volume_section: 'region',\n    },\n    cellComposition: {\n      volume_section: 'region',\n    },\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: 'CA1_int_bAC_011127HP1_20190329115610',\n    },\n  },\n  digitalReconstruction: {\n    region: {\n      volume_section: 'region',\n    },\n    morphologyLibrary: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      morphology: '011127HP1',\n    },\n    schafferCollateral: {\n      volume_section: 'region',\n      prelayer: 'SC',\n      postlayer: 'All'\n    },\n    connectionAnatomy: {\n      volume_section: 'region',\n      prelayer: 'All',\n      postlayer: 'All'\n    },\n    connectionPhysiology: {\n      volume_section: 'region',\n      prelayer: 'all',\n      postlayer: 'all'\n    },\n    acetylcholineEffectsOnCell: {\n      morphology: \"450290\",\n      etype: \"cNAC\",\n      mtype: \"SO_BP\"\n    },\n    acetylcholineEffectsOnSynapses: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory'\n    },\n\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    NeuronModelLibrary: {\n      mtype: 'SO_BP',\n      etype: 'cNAC',\n      morphology: '980120A_-_Scale_x1.000_y0.900_z1.000'\n    },\n    synapticPathways: {\n      volume_section: 'slice',\n      prelayer: 'All',\n      postlayer: 'All',\n    },\n    acetylcholine: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory',\n    },\n  },\n\n};\n\nexport const neuriteColor: Record<NeuriteType, string> = {\n  all: '#1fcf1f',\n  axon: '#1111ff',\n  apical: '#f442ad',\n  basal: '#ff1111',\n  dendrite: '#ff1111',\n  soma: '#000',\n};\n","import React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\ntype PreselectionProps = {\n  key: string,\n  defaultQuery: any,\n};\n\nconst withPreselection = (WrappedComponent, options: PreselectionProps) => {\n\n  const WithPreselectionComponent: React.FC = () => {\n    const router = useRouter();\n\n    useEffect(() => {\n      if (!router.isReady) return;\n\n      if (!router.query[options.key]) {\n        const query = options.defaultQuery;\n        router.replace({ query }, undefined, { shallow: true });\n      }\n    }, [router.query]);\n\n    return (<WrappedComponent />);\n  };\n\n  return WithPreselectionComponent;\n}\n\nexport default withPreselection;\n","import React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\n\nimport StickyContainer from '@/components/StickyContainer';\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\nimport VolumeSectionSelector3D from '@/components/VolumeSectionSelector3D';\nimport List from '@/components/List';\nimport DistrbutionPlot from '@/components/DistributionPlot';\nimport LaminarGraph from '@/components/LaminarGraph';\nimport TraceGraph from './components/Trace';\n\nimport Filters from '@/layouts/Filters';\n\nimport { cellGroup, defaultSelection, graphTheme, themeColors, volumeSections } from '@/constants';\n\nimport { Layer, QuickSelectorEntry, VolumeSection } from '@/types';\n\nimport { dataPath } from '@/config';\nimport DownloadButton from '@/components/DownloadButton';\nimport { downloadAsJson } from '@/utils';\nimport Factsheet from '@/components/Factsheet';\nimport withPreselection from '@/hoc/with-preselection';\nimport AuthorBox from '@/components/AuthorBox/AuthorBox';\n\nconst SchafferCollateralsView: React.FC = () => {\n  const router = useRouter();\n  const { volume_section, prelayer, postlayer } = router.query as Record<string, string>;\n\n  const [traceData, setTraceData] = useState<any>(null);\n  const [quickSelection, setQuickSelection] = useState<Record<string, string>>({ volume_section, prelayer, postlayer });\n  const [factsheetData, setFactsheetData] = useState<any>(null);\n  const [laminarPlots, setLaminarPlots] = useState<any>(null);\n  const [availablePlots, setAvailablePlots] = useState<Record<string, boolean>>({});\n  const [availableMeanSTD, setAvailableMeanSTD] = useState<Record<string, boolean>>({});\n  const [meanStdData, setMeanStdData] = useState<any>(null);\n\n  const theme = 3;\n\n  useEffect(() => {\n    if (!router.isReady) return;\n\n    if (!router.query.prelayer && !router.query.volume_section && !router.query.postlayer) {\n      const query = defaultSelection.digitalReconstruction.schafferCollateral;\n      const { volume_section, prelayer, postlayer } = query;\n      setQuickSelection({ volume_section, prelayer: prelayer || 'SC', postlayer });\n      router.replace({ query: { ...query, prelayer: prelayer || 'SC' } }, undefined, { shallow: true });\n    } else {\n      setQuickSelection({ volume_section, prelayer: prelayer || 'All', postlayer });\n    }\n  }, [router.query]);\n\n  useEffect(() => {\n    if (volume_section && prelayer && postlayer) {\n      fetchFactsheetData();\n      fetchTraceData();\n      fetchLaminarData();\n      fetchMeanSTDData();\n    }\n  }, [volume_section, prelayer, postlayer]);\n\n  const fetchFactsheetData = async () => {\n    try {\n      const response = await fetch(`${dataPath}/3_digital-reconstruction/schaffer-collaterals/${volume_section}/All-${postlayer}/distribution-plots.json`);\n      const data = await response.json();\n      if (data && Array.isArray(data.values)) {\n        setFactsheetData(data.values);\n        setAvailablePlots({\n          SynapsesPerConnection: data.values.some(plot => plot.id === 'synapses-per-connection'),\n          SampleDivergenceByConnection: data.values.some(plot => plot.id === 'sample-divergence-by-connection'),\n          SampleDivergenceBySynapse: data.values.some(plot => plot.id === 'sample-divergence-by-synapse'),\n          SampleConvergenceByConnection: data.values.some(plot => plot.id === 'sample-convergence-by-connection'),\n          SampleConvergenceBySynapse: data.values.some(plot => plot.id === 'sample-convergence-by-synapse'),\n          PSPAmplitude: data.values.some(plot => plot.id === 'psp-amplitude'),\n          PSPCV: data.values.some(plot => plot.id === 'psp-cv'),\n          SynapseLatency: data.values.some(plot => plot.id === 'synapse-latency'),\n          SynapseLatencyFromSimulation: data.values.some(plot => plot.id === 'synapse-latency-for-simulation'),\n          RiseTimeFromSimulation: data.values.some(plot => plot.id === 'rise-time-constant-for-simulation'),\n          DecayTimeConstant: data.values.some(plot => plot.id === 'decay-time-constant'),\n          NMDAAMPARatio: data.values.some(plot => plot.id === 'nmda-ampa-ratio'),\n          UParameter: data.values.some(plot => plot.id === 'u-parameter'),\n          DParameter: data.values.some(plot => plot.id === 'd-parameter'),\n          GSYNX: data.values.some(plot => plot.id === 'g-synx'),\n          NRRPParameter: data.values.some(plot => plot.id === 'nrrp-parameter'),\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching factsheet:', error);\n    }\n  };\n\n  const fetchTraceData = async () => {\n    try {\n      const response = await fetch(`${dataPath}/3_digital-reconstruction/schaffer-collaterals/${volume_section}/All-${postlayer}/trace.json`);\n      const data = await response.json();\n      setTraceData(data);\n    } catch (error) {\n      console.error('Error fetching trace data:', error);\n    }\n  };\n\n  const fetchLaminarData = async () => {\n    try {\n      const response = await fetch(`${dataPath}/3_digital-reconstruction/schaffer-collaterals/${volume_section}/All-${postlayer}/schaffer-collaterals.json`);\n      const data = await response.json();\n      const laminarData = data.values.find(plot => plot.id === 'laminar-distribution');\n      setLaminarPlots(laminarData);\n    } catch (error) {\n      console.error('Error fetching laminar data:', error);\n    }\n  };\n\n  const fetchMeanSTDData = async () => {\n    try {\n      const response = await fetch(`${dataPath}/3_digital-reconstruction/schaffer-collaterals/${volume_section}/All-${postlayer}/schaffer-collaterals.json`);\n      const data = await response.json();\n      setMeanStdData(data.values);\n\n      setAvailableMeanSTD({\n        SynapsesPerConnection: data.values.some(item => item.id === 'synapses-per-connection' && item.values?.length === 2),\n        SampleDivergenceByConnection: data.values.some(item => item.id === 'sample-divergence-by-connection' && item.values?.length === 2),\n        SampleDivergenceBySynapse: data.values.some(item => item.id === 'sample-divergence-by-synapse' && item.values?.length === 2),\n        SampleConvergenceByConnection: data.values.some(item => item.id === 'sample-convergence-by-connection' && item.values?.length === 2),\n        SampleConvergenceBySynapse: data.values.some(item => item.id === 'sample-convergence-by-synapse' && item.values?.length === 2),\n        PSPAmplitude: data.values.some(item => item.id === 'psp-amplitude' && item.values?.length === 2),\n        PSPCV: data.values.some(item => item.id === 'psp-cv' && item.values?.length === 2),\n        SynapseLatency: data.values.some(item => item.id === 'synapse-latency' && item.values?.length === 2),\n        SynapseLatencyFromSimulation: data.values.some(item => item.id === 'synapse-latency-for-simulation' && item.values?.length === 2),\n        RiseTimeFromSimulation: data.values.some(item => item.id === 'rise-time-constant-for-simulation' && item.values?.length === 2),\n        DecayTimeConstant: data.values.some(item => item.id === 'decay-time-constant' && item.values?.length === 2),\n        NMDAAMPARatio: data.values.some(item => item.id === 'nmda-ampa-ratio' && item.values?.length === 2),\n        UParameter: data.values.some(item => item.id === 'u-parameter' && item.values?.length === 2),\n        DParameter: data.values.some(item => item.id === 'd-parameter' && item.values?.length === 2),\n        GSYNX: data.values.some(item => item.id === 'g-synx' && item.values?.length === 2),\n        NRRPParameter: data.values.some(item => item.id === 'nrrp-parameter' && item.values?.length === 2),\n      });\n    } catch (error) {\n      console.error('Error fetching mean/std data:', error);\n    }\n  };\n\n  const setParams = (params: Record<string, string>): void => {\n    const query = { ...router.query, ...params };\n    router.push({ query }, undefined, { shallow: true });\n  };\n\n  const setVolumeSectionQuery = (volume_section: VolumeSection) => {\n    setQuickSelection(prev => {\n      const updatedSelection = { ...prev, volume_section };\n      setParams(updatedSelection);\n      return updatedSelection;\n    });\n  };\n\n  const setPreLayerQuery = (prelayer: Layer) => {\n    setQuickSelection(prev => {\n      const updatedSelection = { ...prev, prelayer };\n      setParams(updatedSelection);\n      return updatedSelection;\n    });\n  };\n\n  const setPostLayerQuery = (postlayer: Layer) => {\n    setQuickSelection(prev => {\n      const updatedSelection = { ...prev, postlayer };\n      setParams(updatedSelection);\n      return updatedSelection;\n    });\n  };\n\n  const qsEntries: QuickSelectorEntry[] = [\n    {\n      title: 'Volume section',\n      key: 'volume_section',\n      values: volumeSections,\n      setFn: setVolumeSectionQuery,\n    },\n    {\n      title: 'Pre-synaptic cell group',\n      key: 'prelayer',\n      values: [\"SC\"],\n      setFn: setPreLayerQuery,\n    },\n    {\n      title: 'Post-synaptic cell group',\n      key: 'postlayer',\n      values: cellGroup,\n      setFn: setPostLayerQuery,\n    },\n  ];\n\n  const getPlotDataById = (id: string) => {\n    return factsheetData?.find((plot: any) => plot.id === id);\n  };\n\n  const getMeanStdDataById = (id: string) => {\n    const data = meanStdData?.find((item: any) => item.id === id);\n    return data ? { mean: data.values[0], std: data.values[1] } : null;\n  };\n\n  return (\n    <>\n      <Filters theme={theme} hasData={!!prelayer && !!postlayer}>\n        <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n          <div className=\"w-full lg:w-1/2 md:w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n            <StickyContainer>\n              <Title\n                title=\"Schaffer Collaterals\"\n                subtitle=\"Digital Reconstructions\"\n                theme={theme}\n              />\n              <div role=\"information\">\n                <InfoBox>\n                  <p>\n                    Reconstruction of the Schaffer collaterals, the major input to the CA1. This massive innervation accounts for 9,122 M synapses, and most of the synapses considered in the model (92%).\n                  </p>\n                  <ul>\n                    <li>Using <Link className={`link theme-${theme}`} href={\"/reconstruction-data/schaffer-collaterals\"}>data</Link> on Schaffer collaterals, we predicted their anatomy, analyzing CA3-CA1 connections by synapse count, divergence, convergence, and connection probability.</li>\n                    <li>We also predicted the physiology of these connections using <Link className={`link theme-${theme}`} href={\"/reconstruction-data/schaffer-collaterals\"}>data</Link>, focusing on PSP, latency, kinetics, NMDA/AMPA ratio, and short-term plasticity.</li>\n                  </ul>\n                </InfoBox>\n              </div>\n            </StickyContainer>\n          </div>\n          <div className=\"flex flex-col gap-8 mb-12 md:mb-0 mx-8 md:mx-0 lg:w-1/2 md:w-full flex-grow md:flex-none justify-center\" style={{ maxWidth: '800px' }}>\n            <div className={`selector__column selector__column--lg mt-3 theme-${theme}`} style={{ maxWidth: \"auto\" }}>\n              <div className={`selector__head theme-${theme}`}>1. Select a volume section</div>\n              <div className=\"selector__body\">\n                <VolumeSectionSelector3D\n                  value={volume_section}\n                  onSelect={setVolumeSectionQuery}\n                  theme={theme}\n                />\n              </div>\n            </div>\n            <div className=\"flex flex-col lg:flex-row gap-8 flex-grow p-0 m-0\">\n              <div className={`selector__column theme-${theme} flex-1`} style={{ maxWidth: \"auto\" }}>\n                <div className={`selector__head theme-${theme}`}>2. Select a pre-synaptic cell group</div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={['SC']}\n                    value={prelayer || 'All'}\n                    title=\"m-type\"\n                    onSelect={setPreLayerQuery}\n                    theme={theme}\n                  />\n                </div>\n              </div>\n              <div className={`selector__column theme-${theme} flex-1`}>\n                <div className={`selector__head theme-${theme}`}>2. Select a post-synaptic cell group</div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={cellGroup}\n                    value={postlayer}\n                    title=\"m-type\"\n                    onSelect={setPostLayerQuery}\n                    theme={theme} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n      <DataContainer\n        theme={theme}\n        navItems={[\n          { label: 'Anatomy', isTitle: true },\n          { id: 'NbSynapsesPerConnectionSection', label: 'Nb of synapses p.connection dist.' },\n          { id: 'DivergenceConnectionSection', label: 'Divergence connections dist.' },\n          { id: 'DivergenceSynapsesSection', label: 'Divergence synapses dist.' },\n          { id: 'LaminarDistributionSynapsesSection', label: 'Laminar dist. of synapses' },\n          { id: 'SampleConvergenceByConnectionSection', label: 'Convergence connections dist.' },\n          { id: 'SampleConvergenceBySynapsesSection', label: 'Convergence synapses dist.' },\n          { label: 'Physiology', isTitle: true },\n          { id: 'PSPAmplitudeSection', label: 'PSP Amplitude dist.' },\n          { id: 'PSPCVSection', label: 'PSP CV dist.' },\n          { id: 'SynapseLatencySection', label: 'Synapse latency dist.' },\n          { id: 'RiseTimeSection', label: 'Rise time constant dist.' },\n          { id: 'DecayTimeConstantSection', label: 'Decay time constant dist.' },\n          { id: 'NMDAAMPARatioSection', label: 'NMDA/AMPA ratio dist.' },\n          { id: 'UParameterSection', label: 'U, D, F, NRRP dist.' },\n          { id: 'TracesSection', label: 'Traces' },\n        ]}\n        quickSelectorEntries={qsEntries}\n      >\n\n        <div className='pb-4'>\n          <AuthorBox hasIcon={false}>\n            <span className='text-base'>Mean connection probability: <span className='font-semibold'>0.0715758</span></span>\n          </AuthorBox>\n        </div>\n\n        {availablePlots.SynapsesPerConnection && (\n          <Collapsible title=\"Number of synapses per connection distribution\" id=\"NbSynapsesPerConnectionSection\" properties={[\"Anatomy\"]}>\n            <div className=\"graph\">\n              <DistrbutionPlot\n                plotData={getPlotDataById('synapses-per-connection')}\n                xAxis='N_syn'\n                yAxis='Frequency'\n                xAxisTickStep={1}\n                MeanStd={{\n                  mean: getMeanStdDataById('synapses-per-connection')?.mean,\n                  std: getMeanStdDataById('synapses-per-connection')?.std\n                }}\n              />\n            </div>\n\n\n\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() => downloadAsJson(getPlotDataById('synapses-per-connection'), `Synapses-per-connection-${volume_section}-${prelayer}-${postlayer}.json`)}>\n                <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{volume_section}</span>\n                Number of synapses per connection distribution\n                <span className='!mr-0 collapsible-property small '>{prelayer}</span> - <span className='!ml-0 collapsible-property small '>{postlayer}</span>\n\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        {availablePlots.SampleDivergenceByConnection && (\n          <Collapsible title=\"Divergence (connections) distribution\" id=\"DivergenceConnectionSection\" properties={[\"Anatomy\"]}>\n            <div className=\"graph\">\n              <DistrbutionPlot\n                plotData={getPlotDataById('sample-divergence-by-connection')}\n                xAxis='Divergence'\n                yAxis='Frequency'\n                xAxisTickStep={50}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() => downloadAsJson(getPlotDataById('sample-divergence-by-connection'), `sample-divergence-by-connection-${volume_section}-${prelayer}-${postlayer}.json`)}>\n                <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{volume_section}</span>\n                Divergence (connections) distribution\n                <span className='!mr-0 collapsible-property small '>{prelayer}</span> - <span className='!ml-0 collapsible-property small '>{postlayer}</span>\n\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        {availablePlots.SampleDivergenceBySynapse && (\n          <Collapsible title=\"Divergence (synapses) distribution\" id=\"DivergenceSynapsesSection\" properties={[\"Anatomy\"]}>\n            <div className=\"graph\">\n              <DistrbutionPlot\n                plotData={getPlotDataById('sample-divergence-by-synapse')}\n                xAxis='Divergence'\n                yAxis='Frequency'\n                xAxisTickStep={50}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() => downloadAsJson(getPlotDataById('sample-divergence-by-synapses'), `sample-divergence-by-synapses-${volume_section}-${prelayer}-${postlayer}.json`)}>\n                <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{volume_section}</span>\n                Divergence (synapses) distribution\n                <span className='!mr-0 collapsible-property small '>{prelayer}</span> - <span className='!ml-0 collapsible-property small '>{postlayer}</span>\n\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n\n        <Collapsible title='Laminar distribution of synapses' id='LaminarDistributionSynapsesSection' properties={[\"Anatomy\"]}>\n          <p>Laminar</p>\n          <LaminarGraph data={laminarPlots} title={undefined} yAxisLabel={undefined} />\n        </Collapsible>\n\n        {availablePlots.SampleConvergenceByConnection && (\n          <Collapsible title=\"Convergence (connections) distribution\" id=\"SampleConvergenceByConnectionSection\" properties={[\"Anatomy\"]}>\n            <div className=\"graph\">\n              <DistrbutionPlot\n                plotData={getPlotDataById('sample-convergence-by-connection')}\n                xAxis='Convergence'\n                yAxis='Frequency'\n                xAxisTickStep={5000}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() => downloadAsJson(getPlotDataById('sample-convergence-by-connection'), `sample-convergence-by-connection-${volume_section}-${prelayer}-${postlayer}.json`)}>\n                <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{volume_section}</span>\n                Convergence (connections) distribution\n                <span className='!mr-0 collapsible-property small '>{prelayer}</span> - <span className='!ml-0 collapsible-property small '>{postlayer}</span>\n\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        {availablePlots.SampleConvergenceBySynapse && (\n          <Collapsible title=\"Convergence (synapses) distribution\" id=\"SampleConvergenceBySynapsesSection\" properties={[\"Anatomy\"]}>\n            <div className=\"graph\">\n              <DistrbutionPlot\n                plotData={getPlotDataById('sample-convergence-by-synapse')}\n                xAxis='Convergence'\n                yAxis='Frequency'\n                xAxisTickStep={4000}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() => downloadAsJson(getPlotDataById('sample-convergence-by-synapse'), `sample-convergence-by-synapse-${volume_section}-${prelayer}-${postlayer}.json`)}>\n                <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{volume_section}</span>\n                Convergence (synapses) distribution\n                <span className='!mr-0 collapsible-property small '>{prelayer}</span> - <span className='!ml-0 collapsible-property small '>{postlayer}</span>\n\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        {availablePlots.PSPAmplitude && (\n          <Collapsible title=\"PSP Amplitude\" id=\"PSPAmplitudeSection\" properties={[\"Physiology\"]}>\n            <div className=\"graph\">\n              <DistrbutionPlot\n                plotData={getPlotDataById('psp-amplitude')}\n                xAxis='PSP Amplitude'\n                yAxis='Frequency'\n                xAxisTickStep={1}\n              />\n            </div>\n\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() => downloadAsJson(getPlotDataById('psp-amplitude'), `psp-amplitude-${volume_section}-${prelayer}-${postlayer}.json`)}>\n                <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{volume_section}</span>\n                PSP Amplitude\n                <span className='!mr-0 collapsible-property small '>{prelayer}</span> - <span className='!ml-0 collapsible-property small '>{postlayer}</span>\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        {availablePlots.PSPCV && (\n          <Collapsible title=\"PSP CV\" id=\"PSPCVSection\" properties={[\"Physiology\"]}>\n            <div className=\"graph\">\n              <DistrbutionPlot\n                plotData={getPlotDataById('psp-cv')}\n                xAxis='PSP CV'\n                yAxis='Frequency'\n                xAxisTickStep={1}\n              />\n            </div>\n            <div className=\"mt-4\">\n              <DownloadButton\n                theme={theme}\n                onClick={() => downloadAsJson(getPlotDataById('psp-cv'), `psp-cv-${volume_section}-${prelayer}-${postlayer}.json`)}>\n                <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{volume_section}</span>\n                PSP CV\n                <span className='!mr-0 collapsible-property small '>{prelayer}</span> - <span className='!ml-0 collapsible-property small '>{postlayer}</span>\n\n              </DownloadButton>\n            </div>\n          </Collapsible>\n        )}\n\n        {(availablePlots.SynapseLatency || availablePlots.SynapseLatencyFromSimulation) && (\n          <Collapsible\n            title=\"Synapse latency distribution\"\n            id=\"SynapseLatencySection\"\n            properties={[\"Physiology\"]}\n          >\n            <div className=\"flex flex-col gap-12\">\n\n              {availablePlots.SynapseLatency && (\n                <>\n                  <div className='flex flex-col gap-2'>\n                    <div className=\"text-lg mb-2\">Synapse Latency</div>\n                    <div className=\"graph\">\n                      <DistrbutionPlot\n                        plotData={getPlotDataById('synapse-latency')}\n                        xAxis='Latency'\n                        yAxis='Frequency'\n                      />\n                    </div>\n                    <div className=\"mt-2\">\n                      <DownloadButton\n                        theme={theme}\n                        onClick={() =>\n                          downloadAsJson(\n                            getPlotDataById('synapse-latency'),\n                            `synapse-latency-${volume_section}-${prelayer}-${postlayer}.json`\n                          )\n                        }\n                      >\n                        <span style={{ textTransform: \"capitalize\" }} className=\"collapsible-property small\">\n                          {volume_section}\n                        </span>\n                        Synapse latency distribution\n                        <span className=\"!mr-0 collapsible-property small\">{prelayer}</span> -{\" \"}\n                        <span className=\"!ml-0 collapsible-property small\">{postlayer}</span>\n                      </DownloadButton>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {availablePlots.SynapseLatencyFromSimulation && (\n                <>\n                  <div className='flex flex-col gap-2'>\n                    <div className=\"text-lg mb-2\">Synapse Latency for simulation</div>\n                    <div className=\"graph\">\n                      <DistrbutionPlot\n                        plotData={getPlotDataById('synapse-latency-for-simulation')}\n                        xAxis='Latency'\n                        yAxis='Frequency'\n                        xAxisTickStep={1}\n                      />\n                    </div>\n                    <div className=\"mt-2\">\n                      <DownloadButton\n                        theme={theme}\n                        onClick={() =>\n                          downloadAsJson(\n                            getPlotDataById('synapse-latency-for-simulation'),\n                            `synapse-latency-for-simulation-${volume_section}-${prelayer}-${postlayer}.json`\n                          )\n                        }\n                      >\n                        <span style={{ textTransform: \"capitalize\" }} className=\"collapsible-property small\">\n                          {volume_section}\n                        </span>\n                        Synapse latency for simulation\n                        <span className=\"!mr-0 collapsible-property small\">{prelayer}</span> -{\" \"}\n                        <span className=\"!ml-0 collapsible-property small\">{postlayer}</span>\n                      </DownloadButton>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          </Collapsible >\n        )}\n\n        {\n          availablePlots.RiseTimeFromSimulation && (\n            <Collapsible title=\"Rise time constant distribution\" id=\"RiseTimeSection\" properties={[\"Physiology\"]}>\n              <div className=\"graph\">\n                <DistrbutionPlot\n                  plotData={getPlotDataById('rise-time-constant-for-simulation')}\n                  xAxis='Rise Time'\n                  yAxis='Frequency'\n                  xAxisTickStep={1}\n                />\n              </div>\n              <div className=\"mt-4\">\n                <DownloadButton\n                  theme={theme}\n                  onClick={() => downloadAsJson(getPlotDataById('rise-time-constant-for-simulation'), `rise-time-constant-for-simulation-${volume_section}-${prelayer}-${postlayer}.json`)}>\n                  <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{volume_section}</span>\n                  Rise time constant distribution\n                  <span className='!mr-0 collapsible-property small '>{prelayer}</span> - <span className='!ml-0 collapsible-property small '>{postlayer}</span>\n\n                </DownloadButton>\n              </div>\n            </Collapsible>\n          )\n        }\n\n        {availablePlots.DecayTimeConstant && (\n          <Collapsible\n            title=\"Decay time constant distribution\"\n            id=\"DecayTimeConstantSection\"\n            properties={[\"Physiology\"]}\n          >\n            <div className='flex flex-col gap-2'>\n              <div className=\"graph\">\n                <DistrbutionPlot\n                  plotData={getPlotDataById('decay-time-constant')}\n                  xAxis='Decay Time'\n                  yAxis='Frequency'\n                  xAxisTickStep={1}\n                />\n              </div>\n              <div className=\"mt-2\">\n                <DownloadButton\n                  theme={theme}\n                  onClick={() =>\n                    downloadAsJson(\n                      getPlotDataById('decay-time-constant'),\n                      `decay-time-constant-${volume_section}-${prelayer}-${postlayer}.json`\n                    )\n                  }\n                >\n                  <span style={{ textTransform: \"capitalize\" }} className=\"collapsible-property small\">\n                    {volume_section}\n                  </span>\n                  <span className=\"!mr-0 collapsible-property small\">{prelayer}</span> -{\" \"}\n                  <span className=\"!ml-0 collapsible-property small\">{postlayer}</span>\n                  Decay time constant distribution\n                </DownloadButton>\n              </div>\n            </div>\n          </Collapsible>\n        )}\n\n        {\n          availablePlots.NMDAAMPARatio && (\n            <Collapsible title=\"NMDA/AMPA ratio distribution\" id=\"NMDAAMPARatioSection\" properties={[\"Physiology\"]}>\n              <div className=\"graph\">\n                <DistrbutionPlot\n                  xAxisTickStep={1}\n                  plotData={getPlotDataById('nmda-ampa-ratio')} />\n              </div>\n              <div className=\"mt-4\">\n                <DownloadButton\n                  theme={theme}\n                  onClick={() => downloadAsJson(getPlotDataById('nmda-ampa-ratio'), `nmda-ampa-ratio-${volume_section}-${prelayer}-${postlayer}.json`)}>\n                  <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{volume_section}</span>\n                  <span className='!mr-0 collapsible-property small '>{prelayer}</span> - <span className='!ml-0 collapsible-property small '>{postlayer}</span>\n                  NMDA/AMPA ratio distribution\n\n                </DownloadButton>\n              </div>\n            </Collapsible>\n          )\n        }\n\n        { /*\n        <Collapsible title='Short-term plasticity: average traces + mean traces' id='ShortTermPlasticitySection' properties={[\"Physiology\"]}>\n          <p>Short-term plasticity: average traces + mean traces</p>\n        </Collapsible>\n        */ }\n\n        <Collapsible\n          title=\"Distribution of U, D, F, NRRP\"\n          id=\"UParameterSection\"\n          properties={[\"Physiology\"]}\n        >\n          <div className=\"flex flex-col gap-12\">\n            {availablePlots.UParameter && (\n              <div className='flex flex-col gap-2'>\n                <div className=\"text-lg mb-2\">U Parameter</div>\n                <div className=\"graph\">\n                  <DistrbutionPlot\n                    plotData={getPlotDataById('u-parameter')}\n                    xAxis='u_syn'\n                    yAxis='Frequency'\n                    xAxisTickStep={1}\n                  />\n                </div>\n                <div className=\"mt-2\">\n                  <DownloadButton\n                    theme={theme}\n                    onClick={() =>\n                      downloadAsJson(\n                        getPlotDataById('u-parameter'),\n                        `u-parameter-${volume_section}-${prelayer}-${postlayer}.json`\n                      )\n                    }\n                  >\n                    <span style={{ textTransform: \"capitalize\" }} className=\"collapsible-property small\">\n                      {volume_section}\n                    </span>\n                    <span className=\"!mr-0 collapsible-property small\">{prelayer}</span> -{\" \"}\n                    <span className=\"!ml-0 collapsible-property small\">{postlayer}</span>\n                    U Parameter\n                  </DownloadButton>\n                </div>\n              </div>\n            )}\n\n            {availablePlots.DParameter && (\n              <div className='flex flex-col gap-2'>\n                <div className=\"text-lg mb-2\">D Parameter</div>\n                <div className=\"graph\">\n                  <DistrbutionPlot\n                    plotData={getPlotDataById('d-parameter')}\n                    xAxis='d_syn'\n                    yAxis='Frequency'\n                    xAxisTickStep={100}\n                  />\n                </div>\n                <div className=\"mt-2\">\n                  <DownloadButton\n                    theme={theme}\n                    onClick={() =>\n                      downloadAsJson(\n                        getPlotDataById('d-parameter'),\n                        `d-parameter-${volume_section}-${prelayer}-${postlayer}.json`\n                      )\n                    }\n                  >\n                    <span style={{ textTransform: \"capitalize\" }} className=\"collapsible-property small\">\n                      {volume_section}\n                    </span>\n                    <span className=\"!mr-0 collapsible-property small\">{prelayer}</span> -{\" \"}\n                    <span className=\"!ml-0 collapsible-property small\">{postlayer}</span>\n                    D Parameter\n\n                  </DownloadButton>\n                </div>\n              </div>\n            )}\n\n            {availablePlots.GSYNX && (\n              <div className='flex flex-col gap-2'>\n                <div className=\"text-lg mb-2\">G-SYNX</div>\n                <div className=\"graph\">\n                  <DistrbutionPlot\n                    plotData={getPlotDataById('g-synx')}\n                    xAxis='g_syn'\n                    yAxis='Frequency'\n                    xAxisTickStep={1}\n                  />\n                </div>\n                <div className=\"mt-2\">\n                  <DownloadButton\n                    theme={theme}\n                    onClick={() =>\n                      downloadAsJson(\n                        getPlotDataById('g-synx'),\n                        `g-synx-${volume_section}-${prelayer}-${postlayer}.json`\n                      )\n                    }\n                  >\n                    <span style={{ textTransform: \"capitalize\" }} className=\"collapsible-property small\">\n                      {volume_section}\n                    </span>\n                    <span className=\"!mr-0 collapsible-property small\">{prelayer}</span> -{\" \"}\n                    <span className=\"!ml-0 collapsible-property small\">{postlayer}</span>\n                    G-SYNX Parameter\n\n                  </DownloadButton>\n                </div>\n              </div>\n            )}\n\n            {availablePlots.NRRPParameter && (\n              <div className='flex flex-col gap-2'>\n                <div className=\"text-lg mb-2\">NRRP Parameter</div>\n                <div className=\"graph\">\n                  <DistrbutionPlot\n                    plotData={getPlotDataById('nrrp-parameter')}\n                    xAxis='NRRP'\n                    yAxis='Frequency'\n                    xAxisTickStep={1}\n                  />\n                </div>\n                <div className=\"mt-2\">\n                  <DownloadButton\n                    theme={theme}\n                    onClick={() =>\n                      downloadAsJson(\n                        getPlotDataById('nrrp-parameter'),\n                        `nrrp-parameter-${volume_section}-${prelayer}-${postlayer}.json`\n                      )\n                    }\n                  >\n                    <span style={{ textTransform: \"capitalize\" }} className=\"collapsible-property small\">\n                      {volume_section}\n                    </span>\n                    <span className=\"!mr-0 collapsible-property small\">{prelayer}</span> -{\" \"}\n                    <span className=\"!ml-0 collapsible-property small\">{postlayer}</span>\n                    NRRP Parameter\n\n                  </DownloadButton>\n                </div>\n              </div>\n            )}\n          </div>\n        </Collapsible>\n\n        <Collapsible title=\"Trace\" id=\"TracesSection\" className=\"mt-4\">\n          {traceData && traceData.individual_traces && traceData.mean_trace && (\n            <>\n              <div className=\"graph\">\n                <TraceGraph plotData={traceData} />\n              </div>\n              <DownloadButton\n                theme={theme}\n                onClick={() =>\n                  downloadAsJson(\n                    getPlotDataById('nrrp-parameter'),\n                    `nrrp-parameter-${volume_section}-${prelayer}-${postlayer}.json`\n                  )\n                }\n              >\n                <span style={{ textTransform: \"capitalize\" }} className=\"collapsible-property small\">\n                  {volume_section}\n                </span>\n                <span className=\"!mr-0 collapsible-property small\">{prelayer}</span> -{\" \"}\n                <span className=\"!ml-0 collapsible-property small\">{postlayer}</span>\n                trace\n\n              </DownloadButton>\n            </>\n          )}\n        </Collapsible>\n\n      </DataContainer >\n    </>\n  )\n}\n\nexport default withPreselection(\n  SchafferCollateralsView,\n  {\n    key: 'volume_section',\n    defaultQuery: defaultSelection.digitalReconstruction.schafferCollateral,\n  },\n);","import Head from 'next/head';\nimport SchafferCollateralsView from '@/views/3_digital-reconstructions/SchafferCollaterals';\n\nexport default function SchafferCollateralsPage() {\n  const metadata = {\n    title: 'Schaffer Collaterals | Digital Reconstructions | The Hippocampus Hub',\n    description:\n      'Explore the reconstructed pathways of Schaffer collaterals in the hippocampus. Analyze the anatomy and physiology of Schaffer collaterals, including their synaptic properties and connectivity with CA1 neurons.',\n    keywords: [\n      'Schaffer Collaterals',\n      'Hippocampus',\n      'CA1 Neurons',\n      'Digital Reconstructions',\n      'Synapse Dynamics',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <SchafferCollateralsView />\n    </>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport { Loader2 } from 'lucide-react';\nimport { graphTheme } from '@/constants';\n\nimport * as Plotly from 'plotly.js';\n\nconst Plot = dynamic(() => import('react-plotly.js').then((mod) => mod.default), {\n    ssr: false,\n}) as unknown as React.ComponentType<Plotly.Plot>;\n\ninterface TraceDataProps {\n    plotData?: {\n        individual_traces: number[][];\n        mean_trace: number[];\n    };\n}\n\nconst PlotlyTraceGraph: React.FC<TraceDataProps> = ({ plotData }) => {\n    const [data, setData] = useState<any[]>([]);\n    const [layout, setLayout] = useState<any>({});\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [hasError, setHasError] = useState<boolean>(false);\n\n    useEffect(() => {\n        console.log('TraceGraph received plotData:', plotData);\n        if (!plotData || !plotData.individual_traces || !plotData.mean_trace) {\n            console.log('No plot data available');\n            setIsLoading(false);\n            setHasError(true);\n            return;\n        }\n\n        try {\n            setIsLoading(true);\n            setHasError(false);\n\n            // Helper function to format time\n            const formatTime = (ms: number) => {\n                return ms >= 1000 ? `${(ms / 1000).toFixed(1)}s` : `${ms}ms`;\n            };\n\n            // Update x-axis values and formatting\n            const xValues = Array.from({ length: plotData.mean_trace.length }, (_, i) => i * (5000 / (plotData.mean_trace.length - 1)));\n\n            // Update individual traces data\n            const individualTraces = plotData.individual_traces.map((trace, index) => ({\n                x: xValues,\n                y: trace,\n                type: 'scatter',\n                mode: 'lines',\n                name: `Individual Trace ${index + 1}`,\n                line: { color: `#9EA0B2`, width: 1 },\n                showlegend: false,\n                hovertemplate: 'Time: %{x}<br>Value: %{y:.2f} mV<extra></extra>',\n            }));\n\n            // Update mean trace data\n            const meanTrace = {\n                x: xValues,\n                y: plotData.mean_trace,\n                type: 'scatter',\n                mode: 'lines',\n                name: 'Mean Trace',\n                line: { color: graphTheme.red, width: 3 },\n                hovertemplate: 'Time: %{x}<br>Value: %{y:.2f} mV<extra></extra>',\n            };\n\n            setData([...individualTraces, meanTrace]);\n\n            // Update layout\n            setLayout({\n                title: '',\n                xaxis: {\n                    title: 'Time',\n                    showticklabels: true,\n                    range: [0, 5000],\n                    tickmode: 'array',\n                    tickvals: [0, 1000, 2000, 3000, 4000, 5000],\n                    ticktext: ['0ms', '1s', '2s', '3s', '4s', '5s'],\n                    hoverformat: '.2f',\n                },\n                yaxis: {\n                    title: 'Value (mV)',\n                    showticklabels: true,\n                    hoverformat: '.2f',\n                },\n                autosize: true,\n                margin: { l: 60, r: 50, b: 50, t: 50, pad: 4 },\n                hovermode: 'closest',\n                showlegend: true,\n                legend: { x: 1, xanchor: 'right', y: 1 },\n                plot_bgcolor: '#EFF1F8',\n                paper_bgcolor: '#EFF1F8',\n            });\n\n            setIsLoading(false);\n        } catch (error) {\n            console.error('Error processing plot data:', error);\n            setIsLoading(false);\n            setHasError(true);\n        }\n    }, [plotData]);\n\n    const containerStyle = {\n        width: '100%',\n        height: '500px',\n        position: 'relative' as const,\n    };\n\n    const loaderStyle = {\n        position: 'absolute' as const,\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n    };\n\n    return (\n        <div style={containerStyle}>\n            {isLoading ? (\n                <div style={loaderStyle}>\n                    <Loader2 className=\"w-8 h-8 animate-spin\" />\n                </div>\n            ) : hasError || !data.length ? (\n                <p className=\"text-center text-gray-500 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    No data available.\n                </p>\n            ) : (\n                <Plot\n                    data={data}\n                    layout={layout}\n                    useResizeHandler={true}\n                    style={{ width: '100%', height: '100%' }}\n                    config={{ responsive: true }}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default PlotlyTraceGraph;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authorBox\":\"styles_authorBox__aSXcg\",\"icon\":\"styles_icon__2JEej\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__NKkJz\",\"volumeSelector\":\"styles_volumeSelector__dN4Dl\",\"volumeList\":\"styles_volumeList__5Src0\",\"volumeSection\":\"styles_volumeSection__yJuJz\",\"active\":\"styles_active__RrlYY\"};"],"names":["window","__NEXT_P","push","__webpack_require__","__webpack_exports__","Z","children","hasIcon","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","concat","styles","jsx","TfiWrite","ChartJS","register","LinearScale","BarElement","Title","Tooltip","Legend","MeanStd","plotData","xAxis","yAxis","xAxisTickStep","windowWidth","setWindowWidth","useState","useEffect","innerWidth","handleResize","addEventListener","removeEventListener","formatScientificNotation","Math","abs","value","toString","exponent","floor","log10","mantissa","pow","superscriptDigits","superscriptExponent","split","map","parseInt","digit","join","round","dataPoints","units","name","description","useMemo","createHistogram","binCount","min","data","length","binWidth","max","bins","Array","from","_","i","counts","fill","forEach","binIndex","count","x","y","isArray","console","error","bin","index","freq","values","flatValues","flat","Object","entries","key","parseFloat","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","title","tooltipItems","dataIndex","binStart","parsed","binEnd","scales","type","text","ticks","stepSize","maxRotation","minRotation","callback","Number","datasets","label","backgroundColor","graphTheme","blue","borderWidth","barPercentage","categoryPercentage","p","mean","toFixed","std","h2","style","width","height","Bar","Chart","registerables","yAxisLabel","theme","chartRef","useRef","chartInstance","getColor","useCallback","colors","yellow","green","red","purple","value_map","layers","keys","cellTypes","layer","cellType","stack","hachurePlugin","id","afterDatasetsDraw","chart","args","ctx","save","lineWidth","strokeStyle","dataset","datasetIndex","meta","getDatasetMeta","bar","getProps","beginPath","rect","clip","moveTo","lineTo","stroke","restore","current","getContext","destroy","labels","mode","intersect","position","stacked","beginAtZero","unit","downloadData","jsonString","encodeURIComponent","JSON","stringify","link","document","createElement","href","download","click","canvas","ref","aria-label","role","DownloadButton","onClick","list","onSelect","color","block","grow","handleSelectedElement","element","aria-checked","tabIndex","centered","classNames","themeProp","mountRef","hoveredObjectRef","selectedVolumeSectionRef","selectedObjectRef","camera","scene","renderer","raycaster","mouse","THREE","obj1Ref","obj2Ref","obj3Ref","objectsLoadedRef","offset","setOffset","textSize","setTextSize","handleClick","getBoundingClientRect","event","clientX","left","clientY","top","setFromCamera","intersects","intersectObjects","intersectedObject","object","parent","includes","volumeSection","userData","updateSelection","newVolumeSection","newSelectedObject","updateObjectColors","default","hover","selected","mainColor","textColor","traverse","child","material","set","geometry","background","aspect","clientWidth","clientHeight","z","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","appendChild","domElement","loader","OBJLoader","load","dataPath","newObj","obj","clone","applyMaterial","add","fontLoader","FontLoader","basePath","createText","toLowerCase","font","setInitialSelection","animate","log","xhr","loaded","total","requestAnimationFrame","render","right","bottom","updateProjectionMatrix","newOffset","zoom","newTextSize","updateTextSize","handleMouseMove","cursor","removeChild","transparent","opacity","depthWrite","renderOrder","selectedEdges","wireframeGeometry","wireframeMaterial","wireframe","visible","childName","textGeometry","TextGeometry","size","curveSegments","bevelEnabled","bevelThickness","bevelSize","textMaterialColor","textMaterial","textMesh","parentMesh","oldTextMesh","remove","initialObjectRef","find","initialVolumeSection","themeColors","experimental_data","reconstruction_data","digital_reconstruction","validations","predictions","neuriteTypes","volumeSections","achConcentrations","cellGroup","defaultSelection","experimentalData","layerAnatomy","neuronMorphology","mtype","instance","neuronElectrophysiology","etype","etype_instance","reconstructionData","volume","volume_section","cellComposition","neurons","digitalReconstruction","region","morphologyLibrary","morphology","schafferCollateral","prelayer","postlayer","connectionAnatomy","connectionPhysiology","acetylcholineEffectsOnCell","acetylcholineEffectsOnSynapses","ach_concentration","NeuronModelLibrary","synapticPathways","acetylcholine","neuriteColor","all","axon","apical","basal","dendrite","soma","WrappedComponent","router","useRouter","isReady","query","defaultQuery","replace","undefined","shallow","SchafferCollaterals","withPreselection","getMeanStdDataById","traceData","setTraceData","quickSelection","setQuickSelection","factsheetData","setFactsheetData","laminarPlots","setLaminarPlots","availablePlots","setAvailablePlots","availableMeanSTD","setAvailableMeanSTD","meanStdData","setMeanStdData","fetchFactsheetData","fetchTraceData","fetchLaminarData","fetchMeanSTDData","response","fetch","json","SynapsesPerConnection","some","plot","SampleDivergenceByConnection","SampleDivergenceBySynapse","SampleConvergenceByConnection","SampleConvergenceBySynapse","PSPAmplitude","PSPCV","SynapseLatency","SynapseLatencyFromSimulation","RiseTimeFromSimulation","DecayTimeConstant","NMDAAMPARatio","UParameter","DParameter","GSYNX","NRRPParameter","laminarData","item","setParams","params","setVolumeSectionQuery","prev","updatedSelection","setPreLayerQuery","setPostLayerQuery","qsEntries","setFn","getPlotDataById","jsx_runtime","Fragment","Filters","hasData","StickyContainer","subtitle","InfoBox","ul","li","Link","maxWidth","VolumeSectionSelector3D","List","DataContainer","navItems","isTitle","quickSelectorEntries","AuthorBox","span","Collapsible","properties","DistrbutionPlot","downloadAsJson","textTransform","LaminarGraph","individual_traces","mean_trace","TraceGraph","SchafferCollateralsPage","metadata","keywords","author","creator","publisher","Head","content","SchafferCollateralsView","Plot","dynamic","Promise","e","then","bind","mod","ssr","setData","layout","setLayout","isLoading","setIsLoading","hasError","setHasError","xValues","individualTraces","trace","line","showlegend","hovertemplate","meanTrace","xaxis","showticklabels","range","tickmode","tickvals","ticktext","hoverformat","yaxis","autosize","margin","l","r","b","t","pad","hovermode","xanchor","plot_bgcolor","paper_bgcolor","transform","Loader2","useResizeHandler","config","module","exports"],"sourceRoot":""}