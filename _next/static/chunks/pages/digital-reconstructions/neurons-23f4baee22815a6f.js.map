{"version":3,"file":"static/chunks/pages/digital-reconstructions/neurons-23f4baee22815a6f.js","mappings":"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","sources":["webpack://_N_E/?e35e","webpack://_N_E/./src/components/LayerSelector3D/index.tsx","webpack://_N_E/./src/views/3_digital-reconstructions/Neurons.tsx","webpack://_N_E/./src/pages/digital-reconstructions/neurons.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/digital-reconstructions/neurons\",\n      function () {\n        return require(\"private-next-pages/digital-reconstructions/neurons.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/digital-reconstructions/neurons\"])\n      });\n    }\n  ","import React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { Layer } from '../../types';\nimport { layers, theme } from '../../constants'; // Import theme\nimport { basePath } from '@/config';\n\ntype LayerSelectProps3D = {\n    value?: Layer;\n    onSelect?: (layer: Layer) => void;\n    theme?: number;\n};\n\nconst LayerSelector3D: React.FC<LayerSelectProps3D> = ({ value, onSelect, theme: themeProp = 1 }) => {\n    const mountRef = useRef<HTMLDivElement | null>(null);\n    const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n    const [trapezoids, setTrapezoids] = useState<THREE.Mesh[]>([]);\n    const [edges, setEdges] = useState<THREE.LineSegments[]>([]);\n    const [texts, setTexts] = useState<THREE.Mesh[]>([]);\n    const [sceneReady, setSceneReady] = useState(false);\n    const [scene, setScene] = useState<THREE.Scene | null>(null);\n    const [camera, setCamera] = useState<THREE.OrthographicCamera | null>(null);\n    const [renderer, setRenderer] = useState<THREE.WebGLRenderer | null>(null);\n\n    const distance = 0;\n    const angle = 10;\n    const initialTopWidth = 1.5;\n    const edgeThickness = 1;\n\n    const trapezoidHeights = {\n        SLM: 0.224 * 1.6,\n        SR: 0.42791 * 1.6,\n        SP: 0.090 * 1.6,\n        SO: 0.258 * 1.6,\n    };\n\n    useEffect(() => {\n        if (!mountRef.current) return;\n\n        const newScene = new THREE.Scene();\n        newScene.background = new THREE.Color(0x313354);\n\n        const aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\n        const frustumSize = 5;\n\n        const newCamera = new THREE.OrthographicCamera(\n            (frustumSize * aspect) / -2,\n            (frustumSize * aspect) / 2,\n            frustumSize / 2,\n            frustumSize / -2,\n            0.1,\n            1000\n        );\n        newCamera.position.set(0, -10, 90);\n        newCamera.lookAt(0, 0, 1);\n        newCamera.zoom = 2.2;\n        newCamera.updateProjectionMatrix();\n\n        const newRenderer = new THREE.WebGLRenderer({ antialias: true });\n        newRenderer.setPixelRatio(window.devicePixelRatio);\n        newRenderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n        mountRef.current.appendChild(newRenderer.domElement);\n\n        setScene(newScene);\n        setCamera(newCamera);\n        setRenderer(newRenderer);\n        setSceneReady(true);\n\n        const handleResize = () => {\n            if (mountRef.current && newRenderer && newCamera) {\n                const width = mountRef.current.clientWidth;\n                const height = mountRef.current.clientHeight;\n\n                newRenderer.setSize(width, height);\n\n                const aspect = width / height;\n                newCamera.left = (-frustumSize * aspect) / 2;\n                newCamera.right = (frustumSize * aspect) / 2;\n                newCamera.top = frustumSize / 2;\n                newCamera.bottom = -frustumSize / 2;\n                newCamera.updateProjectionMatrix();\n            }\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            if (mountRef.current) {\n                mountRef.current.removeChild(newRenderer.domElement);\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!sceneReady || !scene || !camera || !renderer) return;\n\n        const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        const trapezoidArray: THREE.Mesh[] = [];\n        const edgeArray: THREE.LineSegments[] = [];\n        const textArray: THREE.Mesh[] = [];\n        const numTrapezoids = layers.length;\n        let yOffset = 0;\n        let topWidth = initialTopWidth;\n\n        const totalHeight = layers.reduce((acc, layer) => acc + (trapezoidHeights[layer] || 1) + distance, -distance);\n        yOffset = totalHeight / 2;\n\n        const loader = new FontLoader();\n        loader.load(`${basePath}/assets/fonts/Titillium_Web_Light_.json`, (font) => {\n            for (let i = 0; i < numTrapezoids; i++) {\n                const height = trapezoidHeights[layers[i]] || 1;\n                const angleRad = THREE.MathUtils.degToRad(angle);\n                const bottomWidth = topWidth - 2 * height * Math.tan(angleRad);\n\n                const topCurve = new THREE.CatmullRomCurve3([\n                    new THREE.Vector3(-topWidth / 2, height / 2, 0),\n                    new THREE.Vector3(0, height / 2 + 0.02, 0),\n                    new THREE.Vector3(topWidth / 2, height / 2, 0),\n                ]);\n\n                const bottomCurve = new THREE.CatmullRomCurve3([\n                    new THREE.Vector3(-bottomWidth / 2, -height / 2, 0),\n                    new THREE.Vector3(0, -height / 2 + 0.02, 0),\n                    new THREE.Vector3(bottomWidth / 2, -height / 2, 0),\n                ]);\n                const topPoints = topCurve.getPoints(20);\n                const bottomPoints = bottomCurve.getPoints(20);\n\n                const shape = new THREE.Shape();\n                shape.moveTo(topPoints[0].x, topPoints[0].y);\n                topPoints.forEach((point) => shape.lineTo(point.x, point.y));\n                bottomPoints.reverse().forEach((point) => shape.lineTo(point.x, point.y));\n                shape.lineTo(topPoints[0].x, topPoints[0].y);\n\n                const geometry = new THREE.ExtrudeGeometry(shape, { depth: 1, bevelEnabled: false });\n                const trapezoid = new THREE.Mesh(geometry, material.clone());\n                trapezoid.userData.layer = layers[i];\n                trapezoid.userData.index = i;\n\n                trapezoid.position.set(0, yOffset - height / 2, 0.05);\n                scene.add(trapezoid);\n                trapezoidArray.push(trapezoid);\n\n                const edgeGeometry = new THREE.EdgesGeometry(geometry);\n                const edgeMaterial = new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: edgeThickness, linecap: 'round', linejoin: 'round' });\n                const edges = new THREE.LineSegments(edgeGeometry, edgeMaterial);\n                edges.position.set(0, yOffset - height / 2, 0.05);\n                scene.add(edges);\n                edgeArray.push(edges);\n\n                const textGeometry = new TextGeometry(layers[i], {\n                    font: font,\n                    size: 0.06,\n                    height: 0.001,\n                    curveSegments: 24,\n                    bevelEnabled: true,\n                    bevelThickness: 0.005,\n                    bevelSize: 0.002,\n                });\n                textGeometry.computeBoundingBox();\n                const textWidth = textGeometry.boundingBox!.max.x - textGeometry.boundingBox!.min.x;\n\n                const textMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n                const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n\n                textMesh.position.set(-textWidth / 2, yOffset - height + 0.12 / 2, 1.05);\n                scene.add(textMesh);\n                textArray.push(textMesh);\n\n                yOffset -= height + distance;\n                topWidth = bottomWidth;\n            }\n\n            setTrapezoids(trapezoidArray);\n            setEdges(edgeArray);\n            setTexts(textArray);\n        });\n    }, [sceneReady, scene, camera, renderer]);\n\n    useEffect(() => {\n        if (!sceneReady || !scene || !camera || !renderer || trapezoids.length === 0) return;\n\n        const raycaster = new THREE.Raycaster();\n        const mouse = new THREE.Vector2(-10, -10); // Initialize to a point outside the view\n        let hoveredTrapezoid: THREE.Mesh | null = null;\n\n        const updateMousePosition = (event: MouseEvent) => {\n            const rect = renderer.domElement.getBoundingClientRect();\n            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n        };\n\n        const onMouseMove = (event: MouseEvent) => {\n            updateMousePosition(event);\n        };\n\n        const onClick = (event: MouseEvent) => {\n            updateMousePosition(event);\n            raycaster.setFromCamera(mouse, camera);\n            const intersects = raycaster.intersectObjects(trapezoids);\n            if (intersects.length > 0) {\n                const intersectedTrapezoid = intersects[0].object as THREE.Mesh;\n                const selectedLayer = intersectedTrapezoid.userData.layer;\n                if (onSelect && selectedLayer) {\n                    onSelect(selectedLayer);\n                    setHoveredIndex(null); // Clear hover state\n                }\n            }\n        };\n\n        const onHover = () => {\n            raycaster.setFromCamera(mouse, camera);\n            const intersects = raycaster.intersectObjects(trapezoids);\n            if (intersects.length > 0) {\n                document.body.style.cursor = 'pointer';\n                const intersectedTrapezoid = intersects[0].object as THREE.Mesh;\n                const index = intersectedTrapezoid.userData.index;\n                if (hoveredTrapezoid !== intersectedTrapezoid) {\n                    setHoveredIndex(index);\n                    hoveredTrapezoid = intersectedTrapezoid;\n                }\n            } else {\n                document.body.style.cursor = 'default';\n                if (hoveredTrapezoid) {\n                    setHoveredIndex(null);\n                    hoveredTrapezoid = null;\n                }\n            }\n        };\n\n        window.addEventListener('mousemove', onMouseMove);\n        window.addEventListener('click', onClick);\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n            onHover();\n            renderer.render(scene, camera);\n        };\n        animate();\n\n        // Initial hover check\n        raycaster.setFromCamera(mouse, camera);\n        onHover();\n\n        return () => {\n            window.removeEventListener('mousemove', onMouseMove);\n            window.removeEventListener('click', onClick);\n            if (mountRef.current) {\n                mountRef.current.removeChild(renderer.domElement);\n            }\n        };\n    }, [sceneReady, scene, camera, renderer, trapezoids]);\n\n    useEffect(() => {\n        if (!sceneReady || trapezoids.length === 0) return;\n\n        trapezoids.forEach((trapezoid, index) => {\n            const material = trapezoid.material as THREE.MeshBasicMaterial;\n            const edgeMaterial = edges[index].material as THREE.LineBasicMaterial;\n            const textMaterial = texts[index].material as THREE.MeshBasicMaterial;\n\n            const currentTheme = theme[themeProp];\n\n            if (index === hoveredIndex && value !== layers[index]) {\n                material.color.set(currentTheme.hover); // hover\n                edgeMaterial.color.set(currentTheme.selected);\n                textMaterial.color.set(currentTheme.selected); // non-selected\n            } else if (value === layers[index]) {\n                material.color.set(currentTheme.selected); // Selected\n                edgeMaterial.color.set(currentTheme.selectedEdges);\n                textMaterial.color.set(0xffffff); // text same color as edge\n            } else {\n                material.color.set(currentTheme.default); // Default\n                edgeMaterial.color.set(currentTheme.selected);\n                textMaterial.color.set(currentTheme.selected); // non-selected\n            }\n            material.needsUpdate = true;\n            edgeMaterial.needsUpdate = true;\n            textMaterial.needsUpdate = true;\n        });\n    }, [hoveredIndex, value, themeProp, sceneReady, trapezoids, edges, texts]);\n\n    return (\n        <div className='flex align-middle justify-center' style={{ width: '100%', minHeight: '400px' }}>\n            <div ref={mountRef} style={{ width: 'calc(100% - 2px)', minHeight: '400px' }}></div>\n        </div>\n    );\n};\n\nexport default LayerSelector3D;\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\n\nimport Title from \"@/components/Title\";\nimport InfoBox from \"@/components/InfoBox\";\nimport Filters from \"@/layouts/Filters\";\nimport DataContainer from \"@/components/DataContainer\";\nimport { QuickSelectorEntry } from \"@/types\";\nimport List from \"@/components/List\";\nimport Collapsible from \"@/components/Collapsible\";\n\nimport { defaultSelection } from \"@/constants\";\nimport withPreselection from \"@/hoc/with-preselection\";\nimport { basePath, dataPath } from \"@/config\";\nimport { downloadAsJson } from \"@/utils\";\nimport DownloadButton from \"@/components/DownloadButton\";\nimport TraceGraph from \"../5_predictions/components/Trace\";\nimport modelsData from \"./neurons.json\";\nimport PopulationFactsheet from \"./acetylcholine/PopulationFactsheet\";\nimport Factsheet from \"@/components/Factsheet\";\nimport LayerSelector3D from \"@/components/LayerSelector3D\";\nimport { Layer } from \"@/types\"; // Ensure Layer is imported from the correct path\nimport ExperimentalMorphologyTable from \"@/components/ExperiementalMorphologyUsed\";\nimport { PranavViewer } from \"@/components/PranavViewer\";\nimport { SwcViewer } from \"../MorphoViewer/SwcViewer\";\n\nconst getUniqueValues = (\n  key: string,\n  filterKey1?: string,\n  filterValue1?: string,\n  filterKey2?: string,\n  filterValue2?: string,\n  filterKey3?: string,\n  filterValue3?: string\n): string[] => {\n  return Array.from(\n    new Set(\n      modelsData\n        .filter(\n          (model) =>\n            (!filterKey1 ||\n              !filterValue1 ||\n              model[filterKey1] === filterValue1) &&\n            (!filterKey2 ||\n              !filterValue2 ||\n              model[filterKey2] === filterValue2) &&\n            (!filterKey3 || !filterValue3 || model[filterKey3] === filterValue3)\n        )\n        .map((model) => model[key])\n    )\n  ).sort();\n};\n\nconst getFilteredMorphologies = (\n  mtype: string,\n  etype: string,\n  layer?: Layer\n): string[] => {\n  return modelsData\n    .filter(\n      (model) =>\n        (!mtype || model.mtype === mtype) &&\n        (!etype || model.etype === etype) &&\n        (!layer || model.layer === layer)\n    )\n    .map((model) => model.morphology);\n};\n\nconst NeuronsView: React.FC = () => {\n  const router = useRouter();\n  const { query } = router;\n  const theme = 3;\n  const [currentMtype, setCurrentMtype] = useState<string>(\"\");\n  const [currentEtype, setCurrentEtype] = useState<string>(\"\");\n  const [currentMorphology, setCurrentMorphology] = useState<string>(\"\");\n  const [traceData, setTraceData] = useState<any>(null);\n  const [factsheetData, setFactsheetData] = useState<any>(null);\n  const [experimentalRecordingData, setExperimentalRecordingData] =\n    useState<any>(null);\n  const [mechanismsData, setMechanismsData] = useState<any>(null);\n  const [currentLayer, setCurrentLayer] = useState<Layer | undefined>(\n    modelsData[0]?.layer as Layer | undefined\n  ); // Set default layer\n\n  const mtypes = useMemo(\n    () => getUniqueValues(\"mtype\", \"layer\", currentLayer?.toString()),\n    [currentLayer]\n  );\n  const etypes = useMemo(\n    () =>\n      getUniqueValues(\n        \"etype\",\n        \"mtype\",\n        currentMtype,\n        \"layer\",\n        currentLayer?.toString()\n      ),\n    [currentMtype, currentLayer]\n  );\n  const morphologies = useMemo(\n    () => getFilteredMorphologies(currentMtype, currentEtype, currentLayer),\n    [currentMtype, currentEtype, currentLayer]\n  );\n\n  useEffect(() => {\n    if (Object.keys(query).length === 0) return;\n\n    const newMtypes = getUniqueValues(\n      \"mtype\",\n      \"layer\",\n      currentLayer?.toString()\n    );\n    const newMtype =\n      query.mtype &&\n      typeof query.mtype === \"string\" &&\n      newMtypes.includes(query.mtype)\n        ? query.mtype\n        : newMtypes[0] || \"\";\n\n    const newEtypes = getUniqueValues(\n      \"etype\",\n      \"mtype\",\n      newMtype,\n      \"layer\",\n      currentLayer?.toString()\n    );\n    const newEtype =\n      query.etype &&\n      typeof query.etype === \"string\" &&\n      newEtypes.includes(query.etype)\n        ? query.etype\n        : newEtypes[0] || \"\";\n\n    const newMorphologies = getFilteredMorphologies(\n      newMtype,\n      newEtype,\n      currentLayer\n    );\n    const newMorphology =\n      query.morphology &&\n      typeof query.morphology === \"string\" &&\n      newMorphologies.includes(query.morphology)\n        ? query.morphology\n        : newMorphologies[0] || \"\";\n\n    setCurrentMtype(newMtype);\n    setCurrentEtype(newEtype);\n    setCurrentMorphology(newMorphology);\n  }, [query, currentLayer]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (currentMorphology) {\n        try {\n          const [traceResponse, factsheetResponse] = await Promise.all([\n            fetch(\n              `${dataPath}/3_digital-reconstruction/neuron/${currentMtype}/${currentEtype}/${currentMorphology}/trace.json`\n            ),\n            fetch(\n              `${dataPath}/3_digital-reconstruction/neuron/${currentMtype}/${currentEtype}/${currentMorphology}/features_with_rheobase.json`\n            ),\n          ]);\n\n          const traceData = await traceResponse.json();\n          const factsheetData = await factsheetResponse.json();\n\n          setTraceData(traceData);\n          setFactsheetData(factsheetData);\n          setMechanismsData(mechanismsData);\n          setExperimentalRecordingData(experimentalRecordingData);\n        } catch (error) {\n          setTraceData(null);\n          setFactsheetData(null);\n          setMechanismsData(null);\n          setExperimentalRecordingData(null);\n        }\n      }\n    };\n\n    fetchData();\n  }, [currentMorphology]);\n\n  const setParams = (params: Record<string, string>): void => {\n    const newQuery = {\n      ...router.query,\n      ...params,\n    };\n    router.push({ query: newQuery, pathname: router.pathname }, undefined, {\n      shallow: true,\n    });\n  };\n\n  const setMtype = (mtype: string) => {\n    const newEtypes = getUniqueValues(\"etype\", \"mtype\", mtype);\n    const newEtype = newEtypes[0] || \"\";\n    const newMorphologies = getFilteredMorphologies(mtype, newEtype);\n    const newMorphology = newMorphologies[0] || \"\";\n\n    setParams({\n      mtype,\n      etype: newEtype,\n      morphology: newMorphology,\n    });\n  };\n\n  const setEtype = (etype: string) => {\n    const newMorphologies = getFilteredMorphologies(currentMtype, etype);\n    const newMorphology = newMorphologies[0] || \"\";\n\n    setParams({\n      etype,\n      morphology: newMorphology,\n    });\n  };\n\n  const setMorphology = (morphology: string) => {\n    setParams({\n      morphology,\n    });\n  };\n\n  const setLayer = (layer: Layer) => {\n    setCurrentLayer(layer);\n    const newMtypes = getUniqueValues(\"mtype\", \"layer\", layer.toString());\n    const newMtype = newMtypes[0] || \"\";\n    const newEtypes = getUniqueValues(\n      \"etype\",\n      \"mtype\",\n      newMtype,\n      \"layer\",\n      layer.toString()\n    );\n    const newEtype = newEtypes[0] || \"\";\n    const newMorphologies = getFilteredMorphologies(newMtype, newEtype, layer);\n    const newMorphology = newMorphologies[0] || \"\";\n\n    setParams({\n      layer: layer.toString(),\n      mtype: newMtype,\n      etype: newEtype,\n      morphology: newMorphology,\n    });\n  };\n\n  const qsEntries: QuickSelectorEntry[] = [\n    {\n      title: \"Layer\",\n      key: \"layer\",\n      values: Array.from(new Set(modelsData.map((model) => model.layer))),\n      setFn: setLayer,\n    },\n    {\n      title: \"M-Type\",\n      key: \"mtype\",\n      values: mtypes,\n      setFn: setMtype,\n    },\n    {\n      title: \"E-Type\",\n      key: \"etype\",\n      values: etypes,\n      setFn: setEtype,\n    },\n    {\n      title: \"Morphology\",\n      key: \"morphology\",\n      values: morphologies,\n      setFn: setMorphology,\n    },\n  ];\n\n  return (\n    <>\n      <Filters theme={theme}>\n        <div className=\"row w-100 content-center\">\n          <div className=\"col-xs-12 col-lg-6 content-center\">\n            <Title\n              title=\"Neurons\"\n              subtitle=\"Digital Reconstructions\"\n              theme={theme}\n            />\n            <InfoBox>\n              <p>\n                We used the{\" \"}\n                <Link\n                  className={`link theme-${theme}`}\n                  href={\"/reconstruction-data/neuron-model-library/\"}\n                >\n                  single neuron library\n                </Link>{\" \"}\n                to populate the network model. The neuron models that find their\n                way into the circuit represent a subset of the entire initial\n                library.\n              </p>\n            </InfoBox>\n          </div>\n\n          <div className=\"col-xs-12 col-lg-6\">\n            <div className=\"selector\">\n              <div className={`selector__column theme-${theme}`}>\n                <div className={`selector__head theme-${theme}`}>\n                  Choose a layer\n                </div>\n                <div className=\"selector__selector-container\">\n                  <LayerSelector3D\n                    value={currentLayer || undefined}\n                    onSelect={setLayer}\n                    theme={theme}\n                  />\n                </div>\n              </div>\n              <div className={`selector__column theme-${theme}`}>\n                <div className={`selector__head theme-${theme}`}>\n                  Select reconstruction\n                </div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={mtypes}\n                    value={currentMtype}\n                    title={`M-type ${\n                      mtypes.length ? `(${mtypes.length})` : \"\"\n                    }`}\n                    onSelect={setMtype}\n                    theme={theme}\n                  />\n                  <List\n                    block\n                    list={etypes}\n                    value={currentEtype}\n                    title={`E-type ${\n                      etypes.length ? `(${etypes.length})` : \"\"\n                    }`}\n                    onSelect={setEtype}\n                    theme={theme}\n                  />\n                  <List\n                    block\n                    list={morphologies}\n                    value={currentMorphology}\n                    title={`Morphology ${\n                      morphologies.length ? `(${morphologies.length})` : \"\"\n                    }`}\n                    onSelect={setMorphology}\n                    anchor=\"data\"\n                    theme={theme}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <DataContainer\n        theme={theme}\n        navItems={[\n          { id: \"traceSection\", label: \"Trace\" },\n          { id: \"bPAPPSPSection\", label: \"bPAP & PSP\" },\n          { id: \"factsheetSection\", label: \"Factsheet\" },\n          {\n            id: \"ExperimentalMorphologySection\",\n            label: \"Experimental morphology used for this model\",\n          },\n        ]}\n        quickSelectorEntries={qsEntries}\n      >\n        <SwcViewer\n          href={`${dataPath}/3_digital-reconstruction/neuron/${currentMtype}/${currentEtype}/${currentMorphology}/morphology.swc`}\n        />\n        <Collapsible id=\"traceSection\" className=\"mt-4\" title=\"Trace\">\n          <div className=\"graph\">\n            {traceData && <TraceGraph plotData={traceData} />}\n          </div>\n\n          {traceData && (\n            <div className=\"mt-4\">\n              <DownloadButton\n                onClick={() =>\n                  downloadAsJson(\n                    traceData,\n                    `${currentMtype}-${currentEtype}-${currentMorphology}-trace.json`\n                  )\n                }\n                theme={theme}\n              >\n                Trace data\n              </DownloadButton>\n            </div>\n          )}\n        </Collapsible>\n\n        <Collapsible id=\"factsheetSection\" className=\"mt-4\" title=\"Factsheet\">\n          {factsheetData && (\n            <>\n              <Factsheet facts={factsheetData} />\n              <div className=\"mt-4\">\n                <DownloadButton\n                  onClick={() =>\n                    downloadAsJson(\n                      factsheetData,\n                      `${currentMtype}-${currentEtype}-${currentMorphology}-factsheet.json`\n                    )\n                  }\n                  theme={theme}\n                >\n                  Factsheet\n                </DownloadButton>\n              </div>\n            </>\n          )}\n        </Collapsible>\n\n        <Collapsible id=\"bPAPPSPSection\" className=\"mt-4\" title=\"bPAP & PSP\">\n          <PranavViewer\n            url={`${dataPath}/epsp-bpap/digital_recon/${currentMtype}/${currentEtype}/${currentMorphology}`}\n          />\n        </Collapsible>\n\n        <Collapsible\n          id=\"ExperimentalMorphologySection\"\n          className=\"mt-4\"\n          title=\"Experimental morphology used for this model\"\n        >\n          <ExperimentalMorphologyTable\n            MorphologyData={modelsData}\n            currentInstance={currentMorphology}\n            isMorphologyLibrary={true}\n          />\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default withPreselection(NeuronsView, {\n  key: \"mtype\",\n  defaultQuery: defaultSelection.digitalReconstruction.neurons,\n});\n","import Head from 'next/head';\nimport NeuronsView from '../../views/3_digital-reconstructions/Neurons';\n\nexport default function DigRecNeuronsPage() {\n  const metadata = {\n    title: 'Neurons | Digital Reconstructions | The Hippocampus Hub',\n    description:\n      'Explore a library of neuron reconstructions in the hippocampus. Analyze the detailed neuron models that populate the network, based on reconstructed morphologies and electrophysiological recordings.',\n    keywords: [\n      'Neuron Models',\n      'Hippocampus',\n      'Digital Reconstructions',\n      'Reconstructed Morphology',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <NeuronsView />\n    </>\n  );\n}"],"names":["window","__NEXT_P","push","__webpack_require__","__webpack_exports__","Z","value","onSelect","theme","themeProp","param","mountRef","useRef","hoveredIndex","setHoveredIndex","useState","trapezoids","setTrapezoids","edges","setEdges","texts","setTexts","sceneReady","setSceneReady","scene","setScene","camera","setCamera","renderer","setRenderer","trapezoidHeights","SLM","SR","SP","SO","useEffect","current","newScene","THREE","background","aspect","clientWidth","clientHeight","newCamera","frustumSize","position","set","lookAt","zoom","updateProjectionMatrix","newRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","handleResize","width","height","left","right","top","bottom","addEventListener","removeEventListener","removeChild","material","color","trapezoidArray","edgeArray","textArray","numTrapezoids","layers","length","yOffset","topWidth","totalHeight","reduce","acc","layer","loader","FontLoader","load","concat","basePath","i","angleRad","degToRad","bottomWidth","Math","tan","topCurve","bottomCurve","topPoints","getPoints","bottomPoints","shape","moveTo","x","y","forEach","lineTo","point","reverse","geometry","depth","bevelEnabled","trapezoid","clone","userData","index","add","edgeGeometry","edgeMaterial","linewidth","linecap","linejoin","textGeometry","TextGeometry","font","size","curveSegments","bevelThickness","bevelSize","computeBoundingBox","textWidth","boundingBox","max","min","textMaterial","textMesh","raycaster","mouse","hoveredTrapezoid","updateMousePosition","rect","getBoundingClientRect","event","clientX","clientY","onMouseMove","onClick","setFromCamera","intersects","intersectObjects","intersectedTrapezoid","object","selectedLayer","onHover","document","body","style","cursor","animate","requestAnimationFrame","render","currentTheme","hover","selected","selectedEdges","default","needsUpdate","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","minHeight","ref","getUniqueValues","key","filterKey1","filterValue1","filterKey2","filterValue2","filterKey3","filterValue3","Array","from","Set","modelsData","filter","model","map","sort","getFilteredMorphologies","mtype","etype","morphology","Neurons","withPreselection","router","useRouter","query","currentMtype","setCurrentMtype","currentEtype","setCurrentEtype","currentMorphology","setCurrentMorphology","traceData","setTraceData","factsheetData","setFactsheetData","experimentalRecordingData","setExperimentalRecordingData","mechanismsData","setMechanismsData","currentLayer","setCurrentLayer","mtypes","useMemo","toString","etypes","morphologies","Object","keys","newMtypes","newMtype","includes","newEtypes","newEtype","newMorphologies","newMorphology","fetchData","traceResponse","factsheetResponse","Promise","all","fetch","dataPath","json","error","setParams","newQuery","params","pathname","undefined","shallow","setMtype","setEtype","setMorphology","setLayer","qsEntries","title","values","setFn","jsx_runtime","jsxs","Fragment","Filters","Title","subtitle","InfoBox","p","Link","href","LayerSelector3D","List","block","list","anchor","DataContainer","navItems","id","label","quickSelectorEntries","SwcViewer","Collapsible","TraceGraph","plotData","DownloadButton","downloadAsJson","Factsheet","facts","PranavViewer","url","ExperimentalMorphologyTable","MorphologyData","currentInstance","isMorphologyLibrary","defaultQuery","defaultSelection","digitalReconstruction","neurons","DigRecNeuronsPage","metadata","description","keywords","author","creator","publisher","Head","meta","name","content","join","NeuronsView"],"sourceRoot":""}