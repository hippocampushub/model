{"version":3,"file":"static/chunks/pages/digital-reconstructions/acetylcholine-effects-on-cells-84a3082fce5c1bfb.js","mappings":"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","sources":["webpack://_N_E/?142f","webpack://_N_E/./src/components/Unit/index.tsx","webpack://_N_E/./src/components/Factsheet/index.tsx","webpack://_N_E/./src/components/LayerSelector3D/index.tsx","webpack://_N_E/./src/components/List/index.tsx","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/Term/index.tsx","webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/hoc/with-preselection.tsx","webpack://_N_E/./src/views/3_digital-reconstructions/acetylcholine/PopulationFactsheet.tsx","webpack://_N_E/./src/views/3_digital-reconstructions/AcetylcholineEffectsOnCell.tsx","webpack://_N_E/./src/pages/digital-reconstructions/acetylcholine-effects-on-cells.tsx","webpack://_N_E/./src/views/5_predictions/components/Trace.tsx","webpack://_N_E/./src/components/Term/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/digital-reconstructions/acetylcholine-effects-on-cells\",\n      function () {\n        return require(\"private-next-pages/digital-reconstructions/acetylcholine-effects-on-cells.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/digital-reconstructions/acetylcholine-effects-on-cells\"])\n      });\n    }\n  ","import React from 'react';\n\ntype UnitProps = {\n  value?: string;\n}\n\nconst replacement = {\n  MOhm: 'MΩ',\n};\n\nconst Unit: React.FC<UnitProps> = ({ value = '' }) => {\n  return (\n    <>\n      {replacement[value] ?? value}\n    </>\n  );\n};\n\n\nexport default Unit;\n","import React from 'react';\nimport NumberFormat from '../NumberFormat';\nimport isNil from 'lodash/isNil';\n\nimport Unit from '../Unit';\nimport { termFactory } from '@/components/Term';\n\nconst Term = termFactory();\n\nconst classPrefix = 'factsheet__';\n\nexport type FactsheetEntryType = {\n  name: string;\n  description: string;\n  units?: string;\n  value?: number | string;\n  values?: number[];\n  value_map?: {\n    [key: string]: string | number;\n  };\n};\n\ntype FactsheetProps = {\n  facts: FactsheetEntryType[];\n  className?: string;\n};\n\nconst FactsheetSingleValueEntry: React.FC<{\n  fact: FactsheetEntryType;\n}> = ({\n  fact\n}) => {\n    return (\n      <div className=\"row mt-1\">\n        <div className=\"col-xs-6 col-sm-4 name\">\n          <Term term={fact.name} description={fact.description} />\n        </div>\n        <div className=\"col-xs-6 col-sm-8 value\">\n          {isNil(fact.value)\n            ? (<span>-</span>)\n            : (<span>\n              <NumberFormat value={fact.value} /> <Unit value={fact.units} />\n            </span>)\n          }\n        </div>\n      </div>\n    );\n  };\n\nconst FactsheetSingleMeanStdEntry: React.FC<{\n  fact: FactsheetEntryType;\n}> = ({\n  fact,\n}) => {\n    const mean = fact.value_map?.mean ?? (fact.values?.[0] ?? '-');\n    const std = fact.value_map?.std ?? (fact.values?.[1] ?? '-');\n\n    const formatValue = (value: string | number) => {\n      if (typeof value === 'number') {\n        return value.toFixed(3);\n      }\n      return value;\n    };\n\n    const formatNumberWithoutCommas = (value: string | number) => {\n      if (typeof value === 'number') {\n        return value.toString().replace(/,/g, '');\n      }\n      return value;\n    };\n\n    return (\n      <div className=\"row mt-1\">\n        <div className=\"col-xs-4 name\">\n          <Term term={fact.name} description={fact.description} />\n        </div>\n        <div className=\"col-xs-4 value\">\n          {formatNumberWithoutCommas(formatValue(mean))}\n          {std !== '-' ? <> ± {formatNumberWithoutCommas(formatValue(std))}</> : ''}\n          {fact.units && <> {fact.units}</>}\n        </div>\n      </div>\n    );\n  };\n\nconst FactsheetMapValueEntry: React.FC<{\n  fact: FactsheetEntryType\n}> = ({\n  fact,\n}) => {\n    // @ts-ignore\n    const maxVal = Math.max.apply(null, Object.values(fact.value_map).map(s => parseFloat(s as string)));\n    const unitCode = fact.units;\n\n    // @ts-ignore\n    const valueColumn = Object.entries(fact.value_map).map(([label, value]) => {\n      const barMaxFillRatio = 0.8;\n      const barWidthPct = (parseFloat(value as string) / maxVal) * 100 * barMaxFillRatio;\n\n      return (\n        <div key={label} className=\"row mb-1\">\n          <div className=\"col-xs-6 pos-relative\">\n            {label}\n            <div className=\"bar\" style={{ width: `${barWidthPct}%` }} />\n          </div>\n          <div className=\"col-xs-6\">\n            <NumberFormat value={value} /> <Unit value={unitCode} />\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"row mt-1\">\n        <div className=\"col-xs-6 col-lg-4 name\">\n          <Term term={fact.name} description={fact.description} />\n        </div>\n        <div className=\"col-xs-6 col-lg-8\">{valueColumn}</div>\n      </div>\n    );\n  };\n\nconst FactsheetEntry: React.FC<{\n  fact: FactsheetEntryType\n}> = ({\n  fact\n}) => {\n    if (\n      fact.value_map &&\n      !isNil(fact.value_map.mean) &&\n      !isNil(fact.value_map.std)\n    ) {\n      return (<FactsheetSingleMeanStdEntry fact={fact} />);\n    }\n\n    if (Array.isArray(fact.values)) {\n      return (<FactsheetSingleMeanStdEntry fact={fact} />);\n    }\n\n    if (fact.value_map) {\n      return (<FactsheetMapValueEntry fact={fact} />);\n    }\n\n    return (<FactsheetSingleValueEntry fact={fact} />);\n  };\n\nconst Factsheet: React.FC<FactsheetProps> = ({\n  facts,\n  className = '',\n}) => {\n  return (\n    <div className={`${classPrefix}basis ${className}`}>\n      {facts.map((fact, index) => (\n        <FactsheetEntry key={`${fact.name}-${index}`} fact={fact} />\n      ))}\n    </div>\n  );\n};\n\nexport default Factsheet;\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { Layer } from '../../types';\nimport { layers, theme } from '../../constants'; // Import theme\nimport { basePath } from '@/config';\n\ntype LayerSelectProps3D = {\n    value?: Layer;\n    onSelect?: (layer: Layer) => void;\n    theme?: number;\n};\n\nconst LayerSelector3D: React.FC<LayerSelectProps3D> = ({ value, onSelect, theme: themeProp = 1 }) => {\n    const mountRef = useRef<HTMLDivElement | null>(null);\n    const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n    const [trapezoids, setTrapezoids] = useState<THREE.Mesh[]>([]);\n    const [edges, setEdges] = useState<THREE.LineSegments[]>([]);\n    const [texts, setTexts] = useState<THREE.Mesh[]>([]);\n    const [sceneReady, setSceneReady] = useState(false);\n    const [scene, setScene] = useState<THREE.Scene | null>(null);\n    const [camera, setCamera] = useState<THREE.OrthographicCamera | null>(null);\n    const [renderer, setRenderer] = useState<THREE.WebGLRenderer | null>(null);\n\n    const distance = 0;\n    const angle = 10;\n    const initialTopWidth = 1.5;\n    const edgeThickness = 1;\n\n    const trapezoidHeights = {\n        SLM: 0.224 * 1.6,\n        SR: 0.42791 * 1.6,\n        SP: 0.090 * 1.6,\n        SO: 0.258 * 1.6,\n    };\n\n    useEffect(() => {\n        if (!mountRef.current) return;\n\n        const newScene = new THREE.Scene();\n        newScene.background = new THREE.Color(0x313354);\n\n        const aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\n        const frustumSize = 5;\n\n        const newCamera = new THREE.OrthographicCamera(\n            (frustumSize * aspect) / -2,\n            (frustumSize * aspect) / 2,\n            frustumSize / 2,\n            frustumSize / -2,\n            0.1,\n            1000\n        );\n        newCamera.position.set(0, -10, 90);\n        newCamera.lookAt(0, 0, 1);\n        newCamera.zoom = 2.2;\n        newCamera.updateProjectionMatrix();\n\n        const newRenderer = new THREE.WebGLRenderer({ antialias: true });\n        newRenderer.setPixelRatio(window.devicePixelRatio);\n        newRenderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n        mountRef.current.appendChild(newRenderer.domElement);\n\n        setScene(newScene);\n        setCamera(newCamera);\n        setRenderer(newRenderer);\n        setSceneReady(true);\n\n        const handleResize = () => {\n            if (mountRef.current && newRenderer && newCamera) {\n                const width = mountRef.current.clientWidth;\n                const height = mountRef.current.clientHeight;\n\n                newRenderer.setSize(width, height);\n\n                const aspect = width / height;\n                newCamera.left = (-frustumSize * aspect) / 2;\n                newCamera.right = (frustumSize * aspect) / 2;\n                newCamera.top = frustumSize / 2;\n                newCamera.bottom = -frustumSize / 2;\n                newCamera.updateProjectionMatrix();\n            }\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            if (mountRef.current) {\n                mountRef.current.removeChild(newRenderer.domElement);\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!sceneReady || !scene || !camera || !renderer) return;\n\n        const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        const trapezoidArray: THREE.Mesh[] = [];\n        const edgeArray: THREE.LineSegments[] = [];\n        const textArray: THREE.Mesh[] = [];\n        const numTrapezoids = layers.length;\n        let yOffset = 0;\n        let topWidth = initialTopWidth;\n\n        const totalHeight = layers.reduce((acc, layer) => acc + (trapezoidHeights[layer] || 1) + distance, -distance);\n        yOffset = totalHeight / 2;\n\n        const loader = new FontLoader();\n        loader.load(`${basePath}/assets/fonts/Titillium_Web_Light_.json`, (font) => {\n            for (let i = 0; i < numTrapezoids; i++) {\n                const height = trapezoidHeights[layers[i]] || 1;\n                const angleRad = THREE.MathUtils.degToRad(angle);\n                const bottomWidth = topWidth - 2 * height * Math.tan(angleRad);\n\n                const topCurve = new THREE.CatmullRomCurve3([\n                    new THREE.Vector3(-topWidth / 2, height / 2, 0),\n                    new THREE.Vector3(0, height / 2 + 0.02, 0),\n                    new THREE.Vector3(topWidth / 2, height / 2, 0),\n                ]);\n\n                const bottomCurve = new THREE.CatmullRomCurve3([\n                    new THREE.Vector3(-bottomWidth / 2, -height / 2, 0),\n                    new THREE.Vector3(0, -height / 2 + 0.02, 0),\n                    new THREE.Vector3(bottomWidth / 2, -height / 2, 0),\n                ]);\n                const topPoints = topCurve.getPoints(20);\n                const bottomPoints = bottomCurve.getPoints(20);\n\n                const shape = new THREE.Shape();\n                shape.moveTo(topPoints[0].x, topPoints[0].y);\n                topPoints.forEach((point) => shape.lineTo(point.x, point.y));\n                bottomPoints.reverse().forEach((point) => shape.lineTo(point.x, point.y));\n                shape.lineTo(topPoints[0].x, topPoints[0].y);\n\n                const geometry = new THREE.ExtrudeGeometry(shape, { depth: 1, bevelEnabled: false });\n                const trapezoid = new THREE.Mesh(geometry, material.clone());\n                trapezoid.userData.layer = layers[i];\n                trapezoid.userData.index = i;\n\n                trapezoid.position.set(0, yOffset - height / 2, 0.05);\n                scene.add(trapezoid);\n                trapezoidArray.push(trapezoid);\n\n                const edgeGeometry = new THREE.EdgesGeometry(geometry);\n                const edgeMaterial = new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: edgeThickness, linecap: 'round', linejoin: 'round' });\n                const edges = new THREE.LineSegments(edgeGeometry, edgeMaterial);\n                edges.position.set(0, yOffset - height / 2, 0.05);\n                scene.add(edges);\n                edgeArray.push(edges);\n\n                const textGeometry = new TextGeometry(layers[i], {\n                    font: font,\n                    size: 0.06,\n                    height: 0.001,\n                    curveSegments: 24,\n                    bevelEnabled: true,\n                    bevelThickness: 0.005,\n                    bevelSize: 0.002,\n                });\n                textGeometry.computeBoundingBox();\n                const textWidth = textGeometry.boundingBox!.max.x - textGeometry.boundingBox!.min.x;\n\n                const textMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n                const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n\n                textMesh.position.set(-textWidth / 2, yOffset - height + 0.12 / 2, 1.05);\n                scene.add(textMesh);\n                textArray.push(textMesh);\n\n                yOffset -= height + distance;\n                topWidth = bottomWidth;\n            }\n\n            setTrapezoids(trapezoidArray);\n            setEdges(edgeArray);\n            setTexts(textArray);\n        });\n    }, [sceneReady, scene, camera, renderer]);\n\n    useEffect(() => {\n        if (!sceneReady || !scene || !camera || !renderer || trapezoids.length === 0) return;\n\n        const raycaster = new THREE.Raycaster();\n        const mouse = new THREE.Vector2(-10, -10); // Initialize to a point outside the view\n        let hoveredTrapezoid: THREE.Mesh | null = null;\n\n        const updateMousePosition = (event: MouseEvent) => {\n            const rect = renderer.domElement.getBoundingClientRect();\n            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n        };\n\n        const onMouseMove = (event: MouseEvent) => {\n            updateMousePosition(event);\n        };\n\n        const onClick = (event: MouseEvent) => {\n            updateMousePosition(event);\n            raycaster.setFromCamera(mouse, camera);\n            const intersects = raycaster.intersectObjects(trapezoids);\n            if (intersects.length > 0) {\n                const intersectedTrapezoid = intersects[0].object as THREE.Mesh;\n                const selectedLayer = intersectedTrapezoid.userData.layer;\n                if (onSelect && selectedLayer) {\n                    onSelect(selectedLayer);\n                    setHoveredIndex(null); // Clear hover state\n                }\n            }\n        };\n\n        const onHover = () => {\n            raycaster.setFromCamera(mouse, camera);\n            const intersects = raycaster.intersectObjects(trapezoids);\n            if (intersects.length > 0) {\n                document.body.style.cursor = 'pointer';\n                const intersectedTrapezoid = intersects[0].object as THREE.Mesh;\n                const index = intersectedTrapezoid.userData.index;\n                if (hoveredTrapezoid !== intersectedTrapezoid) {\n                    setHoveredIndex(index);\n                    hoveredTrapezoid = intersectedTrapezoid;\n                }\n            } else {\n                document.body.style.cursor = 'default';\n                if (hoveredTrapezoid) {\n                    setHoveredIndex(null);\n                    hoveredTrapezoid = null;\n                }\n            }\n        };\n\n        window.addEventListener('mousemove', onMouseMove);\n        window.addEventListener('click', onClick);\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n            onHover();\n            renderer.render(scene, camera);\n        };\n        animate();\n\n        // Initial hover check\n        raycaster.setFromCamera(mouse, camera);\n        onHover();\n\n        return () => {\n            window.removeEventListener('mousemove', onMouseMove);\n            window.removeEventListener('click', onClick);\n            if (mountRef.current) {\n                mountRef.current.removeChild(renderer.domElement);\n            }\n        };\n    }, [sceneReady, scene, camera, renderer, trapezoids]);\n\n    useEffect(() => {\n        if (!sceneReady || trapezoids.length === 0) return;\n\n        trapezoids.forEach((trapezoid, index) => {\n            const material = trapezoid.material as THREE.MeshBasicMaterial;\n            const edgeMaterial = edges[index].material as THREE.LineBasicMaterial;\n            const textMaterial = texts[index].material as THREE.MeshBasicMaterial;\n\n            const currentTheme = theme[themeProp];\n\n            if (index === hoveredIndex && value !== layers[index]) {\n                material.color.set(currentTheme.hover); // hover\n                edgeMaterial.color.set(currentTheme.selected);\n                textMaterial.color.set(currentTheme.selected); // non-selected\n            } else if (value === layers[index]) {\n                material.color.set(currentTheme.selected); // Selected\n                edgeMaterial.color.set(currentTheme.selectedEdges);\n                textMaterial.color.set(0xffffff); // text same color as edge\n            } else {\n                material.color.set(currentTheme.default); // Default\n                edgeMaterial.color.set(currentTheme.selected);\n                textMaterial.color.set(currentTheme.selected); // non-selected\n            }\n            material.needsUpdate = true;\n            edgeMaterial.needsUpdate = true;\n            textMaterial.needsUpdate = true;\n        });\n    }, [hoveredIndex, value, themeProp, sceneReady, trapezoids, edges, texts]);\n\n    return (\n        <div className='flex align-middle justify-center' style={{ width: '100%', minHeight: '400px' }}>\n            <div ref={mountRef} style={{ width: 'calc(100% - 2px)', minHeight: '400px' }}></div>\n        </div>\n    );\n};\n\nexport default LayerSelector3D;\n","import React from 'react';\n\nimport { Color } from '../../types';\n\n\nconst classPrefixList = 'list__';\nconst classPrefixListElement = 'list-element__';\n\ntype ListProps = {\n  title?: string;\n  list: string[];\n  value?: string;\n  onSelect?: (s: string) => void;\n  color?: Color;\n  anchor?: string;\n  block?: boolean;\n  className?: string;\n  theme?: number;\n  grow?: boolean\n};\n\nconst List: React.FC<ListProps> = ({\n  title,\n  list,\n  value,\n  onSelect = () => { },\n  color,\n  theme = 1,\n  className = '',\n  block = false,\n  grow\n}) => {\n  const handleSelectedElement = (element: string) => onSelect(element);\n\n  return (\n    <div\n      className={`${classPrefixList}basis  ${grow && 'flex-1 !flex flex-col'} set-accent-color--${color} selected theme-${theme} ${className} ${block ? 'block' : ''}`}\n      role=\"radiogroup\"\n    >\n      {title && <p className={`theme-${theme}`}>{title}</p>}\n      <div className={`elements ${grow && 'flex-grow'}`}>\n        {list.map(element => (\n          <div\n            key={element}\n            role=\"radio\"\n            aria-checked={value === element}\n            tabIndex={0}\n            className={`${classPrefixListElement}basis theme-${theme} ${value === element ? 'selected ' : ''}`}\n            onClick={() => handleSelectedElement(element)}\n            title={element}\n          >\n            {element}\n          </div>\n\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nexport function formatNumber(value, significantFigures = 5, thousandSeparator = true, prefix = '', suffix = '') {\n  const num = parseFloat(value);\n\n  if (!Number.isFinite(num)) return value;\n\n  const formatted = thousandSeparator\n    ? num.toLocaleString('en', { maximumSignificantDigits: significantFigures })\n    : num.toPrecision(significantFigures);\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  return formatNumber(value, significantFigures, thousandSeparator, prefix, suffix);\n}\n\n\nexport default NumberFormat;\n","import React from 'react';\nimport { Tooltip } from 'antd';\n\nimport { TermDescription } from '@/terms';\n\nimport style from './styles.module.scss';\n\ntype TermProps = {\n  term: string;\n  description?: any;\n  className?: string;\n};\n\ntype TermFormatter = (term: string) => string;\n\nexport const termFactory = (termDescription: TermDescription = {}, termFormatter?: TermFormatter) => {\n  const Term: React.FC<TermProps> = ({ className, term, description }) => {\n    const currentDescription = description || termDescription[term];\n    const formattedTerm = termFormatter\n      ? termFormatter(term)\n      : term;\n\n    if (!currentDescription) {\n      return (<span className={className}>{formattedTerm}</span>);\n    }\n\n    return (\n      <Tooltip title={currentDescription} destroyTooltipOnHide={true}>\n        <span className={`${style.container} ${className ?? ''}`}>{formattedTerm}</span>\n      </Tooltip>\n    );\n  };\n\n  return Term;\n};\n","import { Layer, NeuriteType, VolumeSection, AchConcentration, CellGroup, Theme, GraphTheme, ThemeColors } from './types';\nimport NeuronModelLibrary from './views/2_reconstruction-data/NeuronModelLibrary';\nimport AcetylcholineView from './views/4_validations/Acetylcholine';\n\nexport const layers: Layer[] = [\n  'SLM',\n  'SR',\n  'SP',\n  'SO',\n];\n\nexport const theme: Theme = {\n  1: { default: 0x44405B, hover: 0x7D656F, selected: 0xB68983, selectedEdges: 0xEFAE97 },\n  2: { default: 0x44405B, hover: 0x7B5B6A, selected: 0xB37579, selectedEdges: 0xEA9088 },\n  3: { default: 0x44405B, hover: 0x715970, selected: 0x9F7184, selectedEdges: 0xCC8A99 },\n  4: { default: 0x44405B, hover: 0x625D77, selected: 0x807B92, selectedEdges: 0x9E98AE },\n  5: { default: 0x393D5E, hover: 0x595D79, selected: 0x6E7B97, selectedEdges: 0x8398B5 },\n};\n\nexport const graphTheme: GraphTheme = {\n  red: \"#C46785\",\n  blue: \"#3b4165\",\n  green: \"#7FD982\",\n  purple: \"#7F5482\",\n  yellow: \"#f9f871\",\n};\n\nexport const themeColors: ThemeColors = {\n  experimental_data: \"#EFAE97\",\n  reconstruction_data: \"#EA9088\",\n  digital_reconstruction: \"#CC8A99\",\n  validations: \"#9E98AE\",\n  predictions: \"#8398B5\",\n};\n\n\n\nexport const neuriteTypes: NeuriteType[] = [\n  'all',\n  'axon',\n  'apical',\n  'basal',\n  'dendrite',\n  'soma',\n\n];\n\nexport const volumeSections: VolumeSection[] = [\n  'region',\n  'slice',\n  'cylinder',\n];\n\n\nexport const achConcentrations: AchConcentration[] = [\n  '0um',\n  '10um',\n  '100um'\n];\n\nexport const cellGroup: CellGroup[] = [\n  'All',\n  'Excitatory',\n  'Inhibitory',\n  'SLM_PPA',\n  'SO_BP',\n  'SO_BS',\n  'SO_OLM',\n  'SO_Tri',\n  'SP_AA',\n  'SP_BS',\n  'SP_CCKBC',\n  'SP_Ivy',\n  'SP_PC',\n  'SP_PVBC',\n  'SR_SCA'\n]\n\nexport const defaultSelection = {\n  experimentalData: {\n    layerAnatomy: {\n      layer: 'SLM',\n    },\n    neuronMorphology: {\n      layer: 'SLM',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    neuronElectrophysiology: {\n      etype: 'bAC',\n      etype_instance: '95810035',\n    },\n  },\n  reconstructionData: {\n    volume: {\n      volume_section: 'region',\n    },\n    cellComposition: {\n      volume_section: 'region',\n    },\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: 'CA1_int_bAC_011127HP1_20190329115610',\n    },\n  },\n  digitalReconstruction: {\n    region: {\n      volume_section: 'region',\n    },\n    morphologyLibrary: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      morphology: '011127HP1',\n    },\n    schafferCollateral: {\n      volume_section: 'region',\n      prelayer: 'SC',\n      postlayer: 'All'\n    },\n    connectionAnatomy: {\n      volume_section: 'region',\n      prelayer: 'All',\n      postlayer: 'All'\n    },\n    connectionPhysiology: {\n      volume_section: 'region',\n      prelayer: 'all',\n      postlayer: 'all'\n    },\n    acetylcholineEffectsOnCell: {\n      morphology: \"450290\",\n      etype: \"cNAC\",\n      mtype: \"SO_BP\"\n    },\n    acetylcholineEffectsOnSynapses: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory'\n    },\n\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    NeuronModelLibrary: {\n      mtype: 'SO_BP',\n      etype: 'cNAC',\n      morphology: '980120A_-_Scale_x1.000_y0.900_z1.000'\n    },\n    synapticPathways: {\n      volume_section: 'slice',\n      prelayer: 'All',\n      postlayer: 'All',\n    },\n    acetylcholine: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory',\n    },\n  },\n\n};\n\nexport const neuriteColor: Record<NeuriteType, string> = {\n  all: '#1fcf1f',\n  axon: '#1111ff',\n  apical: '#f442ad',\n  basal: '#ff1111',\n  dendrite: '#ff1111',\n  soma: '#000',\n};\n","import React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\ntype PreselectionProps = {\n  key: string,\n  defaultQuery: any,\n};\n\nconst withPreselection = (WrappedComponent, options: PreselectionProps) => {\n\n  const WithPreselectionComponent: React.FC = () => {\n    const router = useRouter();\n\n    useEffect(() => {\n      if (!router.isReady) return;\n\n      if (!router.query[options.key]) {\n        const query = options.defaultQuery;\n        router.replace({ query }, undefined, { shallow: true });\n      }\n    }, [router.query]);\n\n    return (<WrappedComponent />);\n  };\n\n  return WithPreselectionComponent;\n}\n\nexport default withPreselection;\n","import React, { useState, useMemo, useEffect } from 'react';\nimport Factsheet, { FactsheetEntryType } from '@/components/Factsheet';\n\ntype MetricData = {\n    name: string;\n    values: number | number[];\n};\n\ntype PopulationData = {\n    [key: string]: MetricData[];\n};\n\ntype PopulationProps = {\n    data: PopulationData;\n};\n\nconst Population: React.FC<PopulationProps> = ({ data }) => {\n    const [selectedStep, setSelectedStep] = useState<string>('');\n\n    const steps = useMemo(() => Object.keys(data), [data]);\n\n    useEffect(() => {\n        if (steps.length > 0) {\n            setSelectedStep(steps[0]);\n        }\n    }, [steps]);\n\n    const handleStepChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedStep(event.target.value);\n    };\n\n    const factsheetData = useMemo(() => {\n        if (!selectedStep) return [];\n        const stepData = data[selectedStep];\n        if (!Array.isArray(stepData)) {\n            console.error(`Data for step ${selectedStep} is not an array`);\n            return [];\n        }\n        return stepData.map(item => ({\n            name: item.name,\n            description: `Metric: ${item.name}`, // Adding a default description\n            values: Array.isArray(item.values) ? item.values : [item.values]\n        } as FactsheetEntryType));\n    }, [selectedStep, data]);\n\n    return (\n        <div className=\"population-container\">\n            <div className=\"row\">\n                <div className=\"col-xs-6 flex\">\n\n                    <select\n                        id=\"stepSelect\"\n                        value={selectedStep}\n                        onChange={handleStepChange}\n                        className=\"p-2 border rounded\"\n                    >\n                        {steps.map((step) => (\n                            <option key={step} value={step}>\n                                {step}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n\n            <div className=\"mt-4\">\n                {selectedStep && factsheetData.length > 0 ? (\n                    <Factsheet facts={factsheetData} />\n                ) : (\n                    <p>No data available for the selected step</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Population;","import React, { useEffect, useState, useMemo } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport Filters from '@/layouts/Filters';\nimport DataContainer from '@/components/DataContainer';\nimport { QuickSelectorEntry } from '@/types';\nimport List from '@/components/List';\nimport Collapsible from '@/components/Collapsible';\nimport LayerSelector3D from '@/components/LayerSelector3D';\nimport { Layer } from '@/types'; // Ensure Layer is imported from the correct path\n\nimport { defaultSelection } from '@/constants';\nimport withPreselection from '@/hoc/with-preselection';\nimport { dataPath } from '@/config';\nimport { downloadAsJson } from '@/utils';\nimport DownloadButton from '@/components/DownloadButton';\nimport TraceGraph from '../5_predictions/components/Trace';\nimport modelsData from './neurons.json';\nimport PopulationFactsheet from './acetylcholine/PopulationFactsheet';\n\nconst getUniqueValues = (key: string, filterKey1?: string, filterValue1?: string, filterKey2?: string, filterValue2?: string, filterKey3?: string, filterValue3?: string): string[] => {\n  return Array.from(new Set(modelsData\n    .filter(model =>\n      (!filterKey1 || !filterValue1 || model[filterKey1] === filterValue1) &&\n      (!filterKey2 || !filterValue2 || model[filterKey2] === filterValue2) &&\n      (!filterKey3 || !filterValue3 || model[filterKey3] === filterValue3)\n    )\n    .map(model => model[key]))).sort();\n};\n\nconst getFilteredMorphologies = (mtype: string, etype: string, layer?: Layer): string[] => {\n  return modelsData\n    .filter(model =>\n      (!mtype || model.mtype === mtype) &&\n      (!etype || model.etype === etype) &&\n      (!layer || model.layer === layer)\n    )\n    .map(model => model.morphology);\n};\n\nconst AcetylcholineEffectsOnCellView: React.FC = () => {\n  const router = useRouter();\n  const theme = 3;\n\n  const { query } = router;\n  const [currentMtype, setCurrentMtype] = useState<string>('');\n  const [currentEtype, setCurrentEtype] = useState<string>('');\n  const [currentMorphology, setCurrentMorphology] = useState<string>('');\n  const [singleCellData, setSingleCellData] = useState<any>(null);\n  const [traceData, setTraceData] = useState<any>(null);\n  const [populationData, setPopulationData] = useState<any>(null);\n  const [currentLayer, setCurrentLayer] = useState<Layer | undefined>(modelsData[0]?.layer as Layer | undefined); // Set default layer\n\n  const mtypes = useMemo(() => getUniqueValues('mtype', 'layer', currentLayer?.toString()), [currentLayer]);\n  const etypes = useMemo(() => getUniqueValues('etype', 'mtype', currentMtype, 'layer', currentLayer?.toString()), [currentMtype, currentLayer]);\n  const morphologies = useMemo(() => getFilteredMorphologies(currentMtype, currentEtype, currentLayer), [currentMtype, currentEtype, currentLayer]);\n\n  useEffect(() => {\n    if (Object.keys(query).length === 0) return;\n\n    const newMtypes = getUniqueValues('mtype', 'layer', currentLayer?.toString());\n    const newMtype = query.mtype && typeof query.mtype === 'string' && newMtypes.includes(query.mtype)\n      ? query.mtype\n      : newMtypes[0] || '';\n\n    const newEtypes = getUniqueValues('etype', 'mtype', newMtype, 'layer', currentLayer?.toString());\n    const newEtype = query.etype && typeof query.etype === 'string' && newEtypes.includes(query.etype)\n      ? query.etype\n      : newEtypes[0] || '';\n\n    const newMorphologies = getFilteredMorphologies(newMtype, newEtype, currentLayer);\n    const newMorphology = query.morphology && typeof query.morphology === 'string' && newMorphologies.includes(query.morphology)\n      ? query.morphology\n      : newMorphologies[0] || '';\n\n    setCurrentMtype(newMtype);\n    setCurrentEtype(newEtype);\n    setCurrentMorphology(newMorphology);\n  }, [query, currentLayer]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (currentMorphology) {\n        try {\n          const [singleCellResponse, traceResponse, populationResponse] = await Promise.all([\n            fetch(`${dataPath}/3_digital-reconstruction/acteylcholine-effect-on-cells/${currentMtype}/${currentEtype}/${currentMorphology}/ach_features_processed.json`),\n            fetch(`${dataPath}/3_digital-reconstruction/acteylcholine-effect-on-cells/${currentMtype}/${currentEtype}/${currentMorphology}/trace.json`),\n            fetch(`${dataPath}/3_digital-reconstruction/acteylcholine-effect-on-cells/${currentMtype}/${currentEtype}/ach_population_agg_processed.json`),\n          ]);\n\n          const singleCellData = await singleCellResponse.json();\n          const traceData = await traceResponse.json();\n          const populationData = await populationResponse.json();\n\n          setSingleCellData(singleCellData);\n          setTraceData(traceData);\n          setPopulationData(populationData);\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          setSingleCellData(null);\n          setTraceData(null);\n          setPopulationData(null);\n        }\n      }\n    };\n\n    fetchData();\n  }, [currentMorphology, currentMtype, currentEtype]);\n\n  const setParams = (params: Record<string, string>): void => {\n    const newQuery = {\n      ...router.query,\n      ...params,\n    };\n    router.push({ query: newQuery, pathname: router.pathname }, undefined, { shallow: true });\n  };\n\n  const setMtype = (mtype: string) => {\n    const newEtypes = getUniqueValues('etype', 'mtype', mtype, 'layer', currentLayer?.toString());\n    const newEtype = newEtypes[0] || '';\n    const newMorphologies = getFilteredMorphologies(mtype, newEtype, currentLayer);\n    const newMorphology = newMorphologies[0] || '';\n\n    setParams({\n      mtype,\n      etype: newEtype,\n      morphology: newMorphology,\n    });\n  };\n\n  const setEtype = (etype: string) => {\n    const newMorphologies = getFilteredMorphologies(currentMtype, etype, currentLayer);\n    const newMorphology = newMorphologies[0] || '';\n\n    setParams({\n      etype,\n      morphology: newMorphology,\n    });\n  };\n\n  const setMorphology = (morphology: string) => {\n    setParams({\n      morphology,\n    });\n  };\n\n  const setLayer = (layer: Layer) => {\n    setCurrentLayer(layer);\n    const newMtypes = getUniqueValues('mtype', 'layer', layer.toString());\n    const newMtype = newMtypes[0] || '';\n    const newEtypes = getUniqueValues('etype', 'mtype', newMtype, 'layer', layer.toString());\n    const newEtype = newEtypes[0] || '';\n    const newMorphologies = getFilteredMorphologies(newMtype, newEtype, layer);\n    const newMorphology = newMorphologies[0] || '';\n\n    setParams({\n      layer: layer.toString(),\n      mtype: newMtype,\n      etype: newEtype,\n      morphology: newMorphology,\n    });\n  };\n\n  const qsEntries: QuickSelectorEntry[] = [\n    {\n      title: 'Layer',\n      key: 'layer',\n      values: Array.from(new Set(modelsData.map(model => model.layer))),\n      setFn: setLayer,\n    },\n    {\n      title: 'M-Type',\n      key: 'mtype',\n      values: mtypes,\n      setFn: setMtype,\n    },\n    {\n      title: 'E-Type',\n      key: 'etype',\n      values: etypes,\n      setFn: setEtype,\n    },\n    {\n      title: 'Morphology',\n      key: 'morphology',\n      values: morphologies,\n      setFn: setMorphology,\n    },\n  ];\n\n  return (\n    <>\n      <Filters theme={theme}>\n        <div className=\"row w-100 content-center\">\n          <div className=\"col-xs-12 col-lg-6 content-center\">\n            <Title\n              title=\"Acetylcholine - Effects on Cells\"\n              subtitle=\"Digital Reconstructions\"\n              theme={theme}\n            />\n            <div className='w-full' role=\"information\">\n              <InfoBox>\n                <p>\n                  We applied the  <Link className={`link theme-${theme}`} href={'/reconstruction-data/acetylcholine/'}>dose-effect curves</Link> to predict the effect of acetylcholine on neuron membrane resting potential or firing rate.\n                </p>\n              </InfoBox>\n            </div>\n          </div>\n          <div className=\"col-xs-12 col-lg-6\">\n            <div className=\"selector\">\n              <div className={`selector__column theme-${theme}`}>\n                <div className={`selector__head theme-${theme}`}>\n                  Choose a layer\n                </div>\n                <div className=\"selector__selector-container\">\n                  <LayerSelector3D\n                    value={currentLayer || undefined}\n                    onSelect={setLayer}\n                    theme={theme}\n                  />\n                </div>\n              </div>\n              <div className={`selector__column theme-${theme}`}>\n                <div className={`selector__head theme-${theme}`}>Select reconstruction</div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={mtypes}\n                    value={currentMtype}\n                    title={`M-type ${mtypes.length ? `(${mtypes.length})` : ''}`}\n                    onSelect={setMtype}\n                    theme={theme}\n                  />\n                  <List\n                    block\n                    list={etypes}\n                    value={currentEtype}\n                    title={`E-type ${etypes.length ? `(${etypes.length})` : ''}`}\n                    onSelect={setEtype}\n                    theme={theme}\n                  />\n                  <List\n                    block\n                    list={morphologies}\n                    value={currentMorphology}\n                    title={`Morphology ${morphologies.length ? `(${morphologies.length})` : ''}`}\n                    onSelect={setMorphology}\n                    anchor=\"data\"\n                    theme={theme}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n\n      <DataContainer\n        theme={theme}\n        navItems={[\n          { id: 'singleCellSection', label: 'Single Cell' },\n          { id: 'traceSection', label: 'Trace' },\n          { id: 'populationSection', label: 'Population' },\n        ]}\n        quickSelectorEntries={qsEntries}\n      >\n\n        <Collapsible id=\"singleCellSection\" className=\"mt-4\" title=\"Single Cell\">\n          {singleCellData && (\n            <>\n\n              <PopulationFactsheet data={singleCellData} />\n              <div className=\"mt-4\">\n                <DownloadButton onClick={() => downloadAsJson(singleCellData, `Single-Cell-factsheet.json`)} theme={theme}>\n                  Population Factsheet\n                </DownloadButton>\n              </div>\n            </>\n          )}\n        </Collapsible>\n\n\n        <Collapsible id=\"traceSection\" className=\"mt-4\" title=\"Trace\">\n          <div className=\"graph\">\n            {traceData && <TraceGraph plotData={traceData} />}\n          </div>\n\n          {traceData && (\n            <div className=\"mt-4\">\n              <DownloadButton onClick={() => downloadAsJson(traceData, `${currentMtype}-${currentEtype}-${currentMorphology}-trace.json`)} theme={theme}>\n                Trace data\n              </DownloadButton>\n            </div>\n          )}\n        </Collapsible>\n\n        <Collapsible id=\"populationSection\" className=\"mt-4\" title=\"Population\">\n          {populationData && (\n            <>\n              <PopulationFactsheet data={populationData} />\n              <div className=\"mt-4\">\n                <DownloadButton onClick={() => downloadAsJson(populationData, `Population-factsheet.json`)} theme={theme}>\n                  Population Factsheet\n                </DownloadButton>\n              </div>\n            </>\n          )}\n        </Collapsible>\n\n      </DataContainer>\n\n    </>\n  );\n};\n\nexport default withPreselection(\n  AcetylcholineEffectsOnCellView,\n  {\n    key: 'mtype',\n    defaultQuery: defaultSelection.digitalReconstruction.acetylcholineEffectsOnCell,\n  },\n);\n","import Head from 'next/head';\nimport AcetylcholineView from '@/views/3_digital-reconstructions/AcetylcholineEffectsOnCell';\n\nexport default function AcetylcholinePage() {\n  const metadata = {\n    title: 'Acetylcholine - Effects on Cells | Digital Reconstructions | The Hippocampus Hub',\n    description:\n      'Examine the dose-effect relationship of acetylcholine (ACh) on hippocampal neurons, focusing on membrane potential and firing rate. Analyze the dynamic changes induced by ACh across various cell types.',\n    keywords: [\n      'Acetylcholine',\n      'Neurons',\n      'Dose-Effect',\n      'Membrane Potential',\n      'Firing Rate',\n      'Hippocampus',\n      'Digital Reconstructions',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <AcetylcholineView />\n    </>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport { Loader2 } from 'lucide-react';\nimport dynamic from 'next/dynamic';\nimport { PlotParams } from 'react-plotly.js';\nimport { graphTheme, themeColors } from '@/constants';\n\nconst Plot = dynamic(() => import('react-plotly.js'), { ssr: false }) as React.ComponentType<PlotParams>;\n\ninterface TraceDataProps {\n    plotData?: {\n        name: string;\n        description: string;\n        units: string | null;\n        value_map: { [key: string]: number[] } | number[][];\n    };\n}\n\nconst PlotlyTraceGraph: React.FC<TraceDataProps> = ({ plotData }) => {\n    const [data, setData] = useState<any[]>([]);\n    const [layout, setLayout] = useState<any>({});\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [hasError, setHasError] = useState<boolean>(false);\n    const [hoveredTraceIndex, setHoveredTraceIndex] = useState<number | null>(null);\n    const [allTracesVisible, setAllTracesVisible] = useState<boolean>(true);\n\n    useEffect(() => {\n        if (!plotData || !plotData.value_map || (Array.isArray(plotData.value_map) && plotData.value_map.length === 0) || Object.keys(plotData.value_map).length === 0) {\n            console.log('No plot data available');\n            setIsLoading(false);\n            setHasError(true);\n            return;\n        }\n\n        try {\n            setIsLoading(true);\n            setHasError(false);\n\n            // Prepare data for Plotly\n            let traces;\n            const maxTime = 5000; // Maximum time in milliseconds\n            if (Array.isArray(plotData.value_map)) {\n                traces = plotData.value_map.map((trace, index) => ({\n                    x: Array.from({ length: trace.length }, (_, i) => i * (maxTime / (trace.length - 1))),\n                    y: trace,\n                    type: 'scatter' as const,\n                    mode: 'lines' as const,\n                    name: `Trace ${index + 1}`,\n                    line: {\n                        color: `hsl(${index * 137.5 % 360}, 70%, 50%)`,\n                        width: 1,\n                    },\n                    visible: allTracesVisible ? true : 'legendonly',\n                }));\n            } else {\n                traces = Object.entries(plotData.value_map).map(([key, trace], index) => ({\n                    x: Array.from({ length: trace.length }, (_, i) => i * (maxTime / (trace.length - 1))),\n                    y: trace,\n                    type: 'scatter' as const,\n                    mode: 'lines' as const,\n                    name: key,\n                    line: {\n                        color: `hsl(${index * 137.5 % 360}, 70%, 50%)`,\n                        width: 1,\n                    },\n                    visible: allTracesVisible ? true : 'legendonly',\n                }));\n            }\n\n            setData(traces);\n\n            // Set up the layout\n            setLayout({\n                xaxis: {\n                    title: { text: 'Time(s)', standoff: 20 },\n                    showticklabels: true,\n                    tickmode: 'array',\n                    tickvals: [0, 1000, 2000, 3000, 4000, 5000],\n                    ticktext: ['0 ms', '1', '2', '3', '4', '5'],\n                    range: [0, maxTime],\n                },\n                yaxis: {\n                    title: { text: plotData.units ? `Voltage (${plotData.units})` : 'Voltage', standoff: 40 },\n                    showticklabels: true,\n                },\n                autosize: true,\n                margin: { l: 60, r: 50, b: 100, t: 50, pad: 4 },\n                hovermode: 'x unified' as const,\n                showlegend: true,\n                legend: { orientation: 'h', x: 0, y: 1.2 },\n                plot_bgcolor: '#EFF1F8',\n                paper_bgcolor: '#EFF1F8',\n            });\n\n            setIsLoading(false);\n        } catch (error) {\n            console.error('Error processing plot data:', error);\n            setIsLoading(false);\n            setHasError(true);\n        }\n    }, [plotData, allTracesVisible]);\n\n    const containerStyle = {\n        width: '100%',\n        height: '500px',\n        position: 'relative' as const,\n    };\n\n    const loaderStyle = {\n        position: 'absolute' as const,\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n    };\n\n    const handleLegendHover = (event: any) => {\n        setHoveredTraceIndex(event.curveNumber);\n    };\n\n    const handleLegendUnhover = () => {\n        setHoveredTraceIndex(null);\n    };\n\n    const toggleAllTraces = () => {\n        setAllTracesVisible(!allTracesVisible);\n        const updatedData = data.map(trace => ({\n            ...trace,\n            visible: !allTracesVisible ? true : 'legendonly',\n        }));\n        setData(updatedData);\n    };\n\n    return (\n        <div>\n            <button\n                onClick={toggleAllTraces}\n                style={{\n                    marginBottom: '1rem',\n                    padding: '0.25rem .5rem',\n                    backgroundColor: graphTheme.blue,\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '3px',\n                    cursor: 'pointer'\n                }}\n            >\n                {allTracesVisible ? 'Hide All Traces' : 'Show All Traces'}\n            </button>\n            <div style={containerStyle}>\n                {isLoading ? (\n                    <div style={loaderStyle}>\n                        <Loader2 className=\"w-8 h-8 animate-spin\" />\n                    </div>\n                ) : hasError || !data.length ? (\n                    <p className=\"text-center text-gray-500 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                        No data available.\n                    </p>\n                ) : (\n                    <Plot\n                        data={data}\n                        layout={layout}\n                        useResizeHandler={true}\n                        style={{ width: '100%', height: '100%' }}\n                        config={{ responsive: true }}\n                        onLegendItemClick={() => false}\n                        onLegendItemHover={handleLegendHover}\n                        onLegendItemUnhover={handleLegendUnhover}\n                    />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default PlotlyTraceGraph;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__pHcWR\"};"],"names":["window","__NEXT_P","push","__webpack_require__","replacement","MOhm","components_Unit","value","param","jsx_runtime","jsx","Fragment","Term","termFactory","FactsheetSingleValueEntry","fact","jsxs","div","className","term","name","description","isNil","span","NumberFormat","Unit","units","FactsheetSingleMeanStdEntry","mean","value_map","values","std","formatValue","toFixed","formatNumberWithoutCommas","toString","replace","FactsheetMapValueEntry","maxVal","Math","max","apply","Object","map","s","parseFloat","unitCode","valueColumn","entries","label","barWidthPct","style","width","concat","FactsheetEntry","Array","isArray","components_Factsheet","facts","index","__webpack_exports__","Z","onSelect","theme","themeProp","mountRef","useRef","hoveredIndex","setHoveredIndex","useState","trapezoids","setTrapezoids","edges","setEdges","texts","setTexts","sceneReady","setSceneReady","scene","setScene","camera","setCamera","renderer","setRenderer","trapezoidHeights","SLM","SR","SP","SO","useEffect","current","newScene","THREE","background","aspect","clientWidth","clientHeight","newCamera","frustumSize","position","set","lookAt","zoom","updateProjectionMatrix","newRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","handleResize","height","left","right","top","bottom","addEventListener","removeEventListener","removeChild","material","color","trapezoidArray","edgeArray","textArray","numTrapezoids","layers","length","yOffset","topWidth","totalHeight","reduce","acc","layer","loader","FontLoader","load","basePath","i","angleRad","degToRad","bottomWidth","tan","topCurve","bottomCurve","topPoints","getPoints","bottomPoints","shape","moveTo","x","y","forEach","lineTo","point","reverse","geometry","depth","bevelEnabled","trapezoid","clone","userData","add","edgeGeometry","edgeMaterial","linewidth","linecap","linejoin","textGeometry","TextGeometry","font","size","curveSegments","bevelThickness","bevelSize","computeBoundingBox","textWidth","boundingBox","min","textMaterial","textMesh","raycaster","mouse","hoveredTrapezoid","updateMousePosition","rect","getBoundingClientRect","event","clientX","clientY","onMouseMove","onClick","setFromCamera","intersects","intersectObjects","intersectedTrapezoid","object","selectedLayer","onHover","document","body","cursor","animate","requestAnimationFrame","render","currentTheme","hover","selected","selectedEdges","default","needsUpdate","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","minHeight","ref","title","list","block","grow","handleSelectedElement","element","role","p","aria-checked","tabIndex","significantFigures","thousandSeparator","prefix","suffix","formatNumber","num","Number","isFinite","formatted","toLocaleString","maximumSignificantDigits","toPrecision","termDescription","termFormatter","currentDescription","formattedTerm","Tooltip","destroyTooltipOnHide","graphTheme","red","blue","green","purple","yellow","themeColors","experimental_data","reconstruction_data","digital_reconstruction","validations","predictions","neuriteTypes","volumeSections","achConcentrations","cellGroup","defaultSelection","experimentalData","layerAnatomy","neuronMorphology","mtype","instance","neuronElectrophysiology","etype","etype_instance","reconstructionData","volume","volume_section","cellComposition","neurons","digitalReconstruction","region","morphologyLibrary","morphology","schafferCollateral","prelayer","postlayer","connectionAnatomy","connectionPhysiology","acetylcholineEffectsOnCell","acetylcholineEffectsOnSynapses","ach_concentration","NeuronModelLibrary","synapticPathways","acetylcholine","neuriteColor","all","axon","apical","basal","dendrite","soma","WrappedComponent","options","router","useRouter","isReady","query","key","defaultQuery","undefined","shallow","PopulationFactsheet","data","selectedStep","setSelectedStep","steps","useMemo","keys","factsheetData","stepData","item","console","error","select","id","onChange","target","option","step","Factsheet","getUniqueValues","filterKey1","filterValue1","filterKey2","filterValue2","filterKey3","filterValue3","from","Set","modelsData","filter","model","sort","getFilteredMorphologies","AcetylcholineEffectsOnCell","withPreselection","currentMtype","setCurrentMtype","currentEtype","setCurrentEtype","currentMorphology","setCurrentMorphology","singleCellData","setSingleCellData","traceData","setTraceData","populationData","setPopulationData","currentLayer","setCurrentLayer","mtypes","etypes","morphologies","newMtypes","newMtype","includes","newEtypes","newEtype","newMorphologies","newMorphology","fetchData","singleCellResponse","traceResponse","populationResponse","Promise","fetch","dataPath","json","setParams","newQuery","params","pathname","setMtype","setEtype","setMorphology","setLayer","qsEntries","setFn","Filters","Title","subtitle","InfoBox","Link","href","LayerSelector3D","List","anchor","DataContainer","navItems","quickSelectorEntries","Collapsible","DownloadButton","downloadAsJson","TraceGraph","plotData","AcetylcholinePage","metadata","keywords","author","creator","publisher","Head","meta","content","join","AcetylcholineView","Plot","dynamic","e","then","bind","ssr","setData","layout","setLayout","isLoading","setIsLoading","hasError","setHasError","hoveredTraceIndex","setHoveredTraceIndex","allTracesVisible","setAllTracesVisible","log","traces","trace","_","maxTime","type","mode","line","visible","xaxis","text","standoff","showticklabels","tickmode","tickvals","ticktext","range","yaxis","autosize","margin","l","r","b","t","pad","hovermode","showlegend","legend","orientation","plot_bgcolor","paper_bgcolor","button","updatedData","marginBottom","padding","backgroundColor","border","borderRadius","transform","Loader2","useResizeHandler","config","responsive","onLegendItemClick","onLegendItemHover","curveNumber","onLegendItemUnhover","module","exports"],"sourceRoot":""}