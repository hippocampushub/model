{"version":3,"file":"static/chunks/pages/digital-reconstructions/neurons-32c7d091ee369d34.js","mappings":"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","sources":["webpack://_N_E/?7740","webpack://_N_E/./src/components/ChannelParamPlot/plot.tsx","webpack://_N_E/./src/components/Collapsible/index.tsx","webpack://_N_E/./src/components/ScrollTo/index.tsx","webpack://_N_E/./src/components/DataContainer/index.tsx","webpack://_N_E/./src/components/InfoBox/index.tsx","webpack://_N_E/./src/components/LayerSelector/index.tsx","webpack://_N_E/./src/components/List/index.tsx","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/Title/index.tsx","webpack://_N_E/./src/components/Unit/index.tsx","webpack://_N_E/./src/layouts/Filters/index.tsx","webpack://_N_E/./src/queries/http/index.ts","webpack://_N_E/./src/components/HttpData/index.tsx","webpack://_N_E/./src/components/ChannelParamPlot/index.tsx","webpack://_N_E/./src/components/EtypeFactsheet/index.tsx","webpack://_N_E/./src/components/ModelMorphologyFactsheet/index.tsx","webpack://_N_E/./src/components/NeuronMorphology/index.tsx","webpack://_N_E/./src/views/digitalReconstructions/Neurons.tsx","webpack://_N_E/./src/pages/digital-reconstructions/neurons.tsx","webpack://_N_E/./src/components/EtypeFactsheet/index.module.scss","webpack://_N_E/./src/components/InfoBox/styles.module.scss","webpack://_N_E/./src/components/LayerSelector/styles.module.scss","webpack://_N_E/./src/styles/digital-reconstructions/neurons.module.scss"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/digital-reconstructions/neurons\",\n      function () {\n        return require(\"private-next-pages/digital-reconstructions/neurons.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/digital-reconstructions/neurons\"])\n      });\n    }\n  ","import React, { useRef, useEffect } from 'react';\nimport {\n  Chart,\n  LineElement,\n  PointElement,\n  LineController,\n  CategoryScale,\n  LinearScale,\n  Filler,\n  Legend,\n  Title,\n} from 'chart.js';\nimport { Parser } from 'expr-eval';\n\nimport styles from './styles.module.scss';\n\n\nexport type ChannelParam = {\n  channel: string;\n  parameter: string;\n  distribution: 'uniform' | string;\n  min?: number;\n  max?: number;\n  formula?: string;\n}\n\ntype ChannelParamPlotProps = {\n  channelParam: ChannelParam;\n}\n\nChart.register(\n  LineElement,\n  PointElement,\n  LineController,\n  CategoryScale,\n  LinearScale,\n  Filler,\n  Legend,\n  Title,\n);\n\nconst ChannelParamPlot: React.FC<ChannelParamPlotProps> = ({ channelParam }) => {\n  const canvasEl = useRef<HTMLCanvasElement>(null);\n\n  const createPlot = () => {\n    const plotLength = 9;\n    let maxValue = 0.012;\n    let textBottom = '';\n\n    return new Chart(canvasEl?.current, {\n      type: 'line',\n      data: {\n        datasets: [{\n          fill: 'origin',\n          data: getData(channelParam),\n          label: channelParam.parameter,\n          backgroundColor: 'rgba(255, 177, 193, 0.5)',\n        }],\n        labels: getXAxes(),\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: false,\n            suggestedMax: maxValue * 1.6,\n            suggestedMin: 0,\n          },\n          x: {\n            title: {\n              display: true,\n              text: 'µm',\n            },\n          },\n        },\n        plugins: {\n          title: {\n            font: {\n              size: 12,\n              weight: 'normal',\n            },\n            text: textBottom,\n            position: 'bottom',\n            display: true,\n            padding: 6,\n          },\n          legend: {\n            labels: {\n              boxWidth: 0,\n              font: {\n                size: 12,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    function getXAxes () {\n      // generate scale with steps\n      return Array.apply(null, {\n        length: plotLength,\n      }).map(Function.call, x => x * 100);\n    }\n\n    function getData (parameter) {\n      let arrayValues = [];\n      switch (parameter.distribution) {\n      case 'uniform':\n        const UNIFORM_CONST = 1;\n        arrayValues = new Array(plotLength).fill(UNIFORM_CONST);\n        maxValue = UNIFORM_CONST;\n        textBottom = UNIFORM_CONST.toString();\n        break;\n      default:\n        const parser = new Parser();\n        const equation = parameter.formula\n          .replace(/math\\.exp/g, 'exp')\n          .replace(/\\{/g, '(')\n          .replace(/\\}/g, ')');\n\n        const expr = parser.parse(equation);\n        arrayValues = getXAxes().map(xVal => expr.evaluate({ distance: xVal, value: 1 }));\n        maxValue = Math.max.apply(null, arrayValues);\n        textBottom = parameter.formula;\n        break;\n      }\n\n      return arrayValues;\n    }\n  };\n\n  useEffect(() => {\n    if (!canvasEl) return;\n\n    const plot = createPlot();\n\n    return () => {\n      if (plot) plot.destroy();\n    };\n  }, [canvasEl]);\n\n  return (\n    <div className={styles.plotContainer}>\n      <canvas ref={canvasEl} width=\"320\" height=\"220\" />\n    </div>\n  );\n};\n\n\nexport default ChannelParamPlot;\n","import React, { ReactChild, ReactFragment } from 'react';\nimport { IoIosArrowUp } from 'react-icons/io';\n\n\nconst classPrefix = 'collapsible__';\n\ntype CollapsibleColor = 'red'\n\ntype CollapsibleProps = {\n  collapsed?: boolean;\n  title: string;\n  children: ReactChild | ReactFragment;\n  color?: CollapsibleColor;\n  id?: string;\n  className?: string;\n};\n\nconst Collapsible: React.FC<CollapsibleProps> = ({\n  collapsed,\n  title,\n  children,\n  color = '',\n  className = '',\n  id,\n}) => {\n  const [isCollapsed, setCollapsed] = React.useState(collapsed);\n\n  return (\n    <div\n      id={id}\n      className={`${classPrefix}${isCollapsed ? 'collapsed' : 'expanded'} ${color} ${className}`}\n    >\n      <div\n        className=\"header\"\n        title={title}\n        onClick={() => setCollapsed(!isCollapsed)}\n      >\n        {title}\n        <span className=\"arrow\">\n          <IoIosArrowUp />\n        </span>\n      </div>\n      <div className=\"content\">{children}</div>\n    </div>\n  );\n};\n\nexport default Collapsible;\n","import React, { ReactChild, ReactFragment } from 'react';\nimport { IoIosArrowDown, IoIosArrowUp } from 'react-icons/io';\n\nimport { Direction, Color } from '../../types';\n\n\nconst classPrefix = 'scroll-to__';\n\ntype ScrollToProps = {\n  anchor: string;\n  direction: Direction;\n  children: ReactChild | ReactFragment;\n  color?: Color;\n};\n\nconst ScrollTo: React.FC<ScrollToProps> = ({\n  anchor,\n  direction,\n  children,\n  color = '',\n}) => {\n  const scroll = () => {\n    const target = document.querySelector(`#${anchor}`);\n    if (target) {\n      target.scrollIntoView();\n    }\n  };\n\n  return (\n    <div onClick={scroll} className={`${classPrefix}basis bg-${color}`}>\n      {children}\n      <span className={`${classPrefix}direction`}>\n        {direction === 'up' && <IoIosArrowUp />}\n        {direction === 'down' && <IoIosArrowDown />}\n      </span>\n    </div>\n  );\n};\n\nexport default ScrollTo;\n","import React from 'react';\n\nimport ScrollTo from '../../components/ScrollTo';\n\n\nconst classPrefix = 'data-container__';\n\ntype DataContainerProps = {\n  visible?: boolean;\n  children: React.ReactNode\n};\n\nconst DataContainer: React.FC<DataContainerProps> = ({\n  visible,\n  children,\n}) => {\n  return (\n    <div id=\"data\">\n      {visible && (\n        <div className={`${classPrefix}basis`}>\n          <div className=\"center\">{children}</div>\n          <div className=\"scroll-to\">\n            <ScrollTo anchor=\"filters\" direction=\"up\">\n              Return to selectors\n            </ScrollTo>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DataContainer;\n","import React from 'react';\n\nimport { Color } from '../../types';\nimport styles from './styles.module.scss';\n\n\ntype InfoBoxProps = {\n  title?: string;\n  text: string;\n  color?: Color;\n};\n\nconst InfoBox: React.FC<InfoBoxProps> = ({\n  title,\n  text,\n  color = '',\n}) => {\n  return (\n    <div className={`${styles.container} bg-${color}`}>\n      {title && <h3>{title}</h3>}\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default InfoBox;\n","import React, { ReactChild, ReactFragment } from 'react';\nimport { Layer } from '../../types';\n\nimport styles from './styles.module.scss'\n\n\ntype LayerSelectProps = {\n  activeLayer?: Layer;\n  onLayerSelected?: (layer: Layer) => void;\n};\n\nconst LAYERS: Layer[] = ['SLM', 'SR', 'SP', 'SO'];\n\nconst LayerSelector: React.FC<LayerSelectProps> = ({\n  activeLayer,\n  onLayerSelected = () => {},\n}) => {\n  const selectLayer = (l: Layer): void => onLayerSelected(l);\n\n  return (\n    <div>\n      {LAYERS.map(layer => (\n        <div\n          key={layer}\n          className={`${styles.layer} ${layer === activeLayer ? styles.active : ''}`}\n          onClick={() => selectLayer(layer)}\n        >\n          {layer}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default LayerSelector;\n","import React from 'react';\n\nimport { Color } from '../../types';\n\n\nconst classPrefixList = 'list__';\nconst classPrefixListElement = 'list-element__';\n\ntype ListProps = {\n  title?: string;\n  list: string[];\n  value?: string;\n  onSelect?: (s: string) => void;\n  color?: Color;\n  anchor?: string;\n  block?: boolean;\n  className?: string;\n};\n\nconst List: React.FC<ListProps> = ({\n  title,\n  list,\n  value,\n  onSelect = () => { },\n  color,\n  anchor = '',\n  className = '',\n}) => {\n  const handleSelectedElement = (element: string) => {\n    const target = anchor && document.querySelector(`#${anchor}`);\n    if (target) {\n      window.setTimeout(() => target.scrollIntoView({ block: 'start', inline: 'nearest', behavior: 'smooth' }), 0);\n    }\n    onSelect(element);\n  }\n\n  const id = title ? title.replace(/\\s/g, '') : 'no_title';\n\n  return (\n    <div\n      className={`${classPrefixList}basis bg-${color} ${className}`}\n      role=\"radiogroup\"\n      aria-labelledby={`${classPrefixList}${id}`}\n    >\n      {title && <p>{title}</p>}\n      <div className=\"elements\">\n        {list.map(element => (\n          <div\n            key={element}\n            role=\"radio\"\n            aria-checked={value === element}\n            tabIndex={0}\n            className={`${classPrefixListElement}basis ${value === element ? 'selected' : ''}`}\n            onClick={() => handleSelectedElement(element)}\n            title={element}\n          >\n            {element}\n          </div>\n\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react';\n\nimport isNumber from 'lodash/isNumber';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  if (!isNumber(value)) return value;\n\n  const fixed = parseFloat(value.toPrecision(significantFigures));\n\n  const formatted = thousandSeparator\n    ? fixed.toLocaleString('en')\n    : fixed;\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\n\nexport default NumberFormat;\n","import React from 'react';\n\nimport { Color } from '../../types';\n\n\nconst classPrefix = 'title__';\n\ntype TitleProps = {\n  title?: React.ReactChild;\n  subtitle?: string;\n  primaryColor?: Color;\n  hint?: string;\n  primary?: boolean;\n};\n\nconst Title: React.FC<TitleProps> = ({\n  title,\n  subtitle,\n  hint,\n  primaryColor = 'yellow' as Color,\n  primary,\n}) => {\n  return (\n    <div\n      className={`${classPrefix}basis ${\n        primary ? 'primary' : ''\n      } ${primaryColor}`}\n    >\n      {subtitle && !primary && <h4 className=\"text-white\">{subtitle}</h4>}\n      {title && <h2 role=\"title\" className=\"text-white\">{title}</h2>}\n      {subtitle && primary && <h4 className=\"text-white\">{subtitle}</h4>}\n      {hint && <p dangerouslySetInnerHTML={{ __html: hint }} />}\n    </div>\n  );\n};\n\nexport default Title;\n","import React from 'react';\n\ntype UnitProps = {\n  value?: string;\n}\n\nconst replacement = {\n  MOhm: 'MΩ',\n};\n\nconst Unit: React.FC<UnitProps> = ({ value = '' }) => {\n  return (\n    <>\n      {replacement[value] ?? value}\n    </>\n  );\n};\n\n\nexport default Unit;\n","import React, { ReactChild, ReactFragment } from 'react';\n\nimport ScrollTo from '../../components/ScrollTo';\nimport { Color } from '../../types';\n// import './style.scss';\n\nconst classPrefix = 'filters__';\n\ntype FiltersProps = {\n  children: ReactChild | ReactFragment;\n  backgroundAlt?: boolean;\n  id?: string;\n};\n\nconst Filters: React.FC<FiltersProps> = ({\n  children,\n  backgroundAlt,\n  id = 'filters',\n}) => {\n  return (\n    <div>\n      <div\n        id={id}\n        className={`${classPrefix}basis ${backgroundAlt ? 'background-alt' : ''}`}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Filters;\n","\nimport { basePath } from '../../config';\n\n\nexport const subregionCircuitFactsheetPath = (subregion: string): string => {\n  return `${basePath}/data/model-data/factsheets/REGION/${subregion}/Circuit/factsheet.json`;\n};\n\nexport const regionCircuitFactsheetPath = (): string => {\n  return `${basePath}/data/model-data/factsheets/Circuit/factsheet.json`;\n}\n\nexport const subregionMicrocircuitFactsheetPath = (subregion: string): string => {\n  return `${basePath}/data/model-data/factsheets/REGION/${subregion}/Central/Circuit/factsheet.json`;\n}\n\nexport const etypeFactsheetPath = (\n  instance: string\n): string => {\n  return `${basePath}/data/model-info/${instance}/etype_factsheet.json`;\n}\n\nexport const metypeFactsheetPath = (\n  region: string,\n  mtype: string,\n  etype: string,\n  instance: string,\n) => {\n  return `${basePath}/data/memodel_factsheets/${mtype}/${etype}/${region}/${instance}/me_type_factsheeet.json`;\n}\n\nexport const layerFactsheetPath = (subregion: string, layerNum: number): string => {\n  return `${basePath}/data/model-data/factsheets/REGION/${subregion}/Central/CircuitLayers/${layerNum}/factsheet.json`;\n};\n\nexport const pathwayFactsheetPath = (subregion: string, pathway: string): string => {\n  return `${basePath}/data/model-data/factsheets/REGION/${subregion}/Central/Pathways/${pathway}/factsheet.json`;\n};\n\nexport const expMorphologyFactsheetPath = (morphologyName: string): string => {\n  return `${basePath}/data/exp-morphologies/factsheets/${morphologyName}/morphology_factsheeet.json`;\n};\n\nexport const morphHistogramIndexPath = (region: string, mtype: string) => {\n  return `${basePath}/data/morph-histogram/${region}_Column/${mtype}/histogram-index.json`;\n};\n","import React from 'react';\n\n\ntype HttpDataProps = {\n  path: string;\n  children: (\n    data: any,\n    loading: boolean,\n    error: any,\n  ) => React.ReactNode;\n};\n\nconst HttpData: React.FC<HttpDataProps> = ({ path, children }) => {\n  const [state, setState] = React.useState<{\n    data: any;\n    loading: boolean;\n    error: any;\n  }>({\n    data: null,\n    loading: false,\n    error: null,\n  });\n\n  React.useEffect(() => {\n    if (path) {\n      setState({ ...state, loading: true, data: null });\n      fetch(path)\n        .then(res => res.json())\n        .then(data => setState({ ...state, data, error: false }))\n        .catch(error => setState({ ...state, error, data: null }));\n    }\n  }, [path]);\n\n  if (!path) {\n    return null;\n  }\n\n  if (state.loading || !state.data) {\n    return <p>loading...</p>;\n  }\n  if (state.error) {\n    return <p>An error happened loading the data... Please try again later.</p>;\n  }\n\n  return (\n    <>\n      {children(state.data, state.loading, state.error)}\n    </>\n  );\n};\n\nexport default HttpData;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nexport * from './plot';\n\n\nexport default dynamic(() => import('./plot'), { ssr: false });\n","import React from 'react';\nimport get from 'lodash/get';\nimport groupBy from 'lodash/groupBy';\nimport { Table, Collapse, Popover } from 'antd';\n\nimport NumberFormat from '../NumberFormat';\nimport ChannelParamPlot from '../ChannelParamPlot';\nimport styles from './index.module.scss';\n\n\nconst { Panel } = Collapse;\n\nexport type EtypeFactsheetProps = {\n  data?: any;\n};\n\nconst featureUnit = {\n  voltage_deflection: 'mV',\n  voltage_deflection_begin: 'mV',\n  voltage_base: 'mV',\n  steady_state_voltage: 'mV',\n  spikecount: '',\n  time_to_first_spike: 'ms',\n  time_to_last_spike: 'ms',\n  inv_time_to_first_spike: 'Hz',\n  inv_first_isi: 'Hz',\n  inv_second_isi: 'Hz',\n  inv_third_isi: 'Hz',\n  inv_fourth_isi: 'Hz',\n  inv_fifth_isi: 'Hz',\n  inv_last_isi: 'Hz',\n  mean_frequency: 'ms',\n  ahp_depth: 'mV',\n  AP1_amp: 'mV',\n};\n\nconst featureLabel = {\n  Spikecount: 'spikecount',\n}\n\n\nconst EtypeFactsheet: React.FC<EtypeFactsheetProps> = ({\n  data,\n}) => {\n  // Experimental features table data preparation\n  const expFeatures = data.features;\n\n  const tableData = {};\n  const protocols = [];\n  Object.entries(expFeatures).forEach(([protocol, protocolVal]) => {\n    protocols.push(protocol);\n    Object.entries(protocolVal).forEach(([measurement, measurementVal]) => {\n      Object.entries(measurementVal).sort((f1, f2) => (f1[0] > f2[0] ? 1 : -1)).forEach(([featureName, featureValue]) => {\n        if (!tableData[protocol]) {\n          tableData[protocol] = [];\n        }\n\n        tableData[protocol].push({\n          key: featureName,\n          protocol,\n          measurement,\n          feature: featureLabel[featureName] || featureName,\n          unit: featureUnit[featureName.toLowerCase()],\n          mean: featureValue[0],\n          std: featureValue[1],\n        })\n      });\n    });\n  });\n\n  protocols.sort();\n\n  const tableColumns = [\n    {\n      title: 'Feature',\n      dataIndex: 'feature',\n      render: feature => feature.replace(/\\_/g, ' '),\n    },\n    {\n      title: 'Recording site',\n      dataIndex: 'measurement',\n    },\n    {\n      title: 'Mean',\n      dataIndex: 'mean',\n      render: (mean, row) => <span><NumberFormat value={mean} /> {row.unit}</span>\n    },\n    {\n      title: 'Std',\n      dataIndex: 'std',\n      render: (std, row) => <span><NumberFormat value={std} /> {row.unit}</span>\n    },\n    // {\n    //   title: 'Model fitness',\n    //   dataIndex: 'modelFitness',\n    //   render: modelFitness => <NumberFormat value={modelFitness} />\n    // },\n  ];\n\n  // Channel mechanisms data preparation\n  const channelMechanisms = data.distributions;\n  const sections = Object.keys(channelMechanisms);\n\n  const groupByChannel = (rawChannelParams) => groupBy(rawChannelParams.flat(), 'channel');\n\n  return (\n    <div id=\"etypeFactsheet\" className={styles.container}>\n      <h3>Factsheet</h3>\n      <Collapse\n        className=\"mb-3\"\n        bordered={false}\n        defaultActiveKey={protocols[0]}\n      >\n        {protocols.map(protocol => (\n          <Panel key={protocol} header={<strong>{protocol}</strong>}>\n            <Table\n              dataSource={tableData[protocol]}\n              columns={tableColumns}\n              pagination={false}\n              size=\"small\"\n              tableLayout=\"fixed\"\n              bordered\n            />\n          </Panel>\n        ))}\n      </Collapse>\n\n      <h3>Channel Mechanisms</h3>\n      <div className={styles.mechanisms}>\n        <div className=\"row mb-1\">\n          <div className=\"col-xs-6 col-md-4\"><strong>Sections</strong></div>\n          <div className=\"col-xs-6 col-md-8\"><strong>Mechanisms</strong></div>\n        </div>\n        {sections.map(section => (\n          <div className={`row ${styles.mechanismsRow}`} key={section}>\n            <div className=\"col-xs-6 col-md-4\">{section}</div>\n            <div className=\"col-xs-6 col-md-8\">\n              {Object.entries<any[]>(groupByChannel(channelMechanisms[section])).map(([channel, channelParams]) => (\n                <Popover\n                  key={channel}\n                  title={channel}\n                  content={(\n                    <>\n                      {channelParams.map(channelParam => (\n                        <ChannelParamPlot\n                          key={channelParam.parameter}\n                          channelParam={channelParam}\n                        />\n                      ))}\n                    </>\n                  )}\n                >\n                  <span\n                    className={styles.channelLabel}\n                  >\n                    {channelParams[0].channel}\n                  </span>\n                </Popover>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n\nexport default EtypeFactsheet;\n","import React from 'react';\nimport NumberFormat from '../NumberFormat';\nimport isNil from 'lodash/isNil';\n\nimport Unit from '../Unit';\nimport ModelMorphologyStats from '../../model-morphology-stats.json';\n\n\nconst classPrefix = 'factsheet__';\n\n\ntype MorphologyFactsheetEntryType = {\n  name: string;\n  description?: string;\n  unit?: string;\n  value?: number | string;\n  value_map?: {\n    [key: string]: string | number;\n  };\n};\n\n\ntype MorphologyFactsheetProps = {\n  morphologyName: string;\n  className?: string;\n};\n\n\nconst MorphologyFactsheetSingleValueEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType;\n}> = ({\n  fact\n}) => {\n  return (\n    <div className=\"row mt-1\">\n      <div className=\"col-xs-8 col-sm-4 name\">{fact.name}</div>\n      <div className=\"col-xs-4 col-sm-8 value\">\n        {isNil(fact.value)\n          ? (<span>-</span>)\n          : (<span>\n              <NumberFormat value={fact.value} /> <Unit value={fact.unit} />\n            </span>)\n        }\n      </div>\n    </div>\n  );\n};\n\nconst MorphologyFactsheetEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType\n}> = ({\n  fact\n}) => {\n  return (<MorphologyFactsheetSingleValueEntry fact={fact} />);\n};\n\nconst neuriteTypes = ['all', 'axon', 'apical_dendrite', 'basal_dendrite'];\n\nconst strPrettify = (str) => str ? str.replace(/\\_/g, ' ') : str;\n\nconst MorphologyFactsheet: React.FC<MorphologyFactsheetProps> = ({\n  morphologyName,\n  className = '',\n}) => {\n  const stats = ModelMorphologyStats[morphologyName];\n\n  if (!stats) {\n    return (\n      <p className=\"red\">No morphology stats found</p>\n    );\n  }\n\n  const neuriteHasStats = (neuriteType) => !!stats[neuriteType].max_section_length;\n\n  const getFactsheetEntries = (neuriteType) => {\n    return Object.entries(stats[neuriteType]).map(([statKey, statValue]) => ({\n      name: strPrettify(statKey),\n      unit: (statKey as string).includes('volume') ? 'µm³' : ((statKey as string).includes('length') ? 'µm' : ''),\n      value: statValue\n    }));\n  };\n\n  return (\n    <div id=\"modelMorphologyFactsheet\" className={`${classPrefix}basis ${className}`}>\n      <div className=\"mb-3 mt-3\">\n        <MorphologyFactsheetEntry fact={{\n          name: 'soma diameter',\n          unit: 'µm',\n          value: stats.mean_soma_radius * 2,\n        }} />\n      </div>\n\n      {neuriteTypes.filter(neuriteType => neuriteHasStats(neuriteType)).map(neuriteType => (\n        <div className=\"mb-2\" key={neuriteType}>\n          <strong className=\"text-capitalize\">{strPrettify(neuriteType)}</strong>\n          {getFactsheetEntries(neuriteType).map(fact => (\n            <MorphologyFactsheetEntry key={fact.name} fact={fact as MorphologyFactsheetEntryType} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MorphologyFactsheet;\n","import React from 'react';\nimport dynamic from 'next/dynamic'\n\n\nconst MorphoViewerContainer = dynamic(() => import('./MorphoViewerContainer'), { ssr: false });\n\ntype NeuronMorphologyProps = {\n  path: string;\n};\n\nconst NeuronMorphology: React.FC<NeuronMorphologyProps> = ({ path }) => {\n  return (\n    <MorphoViewerContainer path={path} />\n  );\n};\n\n\nexport default NeuronMorphology;\n","import React from 'react';\n\nimport { useRouter } from 'next/router';\nimport { Button } from 'antd';\n\nimport { etypeFactsheetPath } from '../../queries/http';\nimport Title from '../../components/Title';\nimport LayerSelector from '../../components/LayerSelector';\nimport InfoBox from '../../components/InfoBox';\nimport Filters from '../../layouts/Filters';\nimport HttpData from '../../components/HttpData';\nimport DataContainer from '../../components/DataContainer';\nimport { Layer } from '../../types';\nimport List from '../../components/List';\nimport Collapsible from '../../components/Collapsible';\nimport EtypeFactsheet from '../../components/EtypeFactsheet';\nimport ModelMorphologyFactsheet from '../../components/ModelMorphologyFactsheet';\nimport NeuronMorphology from '../../components/NeuronMorphology';\nimport { basePath } from '../../config';\nimport models from '../../models.json';\n\nimport styles from '../../styles/digital-reconstructions/neurons.module.scss';\n\n\nconst modelMorphologyRe = /^[a-zA-Z0-9]+\\_[a-zA-Z0-9]+\\_[a-zA-Z0-9]+\\_(.+)\\_[a-zA-Z0-9]+$/;\n\n\nconst Neurons: React.FC = () => {\n  const router = useRouter();\n\n  const query = {\n    ...router?.query\n  };\n\n  const currentLayer: Layer = query.layer as Layer;\n  const currentMtype: string = query.mtype as string;\n  const currentEtype: string = query.etype as string;\n  const currentInstance: string = query.instance as string;\n\n  const setParams = (params: Record<string, string>): void => {\n    const query = {\n      ...{\n        layer: currentLayer,\n        mtype: currentMtype,\n        etype: currentEtype,\n        instance: currentInstance,\n      },\n      ...params,\n    };\n    router.push({ query, pathname: router.pathname }, undefined, { shallow: true });\n  };\n\n  const setLayer = (layer: Layer) => {\n    setParams({\n      layer,\n      mtype: null,\n      etype: null,\n      instance: null,\n    })\n  };\n  const setMtype = (mtype: string) => {\n    setParams({\n      mtype,\n      etype: null,\n      instance: null,\n    })\n  };\n  const setEtype = (etype: string) => {\n    setParams({\n      etype,\n      instance: null,\n    })\n  };\n  const setInstance = (instance: string) => {\n    setParams({ instance })\n  };\n\n  const mtypes = currentLayer\n    ? models\n      .filter(model => model.layer === currentLayer)\n      .map(model => model.mtype)\n      .reduce((acc, cur) => acc.includes(cur) ? acc : [...acc, cur], [])\n      .sort()\n    : [];\n\n  const etypes = currentMtype\n    ? models\n      .filter(model => model.mtype === currentMtype)\n      .map(model => model.etype)\n      .reduce((acc, cur) => acc.includes(cur) ? acc : [...acc, cur], [])\n      .sort()\n    : [];\n\n  const instances = currentEtype\n    ? models\n      .filter(model => model.mtype === currentMtype && model.etype === currentEtype)\n      .map(model => model.name)\n      .sort()\n    : [];\n\n  const getMorphologyDistribution = (morphologyResource: any) => {\n    return morphologyResource.distribution.find((d: any) => d.name.match(/\\.asc$/i));\n  };\n\n  const memodelArchiveHref = `https://object.cscs.ch/v1/AUTH_c0a333ecf7c045809321ce9d9ecdfdea/hippocampus_optimization/rat/CA1/v4.0.5/optimizations_Python3/${currentInstance}/${currentInstance}.zip?bluenaas=true`;\n\n  const morphologyName = currentInstance\n    ? currentInstance.match(modelMorphologyRe)[1]\n    : null;\n\n  return (\n    <>\n      <Filters>\n        <div className=\"row bottom-xs w-100\">\n          <div className=\"col-xs-12 col-lg-6\">\n            <Title\n              primaryColor=\"grey-1\"\n              title={<span>Neurons</span>}\n              subtitle=\"Digital Reconstructions\"\n            />\n            <InfoBox\n              color=\"grey-1\"\n              text=\"We reconstructed the 3D morphology of single neurons and classified them into morphological types (m-types). In addition, we recorded electrical traces from the same cell types and classified the traces into electrical types (e-types). Finally, we mapped the e-types expressed in each m-type to account for the observed diversity of morpho-electrical subtypes (me-types).\"\n            />\n          </div>\n          <div className=\"col-xs-12 col-lg-6\">\n            <div className={styles.selector}>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>1. Choose a layer</div>\n                <div className={styles.selectorBody}>\n                  <LayerSelector\n                    activeLayer={currentLayer}\n                    onLayerSelected={setLayer}\n                  />\n                </div>\n              </div>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>2. Select model</div>\n                <div className={styles.selectorBody}>\n                  <List\n                    className=\"mb-2\"\n                    list={mtypes}\n                    value={currentMtype}\n                    title={`M-type ${mtypes.length ? '(' + mtypes.length + ')' : ''}`}\n                    color=\"grey-1\"\n                    onSelect={setMtype}\n                  />\n                  <List\n                    className=\"mb-2\"\n                    list={etypes}\n                    value={currentEtype}\n                    title={`E-type ${etypes.length ? '(' + etypes.length + ')' : ''}`}\n                    color=\"grey-1\"\n                    onSelect={setEtype}\n                  />\n                  <List\n                    list={instances}\n                    value={currentInstance}\n                    title={`ME-type instance ${instances.length ? '(' + instances.length + ')' : ''}`}\n                    color=\"grey-1\"\n                    onSelect={setInstance}\n                    anchor=\"data\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <DataContainer visible={!!currentInstance}>\n        <Collapsible\n          className=\"mt-4\"\n          title={`Model instance ${currentInstance} Factsheet`}\n        >\n          <h3>Anatomy</h3>\n          <ModelMorphologyFactsheet morphologyName={morphologyName} />\n\n          <div className=\"row end-xs mt-3 mb-4\">\n            <div className=\"col\">\n              <Button\n                type=\"primary\"\n                download\n                href={memodelArchiveHref}\n              >\n                Download model\n              </Button>\n            </div>\n          </div>\n\n          <h3 className=\"mb-3\">Morphology</h3>\n          <NeuronMorphology path={`${basePath}/data/model-morphologies-swc/${morphologyName}.swc`} />\n          <div className=\"row end-xs mt-3 mb-3\">\n            <div className=\"col\">\n              <Button\n                type=\"primary\"\n                download\n                href={`${basePath}/data/model-morphologies-asc/${morphologyName}.asc`}\n              >\n                Download morphology\n              </Button>\n            </div>\n          </div>\n        </Collapsible>\n\n        <Collapsible className=\"mt-4\" title={`E-Type ${currentEtype} Factsheet`}>\n          <HttpData path={etypeFactsheetPath(currentInstance)}>\n            {data => (\n              <>\n                <EtypeFactsheet data={data} />\n                <div className=\"text-right mt-3 mb-3\">\n                  <Button\n                    type=\"primary\"\n                    href={etypeFactsheetPath(currentInstance)}\n                    download\n                  >\n                    Download factsheet\n                  </Button>\n                </div>\n              </>\n            )}\n          </HttpData>\n          {/* TODO: add experimental traces used for model fitting */}\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default Neurons;\n","import React from 'react';\n\nimport NeuronsView from '../../views/digitalReconstructions/Neurons';\n\n\nexport default function About() {\n  return (\n    <NeuronsView />\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mechanisms\":\"EtypeFactsheet_mechanisms__MSkxL\",\"mechanismsRow\":\"EtypeFactsheet_mechanismsRow__o9VGt\",\"channelLabel\":\"EtypeFactsheet_channelLabel__0o0Fq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__99_wH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layer\":\"styles_layer__uRzj5\",\"active\":\"styles_active__dKoqz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"neurons_selector__IUqaN\",\"selectorColumn\":\"neurons_selectorColumn__C2ulI\",\"selectorHead\":\"neurons_selectorHead__mler4\",\"selectorBody\":\"neurons_selectorBody__Rw3BT\"};"],"names":["window","__NEXT_P","push","Chart","LineElement","PointElement","LineController","CategoryScale","LinearScale","Filler","Legend","Title","channelParam","canvasEl","useRef","useEffect","plot","getXAxes","Array","apply","length","plotLength","map","Function","call","x","maxValue","textBottom","current","type","data","datasets","fill","parameter","arrayValues","distribution","toString","parser","Parser","equation","formula","replace","expr","parse","xVal","evaluate","distance","value","Math","max","getData","label","backgroundColor","labels","options","scales","y","beginAtZero","suggestedMax","suggestedMin","title","display","text","plugins","font","size","weight","position","padding","legend","boxWidth","createPlot","destroy","div","className","styles","canvas","ref","width","height","collapsed","children","color","id","React","isCollapsed","setCollapsed","onClick","span","IoIosArrowUp","classPrefix","anchor","direction","target","document","querySelector","scrollIntoView","IoIosArrowDown","visible","ScrollTo","h3","p","LAYERS","activeLayer","onLayerSelected","layer","selectLayer","classPrefixList","list","onSelect","role","aria-labelledby","element","aria-checked","tabIndex","handleSelectedElement","setTimeout","block","inline","behavior","significantFigures","thousandSeparator","prefix","suffix","isNumber","fixed","parseFloat","toPrecision","formatted","toLocaleString","subtitle","hint","primaryColor","primary","h4","h2","dangerouslySetInnerHTML","__html","replacement","MOhm","backgroundAlt","etypeFactsheetPath","instance","basePath","path","loading","error","state","setState","fetch","then","res","json","catch","dynamic","ssr","Panel","Collapse","featureUnit","voltage_deflection","voltage_deflection_begin","voltage_base","steady_state_voltage","spikecount","time_to_first_spike","time_to_last_spike","inv_time_to_first_spike","inv_first_isi","inv_second_isi","inv_third_isi","inv_fourth_isi","inv_fifth_isi","inv_last_isi","mean_frequency","ahp_depth","AP1_amp","featureLabel","Spikecount","expFeatures","features","tableData","protocols","Object","entries","forEach","protocol","protocolVal","measurement","measurementVal","sort","f1","f2","featureName","featureValue","key","feature","unit","toLowerCase","mean","std","tableColumns","dataIndex","render","row","NumberFormat","channelMechanisms","distributions","sections","keys","bordered","defaultActiveKey","header","strong","Table","dataSource","columns","pagination","tableLayout","section","rawChannelParams","groupBy","flat","channel","channelParams","Popover","content","ChannelParamPlot","MorphologyFactsheetSingleValueEntry","fact","name","isNil","Unit","MorphologyFactsheetEntry","neuriteTypes","strPrettify","str","morphologyName","stats","ModelMorphologyStats","getFactsheetEntries","neuriteType","statKey","statValue","includes","mean_soma_radius","filter","neuriteHasStats","max_section_length","MorphoViewerContainer","modelMorphologyRe","router","useRouter","query","currentLayer","currentMtype","mtype","currentEtype","etype","currentInstance","setParams","params","pathname","undefined","shallow","mtypes","models","model","reduce","acc","cur","etypes","instances","memodelArchiveHref","match","Filters","InfoBox","LayerSelector","List","DataContainer","Collapsible","ModelMorphologyFactsheet","Button","download","href","NeuronMorphology","HttpData","EtypeFactsheet","About","NeuronsView","module","exports"],"sourceRoot":""}