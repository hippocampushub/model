{"version":3,"file":"static/chunks/pages/validations/schaffer-collaterals-1-72361f9c1399bdf4.js","mappings":"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","sources":["webpack://_N_E/?5504","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/views/4_validations/schaffer-collaterals-1/SCDistibutionGraph.tsx","webpack://_N_E/./src/views/4_validations/schaffer-collaterals-1/SynapsesDensityProfileGraph.tsx","webpack://_N_E/./src/views/4_validations/SchafferCollaterals_1.tsx","webpack://_N_E/./src/pages/validations/schaffer-collaterals-1.tsx","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/validations/schaffer-collaterals-1\",\n      function () {\n        return require(\"private-next-pages/validations/schaffer-collaterals-1.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/validations/schaffer-collaterals-1\"])\n      });\n    }\n  ","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import { Layer, NeuriteType, VolumeSection, AchConcentration, CellGroup, Theme, GraphTheme, ThemeColors } from './types';\nimport NeuronModelLibrary from './views/2_reconstruction-data/NeuronModelLibrary';\nimport AcetylcholineView from './views/4_validations/Acetylcholine';\n\nexport const layers: Layer[] = [\n  'SLM',\n  'SR',\n  'SP',\n  'SO',\n];\n\nexport const theme: Theme = {\n  1: { default: 0x44405B, hover: 0x7D656F, selected: 0xB68983, selectedEdges: 0xEFAE97 },\n  2: { default: 0x44405B, hover: 0x7B5B6A, selected: 0xB37579, selectedEdges: 0xEA9088 },\n  3: { default: 0x44405B, hover: 0x715970, selected: 0x9F7184, selectedEdges: 0xCC8A99 },\n  4: { default: 0x44405B, hover: 0x625D77, selected: 0x807B92, selectedEdges: 0x9E98AE },\n  5: { default: 0x393D5E, hover: 0x595D79, selected: 0x6E7B97, selectedEdges: 0x8398B5 },\n};\n\nexport const graphTheme: GraphTheme = {\n  red: \"#C46785\",\n  blue: \"#3b4165\",\n  green: \"#7FD982\",\n  purple: \"#7F5482\",\n  yellow: \"#f9f871\",\n};\n\nexport const themeColors: ThemeColors = {\n  experimental_data: \"#EFAE97\",\n  reconstruction_data: \"#EA9088\",\n  digital_reconstruction: \"#CC8A99\",\n  validations: \"#9E98AE\",\n  predictions: \"#8398B5\",\n};\n\n\n\nexport const neuriteTypes: NeuriteType[] = [\n  'all',\n  'axon',\n  'apical',\n  'basal',\n  'dendrite',\n  'soma',\n\n];\n\nexport const volumeSections: VolumeSection[] = [\n  'region',\n  'slice',\n  'cylinder',\n];\n\n\nexport const achConcentrations: AchConcentration[] = [\n  '0um',\n  '10um',\n  '100um'\n];\n\nexport const cellGroup: CellGroup[] = [\n  'All',\n  'Excitatory',\n  'Inhibitory',\n  'SLM_PPA',\n  'SO_BP',\n  'SO_BS',\n  'SO_OLM',\n  'SO_Tri',\n  'SP_AA',\n  'SP_BS',\n  'SP_CCKBC',\n  'SP_Ivy',\n  'SP_PC',\n  'SP_PVBC',\n  'SR_SCA'\n]\n\nexport const defaultSelection = {\n  experimentalData: {\n    layerAnatomy: {\n      layer: 'SLM',\n    },\n    neuronMorphology: {\n      layer: 'SLM',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    neuronElectrophysiology: {\n      etype: 'bAC',\n      etype_instance: '95810035',\n    },\n  },\n  reconstructionData: {\n    volume: {\n      volume_section: 'region',\n    },\n    cellComposition: {\n      volume_section: 'region',\n    },\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: 'CA1_int_bAC_011127HP1_20190329115610',\n    },\n  },\n  digitalReconstruction: {\n    region: {\n      volume_section: 'region',\n    },\n    morphologyLibrary: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      morphology: '011127HP1',\n    },\n    schafferCollateral: {\n      volume_section: 'region',\n      prelayer: 'SC',\n      postlayer: 'All'\n    },\n    connectionAnatomy: {\n      volume_section: 'region',\n      prelayer: 'All',\n      postlayer: 'All'\n    },\n    connectionPhysiology: {\n      volume_section: 'region',\n      prelayer: 'all',\n      postlayer: 'all'\n    },\n    acetylcholineEffectsOnCell: {\n      morphology: \"450290\",\n      etype: \"cNAC\",\n      mtype: \"SO_BP\"\n    },\n    acetylcholineEffectsOnSynapses: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory'\n    },\n\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    NeuronModelLibrary: {\n      mtype: 'SO_BP',\n      etype: 'cNAC',\n      morphology: '980120A_-_Scale_x1.000_y0.900_z1.000'\n    },\n    synapticPathways: {\n      volume_section: 'slice',\n      prelayer: 'All',\n      postlayer: 'All',\n    },\n    acetylcholine: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory',\n    },\n  },\n\n};\n\nexport const neuriteColor: Record<NeuriteType, string> = {\n  all: '#1fcf1f',\n  axon: '#1111ff',\n  apical: '#f442ad',\n  basal: '#ff1111',\n  dendrite: '#ff1111',\n  soma: '#000',\n};\n","import React, { useEffect, useRef } from 'react';\nimport {\n    Chart,\n    BarController,\n    CategoryScale,\n    LinearScale,\n    LogarithmicScale,\n    BarElement,\n    Title,\n\n} from 'chart.js';\n\nimport { graphTheme } from '@/constants';\n\nimport { downloadAsJson } from '@/utils';\nimport DownloadButton from '@/components/DownloadButton';\n\nChart.register(\n    BarController,\n    CategoryScale,\n    LinearScale,\n    LogarithmicScale,\n    BarElement,\n    Title\n);\n\n// Define the custom scale outside of the component\nclass CustomLogarithmicScale extends LogarithmicScale {\n    static id = 'customLogarithmic';\n\n    buildTicks() {\n        const ticks: number[] = [];\n        let power = Math.floor(Math.log10(this.min));\n        const maxPower = Math.ceil(Math.log10(this.max));\n\n        while (power <= maxPower) {\n            ticks.push(Math.pow(10, power));\n            power += 1;\n        }\n\n        return ticks.map(tick => ({ value: tick }));\n    }\n}\n\n// Register the custom scale\nChart.register(CustomLogarithmicScale);\n\nconst formatScientificNotation = (value: number): string => {\n    if (value === 0) return '0';\n    const exponent = Math.floor(Math.log10(Math.abs(value)));\n    const mantissa = value / Math.pow(10, exponent);\n    const roundedMantissa = Math.round(mantissa * 100) / 100;\n    const superscriptDigits = ['⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹'];\n    const superscriptExponent = Math.abs(exponent).toString().split('').map(digit => superscriptDigits[parseInt(digit)]).join('');\n    return `${roundedMantissa}×10${exponent < 0 ? '⁻' : ''}${superscriptExponent}`;\n};\n\n// Add this type declaration before the component\ntype CustomChartType = Chart & {\n    scales: {\n        y: CustomLogarithmicScale;\n    };\n};\n\nexport type SCDistibutionGraphProps = {\n    data: any; // The JSON data to be visualized\n    xAxisTitle?: string;\n    yAxisTitle?: string;\n    theme?: number;\n    isLogarithmic?: boolean; // New prop to determine if y-axis should be logarithmic\n    xTickInterval?: number; // New optional prop for tick interval on x-axis\n};\n\nconst SCDistibutionGraph: React.FC<SCDistibutionGraphProps> = ({\n    data,\n    xAxisTitle,\n    yAxisTitle,\n    theme,\n    isLogarithmic = false, // Default value is false\n    xTickInterval, // New optional prop\n}) => {\n    const chartRef = useRef<HTMLCanvasElement | null>(null);\n    const chartInstance = useRef<Chart | null>(null); // Ref to keep track of the chart instance\n\n    const renderChart = () => {\n        if (chartRef.current && data) {\n            const ctx = chartRef.current.getContext('2d');\n            if (ctx) {\n                if (chartInstance.current) {\n                    chartInstance.current.destroy(); // Destroy previous chart instance before re-rendering\n                }\n\n                chartInstance.current = new Chart(ctx, {\n                    type: 'bar',\n                    data: {\n                        labels: data.bins.map((bin: number) => bin.toFixed(2)), // Bins for x-axis\n                        datasets: [\n                            {\n                                label: data.name,\n                                data: data.counts,\n                                backgroundColor: graphTheme.blue,\n                            },\n                        ],\n                    },\n                    options: {\n                        responsive: true,\n                        scales: {\n                            x: {\n                                type: 'category',\n                                title: {\n                                    display: !!xAxisTitle,\n                                    text: xAxisTitle || '',\n                                },\n                                ticks: {\n                                    autoSkip: false, // Ensure no ticks are skipped if `xTickInterval` is provided\n                                    callback: (value, index) => {\n                                        // If xTickInterval is set, only show labels at specified intervals\n                                        if (xTickInterval && index % xTickInterval !== 0) {\n                                            return '';\n                                        }\n                                        return value;\n                                    },\n                                    maxRotation: 0, // Prevent slanted text\n                                    minRotation: 0, // Prevent slanted text\n                                    align: 'center', // Ensure numbers are centered and straight\n                                },\n                            },\n                            y: {\n                                type: isLogarithmic ? 'customLogarithmic' : 'linear',\n                                title: {\n                                    display: !!yAxisTitle,\n                                    text: yAxisTitle || '',\n                                },\n                                min: 0,\n                                ticks: {\n                                    callback: function (value, index, values) {\n                                        if (isLogarithmic) {\n                                            return formatScientificNotation(Number(value));\n                                        }\n                                        return value;\n                                    }\n                                }\n                            } as any, // Add type assertion here\n                        },\n                        plugins: {\n                            title: {\n                                display: false,\n                                text: data.description,\n                            },\n                            tooltip: {\n                                enabled: true,\n                            },\n                        },\n                    },\n                }) as CustomChartType; // Add type assertion here\n            }\n        }\n    };\n\n    useEffect(() => {\n        renderChart();\n\n        const handleResize = () => {\n            if (chartInstance.current) {\n                chartInstance.current.resize();\n            }\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        // Cleanup on component unmount\n        return () => {\n            if (chartInstance.current) {\n                chartInstance.current.destroy();\n            }\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [data, xAxisTitle, yAxisTitle, isLogarithmic, xTickInterval]); // Include xTickInterval in the dependency array\n\n    return (\n        <div>\n            <div className=\"graph\">\n                <canvas ref={chartRef} />\n            </div>\n            <div className=\"mt-4\">\n                <DownloadButton theme={theme} onClick={() => downloadAsJson(data, `${data.name}.json`)}>\n                    {data.name}\n                </DownloadButton>\n            </div>\n        </div>\n    );\n};\n\nexport default SCDistibutionGraph;\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n    Chart,\n    LineController,\n    ScatterController,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Title,\n} from 'chart.js';\n\nimport { graphTheme } from '@/constants';\nimport { downloadAsJson } from '@/utils';\nimport DownloadButton from '@/components/DownloadButton';\n\nimport { dataPath } from '@/config';\n\nChart.register(\n    LineController,\n    ScatterController,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Title\n);\n\nexport type SynapsesDensityProfileGraphProps = {\n    theme?: number;\n};\n\ninterface SynapseDensityProfileData {\n    value_map: {\n        radial_axis: { [key: string]: number };\n        model_data: { [key: string]: number };\n        exp_data: { [key: string]: number };\n    };\n}\n\nconst SynapsesDensityProfileGraph: React.FC<SynapsesDensityProfileGraphProps> = ({ theme }) => {\n    const chartRef = useRef<HTMLCanvasElement | null>(null);\n    const chartInstanceRef = useRef<Chart | null>(null);\n    const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n    const [data, setData] = useState<SynapseDensityProfileData | null>(null); // Specify the type\n\n    useEffect(() => {\n        fetch(dataPath + '/4_validations/schaffer-collaterals-1/anatomy/synapse-density-profile.json')\n            .then((response) => response.json())\n            .then((data: SynapseDensityProfileData) => setData(data)); // Explicitly type the fetched data\n    }, []);\n\n    useEffect(() => {\n        const updateWindowSize = () => {\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        };\n\n        updateWindowSize();\n        window.addEventListener('resize', updateWindowSize);\n        return () => window.removeEventListener('resize', updateWindowSize);\n    }, []);\n\n    useEffect(() => {\n        if (chartRef.current && windowSize.width > 0 && data) {\n            const ctx = chartRef.current.getContext('2d');\n\n            if (!ctx) return;\n\n            if (chartInstanceRef.current) {\n                chartInstanceRef.current.destroy();\n            }\n\n            const radialAxis = Object.values(data.value_map.radial_axis).map(Number);\n            const modelData = Object.entries(data.value_map.model_data).map(([key, value]) => ({\n                y: radialAxis[Number(key)],\n                x: Number(value)\n            }));\n            const expData = Object.entries(data.value_map.exp_data).map(([key, value]) => ({\n                y: radialAxis[Number(key)],\n                x: Number(value)\n            }));\n\n            chartInstanceRef.current = new Chart(ctx, {\n                type: 'scatter',\n                data: {\n                    datasets: [\n                        {\n                            label: 'Model Data',\n                            data: modelData,\n                            borderColor: 'black',\n                            backgroundColor: 'black',\n                            showLine: true,\n                            pointRadius: 0,\n                        },\n                        {\n                            label: 'Experimental Data',\n                            data: expData,\n                            borderColor: graphTheme.red,\n                            backgroundColor: 'red',\n                            showLine: true,\n                            pointRadius: 0,\n                        },\n                    ],\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        x: {\n                            type: 'linear',\n                            position: 'bottom',\n                            title: {\n                                display: true,\n                                text: 'Synapses/μm³',\n                            },\n                            min: 0,\n                            max: 0.025,\n                        },\n                        y: {\n                            type: 'linear',\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'Radial axis',\n                            },\n                            min: 0,\n                            max: 1,\n                        },\n                    },\n                    plugins: {\n                        title: {\n                            display: false,\n                            text: 'PDF',\n                        },\n                    },\n                },\n            });\n        }\n    }, [chartRef, windowSize, data]);\n\n    return (\n        <div>\n            <div className=\"graph flex justify-center items-center\">\n                <div className=\"w-1/2 h-[500px]\">\n                    <canvas ref={chartRef} />\n                </div>\n            </div>\n            <div className=\"mt-4\">\n                <DownloadButton theme={theme} onClick={() => data && downloadAsJson(data, `synapse-density-profile.json`)}>\n                    Synapse Density Profile Data\n                </DownloadButton>\n            </div>\n        </div>\n    );\n};\n\nexport default SynapsesDensityProfileGraph;","import React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\n\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\n\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\n\nimport SCDistibutionGraph from './schaffer-collaterals-1/SCDistibutionGraph';\nimport SynapseDensityProfileGraph from './schaffer-collaterals-1/SynapsesDensityProfileGraph';\n\nimport { dataPath } from '@/config';\n\ninterface JsonDataItem {\n    name: string;\n    // Add other properties as needed\n}\n\ninterface JsonData {\n    SynapsesConvergenceForPyramidalCells: JsonDataItem | null;\n    SynapsesConvergenceForPyramidalCellsTwo: JsonDataItem | null;\n    NumberOfSynapsesPerConections: JsonDataItem | null;\n    Divergence: JsonDataItem | null;\n    ESPS_IPSPLatency: JsonDataItem | null;\n    HalfWidth: JsonDataItem | null;\n    PSCRatioFromSCToCB1RPlus: JsonDataItem | null;\n    PSCRatioFromSCToCB1RMinus: JsonDataItem | null;\n    PSPAmplitude: JsonDataItem | null;\n    RiseTime: JsonDataItem | null;\n    TauDecay: JsonDataItem | null;\n}\n\nconst SchafferCollateralsView: React.FC = () => {\n    const theme = 4;\n    const [jsonData, setJsonData] = useState<JsonData>({\n        SynapsesConvergenceForPyramidalCells: null,\n        SynapsesConvergenceForPyramidalCellsTwo: null,\n        NumberOfSynapsesPerConections: null,\n        Divergence: null,\n        ESPS_IPSPLatency: null,\n        HalfWidth: null,\n        PSCRatioFromSCToCB1RPlus: null,\n        PSCRatioFromSCToCB1RMinus: null,\n        PSPAmplitude: null,\n        RiseTime: null,\n        TauDecay: null\n    });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const files = [\n                dataPath + '/4_validations/schaffer-collaterals-1/anatomy/synapse-convergence-for-pyramidal-cells.json',\n                dataPath + '/4_validations/schaffer-collaterals-1/anatomy/synapse-convergence-for-pyramidal-cells_2.json',\n                dataPath + '/4_validations/schaffer-collaterals-1/anatomy/number-of-synapse-per-connection.json',\n                dataPath + '/4_validations/schaffer-collaterals-1/anatomy/divergence.json',\n                dataPath + '/4_validations/schaffer-collaterals-1/physiology/epsp-ipsp-latency-distribution.json',\n                dataPath + '/4_validations/schaffer-collaterals-1/physiology/half-width-distribution.json',\n                dataPath + '/4_validations/schaffer-collaterals-1/physiology/PSC-ratio-distribution-from-sc-to-cb1r+.json',\n                dataPath + '/4_validations/schaffer-collaterals-1/physiology/PSC-ratio-distribution-from-sc-to-cb1r-.json',\n                dataPath + '/4_validations/schaffer-collaterals-1/physiology/psp-amplitudes-distribution.json',\n                dataPath + '/4_validations/schaffer-collaterals-1/physiology/rise-time-distribution.json',\n                dataPath + '/4_validations/schaffer-collaterals-1/physiology/tau-decay-distribution.json'\n            ];\n\n            const fetchedData = await Promise.all(\n                files.map(file =>\n                    fetch(`${file}`).then(res => res.json())\n                )\n            );\n\n            setJsonData({\n                SynapsesConvergenceForPyramidalCells: fetchedData[0],\n                SynapsesConvergenceForPyramidalCellsTwo: fetchedData[1],\n                NumberOfSynapsesPerConections: fetchedData[2],\n                Divergence: fetchedData[3],\n                ESPS_IPSPLatency: fetchedData[4],\n                HalfWidth: fetchedData[5],\n                PSCRatioFromSCToCB1RPlus: fetchedData[6],\n                PSCRatioFromSCToCB1RMinus: fetchedData[7],\n                PSPAmplitude: fetchedData[8],\n                RiseTime: fetchedData[9],\n                TauDecay: fetchedData[10]\n            });\n        };\n\n        fetchData();\n    }, []);\n\n    if (Object.values(jsonData).some(data => data === null)) {\n        return <div>Loading data...</div>;\n    }\n\n    return (\n        <>\n            <Filters theme={theme} hasData={true}>\n                <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n                    <div className=\"w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n                        <StickyContainer>\n                            <Title\n                                title=\"Schaffer Collaterals 1\"\n                                subtitle=\"Validations\"\n                                theme={theme}\n                            />\n                            <div role=\"information\">\n                                <InfoBox>\n                                    <p>\n                                        We validated the <Link className={`link theme-${theme}`} href={'/digital-reconstructions/schaffer-collaterals/'}> Schaffer collaterals</Link> using <Link className={`link theme-${theme}`} href={'/experimental-data/schaffer-collaterals/'}>available data on its anatomy</Link>. We compared the model with experimental data in terms of synapse profile, number of synapses per connection, convergence and divergence.\n                                    </p>\n                                </InfoBox>\n                            </div>\n                        </StickyContainer>\n                    </div>\n                </div>\n            </Filters>\n            <DataContainer theme={theme}\n                navItems={[\n                    { label: 'Anatomy', isTitle: true },\n                    { id: 'AnatomyDensityOfSynapsesSection', label: 'Density of synapses along the radial axis' },\n                    { id: 'SynapsesConvergenceForPyramidalCellsSection', label: jsonData.SynapsesConvergenceForPyramidalCells?.name || 'Synapses convergence dor pyramidal cells' },\n                    { id: 'NumberOfSynapsesPerConectionsSection', label: jsonData.NumberOfSynapsesPerConections?.name || 'Number of synapses per connections' },\n                    { id: 'SynapsesConvergenceForPyramidalCellsTwoSection', label: jsonData.SynapsesConvergenceForPyramidalCellsTwo?.name || 'Synapses Convergence For pyramidal cells two' },\n                    { id: 'DivergenceSection', label: 'Anatomy ' + (jsonData.Divergence?.name || 'Divergence') },\n                    { label: 'Physiology', isTitle: true },\n                    { id: 'PSPAmplitudeSection', label: jsonData.PSPAmplitude?.name || 'PSP Amplitude' },\n                    { id: 'PSCRatioFromSCToCB1RPlusSection', label: jsonData.PSCRatioFromSCToCB1RPlus?.name || 'PSC ratio from SC to CB1R+' },\n                    { id: 'PSCRatioFromSCToCB1RMinusSection', label: jsonData.PSCRatioFromSCToCB1RMinus?.name || 'PSC ratio from SC to CB1R-' },\n                    { id: 'TemporalDynamicsOfSCToPCSynapticTransmissionSection', label: 'Temporal dynamics of SC to PC synaptic transmission' },\n                    { id: 'ESPS_IPSPLatencySection', label: jsonData.ESPS_IPSPLatency?.name || 'ESPS IPSP latency' },\n                ]}>\n\n                <Collapsible id=\"AnatomyDensityOfSynapsesSection\" properties={[\"Anatomy\"]} title={\"Density of synapses along the radial axis\"} >\n                    <SynapseDensityProfileGraph theme={theme} />\n                </Collapsible>\n\n                {jsonData.SynapsesConvergenceForPyramidalCells && (\n                    <Collapsible id=\"SynapsesConvergenceForPyramidalCellsSection\" properties={[\"Anatomy\"]} title={jsonData.SynapsesConvergenceForPyramidalCells.name}>\n                        <SCDistibutionGraph\n                            data={jsonData.SynapsesConvergenceForPyramidalCells}\n                            xAxisTitle=\"Synapse Indegree from each CA1 PC\"\n                            yAxisTitle=\"Count\"\n                            xTickInterval={5}\n                        />\n                    </Collapsible>\n                )}\n\n                {jsonData.NumberOfSynapsesPerConections && (\n                    <Collapsible id=\"NumberOfSynapsesPerConectionsSection\" properties={[\"Anatomy\"]} title={jsonData.NumberOfSynapsesPerConections.name}>\n                        <SCDistibutionGraph\n                            data={jsonData.NumberOfSynapsesPerConections}\n                            xAxisTitle=\"Synapse Indegree from each CA1 INT\"\n                            yAxisTitle=\"Count\"\n                            isLogarithmic={true}\n                            xTickInterval={1}\n                        />\n                    </Collapsible>\n                )}\n\n                {jsonData.SynapsesConvergenceForPyramidalCellsTwo && (\n                    <Collapsible id=\"SynapsesConvergenceForPyramidalCellsTwoSection\" properties={[\"Anatomy\"]} title={jsonData.SynapsesConvergenceForPyramidalCellsTwo.name}>\n                        <SCDistibutionGraph\n                            data={jsonData.SynapsesConvergenceForPyramidalCellsTwo}\n                            xAxisTitle=\"Synapses/Connection\"\n                            yAxisTitle=\"Count\"\n                            xTickInterval={5}\n                        />\n                    </Collapsible>\n                )}\n\n                {jsonData.Divergence && (\n                    <Collapsible id=\"DivergenceSection\" properties={[\"Anatomy\"]} title={jsonData.Divergence.name}>\n                        <SCDistibutionGraph\n                            data={jsonData.Divergence}\n                            xAxisTitle=\"Synapse Outdegree from each CA3 PC\"\n                            yAxisTitle=\"\"\n                            xTickInterval={5}\n                        />\n                    </Collapsible>\n                )}\n\n                {jsonData.PSPAmplitude && (\n                    <Collapsible id=\"PSPAmplitudeSection\" properties={[\"Physiology\"]} title={jsonData.PSPAmplitude.name}>\n                        <SCDistibutionGraph\n                            data={jsonData.PSPAmplitude}\n                            xAxisTitle=\"PSP Amplitude (mV)\"\n                            yAxisTitle=\"Count\"\n                            xTickInterval={5}\n                        />\n                    </Collapsible>\n                )}\n\n                {jsonData.PSCRatioFromSCToCB1RPlus && (\n                    <Collapsible id=\"PSCRatioFromSCToCB1RPlusSection\" properties={[\"Physiology\"]} title={jsonData.PSCRatioFromSCToCB1RPlus.name}>\n                        <SCDistibutionGraph\n                            data={jsonData.PSCRatioFromSCToCB1RPlus}\n                            xAxisTitle=\"PSC Ratio\"\n                            yAxisTitle=\"Count\"\n                            xTickInterval={5}\n                        />\n                    </Collapsible>\n                )}\n\n                {jsonData.PSCRatioFromSCToCB1RMinus && (\n                    <Collapsible id=\"PSCRatioFromSCToCB1RMinusSection\" properties={[\"Physiology\"]} title={jsonData.PSCRatioFromSCToCB1RMinus.name}>\n                        <SCDistibutionGraph\n                            data={jsonData.PSCRatioFromSCToCB1RMinus}\n                            xAxisTitle=\"PSC Ratio\"\n                            yAxisTitle=\"Count\"\n                            xTickInterval={5}\n                        />\n                    </Collapsible>\n                )}\n\n                {jsonData.RiseTime && jsonData.TauDecay && jsonData.HalfWidth && (\n                    <Collapsible id=\"TemporalDynamicsOfSCToPCSynapticTransmissionSection\" properties={[\"Physiology\"]} title={\"Temporal dynamics of SC to PC synaptic transmission\"}>\n                        <h2 className=\"text-base  mb-2\">{jsonData.RiseTime.name}</h2>\n                        <SCDistibutionGraph\n                            data={jsonData.RiseTime}\n                            xAxisTitle=\"Rise Time (ms)\"\n                            yAxisTitle=\"Count\"\n                            xTickInterval={5}\n                        />\n\n                        <h2 className=\"text-base mt-16 mb-2\">{jsonData.TauDecay.name}</h2>\n                        <SCDistibutionGraph\n                            data={jsonData.TauDecay}\n                            xAxisTitle=\"Tau Decay (ms)\"\n                            yAxisTitle=\"Count\"\n                            xTickInterval={5}\n                        />\n\n                        <h2 className=\"text-base mt-16 mb-2\">{jsonData.HalfWidth.name}</h2>\n                        <SCDistibutionGraph\n                            data={jsonData.HalfWidth}\n                            xAxisTitle=\"Half-width (ms)\"\n                            yAxisTitle=\"Count\"\n                            xTickInterval={5}\n                        />\n                    </Collapsible>\n                )}\n\n                {jsonData.ESPS_IPSPLatency && (\n                    <Collapsible id=\"ESPS_IPSPLatencySection\" properties={[\"Physiology\"]} title={jsonData.ESPS_IPSPLatency.name}>\n                        <SCDistibutionGraph\n                            data={jsonData.ESPS_IPSPLatency}\n                            xAxisTitle=\"EPSP IPSP Latency (ms)\"\n                            yAxisTitle=\"Count\"\n                            xTickInterval={5}\n                        />\n                    </Collapsible>\n                )}\n\n            </DataContainer>\n        </>\n    );\n};\n\nexport default SchafferCollateralsView;","import Head from 'next/head';\nimport SchafferCollateralsView from '@/views/4_validations/SchafferCollaterals_1';\n\nexport default function SchafferCollateralsPage() {\n  const metadata = {\n    title: 'Schaffer Collaterals 1 - Validation | The Hippocampus Hub',\n    description:\n      'We validated Schaffer collaterals at the synaptic level by comparing model predictions to experimental data on synaptic strength and spike time dynamics.',\n    keywords: [\n      'Schaffer Collaterals',\n      'Synaptic Strength',\n      'Spike Time Dynamics',\n      'Validation Data',\n      'Hippocampus',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <SchafferCollateralsView />\n    </>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};"],"names":["window","__NEXT_P","push","__webpack_require__","__webpack_exports__","Z","centered","children","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","styles","classNames","layers","theme","default","hover","selected","selectedEdges","graphTheme","red","blue","green","purple","yellow","themeColors","experimental_data","reconstruction_data","digital_reconstruction","validations","predictions","neuriteTypes","volumeSections","achConcentrations","cellGroup","defaultSelection","experimentalData","layerAnatomy","layer","neuronMorphology","mtype","instance","neuronElectrophysiology","etype","etype_instance","reconstructionData","volume","volume_section","cellComposition","neurons","digitalReconstruction","region","morphologyLibrary","morphology","schafferCollateral","prelayer","postlayer","connectionAnatomy","connectionPhysiology","acetylcholineEffectsOnCell","acetylcholineEffectsOnSynapses","ach_concentration","NeuronModelLibrary","synapticPathways","acetylcholine","neuriteColor","all","axon","apical","basal","dendrite","soma","Chart","register","BarController","CategoryScale","LinearScale","LogarithmicScale","BarElement","Title","CustomLogarithmicScale","buildTicks","ticks","power","Math","floor","log10","min","maxPower","ceil","max","pow","map","tick","value","id","formatScientificNotation","exponent","abs","mantissa","superscriptDigits","superscriptExponent","toString","split","digit","parseInt","join","round","concat","schaffer_collaterals_1_SCDistibutionGraph","data","xAxisTitle","yAxisTitle","isLogarithmic","xTickInterval","chartRef","useRef","chartInstance","renderChart","current","ctx","getContext","destroy","type","labels","bins","bin","toFixed","datasets","label","name","counts","backgroundColor","options","responsive","scales","x","title","display","text","autoSkip","callback","index","maxRotation","minRotation","align","y","values","Number","plugins","description","tooltip","enabled","useEffect","handleResize","resize","addEventListener","removeEventListener","jsx_runtime","jsxs","canvas","ref","DownloadButton","onClick","downloadAsJson","LineController","ScatterController","PointElement","LineElement","Tooltip","schaffer_collaterals_1_SynapsesDensityProfileGraph","chartInstanceRef","windowSize","setWindowSize","useState","width","height","setData","fetch","dataPath","then","response","json","updateWindowSize","innerWidth","innerHeight","radialAxis","Object","value_map","radial_axis","modelData","entries","model_data","key","expData","exp_data","borderColor","showLine","pointRadius","maintainAspectRatio","position","SchafferCollaterals_1","jsonData","setJsonData","SynapsesConvergenceForPyramidalCells","SynapsesConvergenceForPyramidalCellsTwo","NumberOfSynapsesPerConections","Divergence","ESPS_IPSPLatency","HalfWidth","PSCRatioFromSCToCB1RPlus","PSCRatioFromSCToCB1RMinus","PSPAmplitude","RiseTime","TauDecay","fetchData","files","fetchedData","Promise","file","res","some","Fragment","Filters","hasData","StickyContainer","subtitle","role","InfoBox","p","Link","href","DataContainer","navItems","isTitle","Collapsible","properties","SynapseDensityProfileGraph","SCDistibutionGraph","h2","SchafferCollateralsPage","metadata","keywords","author","creator","publisher","Head","meta","content","SchafferCollateralsView","module","exports"],"sourceRoot":""}