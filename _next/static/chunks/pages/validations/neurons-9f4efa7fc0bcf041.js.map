{"version":3,"file":"static/chunks/pages/validations/neurons-9f4efa7fc0bcf041.js","mappings":"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","sources":["webpack://_N_E/./node_modules/better-react-mathjax/esm/MathJax/MathJax.js","webpack://_N_E/./node_modules/better-react-mathjax/esm/MathJaxContext/MathJaxContext.js","webpack://_N_E/?a49c","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/views/4_validations/neurons/BAPValidationGraph.tsx","webpack://_N_E/./src/views/4_validations/neurons/PSPAttenuationGraph.tsx","webpack://_N_E/./src/views/4_validations/Neurons.tsx","webpack://_N_E/./src/pages/validations/neurons.tsx","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},__rest=this&&this.__rest||function(t,e){var n={};for(i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&\"function\"==typeof Object.getOwnPropertySymbols)for(var r=0,i=Object.getOwnPropertySymbols(t);r<i.length;r++)e.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(t,i[r])&&(n[i[r]]=t[i[r]]);return n};import React,{useContext,useEffect,useLayoutEffect,useRef}from\"react\";import{MathJaxBaseContext}from\"../MathJaxContext\";var typesettingFailed=function(t){return\"Typesetting failed: \".concat(void 0!==t.message?t.message:t.toString())},MathJax=function(t){function r(){var t;\"every\"===h&&m&&\"post\"===v&&null!==f.current&&(f.current.style.visibility=null!=(t=null==(t=p.style)?void 0:t.visibility)?t:\"visible\"),_.current||(\"first\"===h&&null!==f.current&&(f.current.style.visibility=\"visible\"),n&&n(),_.current=!0),o&&o(),b.current=!1}var e=t.inline,i=void 0!==e&&e,e=t.hideUntilTypeset,n=t.onInitTypeset,o=t.onTypeset,s=t.text,u=t.dynamic,a=t.typesettingOptions,l=t.renderMode,c=t.children,p=__rest(t,[\"inline\",\"hideUntilTypeset\",\"onInitTypeset\",\"onTypeset\",\"text\",\"dynamic\",\"typesettingOptions\",\"renderMode\",\"children\"]),y=useRef(\"\"),f=useRef(null),d=useContext(MathJaxBaseContext),h=null!=e?e:null==d?void 0:d.hideUntilTypeset,v=null!=l?l:null==d?void 0:d.renderMode,g=null!=a?a:null==d?void 0:d.typesettingOptions,m=!1!==u&&(u||\"production\"!==process.env.NODE_ENV),_=useRef(!1),b=useRef(!1);return!b.current&&null!==f.current&&m&&\"every\"===h&&\"post\"===v&&(f.current.style.visibility=\"hidden\"),(\"undefined\"!=typeof window?useLayoutEffect:useEffect)(function(){if((m||!_.current)&&null!==f.current){if(!d)throw Error(\"MathJax was not loaded, did you use the MathJax component outside of a MathJaxContext?\");if(\"pre\"===v){if(!(\"string\"==typeof(t=s)&&0<t.length))throw Error(\"Render mode 'pre' requires text prop to be set and non-empty, which was currently \\\"\".concat(s,'\"'));if(!a||!a.fn)throw Error(\"Render mode 'pre' requires 'typesettingOptions' prop with 'fn' property to be set on MathJax element or in the MathJaxContext\");if(2===d.version)throw Error(\"Render mode 'pre' only available with MathJax 3, and version 2 is currently in use\")}\"post\"!==v&&s===y.current||b.current||(b.current=!0,3===d.version?d.promise.then(function(e){var n;\"pre\"===v?(n=function(t){y.current=s,e.startup.document.clear(),e.startup.document.updateDocument(),null!==f.current&&(f.current.innerHTML=t.outerHTML),r()},a.fn.endsWith(\"Promise\")?e.startup.promise.then(function(){return e[g.fn](s,__assign(__assign({},(null==g?void 0:g.options)||{}),{display:!i}))}).then(n).catch(function(t){throw r(),Error(typesettingFailed(t))}):e.startup.promise.then(function(){var t=e[g.fn](s,__assign(__assign({},(null==g?void 0:g.options)||{}),{display:!i}));n(t)}).catch(function(t){throw r(),Error(typesettingFailed(t))})):e.startup.promise.then(function(){return e.typesetClear([f.current]),e.typesetPromise([f.current])}).then(r).catch(function(t){throw r(),Error(typesettingFailed(t))})}).catch(function(t){throw r(),Error(typesettingFailed(t))}):d.promise.then(function(t){t.Hub.Queue([\"Typeset\",t.Hub,f.current]),t.Hub.Queue(r)}).catch(function(t){throw r(),Error(typesettingFailed(t))}))}var t}),React.createElement(\"span\",__assign({},p,{style:__assign(__assign({display:i?\"inline\":\"block\"},p.style),{visibility:h?\"hidden\":null==(t=p.style)?void 0:t.visibility}),ref:f}),c)};export default MathJax;","var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var t,o=1,n=arguments.length;o<n;o++)for(var a in t=arguments[o])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};import React,{createContext,useContext,useRef}from\"react\";var v2Promise,v3Promise,MathJaxBaseContext=createContext(void 0),DEFAULT_V2_SRC=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-MML-AM_CHTML\",DEFAULT_V3_SRC=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-mml-chtml.js\",MathJaxContext=function(e){var n=e.config,t=e.version,t=void 0===t?3:t,o=e.src,o=void 0===o?2===t?DEFAULT_V2_SRC:DEFAULT_V3_SRC:o,a=e.onStartup,r=e.onLoad,i=e.onError,s=e.typesettingOptions,h=e.renderMode,h=void 0===h?\"post\":h,d=e.hideUntilTypeset,e=e.children,c=useContext(MathJaxBaseContext);if(void 0!==(null==c?void 0:c.version)&&(null==c?void 0:c.version)!==t)throw Error(\"Cannot nest MathJaxContexts with different versions. MathJaxContexts should not be nested at all but if they are, they cannot have different versions. Stick with one version of MathJax in your app and avoid using more than one MathJaxContext.\");if(2===t&&void 0!==v3Promise||3===t&&void 0!==v2Promise)throw Error(\"Cannot use MathJax versions 2 and 3 simultaneously in the same app due to how MathJax is set up in the browser; either you have multiple MathJaxContexts with different versions or you have mounted and unmounted MathJaxContexts with different versions. Please stick with one version of MathJax in your app. File an issue in the project Github page if you need this feature.\");var u=useRef(c),c=useRef((null==c?void 0:c.version)||null);if(null===c.current)c.current=t;else if(c.current!==t)throw Error(\"Cannot change version of MathJax in a MathJaxContext after it has mounted. Reload the page with a new version when this must happen.\");var v=o||(2===t?DEFAULT_V2_SRC:DEFAULT_V3_SRC);function f(t,o){n&&(window.MathJax=n);var e=document.createElement(\"script\");e.type=\"text/javascript\",e.src=v,e.async=!1,e.addEventListener(\"load\",function(){var e=window.MathJax;a&&a(e),t(e),r&&r()}),e.addEventListener(\"error\",function(e){return o(e)}),document.getElementsByTagName(\"head\")[0].appendChild(e)}return void 0===u.current&&(c={typesettingOptions:s,renderMode:h,hideUntilTypeset:d},2===t?void 0===v2Promise&&(\"undefined\"!=typeof window?(v2Promise=new Promise(f)).catch(function(e){if(!i)throw Error(\"Failed to download MathJax version 2 from '\".concat(v,\"' due to: \").concat(e));i(e)}):(v2Promise=Promise.reject()).catch(function(e){})):void 0===v3Promise&&(\"undefined\"!=typeof window?(v3Promise=new Promise(f)).catch(function(e){if(!i)throw Error(\"Failed to download MathJax version 3 from '\".concat(v,\"' due to: \").concat(e));i(e)}):(v3Promise=Promise.reject()).catch(function(e){})),u.current=__assign(__assign({},c),2===t?{version:2,promise:v2Promise}:{version:3,promise:v3Promise})),React.createElement(MathJaxBaseContext.Provider,{value:u.current},e)};export default MathJaxContext;export{MathJaxBaseContext};","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/validations/neurons\",\n      function () {\n        return require(\"private-next-pages/validations/neurons.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/validations/neurons\"])\n      });\n    }\n  ","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import { Layer, NeuriteType, VolumeSection, AchConcentration, CellGroup, Theme, GraphTheme, ThemeColors } from './types';\nimport NeuronModelLibrary from './views/2_reconstruction-data/NeuronModelLibrary';\nimport AcetylcholineView from './views/4_validations/Acetylcholine';\n\nexport const layers: Layer[] = [\n  'SLM',\n  'SR',\n  'SP',\n  'SO',\n];\n\nexport const theme: Theme = {\n  1: { default: 0x44405B, hover: 0x7D656F, selected: 0xB68983, selectedEdges: 0xEFAE97 },\n  2: { default: 0x44405B, hover: 0x7B5B6A, selected: 0xB37579, selectedEdges: 0xEA9088 },\n  3: { default: 0x44405B, hover: 0x715970, selected: 0x9F7184, selectedEdges: 0xCC8A99 },\n  4: { default: 0x44405B, hover: 0x625D77, selected: 0x807B92, selectedEdges: 0x9E98AE },\n  5: { default: 0x393D5E, hover: 0x595D79, selected: 0x6E7B97, selectedEdges: 0x8398B5 },\n};\n\nexport const graphTheme: GraphTheme = {\n  red: \"#C46785\",\n  blue: \"#3b4165\",\n  green: \"#7FD982\",\n  purple: \"#7F5482\",\n  yellow: \"#f9f871\",\n};\n\nexport const themeColors: ThemeColors = {\n  experimental_data: \"#EFAE97\",\n  reconstruction_data: \"#EA9088\",\n  digital_reconstruction: \"#CC8A99\",\n  validations: \"#9E98AE\",\n  predictions: \"#8398B5\",\n};\n\n\n\nexport const neuriteTypes: NeuriteType[] = [\n  'all',\n  'axon',\n  'apical',\n  'basal',\n  'dendrite',\n  'soma',\n\n];\n\nexport const volumeSections: VolumeSection[] = [\n  'region',\n  'slice',\n  'cylinder',\n];\n\n\nexport const achConcentrations: AchConcentration[] = [\n  '0um',\n  '10um',\n  '100um'\n];\n\nexport const cellGroup: CellGroup[] = [\n  'All',\n  'Excitatory',\n  'Inhibitory',\n  'SLM_PPA',\n  'SO_BP',\n  'SO_BS',\n  'SO_OLM',\n  'SO_Tri',\n  'SP_AA',\n  'SP_BS',\n  'SP_CCKBC',\n  'SP_Ivy',\n  'SP_PC',\n  'SP_PVBC',\n  'SR_SCA'\n]\n\nexport const defaultSelection = {\n  experimentalData: {\n    layerAnatomy: {\n      layer: 'SLM',\n    },\n    neuronMorphology: {\n      layer: 'SLM',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    neuronElectrophysiology: {\n      etype: 'bAC',\n      etype_instance: '95810035',\n    },\n  },\n  reconstructionData: {\n    volume: {\n      volume_section: 'region',\n    },\n    cellComposition: {\n      volume_section: 'region',\n    },\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: 'CA1_int_bAC_011127HP1_20190329115610',\n    },\n  },\n  digitalReconstruction: {\n    region: {\n      volume_section: 'region',\n    },\n    morphologyLibrary: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      morphology: '011127HP1',\n    },\n    schafferCollateral: {\n      volume_section: 'region',\n      prelayer: 'SC',\n      postlayer: 'All'\n    },\n    connectionAnatomy: {\n      volume_section: 'region',\n      prelayer: 'All',\n      postlayer: 'All'\n    },\n    connectionPhysiology: {\n      volume_section: 'region',\n      prelayer: 'all',\n      postlayer: 'all'\n    },\n    acetylcholineEffectsOnCell: {\n      morphology: \"450290\",\n      etype: \"cNAC\",\n      mtype: \"SO_BP\"\n    },\n    acetylcholineEffectsOnSynapses: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory'\n    },\n\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    NeuronModelLibrary: {\n      mtype: 'SO_BP',\n      etype: 'cNAC',\n      morphology: '980120A_-_Scale_x1.000_y0.900_z1.000'\n    },\n    synapticPathways: {\n      volume_section: 'slice',\n      prelayer: 'All',\n      postlayer: 'All',\n    },\n    acetylcholine: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory',\n    },\n  },\n\n};\n\nexport const neuriteColor: Record<NeuriteType, string> = {\n  all: '#1fcf1f',\n  axon: '#1111ff',\n  apical: '#f442ad',\n  basal: '#ff1111',\n  dendrite: '#ff1111',\n  soma: '#000',\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n    Chart,\n    ScatterController,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Legend\n} from 'chart.js';\nimport { downloadAsJson } from '@/utils';\nimport { GraphTheme } from '@/types';\nimport DownloadButton from '@/components/DownloadButton';\nimport { graphTheme } from '@/constants';\nimport { dataPath } from '@/config';\n\nChart.register(\n    ScatterController,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Legend\n);\n\ninterface BAPValidationData {\n    values: Array<{\n        value_map: {\n            distance: { [key: string]: number };\n            model_mean: { [key: string]: number };\n            model_std: { [key: string]: number };\n            exp_mean: { [key: string]: number };\n        }\n    }>;\n}\n\nconst BAPValidationGraph = ({ theme }: { theme: number }) => {\n    const chartRef = useRef<HTMLCanvasElement | null>(null);\n    const [chartInstance, setChartInstance] = useState<Chart | null>(null);\n    const [bAPValidationData, setBAPValidationData] = useState<BAPValidationData | null>(null);\n\n    useEffect(() => {\n        fetch(dataPath + '/4_validations/neurons/bap-validation.json')\n            .then(response => response.json())\n            .then(data => setBAPValidationData(data as BAPValidationData))\n            .catch(error => console.error('Error fetching bAP validation data:', error));\n    }, []);\n\n    const createChart = () => {\n        if (chartRef.current && bAPValidationData) {\n            const ctx = chartRef.current.getContext('2d');\n            if (!ctx) return;\n\n            const modelData = bAPValidationData.values[0].value_map;\n            const expData = bAPValidationData.values[1].value_map;\n\n            const randomOffset = () => Math.random() * 30 - 15;\n\n            const modelDataset = Object.keys(modelData.distance).map(key => ({\n                x: modelData.distance[key] + randomOffset(),\n                y: modelData.model_mean[key],\n                yMin: modelData.model_mean[key] - modelData.model_std[key],\n                yMax: modelData.model_mean[key] + modelData.model_std[key],\n            }));\n\n            const expDataset = Object.keys(expData.distance).map(key => ({\n                x: expData.distance[key],\n                y: expData.exp_mean[key],\n                yMin: expData.exp_mean[key] - expData.model_mean[key],\n                yMax: expData.exp_mean[key] + expData.model_mean[key],\n            }));\n\n            const newChart = new Chart(ctx, {\n                type: 'scatter',\n                data: {\n                    datasets: [\n                        {\n                            label: 'Model',\n                            data: modelDataset,\n                            backgroundColor: 'black',\n                            borderColor: 'black',\n                            pointStyle: 'circle',\n                            pointRadius: 3,\n                            pointHoverRadius: 7,\n                            order: 2,\n                        },\n                        {\n                            label: 'Experiment',\n                            data: expDataset,\n                            backgroundColor: graphTheme.red,\n                            borderColor: graphTheme.red,\n                            pointStyle: 'circle',\n                            pointRadius: 3,\n                            pointHoverRadius: 7,\n                            order: 1,\n                        }\n                    ]\n                },\n                options: {\n                    animation: {\n                        duration: 0\n                    },\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        x: {\n                            type: 'linear',\n                            position: 'bottom',\n                            title: {\n                                display: true,\n                                text: 'Distance from soma (µm)',\n                            },\n                            min: 0,\n                            max: 400,\n                        },\n                        y: {\n                            type: 'linear',\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'bAP amplitude (mV)',\n                            },\n                            min: 0,\n                            max: 100,\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            position: 'top',\n                            align: 'end',\n                            labels: {\n                                usePointStyle: true,\n                                pointStyle: 'circle',\n                                boxWidth: 6,\n                                boxHeight: 6,\n                                padding: 20,\n                            }\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: (context) => {\n                                    const label = context.dataset.label || '';\n                                    const value = context.parsed.y.toFixed(2);\n                                    return `${label}: ${value} mV`;\n                                }\n                            }\n                        }\n                    }\n                },\n                plugins: [{\n                    id: 'errorBars',\n                    afterDatasetsDraw(chart, args, options) {\n                        const { ctx, data, scales: { x, y } } = chart;\n\n                        data.datasets.forEach((dataset, i) => {\n                            const meta = chart.getDatasetMeta(i);\n\n                            if (!meta.hidden) {\n                                meta.data.forEach((element, index) => {\n                                    // Get the tooltip position with the required boolean argument\n                                    const tooltipPosition = element.tooltipPosition(true); // Use `true` for final position\n\n                                    // Safeguard and type the data point appropriately\n                                    const dataPoint = dataset.data[index];\n\n                                    // Check if the dataPoint has the necessary properties before proceeding\n                                    if (dataPoint && typeof dataPoint === 'object' && 'yMin' in dataPoint && 'yMax' in dataPoint) {\n                                        const { yMin, yMax } = dataPoint as { yMin: number; yMax: number };\n\n                                        const yTop = y.getPixelForValue(yMax);\n                                        const yBottom = y.getPixelForValue(yMin);\n\n                                        ctx.save();\n                                        ctx.strokeStyle = dataset.borderColor as string;\n                                        ctx.lineWidth = 2;\n                                        ctx.beginPath();\n                                        ctx.moveTo(tooltipPosition.x, yBottom);\n                                        ctx.lineTo(tooltipPosition.x, yTop);\n                                        ctx.stroke();\n                                        ctx.restore();\n                                    }\n                                });\n                            }\n                        });\n                    }\n                }]\n            });\n\n            setChartInstance(newChart);\n        }\n    };\n\n    useEffect(() => {\n        if (bAPValidationData) {\n            createChart();\n        }\n    }, [bAPValidationData]);\n\n    useEffect(() => {\n        const handleResize = () => {\n            if (chartInstance) {\n                chartInstance.resize();\n            }\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            if (chartInstance) {\n                chartInstance.destroy();\n            }\n        };\n    }, [chartInstance]);\n\n    if (!bAPValidationData) {\n        return <div>Loading bAP validation data...</div>;\n    }\n\n    return (\n        <>\n            <div className=\"graph\" style={{ height: \"500px\" }}>\n                <canvas ref={chartRef} />\n            </div>\n            <div className=\"mt-4\">\n                <DownloadButton theme={theme} onClick={() => downloadAsJson(bAPValidationData, `bAP-Validation-Data.json`)}>\n                    bAP validation\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default BAPValidationGraph;","import React, { useEffect, useRef, useState } from 'react';\nimport {\n    Chart,\n    ChartConfiguration,\n    ScatterController,\n    LineController,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Legend\n} from 'chart.js';\nimport { downloadAsJson } from '@/utils';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\nimport { graphTheme } from '@/constants'; import { MathJaxContext, MathJax } from 'better-react-mathjax';\n\nChart.register(\n    ScatterController,\n    LineController,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Legend\n);\n\ninterface ValueMap {\n    Distance: { [key: string]: number };\n    'dend_psp/soma_psp': { [key: string]: number };\n    fit_model_data?: { [key: string]: number };\n    fit_exp_data?: { [key: string]: number };\n}\n\ninterface PSPAttenuationData {\n    values: {\n        [key: number]: {\n            value_map: ValueMap;\n        };\n    };\n}\n\ninterface PSPAttenuationGraphProps {\n    theme: number;\n}\n\nconst PSPAttenuationGraph: React.FC<PSPAttenuationGraphProps> = ({ theme }) => {\n    const chartRef = useRef<HTMLCanvasElement | null>(null);\n    const [chartInstance, setChartInstance] = useState<Chart | null>(null);\n    const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n    const [pspAttenuationData, setPSPAttenuationData] = useState<PSPAttenuationData | null>(null);\n\n    useEffect(() => {\n        fetch(dataPath + '/4_validations/neurons/psp-attenuation.json')\n            .then(response => response.json())\n            .then(data => setPSPAttenuationData(data))\n            .catch(error => console.error('Error fetching PSP attenuation data:', error));\n    }, []);\n\n    const createChart = () => {\n        if (chartRef.current && pspAttenuationData) {\n            const ctx = chartRef.current.getContext('2d');\n            if (!ctx) return;\n\n            const expData = pspAttenuationData.values[0].value_map;\n            const modelData = pspAttenuationData.values[1].value_map;\n            const modelFitData = pspAttenuationData.values[2].value_map;\n            const expFitData = pspAttenuationData.values[4].value_map;\n\n            const expDataset = Object.keys(expData.Distance).map(key => ({\n                x: expData.Distance[key],\n                y: expData['dend_psp/soma_psp'][key],\n            }));\n\n            const modelDataset = Object.keys(modelData.Distance).map(key => ({\n                x: modelData.Distance[key],\n                y: modelData['dend_psp/soma_psp'][key],\n            }));\n\n            const modelFitDataset = modelFitData.fit_model_data\n                ? Object.keys(modelFitData.Distance).map(key => ({\n                    x: modelFitData.Distance[key],\n                    y: modelFitData.fit_model_data![key],\n                }))\n                : [];\n\n            const expFitDataset = expFitData.fit_exp_data\n                ? Object.keys(expFitData.Distance).map(key => ({\n                    x: expFitData.Distance[key],\n                    y: expFitData.fit_exp_data![key],\n                }))\n                : [];\n\n            const config: ChartConfiguration = {\n                type: 'scatter',\n                data: {\n                    datasets: [\n                        {\n                            label: 'Model',\n                            data: modelDataset,\n                            backgroundColor: 'black',\n                            borderColor: 'black',\n                            pointStyle: 'circle',\n                            pointRadius: 2,\n                            pointHoverRadius: 5,\n                        },\n                        {\n                            label: 'Model Fit',\n                            data: modelFitDataset,\n                            backgroundColor: 'black',\n                            borderColor: 'black',\n                            pointRadius: 0,\n                            showLine: true,\n                            borderWidth: 2,\n                        },\n                        {\n                            label: 'Experiment',\n                            data: expDataset,\n                            backgroundColor: graphTheme.red,\n                            borderColor: graphTheme.red,\n                            pointStyle: 'circle',\n                            pointRadius: 2,\n                            pointHoverRadius: 5,\n                        },\n                        {\n                            label: 'Experiment Fit',\n                            data: expFitDataset,\n                            backgroundColor: graphTheme.red,\n                            borderColor: graphTheme.red,\n                            pointRadius: 0,\n                            showLine: true,\n                            borderWidth: 2,\n                        }\n                    ]\n                },\n                options: {\n                    animation: {\n                        duration: 0\n                    },\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        x: {\n                            type: 'linear',\n                            position: 'bottom',\n                            title: {\n                                display: true,\n                                text: 'Distance from soma (µm)',\n                            },\n                            min: 0,\n                            max: 350,\n                        },\n                        y: {\n                            type: 'linear',\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'Dendrite PSP / Soma PSP',\n                            },\n                            min: 0,\n                            max: 14,\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            position: 'top',\n                            align: 'end',\n                            labels: {\n                                usePointStyle: true,\n                                pointStyle: 'circle',\n                                boxWidth: 6,\n                                boxHeight: 6,\n                                padding: 20,\n                            }\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: (context) => {\n                                    const label = context.dataset.label || '';\n                                    const xValue = context.parsed.x.toFixed(2);\n                                    const yValue = context.parsed.y.toFixed(2);\n                                    return `${label}: (${xValue} µm, ${yValue})`;\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n\n            const newChart = new Chart(ctx, config);\n            setChartInstance(newChart);\n        }\n    };\n\n    useEffect(() => {\n        const handleResize = () => {\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        };\n\n        handleResize();\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            if (chartInstance) {\n                chartInstance.destroy();\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        if (windowSize.width > 0 && windowSize.height > 0 && pspAttenuationData) {\n            if (chartInstance) {\n                chartInstance.destroy();\n            }\n            createChart();\n        }\n    }, [windowSize, pspAttenuationData]);\n\n    if (!pspAttenuationData) {\n        return <div>Loading PSP attenuation data...</div>;\n    }\n\n    // Add these constants for the equations\n    const modelFitEquation = \"y = e^{x/155.6} - 0.30459466049423767\";\n    const expFitEquation = \"y = e^{x/240.9} - 0.1605029837238689\";\n\n    return (\n        <MathJaxContext>\n            <div>\n                <div className=\"mb-4\">\n                    <p>Model fit: <MathJax inline>{`\\\\(${modelFitEquation}\\\\)`}</MathJax></p>\n                    <p style={{ color: graphTheme.red }}>Experiment fit: <MathJax inline>{`\\\\(${expFitEquation}\\\\)`}</MathJax></p>\n                </div>\n                <div className=\"graph\" style={{ height: '600px', width: '100%', maxWidth: '1200px', margin: '0 auto' }}>\n                    <canvas ref={chartRef} />\n                </div>\n                <div className=\"mt-4\">\n                    <DownloadButton theme={theme} onClick={() => downloadAsJson(pspAttenuationData, `PSP-Attenuation-Data.json`)}>\n                        PSP attenuation\n                    </DownloadButton>\n                </div>\n\n            </div>\n        </MathJaxContext>\n    );\n};\n\nexport default PSPAttenuationGraph;\n","import React from 'react';\nimport Link from 'next/link';\n\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\n\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\n\nimport BAPValidationGraph from './neurons/BAPValidationGraph';\nimport PSPAttenuationGraph from './neurons/PSPAttenuationGraph';\n\nconst NeuronView: React.FC = () => {\n\n    const theme = 4;\n\n    return (\n        <>\n            <Filters theme={theme} hasData={true}>\n                <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n                    <div className=\"w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n                        <StickyContainer>\n                            <Title\n                                title=\"Neuron\"\n                                subtitle=\"Validations\"\n                                theme={theme}\n                            />\n                            <div role=\"information\">\n                                <InfoBox>\n                                    <p>\n                                        We validated <Link className={`link theme-${theme}`} href={'/digital-reconstructions/neurons'}>neuron models</Link> with experimental data on post-synaptic potential (PSP) (<Link className={`link theme-${theme}`} href={'https://pubmed.ncbi.nlm.nih.gov/10966620/'}>Magee and Cook, 2000</Link>) and back-propagating action potential (bAP) attenuation (<Link className={`link theme-${theme}`} href={'https://pubmed.ncbi.nlm.nih.gov/11731556/'}>Golding et al., 2001</Link>).\n                                    </p>\n                                </InfoBox>\n                            </div>\n                        </StickyContainer>\n                    </div>\n                </div>\n            </Filters>\n            <DataContainer theme={theme}\n                navItems={[\n                    { id: 'bapSection', label: 'bAP' },\n                    { id: 'pspSection', label: 'PSP' },\n                ]}>\n\n                <Collapsible id=\"bapSection\" title={`bAP`}>\n                    <p className='mb-4'>Action potentials generated at the soma or axon initial segment (AIS) travels backwards into the dendrites. The height of the AP is generally smaller at the level of the dendrites than at the level of the soma. The amount of decrement depends on the distance from the soma.</p>\n                    <BAPValidationGraph theme={theme} />\n                </Collapsible>\n\n\n                <Collapsible id=\"pspSection\" title={`PSP`}>\n                    <p className='mb-4'>Post-synaptic potential (PSP) measured at the soma is generally smaller than the PSP measured at the level of the synapse. The amount of decrement depends on the distance from the soma. </p>\n                    <PSPAttenuationGraph theme={theme} />\n                </Collapsible>\n\n\n            </DataContainer>\n\n        </>\n    );\n};\n\n\nexport default NeuronView;\n","import Head from 'next/head';\nimport NeuronsView from '@/views/4_validations/Neurons';\n\nexport default function NeuronsPage() {\n    const metadata = {\n        title: 'Neurons - Validation | The Hippocampus Hub',\n        description:\n            'We validated neuron models with experimental data on post-synaptic potential (PSP) and back-propagating action potential (bAP) attenuation in the hippocampus.',\n        keywords: [\n            'Neurons',\n            'PSP',\n            'bAP',\n            'Validation Data',\n            'Hippocampus',\n            'Neuroscience',\n            'Blue Brain Project',\n        ],\n        author: 'Blue Brain Project',\n        creator: 'EPFL Blue Brain Project',\n        publisher: 'The Hippocampus Hub',\n    };\n\n    return (\n        <>\n            <Head>\n                <title>{metadata.title}</title>\n                <meta name=\"description\" content={metadata.description} />\n                <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n                <meta name=\"author\" content={metadata.author} />\n                <meta name=\"creator\" content={metadata.creator} />\n                <meta name=\"publisher\" content={metadata.publisher} />\n            </Head>\n\n            <NeuronsView />\n        </>\n    );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};"],"names":["__assign","Object","assign","t","e","n","r","arguments","length","i","prototype","hasOwnProperty","call","apply","__rest","indexOf","getOwnPropertySymbols","propertyIsEnumerable","typesettingFailed","concat","message","toString","__webpack_exports__","Z","h","m","v","f","current","style","visibility","p","_","o","b","inline","hideUntilTypeset","onInitTypeset","onTypeset","s","text","u","dynamic","a","typesettingOptions","l","renderMode","c","children","y","react__WEBPACK_IMPORTED_MODULE_0__","useRef","d","useContext","_MathJaxContext__WEBPACK_IMPORTED_MODULE_1__","g","window","useLayoutEffect","useEffect","Error","fn","version","promise","then","startup","document","clear","updateDocument","innerHTML","outerHTML","endsWith","options","display","catch","typesetClear","typesetPromise","Hub","Queue","createElement","ref","v2Promise","v3Promise","MathJaxBaseContext","createContext","DEFAULT_V2_SRC","DEFAULT_V3_SRC","config","src","onStartup","onLoad","onError","MathJax","type","async","addEventListener","getElementsByTagName","appendChild","Promise","reject","Provider","value","__NEXT_P","push","__webpack_require__","centered","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","styles","classNames","layers","theme","default","hover","selected","selectedEdges","graphTheme","red","blue","green","purple","yellow","themeColors","experimental_data","reconstruction_data","digital_reconstruction","validations","predictions","neuriteTypes","volumeSections","achConcentrations","cellGroup","defaultSelection","experimentalData","layerAnatomy","layer","neuronMorphology","mtype","instance","neuronElectrophysiology","etype","etype_instance","reconstructionData","volume","volume_section","cellComposition","neurons","digitalReconstruction","region","morphologyLibrary","morphology","schafferCollateral","prelayer","postlayer","connectionAnatomy","connectionPhysiology","acetylcholineEffectsOnCell","acetylcholineEffectsOnSynapses","ach_concentration","NeuronModelLibrary","synapticPathways","acetylcholine","neuriteColor","all","axon","apical","basal","dendrite","soma","Chart","register","ScatterController","LinearScale","PointElement","LineElement","Tooltip","Legend","neurons_BAPValidationGraph","chartRef","chartInstance","setChartInstance","useState","bAPValidationData","setBAPValidationData","fetch","dataPath","response","json","data","error","console","createChart","ctx","getContext","modelData","values","value_map","expData","randomOffset","Math","random","modelDataset","keys","distance","map","key","x","model_mean","yMin","model_std","yMax","expDataset","exp_mean","newChart","datasets","label","backgroundColor","borderColor","pointStyle","pointRadius","pointHoverRadius","order","animation","duration","responsive","maintainAspectRatio","scales","position","title","min","max","plugins","legend","align","labels","usePointStyle","boxWidth","boxHeight","padding","tooltip","callbacks","context","dataset","parsed","toFixed","id","afterDatasetsDraw","chart","args","forEach","meta","getDatasetMeta","hidden","element","index","tooltipPosition","dataPoint","yTop","getPixelForValue","yBottom","save","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","restore","handleResize","resize","removeEventListener","destroy","jsx_runtime","jsxs","Fragment","height","canvas","DownloadButton","onClick","downloadAsJson","LineController","neurons_PSPAttenuationGraph","windowSize","setWindowSize","width","pspAttenuationData","setPSPAttenuationData","modelFitData","expFitData","Distance","modelFitDataset","fit_model_data","expFitDataset","fit_exp_data","showLine","borderWidth","xValue","yValue","innerWidth","innerHeight","MathJaxContext","color","maxWidth","margin","Neurons","Filters","hasData","StickyContainer","Title","subtitle","role","InfoBox","Link","href","DataContainer","navItems","Collapsible","BAPValidationGraph","PSPAttenuationGraph","NeuronsPage","metadata","description","keywords","author","creator","publisher","Head","name","content","join","NeuronsView","module","exports"],"sourceRoot":""}