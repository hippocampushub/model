{"version":3,"file":"static/chunks/pages/validations/acetylcholine-0149f2bc2809e813.js","mappings":"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","sources":["webpack://_N_E/?7da8","webpack://_N_E/./src/views/4_validations/Acetylcholine.tsx","webpack://_N_E/./src/pages/validations/acetylcholine.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/validations/acetylcholine\",\n      function () {\n        return require(\"private-next-pages/validations/acetylcholine.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/validations/acetylcholine\"])\n      });\n    }\n  ","import React, { useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport List from '@/components/List';\n\nimport models from \"./models.json\";\nimport { dataPath } from '@/config';\nimport { QuickSelectorEntry } from '@/types';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\nimport TraceGraph from '../5_predictions/components/Trace';\nimport MeanFiringRatePlot from '../5_predictions/components/MeanFiringRatePlot';\nimport TimeSpikePlot from '../5_predictions/components/TimeSpikePlot';\nimport DownloadButton from '@/components/DownloadButton';\nimport { downloadAsJson } from '@/utils';\n\nconst concentrations = [0, 1, 5, 10, 20, 50, 100, 200, 500, 1000];\n\nconst getConcentration = (): number[] => concentrations;\nconst getMtypes = (): string[] => [...new Set(models.map(model => model.mtype))].sort();\nconst getEtypes = (mtype: string): string[] => [...new Set(models.filter(model => model.mtype === mtype).map(model => model.etype))].sort();\n\nconst formatConcentration = (value: number): string => `[ACh] = ${value}Î¼M`;\n\nconst AcetylcholineView: React.FC = () => {\n    const router = useRouter();\n    const theme = 4;\n\n    const [quickSelection, setQuickSelection] = useState<Record<string, string | number>>({});\n    const [spikeTimeData, setSpikeTimeData] = useState<any>(null);\n    const [meanFiringRateData, setMeanFiringRateData] = useState<any>(null);\n    const [traceData, setTraceData] = useState<any>(null);\n\n    useEffect(() => {\n        if (!router.isReady) return;\n\n        const { mtype, etype, concentration } = router.query;\n        const newQuickSelection: Record<string, string | number> = {};\n\n        if (typeof mtype === 'string') newQuickSelection.mtype = mtype;\n        if (typeof concentration === 'string') newQuickSelection.concentration = parseInt(concentration);\n\n        if (typeof mtype === 'string') {\n            const availableEtypes = getEtypes(mtype);\n            if (typeof etype === 'string' && availableEtypes.includes(etype)) {\n                newQuickSelection.etype = etype;\n            } else {\n                newQuickSelection.etype = availableEtypes[0] || '';\n            }\n        }\n\n        setQuickSelection(newQuickSelection);\n\n        if (Object.keys(newQuickSelection).length === 0) {\n            const defaultMtype = getMtypes()[0];\n            const defaultSelection = {\n                concentration: 0,\n                mtype: defaultMtype,\n                etype: getEtypes(defaultMtype)[0] || '',\n            };\n            setQuickSelection(defaultSelection);\n            router.replace({ query: defaultSelection }, undefined, { shallow: true });\n        }\n    }, [router.isReady, router.query]);\n\n    useEffect(() => {\n        const fetchSpikeTimeData = async () => {\n            const { concentration } = quickSelection;\n            if (concentration === undefined) return;\n\n            try {\n                const response = await fetch(`${dataPath}/4_validations/acetylcholine/${concentration}/spike-time.json`);\n                const data = await response.json();\n                setSpikeTimeData(data);\n            } catch (error) {\n                console.error('Error fetching spike-time data:', error);\n                setSpikeTimeData(null);\n            }\n        };\n\n        fetchSpikeTimeData();\n    }, [quickSelection.concentration]);\n\n    useEffect(() => {\n        const fetchOtherData = async () => {\n            const { concentration, mtype, etype } = quickSelection;\n            if (concentration === undefined || !mtype || !etype) return;\n\n            const otherDataTypes = [\n                { name: 'mean-firing-rate', setter: setMeanFiringRateData },\n                { name: 'trace', setter: setTraceData }\n            ];\n\n            for (const { name, setter } of otherDataTypes) {\n                try {\n                    const response = await fetch(`${dataPath}/4_validations/acetylcholine/${concentration}/${mtype}-${etype}/${name}.json`);\n                    const data = await response.json();\n                    setter(data);\n                } catch (error) {\n                    console.error(`Error fetching ${name} data:`, error);\n                    setter(null);\n                }\n            }\n        };\n\n        fetchOtherData();\n    }, [quickSelection]);\n\n    const setParams = (params: Record<string, string | number>): void => {\n        const newQuery = { ...router.query, ...params };\n        router.push({ query: newQuery, pathname: router.pathname }, undefined, { shallow: true });\n    };\n\n    const handleConcentrationSelect = (concentration: number) => {\n        setQuickSelection(prev => ({ ...prev, concentration }));\n        setParams({ concentration });\n    }\n\n    const handleMtypeSelect = (mtype: string) => {\n        const availableEtypes = getEtypes(mtype);\n        const newEtype = availableEtypes[0] || '';\n        setQuickSelection(prev => ({ ...prev, mtype, etype: newEtype }));\n        setParams({ mtype, etype: newEtype });\n    };\n\n    const handleEtypeSelect = (etype: string) => {\n        setQuickSelection(prev => ({ ...prev, etype }));\n        setParams({ etype });\n    };\n\n    const mtypes = getMtypes();\n    const etypes = getEtypes(quickSelection.mtype as string);\n\n    const qsEntries: QuickSelectorEntry[] = [\n        {\n            title: 'Concentration',\n            key: 'concentration',\n            values: concentrations,\n            setFn: handleConcentrationSelect,\n            formatFn: formatConcentration,\n        },\n        {\n            title: 'M-type',\n            key: 'mtype',\n            values: mtypes,\n            setFn: handleMtypeSelect,\n        },\n        {\n            title: 'E-Type',\n            key: 'etype',\n            values: etypes,\n            setFn: handleEtypeSelect,\n        },\n    ];\n\n    return (\n        <>\n            <Filters theme={theme}>\n                <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n                    <div className=\"w-full lg:w-1/3 md:w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n                        <StickyContainer>\n                            <Title\n                                title=\"Acetylcholine\"\n                                subtitle=\"Validations\"\n                                theme={theme}\n                            />\n                            <div role=\"information\">\n                                <InfoBox>\n                                    <p>\n                                        We validated the impact of acetylcholine at network level using <Link className={`link theme-${theme}`} href={'/experimental-data/acetylcholine/'}>available data from literature</Link>. As in the experiments, we observe different network dynamics depending on the concentration of acetylcholine.\n                                    </p>\n                                </InfoBox>\n                            </div>\n                        </StickyContainer>\n                    </div>\n                    <div className=\"flex flex-col-reverse md:flex-row-reverse gap-8 mb-12 md:mb-0 mx-8 md:mx-0 lg:w-2/3 md:w-full flex-grow md:flex-none\">\n                        <div className={`selector__column theme-${theme} w-full`}>\n                            <div className={`selector__head theme-${theme}`}>Select a cell</div>\n                            <div className=\"selector__body\">\n                                <List\n                                    block\n                                    list={mtypes}\n                                    value={quickSelection.mtype as string}\n                                    title={`M-type ${mtypes.length ? '(' + mtypes.length + ')' : ''}`}\n                                    onSelect={handleMtypeSelect}\n                                    theme={theme}\n                                />\n                                <List\n                                    block\n                                    list={etypes}\n                                    value={quickSelection.etype as string}\n                                    title={`E-type ${etypes.length ? '(' + etypes.length + ')' : ''}`}\n                                    onSelect={handleEtypeSelect}\n                                    theme={theme}\n                                />\n                            </div>\n                        </div>\n                        <div className={`selector__column theme-${theme} w-full`}>\n                            <div className={`selector__head theme-${theme}`}>Select a concentration</div>\n                            <div className=\"selector__body flex\">\n                                <List\n                                    block\n                                    list={concentrations.map(formatConcentration)}\n                                    value={formatConcentration(quickSelection.concentration as number)}\n                                    title={`Concentration ${concentrations.length ? '(' + concentrations.length + ')' : ''}`}\n                                    onSelect={(value: string) => handleConcentrationSelect(parseInt(value.split(' ')[2].replace('Î¼M', '')))}\n                                    theme={theme}\n                                    grow={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Filters>\n            <DataContainer\n                theme={theme}\n                navItems={[\n                    { id: 'spikeTimeSection', label: \"Spike Time\" },\n                    { id: 'meanFiringRateSection', label: \"Mean Firing Rate\" },\n                    { id: 'traceSection', label: \"Traces\" }\n                ]}\n                quickSelectorEntries={qsEntries}\n            >\n                <Collapsible id='spikeTimeSection' properties={[\"[Ach]=\" + quickSelection.concentration + \"Î¼m\"]} title=\"Spike Time\">\n                    <div className=\"graph\">\n                        <TimeSpikePlot plotData={spikeTimeData} />\n                    </div>\n                    <div className=\"mt-4\">\n                        <DownloadButton onClick={() => downloadAsJson(spikeTimeData, 'layer-anatommy-summary.json')} theme={theme}>\n\n                            <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>[Ach]={quickSelection.concentration}Î¼M</span>\n                            <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{quickSelection.mtype}-{quickSelection.etype}</span>\n\n                            Spike Time\n                        </DownloadButton>\n\n                    </div>\n\n                </Collapsible>\n\n                <Collapsible id='meanFiringRateSection' properties={[\"[Ach]=\" + quickSelection.concentration + \"Î¼m\", quickSelection.mtype + \"-\" + quickSelection.etype]} title=\"Mean Firing Rate\">\n                    <div className=\"graph\">\n                        <MeanFiringRatePlot plotData={meanFiringRateData} />\n                    </div>\n                    <div className=\"mt-4\">\n                        <DownloadButton onClick={() => downloadAsJson(meanFiringRateData, 'layer-anatommy-summary.json')} theme={theme}>\n\n                            <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>[Ach]={quickSelection.concentration}Î¼M</span>\n                            <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{quickSelection.mtype}-{quickSelection.etype}</span>\n\n                            Mean Firing Rate\n                        </DownloadButton>\n\n                    </div>\n\n                </Collapsible>\n\n                <Collapsible id='traceSection' properties={[\"[Ach]=\" + quickSelection.concentration + \"Î¼m\", quickSelection.mtype + \"-\" + quickSelection.etype]} title=\"Traces\">\n                    <div className=\"graph\">\n                        <TraceGraph plotData={traceData} />\n                    </div>\n                    <div className=\"mt-4\">\n                        <DownloadButton onClick={() => downloadAsJson(traceData, 'layer-anatommy-summary.json')} theme={theme}>\n                            <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>[Ach]={quickSelection.concentration}Î¼M</span>\n                            <span style={{ textTransform: \"capitalize\" }} className='collapsible-property small'>{quickSelection.mtype}-{quickSelection.etype}</span>\n\n                            Trace\n                        </DownloadButton>\n\n                    </div>\n\n                </Collapsible>\n            </DataContainer >\n        </>\n    );\n};\n\nexport default AcetylcholineView;","import Head from 'next/head';\nimport AcetylcholineView from '@/views/4_validations/Acetylcholine';\n\nexport default function AcetylcholinePage() {\n  const metadata = {\n    title: 'Acetylcholine - Validation | The Hippocampus Hub',\n    description:\n      'We validated the impact of acetylcholine at the network level using available data from literature. Different network dynamics were observed depending on the concentration of acetylcholine.',\n    keywords: [\n      'Acetylcholine',\n      'Network Activity',\n      'Synapse Modulation',\n      'Validation Data',\n      'Hippocampus',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <AcetylcholineView />\n    </>\n  );\n}"],"names":["window","__NEXT_P","push","__webpack_require__","concentrations","getMtypes","Set","models","map","model","mtype","sort","getEtypes","filter","etype","formatConcentration","concat","value","Acetylcholine","router","useRouter","quickSelection","setQuickSelection","useState","spikeTimeData","setSpikeTimeData","meanFiringRateData","setMeanFiringRateData","traceData","setTraceData","useEffect","isReady","concentration","query","newQuickSelection","parseInt","availableEtypes","includes","Object","keys","length","defaultMtype","defaultSelection","replace","undefined","shallow","fetchSpikeTimeData","response","fetch","dataPath","data","json","error","console","fetchOtherData","name","setter","setParams","newQuery","params","pathname","handleConcentrationSelect","prev","handleMtypeSelect","newEtype","handleEtypeSelect","mtypes","etypes","qsEntries","title","key","values","setFn","formatFn","jsx_runtime","jsxs","Fragment","jsx","Filters","theme","div","className","StickyContainer","Title","subtitle","role","InfoBox","p","Link","href","List","block","list","onSelect","split","grow","DataContainer","navItems","id","label","quickSelectorEntries","Collapsible","properties","TimeSpikePlot","plotData","DownloadButton","onClick","downloadAsJson","span","style","textTransform","MeanFiringRatePlot","TraceGraph","AcetylcholinePage","metadata","description","keywords","author","creator","publisher","Head","meta","content","join","AcetylcholineView"],"sourceRoot":""}