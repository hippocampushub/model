{"version":3,"file":"static/chunks/pages/validations/connection-physiology-40ad685a30f6e290.js","mappings":"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","sources":["webpack://_N_E/?72b3","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/views/4_validations/connection-physiology/PSPAmplitude.tsx","webpack://_N_E/./src/views/4_validations/connection-physiology/PSPCVValidation.tsx","webpack://_N_E/./src/views/4_validations/ConnnectionPhysiology.tsx","webpack://_N_E/./src/pages/validations/connection-physiology.tsx","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/validations/connection-physiology\",\n      function () {\n        return require(\"private-next-pages/validations/connection-physiology.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/validations/connection-physiology\"])\n      });\n    }\n  ","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import { Layer, NeuriteType, VolumeSection, AchConcentration, CellGroup, Theme, GraphTheme, ThemeColors } from './types';\nimport NeuronModelLibrary from './views/2_reconstruction-data/NeuronModelLibrary';\nimport AcetylcholineView from './views/4_validations/Acetylcholine';\n\nexport const layers: Layer[] = [\n  'SLM',\n  'SR',\n  'SP',\n  'SO',\n];\n\nexport const theme: Theme = {\n  1: { default: 0x44405B, hover: 0x7D656F, selected: 0xB68983, selectedEdges: 0xEFAE97 },\n  2: { default: 0x44405B, hover: 0x7B5B6A, selected: 0xB37579, selectedEdges: 0xEA9088 },\n  3: { default: 0x44405B, hover: 0x715970, selected: 0x9F7184, selectedEdges: 0xCC8A99 },\n  4: { default: 0x44405B, hover: 0x625D77, selected: 0x807B92, selectedEdges: 0x9E98AE },\n  5: { default: 0x393D5E, hover: 0x595D79, selected: 0x6E7B97, selectedEdges: 0x8398B5 },\n};\n\nexport const graphTheme: GraphTheme = {\n  red: \"#C46785\",\n  blue: \"#3b4165\",\n  green: \"#7FD982\",\n  purple: \"#7F5482\",\n  yellow: \"#f9f871\",\n};\n\nexport const themeColors: ThemeColors = {\n  experimental_data: \"#EFAE97\",\n  reconstruction_data: \"#EA9088\",\n  digital_reconstruction: \"#CC8A99\",\n  validations: \"#9E98AE\",\n  predictions: \"#8398B5\",\n};\n\n\n\nexport const neuriteTypes: NeuriteType[] = [\n  'all',\n  'axon',\n  'apical',\n  'basal',\n  'dendrite',\n  'soma',\n\n];\n\nexport const volumeSections: VolumeSection[] = [\n  'region',\n  'slice',\n  'cylinder',\n];\n\n\nexport const achConcentrations: AchConcentration[] = [\n  '0um',\n  '10um',\n  '100um'\n];\n\nexport const cellGroup: CellGroup[] = [\n  'All',\n  'Excitatory',\n  'Inhibitory',\n  'SLM_PPA',\n  'SO_BP',\n  'SO_BS',\n  'SO_OLM',\n  'SO_Tri',\n  'SP_AA',\n  'SP_BS',\n  'SP_CCKBC',\n  'SP_Ivy',\n  'SP_PC',\n  'SP_PVBC',\n  'SR_SCA'\n]\n\nexport const defaultSelection = {\n  experimentalData: {\n    layerAnatomy: {\n      layer: 'SLM',\n    },\n    neuronMorphology: {\n      layer: 'SLM',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    neuronElectrophysiology: {\n      etype: 'bAC',\n      etype_instance: '95810035',\n    },\n  },\n  reconstructionData: {\n    volume: {\n      volume_section: 'region',\n    },\n    cellComposition: {\n      volume_section: 'region',\n    },\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: 'CA1_int_bAC_011127HP1_20190329115610',\n    },\n  },\n  digitalReconstruction: {\n    region: {\n      volume_section: 'region',\n    },\n    morphologyLibrary: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      morphology: '011127HP1',\n    },\n    schafferCollateral: {\n      volume_section: 'region',\n      prelayer: 'SC',\n      postlayer: 'All'\n    },\n    connectionAnatomy: {\n      volume_section: 'region',\n      prelayer: 'All',\n      postlayer: 'All'\n    },\n    connectionPhysiology: {\n      volume_section: 'region',\n      prelayer: 'all',\n      postlayer: 'all'\n    },\n    acetylcholineEffectsOnCell: {\n      morphology: \"450290\",\n      etype: \"cNAC\",\n      mtype: \"SO_BP\"\n    },\n    acetylcholineEffectsOnSynapses: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory'\n    },\n\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    NeuronModelLibrary: {\n      mtype: 'SO_BP',\n      etype: 'cNAC',\n      morphology: '980120A_-_Scale_x1.000_y0.900_z1.000'\n    },\n    synapticPathways: {\n      volume_section: 'slice',\n      prelayer: 'All',\n      postlayer: 'All',\n    },\n    acetylcholine: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory',\n    },\n  },\n\n};\n\nexport const neuriteColor: Record<NeuriteType, string> = {\n  all: '#1fcf1f',\n  axon: '#1111ff',\n  apical: '#f442ad',\n  basal: '#ff1111',\n  dendrite: '#ff1111',\n  soma: '#000',\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n    Chart,\n    ScatterController,\n    LinearScale,\n    PointElement,\n    Tooltip,\n    Title,\n    Legend,\n    ChartType,\n    LegendItem,\n} from 'chart.js';\nimport { downloadAsJson } from '@/utils';\nimport { GraphTheme } from '@/types';\nimport DownloadButton from '@/components/DownloadButton';\nimport { graphTheme } from '@/constants';\nimport { dataPath } from '@/config';\n\nChart.register(\n    ScatterController,\n    LinearScale,\n    PointElement,\n    Tooltip,\n    Title,\n    Legend\n);\n\ntype PSPAmplitudeData = {\n    name: string;\n    description: string;\n    units: string;\n    value_map: {\n        pathway: { [key: string]: string };\n        post: { [key: string]: string };\n        exp_mean: { [key: string]: number };\n        model_mean: { [key: string]: number };\n        exp_std: { [key: string]: number | string };\n        model_std: { [key: string]: number };\n        connection_class: { [key: string]: string };\n        pre: { [key: string]: string };\n    };\n};\n\ntype PSPAmplitudeProps = {\n    theme?: number;\n};\n\nconst PSPAmplitude: React.FC<PSPAmplitudeProps> = ({ theme }) => {\n    const chartRef = useRef<HTMLCanvasElement | null>(null);\n    const chartInstanceRef = useRef<Chart | null>(null);\n    const [data, setData] = useState<PSPAmplitudeData | null>(null);\n    const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n\n    useEffect(() => {\n        fetch(dataPath + '/4_validations/connection-physiology/psp-amplitude.json')\n            .then(response => response.json())\n            .then(jsonData => setData(jsonData))\n            .catch(error => console.error('Error fetching PSP Amplitude data:', error));\n    }, []);\n\n    useEffect(() => {\n        const updateWindowSize = () => {\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        };\n\n        updateWindowSize();\n        window.addEventListener('resize', updateWindowSize);\n        return () => window.removeEventListener('resize', updateWindowSize);\n    }, []);\n\n    useEffect(() => {\n        if (chartRef.current && data && data.value_map && windowSize.width > 0) {\n            const ctx = chartRef.current.getContext('2d');\n            if (ctx) {\n                if (chartInstanceRef.current) {\n                    chartInstanceRef.current.destroy();\n                }\n\n                const chartData = Object.keys(data.value_map.exp_mean).map(key => ({\n                    x: data.value_map.exp_mean[key],\n                    y: data.value_map.model_mean[key],\n                    xError: data.value_map.exp_std[key] === \"None\" ? 0 : Number(data.value_map.exp_std[key]),\n                    yError: data.value_map.model_std[key],\n                    connectionClass: data.value_map.connection_class[key],\n                }));\n\n                const customPlugin = {\n                    id: 'customPlugin',\n                    beforeDatasetsDraw(chart: Chart, args: any, options: any) {\n                        const { ctx, chartArea: { top, bottom, left, right }, scales: { x, y } } = chart;\n\n                        ctx.save();\n\n                        ctx.strokeStyle = 'rgba(200, 200, 200, 0.5)';\n                        ctx.setLineDash([5, 5]);\n                        ctx.beginPath();\n                        ctx.moveTo(left, bottom);\n                        ctx.lineTo(right, top);\n                        ctx.stroke();\n\n                        ctx.setLineDash([]);\n                        chartData.forEach((datapoint) => {\n                            const xPixel = x.getPixelForValue(datapoint.x);\n                            const yPixel = y.getPixelForValue(datapoint.y);\n\n                            ctx.strokeStyle = 'red';\n                            ctx.lineWidth = 2;\n                            const xErrorPixels = Math.abs(x.getPixelForValue(datapoint.x + datapoint.xError) - x.getPixelForValue(datapoint.x));\n                            ctx.beginPath();\n                            ctx.moveTo(xPixel - xErrorPixels, yPixel);\n                            ctx.lineTo(xPixel + xErrorPixels, yPixel);\n                            ctx.stroke();\n\n                            ctx.strokeStyle = 'black';\n                            ctx.lineWidth = 2;\n                            const yErrorPixels = Math.abs(y.getPixelForValue(datapoint.y + datapoint.yError) - y.getPixelForValue(datapoint.y));\n                            ctx.beginPath();\n                            ctx.moveTo(xPixel, yPixel - yErrorPixels);\n                            ctx.lineTo(xPixel, yPixel + yErrorPixels);\n                            ctx.stroke();\n                        });\n\n                        ctx.restore();\n                    }\n                };\n\n                chartInstanceRef.current = new Chart(ctx, {\n                    type: 'scatter' as ChartType,\n                    data: {\n                        datasets: [{\n                            data: chartData,\n                            backgroundColor: (context) => {\n                                const connectionClass = chartData[context.dataIndex].connectionClass;\n                                switch (connectionClass) {\n                                    case 'E-E': return graphTheme.red;\n                                    case 'E-I': return graphTheme.green;\n                                    case 'I-E': return graphTheme.blue;\n                                    case 'I-I': return graphTheme.purple;\n                                    default: return 'black';\n                                }\n                            },\n                            pointStyle: 'circle',\n                            borderWidth: 1,\n                        }]\n                    },\n                    options: {\n                        animation: {\n                            duration: 0\n                        },\n                        aspectRatio: 1,\n                        scales: {\n                            x: {\n                                type: 'linear',\n                                position: 'bottom',\n                                title: {\n                                    display: true,\n                                    text: `PSP amplitude (${data.units}) Experiment`\n                                },\n                                min: 0,\n                                max: 3.0,\n                            },\n                            y: {\n                                type: 'linear',\n                                position: 'left',\n                                title: {\n                                    display: true,\n                                    text: `PSP amplitude (${data.units}) Model`,\n                                },\n                                min: 0,\n                                max: 3.0,\n                            }\n                        },\n                        plugins: {\n                            legend: {\n                                display: true,\n                                position: 'top',\n                                align: 'end',\n                                labels: {\n                                    usePointStyle: true,\n                                    pointStyle: 'circle',\n                                    borderRadius: 0,\n                                    boxWidth: 6,\n                                    boxHeight: 6,\n                                    padding: 20,\n                                    font: {\n                                        size: 11,\n                                        weight: 'normal',\n                                    },\n                                    generateLabels: (chart): LegendItem[] => {\n                                        return ['E-E', 'E-I', 'I-E', 'I-I'].map((label, index) => ({\n                                            text: label,\n                                            fillStyle: label === 'E-E' ? graphTheme.red :\n                                                label === 'E-I' ? graphTheme.green :\n                                                    label === 'I-E' ? graphTheme.blue : graphTheme.purple,\n                                            hidden: false,\n                                            index: index,\n                                            strokeStyle: 'transparent',\n                                            lineWidth: 0,\n                                            fontColor: 'black',\n                                            datasetIndex: 0,\n                                        }));\n                                    }\n                                }\n                            },\n                            tooltip: {\n                                callbacks: {\n                                    label: (context) => {\n                                        const dataIndex = context.dataIndex;\n                                        const pathway = data.value_map.pathway[dataIndex];\n                                        return `${pathway}: (${context.parsed.x.toFixed(2)}, ${context.parsed.y.toFixed(2)})`;\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    plugins: [customPlugin]\n                });\n            }\n        }\n    }, [chartRef, windowSize, data]);\n\n    if (!data || !data.value_map) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n            <div className=\"graph graph--rect flex justify-center\">\n                <canvas ref={chartRef} />\n            </div>\n            <div className=\"mt-4\">\n                <DownloadButton theme={theme} onClick={() => downloadAsJson(data, `PSP-Amplitude-Data.json`)}>\n                    PSP amplitude\n                </DownloadButton>\n            </div>\n        </div>\n    );\n};\n\nexport default PSPAmplitude;","import React, { useEffect, useRef, useState } from 'react';\nimport {\n    Chart,\n    ScatterController,\n    LinearScale,\n    PointElement,\n    Tooltip,\n    Title,\n    Legend,\n    ChartType,\n    LegendItem,\n} from 'chart.js';\nimport { graphTheme } from '@/constants';\nimport { downloadAsJson } from '@/utils';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\n\nChart.register(\n    ScatterController,\n    LinearScale,\n    PointElement,\n    Tooltip,\n    Title,\n    Legend\n);\n\ntype PSPCVData = {\n    name: string;\n    description: string;\n    units: string;\n    value_map: {\n        pathway: { [key: string]: string };\n        post: { [key: string]: string };\n        exp_mean: { [key: string]: number };\n        model_mean: { [key: string]: number };\n        exp_std: { [key: string]: number };\n        model_std: { [key: string]: number };\n        connection_class: { [key: string]: string };\n        pre: { [key: string]: string };\n    };\n};\n\ntype PSPCVValidationProps = {\n    theme?: number;\n};\n\nconst PSPCVValidation: React.FC<PSPCVValidationProps> = ({ theme }) => {\n    const chartRef = useRef<HTMLCanvasElement | null>(null);\n    const chartInstanceRef = useRef<Chart | null>(null);\n    const [data, setData] = useState<PSPCVData | null>(null);\n    const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n\n    useEffect(() => {\n        fetch(dataPath + '/4_validations/connection-physiology/psp-cv-validation.json')\n            .then(response => response.json())\n            .then(jsonData => setData(jsonData))\n            .catch(error => console.error('Error fetching PSP CV validation data:', error));\n    }, []);\n\n    useEffect(() => {\n        const updateWindowSize = () => {\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        };\n\n        updateWindowSize();\n        window.addEventListener('resize', updateWindowSize);\n        return () => window.removeEventListener('resize', updateWindowSize);\n    }, []);\n\n    useEffect(() => {\n        if (chartRef.current && data && data.value_map && windowSize.width > 0) {\n            const ctx = chartRef.current.getContext('2d');\n            if (ctx) {\n                if (chartInstanceRef.current) {\n                    chartInstanceRef.current.destroy();\n                }\n\n                const chartData = Object.keys(data.value_map.exp_mean).map(key => ({\n                    x: data.value_map.exp_mean[key],\n                    y: data.value_map.model_mean[key],\n                    xError: data.value_map.exp_std[key],\n                    yError: data.value_map.model_std[key],\n                    connectionClass: data.value_map.connection_class[key],\n                }));\n\n                const customPlugin = {\n                    id: 'customPlugin',\n                    beforeDatasetsDraw(chart: Chart, args: any, options: any) {\n                        const { ctx, chartArea: { top, bottom, left, right }, scales: { x, y } } = chart;\n\n                        ctx.save();\n\n                        ctx.strokeStyle = 'rgba(200, 200, 200, 0.9)';\n                        ctx.setLineDash([5, 5]);\n                        ctx.beginPath();\n                        ctx.moveTo(left, bottom);\n                        ctx.lineTo(right, top);\n                        ctx.stroke();\n\n                        ctx.setLineDash([]);\n                        chartData.forEach((datapoint) => {\n                            const xPixel = x.getPixelForValue(datapoint.x);\n                            const yPixel = y.getPixelForValue(datapoint.y);\n\n                            ctx.strokeStyle = graphTheme.red;\n                            ctx.lineWidth = 2;\n                            const xErrorPixels = Math.abs(x.getPixelForValue(datapoint.x + datapoint.xError) - x.getPixelForValue(datapoint.x));\n                            ctx.beginPath();\n                            ctx.moveTo(xPixel - xErrorPixels, yPixel);\n                            ctx.lineTo(xPixel + xErrorPixels, yPixel);\n                            ctx.stroke();\n\n                            ctx.strokeStyle = 'black';\n                            const yErrorPixels = Math.abs(y.getPixelForValue(datapoint.y + datapoint.yError) - y.getPixelForValue(datapoint.y));\n                            ctx.beginPath();\n                            ctx.moveTo(xPixel, yPixel - yErrorPixels);\n                            ctx.lineTo(xPixel, yPixel + yErrorPixels);\n                            ctx.stroke();\n                        });\n\n                        ctx.restore();\n                    }\n                };\n\n                chartInstanceRef.current = new Chart(ctx, {\n                    type: 'scatter' as ChartType,\n                    data: {\n                        datasets: [{\n                            data: chartData,\n                            backgroundColor: (context) => {\n                                const connectionClass = chartData[context.dataIndex].connectionClass;\n                                switch (connectionClass) {\n                                    case 'E-E': return graphTheme.red;\n                                    case 'E-I': return graphTheme.green;\n                                    case 'I-E': return graphTheme.blue;\n                                    case 'I-I': return graphTheme.purple;\n                                    default: return 'black';\n                                }\n                            },\n                            pointStyle: 'circle',\n                        }]\n                    },\n                    options: {\n                        animation: {\n                            duration: 0\n                        },\n                        aspectRatio: 1,\n                        scales: {\n                            x: {\n                                type: 'linear',\n                                position: 'bottom',\n                                title: {\n                                    display: true,\n                                    text: `PSP CV Experiment`\n                                },\n                                min: 0,\n                                max: 0.6,\n                            },\n                            y: {\n                                type: 'linear',\n                                position: 'left',\n                                title: {\n                                    display: true,\n                                    text: `PSP CV Model`,\n                                },\n                                min: 0,\n                                max: 0.6,\n                            }\n                        },\n                        plugins: {\n                            legend: {\n                                display: true,\n                                position: 'top',\n                                align: 'end',\n                                labels: {\n                                    usePointStyle: true,\n                                    pointStyle: 'circle',\n                                    boxWidth: 6,\n                                    boxHeight: 6,\n                                    padding: 20,\n                                    font: {\n                                        size: 11,\n                                        weight: 'normal',\n                                    },\n                                    generateLabels: (chart): LegendItem[] => {\n                                        return ['E-E', 'E-I', 'I-E', 'I-I'].map((label, index) => ({\n                                            text: label,\n                                            fillStyle: label === 'E-E' ? graphTheme.red :\n                                                label === 'E-I' ? graphTheme.green :\n                                                    label === 'I-E' ? graphTheme.blue : graphTheme.purple,\n                                            strokeStyle: 'transparent',\n                                            hidden: false,\n                                            index: index,\n                                            datasetIndex: 0,\n                                            lineWidth: 0,\n                                            fontColor: 'black',\n                                        }));\n                                    }\n                                }\n                            },\n                            tooltip: {\n                                callbacks: {\n                                    label: (context) => {\n                                        const dataIndex = context.dataIndex;\n                                        const pathway = data.value_map.pathway[dataIndex];\n                                        return `${pathway}: (${context.parsed.x.toFixed(2)}, ${context.parsed.y.toFixed(2)})`;\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    plugins: [customPlugin]\n                });\n            }\n        }\n    }, [chartRef, windowSize, data]);\n\n    if (!data || !data.value_map) {\n        return <div>Loading PSP CV validation data...</div>;\n    }\n\n    return (\n        <div>\n            <div className=\"graph graph--rect flex justify-center\">\n                <canvas ref={chartRef} />\n            </div>\n            <div className=\"mt-4\">\n                <DownloadButton theme={theme} onClick={() => downloadAsJson(data, `PSP-CV-Validation-Data.json`)}>\n                    PSP CV validation\n                </DownloadButton>\n            </div>\n        </div>\n    );\n};\n\nexport default PSPCVValidation;","import React from 'react';\nimport Link from 'next/link';\n\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\n\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\n\nimport PSPAmplitude from './connection-physiology/PSPAmplitude';\nimport PSPCVValidation from './connection-physiology/PSPCVValidation';\n\nconst ConnectionPhysiologyView: React.FC = () => {\n\n    const theme = 4;\n\n    return (\n        <>\n            <Filters theme={theme} hasData={true}>\n                <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n                    <div className=\"w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n                        <StickyContainer>\n                            <Title\n                                title=\"Connection Physiology\"\n                                subtitle=\"Validations\"\n                                theme={theme}\n                            />\n                            <div role=\"information\">\n                                <InfoBox>\n                                    <p>\n                                        We validated the <Link className={`link theme-${theme}`} href={'/digital-reconstructions/synapses'}>synaptome</Link> with <Link className={`link theme-${theme}`} href={'#'}>data on post-synaptic potential (PSP) and coefficient of variation (CV) of the first PSP</Link>.\n                                    </p>\n                                </InfoBox>\n                            </div>\n                        </StickyContainer>\n                    </div>\n                </div >\n            </Filters>\n            <DataContainer theme={theme}\n                navItems={[\n                    { id: 'pspSection', label: 'PSP' },\n                    { id: 'cvSection', label: 'CV' },\n                ]}>\n\n                <Collapsible id=\"anatomySection\" title={`PSP`}>\n                    <p className='mb-4'>Post-synaptic potential (PSP) measured at the soma.\n                    </p>\n                    <PSPAmplitude />\n                </Collapsible>\n\n                <Collapsible id=\"physiologySection\" title={`CV`}>\n                    <p className='mb-4'>PSP peaks can vary among several recordings due to the stochastic nature of the synaptic release. The coefficient of variation (CV) of the first PSP peak has been correlated with the number of vesicles in the release-ready pool (NRRP) (<Link className='link' href={\"https://pubmed.ncbi.nlm.nih.gov/31680928/\"}>Barros-Zulaica et al., 2019</Link>). </p>\n                    <PSPCVValidation />\n                </Collapsible>\n            </DataContainer >\n\n        </>\n    );\n};\n\n\nexport default ConnectionPhysiologyView;\n","import Head from 'next/head';\nimport ConnnectionPhysiologyView from '@/views/4_validations/ConnnectionPhysiology';\n\nexport default function ConnectionPhysiologyPage() {\n  const metadata = {\n    title: 'Connection Physiology - Validation | The Hippocampus Hub',\n    description:\n      'We validated the synaptome with data on post-synaptic potential (PSP) and coefficient of variation (CV) of the first PSP.',\n    keywords: [\n      'Connection Physiology',\n      'PSP',\n      'Synaptome',\n      'Coefficient of Variation',\n      'Validation Data',\n      'Hippocampus',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <ConnnectionPhysiologyView />\n    </>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};"],"names":["window","__NEXT_P","push","__webpack_require__","__webpack_exports__","Z","centered","children","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","styles","classNames","layers","theme","default","hover","selected","selectedEdges","graphTheme","red","blue","green","purple","yellow","themeColors","experimental_data","reconstruction_data","digital_reconstruction","validations","predictions","neuriteTypes","volumeSections","achConcentrations","cellGroup","defaultSelection","experimentalData","layerAnatomy","layer","neuronMorphology","mtype","instance","neuronElectrophysiology","etype","etype_instance","reconstructionData","volume","volume_section","cellComposition","neurons","digitalReconstruction","region","morphologyLibrary","morphology","schafferCollateral","prelayer","postlayer","connectionAnatomy","connectionPhysiology","acetylcholineEffectsOnCell","acetylcholineEffectsOnSynapses","ach_concentration","NeuronModelLibrary","synapticPathways","acetylcholine","neuriteColor","all","axon","apical","basal","dendrite","soma","Chart","register","ScatterController","LinearScale","PointElement","Tooltip","Title","Legend","connection_physiology_PSPAmplitude","chartRef","useRef","chartInstanceRef","data","setData","useState","windowSize","setWindowSize","width","height","useEffect","fetch","dataPath","then","response","json","jsonData","catch","error","console","updateWindowSize","innerWidth","innerHeight","addEventListener","removeEventListener","current","value_map","ctx","getContext","destroy","chartData","Object","keys","exp_mean","map","key","x","y","model_mean","xError","exp_std","Number","yError","model_std","connectionClass","connection_class","type","datasets","backgroundColor","context","dataIndex","pointStyle","borderWidth","options","animation","duration","aspectRatio","scales","position","title","display","text","concat","units","min","max","plugins","legend","align","labels","usePointStyle","borderRadius","boxWidth","boxHeight","padding","font","size","weight","generateLabels","label","index","fillStyle","hidden","strokeStyle","lineWidth","fontColor","datasetIndex","tooltip","callbacks","pathway","parsed","toFixed","id","beforeDatasetsDraw","chart","args","chartArea","top","bottom","left","right","save","setLineDash","beginPath","moveTo","lineTo","stroke","forEach","xPixel","getPixelForValue","datapoint","yPixel","xErrorPixels","Math","abs","yErrorPixels","restore","jsx_runtime","jsxs","canvas","ref","DownloadButton","onClick","downloadAsJson","connection_physiology_PSPCVValidation","ConnnectionPhysiology","Fragment","Filters","hasData","StickyContainer","subtitle","role","InfoBox","p","Link","href","DataContainer","navItems","Collapsible","PSPAmplitude","PSPCVValidation","ConnectionPhysiologyPage","metadata","description","keywords","author","creator","publisher","Head","meta","name","content","join","ConnnectionPhysiologyView","module","exports"],"sourceRoot":""}