{"version":3,"file":"static/chunks/pages/predictions/theta-ms-input-c917394dd78dc72b.js","mappings":"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","sources":["webpack://_N_E/?0e53","webpack://_N_E/./src/views/5_predictions/ThetaMSInput.tsx","webpack://_N_E/./src/pages/predictions/theta-ms-input.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/predictions/theta-ms-input\",\n      function () {\n        return require(\"private-next-pages/predictions/theta-ms-input.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/predictions/theta-ms-input\"])\n      });\n    }\n  ","import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport List from '@/components/List';\nimport ScatterPlotSelector from '@/components/ScatterPlotSelector';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\n\nimport TimeSpikePlot from './components/TimeSpikePlot';\nimport MeanFiringRatePlot from './components/MeanFiringRatePlot';\n\nimport { QuickSelectorEntry } from '@/types';\nimport models from \"./models.json\";\nimport { dataPath } from '@/config';\nimport DownloadButton from '@/components/DownloadButton';\nimport TraceGraph from './components/Trace';\nimport { downloadAsJson } from '@/utils';\nimport DistributionPlot from '@/components/DistributionPlot';\n\nconst ACh = [0, 0.1, 1, 3, 5];\nconst Depolarisation = [105, 120, 125]; // Updated to include all unique values\n\nconst getaCh = (): number[] => ACh;\nconst getDepolarisation = (): number[] => Depolarisation;\nconst getMtypes = (): string[] => [...new Set(models.map(model => model.mtype))].sort();\nconst getEtypes = (mtype: string): string[] => [...new Set(models.filter(model => model.mtype === mtype).map(model => model.etype))].sort();\n\nconst ThetaMSInputView: React.FC = () => {\n    const router = useRouter();\n    const theme = 5;\n\n    const [quickSelection, setQuickSelection] = useState<Record<string, string | number>>({});\n    const [spikeTimeData, setSpikeTimeData] = useState<any>(null);\n    const [meanFiringRateData, setMeanFiringRateData] = useState<any>(null);\n    const [traceData, setTraceData] = useState<any>(null);\n    const [spikeTimePlotSvg, setSpikeTimePlotSvg] = useState<string | null>(null);\n\n    useEffect(() => {\n        if (!router.isReady) return;\n\n        const { mtype, etype, ach, depolarisation } = router.query;\n        const newQuickSelection: Record<string, string | number> = {};\n\n        if (typeof mtype === 'string') newQuickSelection.mtype = mtype;\n        if (typeof ach === 'string') newQuickSelection.ach = parseFloat(ach);\n        if (typeof depolarisation === 'string') newQuickSelection.depolarisation = parseFloat(depolarisation);\n\n        if (typeof mtype === 'string') {\n            const availableEtypes = getEtypes(mtype);\n            if (typeof etype === 'string' && availableEtypes.includes(etype)) {\n                newQuickSelection.etype = etype;\n            } else {\n                newQuickSelection.etype = availableEtypes[0] || '';\n            }\n        }\n\n        setQuickSelection(newQuickSelection);\n\n        if (Object.keys(newQuickSelection).length === 0) {\n            const defaultMtype = getMtypes()[0];\n            const defaultSelection = {\n                mtype: defaultMtype,\n                etype: getEtypes(defaultMtype)[0] || '',\n                ach: ACh[0],\n                depolarisation: Depolarisation[0]\n            };\n            setQuickSelection(defaultSelection);\n            router.replace({ query: defaultSelection }, undefined, { shallow: true });\n        }\n    }, [router.isReady, router.query]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const { ach, depolarisation, mtype, etype } = quickSelection;\n            if (ach === undefined || depolarisation === undefined || !mtype || !etype) return;\n\n            const baseUrl = `${dataPath}/5_prediction/theta-ms-input/${ach}-${depolarisation}/${mtype}-${etype}`;\n\n            const dataTypes = [\n                { name: 'spike-time', setter: setSpikeTimeData },\n                { name: 'mean-firing-rate', setter: setMeanFiringRateData },\n                { name: 'trace', setter: setTraceData }\n            ];\n\n            for (const { name, setter } of dataTypes) {\n                try {\n                    const response = await fetch(`${baseUrl}/${name}.json`);\n                    if (!response.ok) {\n                        if (response.status === 404) {\n                            console.warn(`${name} data not found`);\n                            setter(null);\n                        } else {\n                            throw new Error(`HTTP error! status: ${response.status}`);\n                        }\n                    } else {\n                        const data = await response.json();\n                        setter(data);\n                    }\n                } catch (error) {\n                    console.error(`Error fetching ${name} data:`, error);\n                    setter(null);\n                }\n            }\n\n            // Fetch the spike-time-plot.svg\n            try {\n                const svgResponse = await fetch(`${baseUrl}/spike-time-plot.svg`);\n                if (!svgResponse.ok) {\n                    if (svgResponse.status === 404) {\n                        console.warn('Spike time plot SVG not found');\n                        setSpikeTimePlotSvg(null);\n                    } else {\n                        throw new Error(`HTTP error! status: ${svgResponse.status}`);\n                    }\n                } else {\n                    const svgText = await svgResponse.text();\n                    setSpikeTimePlotSvg(svgText);\n                }\n            } catch (error) {\n                console.error('Error fetching spike-time-plot.svg:', error);\n                setSpikeTimePlotSvg(null);\n            }\n        };\n\n        fetchData();\n    }, [quickSelection]);\n\n    const setParams = (params: Record<string, string | number>): void => {\n        const newQuery = { ...router.query, ...params };\n        router.push({ query: newQuery, pathname: router.pathname }, undefined, { shallow: true });\n    };\n\n    const handleMtypeSelect = (mtype: string) => {\n        const availableEtypes = getEtypes(mtype);\n        const newEtype = availableEtypes[0] || '';\n        setQuickSelection(prev => ({ ...prev, mtype, etype: newEtype }));\n        setParams({ mtype, etype: newEtype });\n    };\n\n    const handleEtypeSelect = (etype: string) => {\n        setQuickSelection(prev => ({ ...prev, etype }));\n        setParams({ etype });\n    };\n\n    const handleScatterPlotSelect = (ach: number, depolarisation: number) => {\n        setQuickSelection(prev => ({ ...prev, ach, depolarisation }));\n        setParams({ ach, depolarisation });\n    };\n\n    const mtypes = getMtypes();\n    const etypes = getEtypes(quickSelection.mtype as string);\n\n    const qsEntries: QuickSelectorEntry[] = [\n        {\n            title: 'ACH',\n            key: 'ach',\n            getValuesFn: getaCh,\n            sliderRange: ACh\n        },\n        {\n            title: 'Depolarisation',\n            key: 'depolarisation',\n            getValuesFn: getDepolarisation,\n            sliderRange: Depolarisation\n        },\n        {\n            title: 'M-type',\n            key: 'mtype',\n            values: mtypes,\n            setFn: handleMtypeSelect,\n        },\n        {\n            title: 'E-Type',\n            key: 'etype',\n            values: etypes,\n            setFn: handleEtypeSelect,\n        },\n    ];\n\n    return (\n        <>\n            <Filters theme={theme}>\n                <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n                    <div className=\"w-full lg:w-1/3 md:w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n                        <StickyContainer>\n                            <Title\n                                title=\"Theta - MS input\"\n                                subtitle=\"Predictions\"\n                                theme={theme}\n                            />\n                            <div role=\"information\">\n                                <InfoBox>\n                                    <p>\n                                        In the absence of medial septum (MS) region, we imitated its effect through a tonic depolarisation to represent in vivo background activity and an additional depolarisation corresponding arhythmic ACh release applied to all neurons and theta-range oscillatory hyperpolarizing current applied to PV+ interneurons only. The latter models the rhythmic disinhibition of CA1 observed in vivo. Here, we report how this induced regular theta activity in CA1 with heterogeneous phase response of different morphological types.\n                                    </p>\n                                </InfoBox>\n                            </div>\n                        </StickyContainer>\n                    </div>\n                    <div className=\"flex flex-col-reverse md:flex-row-reverse gap-8 mb-12 md:mb-0 mx-8 md:mx-0 lg:w-2/3 md:w-full flex-grow md:flex-none\">\n                        <div className={`selector__column theme-${theme} w-full`}>\n                            <div className={`selector__head theme-${theme}`}>Select reconstruction</div>\n                            <div className=\"selector__body\">\n                                <List\n                                    block\n                                    list={mtypes}\n                                    value={quickSelection.mtype as string}\n                                    title={`M-type ${mtypes.length ? '(' + mtypes.length + ')' : ''}`}\n                                    onSelect={handleMtypeSelect}\n                                    theme={theme}\n                                />\n                                <List\n                                    block\n                                    list={etypes}\n                                    value={quickSelection.etype as string}\n                                    title={`E-type ${etypes.length ? '(' + etypes.length + ')' : ''}`}\n                                    onSelect={handleEtypeSelect}\n                                    theme={theme}\n                                />\n                            </div>\n                        </div>\n                        <div className={`selector__column theme-${theme} w-full`}>\n                            <div className={`selector__head theme-${theme}`}>Configure</div>\n                            <div className=\"selector__body\">\n                                <ScatterPlotSelector\n                                    path=\"5_prediction/theta-ms-input/\"\n                                    xRange={ACh}\n                                    yRange={Depolarisation}\n                                    xAxisLabel='Acetylcholine concentration'\n                                    yAxisLabel='Depolarisation'\n                                    theme={theme}\n                                    onSelect={handleScatterPlotSelect}\n                                    selectedX={quickSelection.ach as number}\n                                    selectedY={quickSelection.depolarisation as number}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Filters>\n\n            <DataContainer\n                theme={theme}\n                navItems={[\n                    { id: 'spikeTimeSection', label: \"Spike Time\" },\n                    { id: 'meanFiringRateSection', label: \"Mean Firing Rate\" },\n                    { id: 'traceSection', label: \"Traces\" }\n                ]}\n                quickSelectorEntries={qsEntries}\n            >\n                <Collapsible id='spikeTimeSection' properties={[quickSelection.mtype + \"-\" + quickSelection.etype]} title=\"Spike Time\">\n                    <div className=\"graph\">\n                        {spikeTimePlotSvg ? (\n                            <div className=\"svg-container\" style={{ width: '100%', height: '550px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                                <div dangerouslySetInnerHTML={{ __html: spikeTimePlotSvg }} className=\"svg-content\" />\n                            </div>\n                        ) : (\n                            <p>Spike time plot not available</p>\n                        )}\n                    </div>\n                    <DownloadButton\n                        theme={theme}\n                        onClick={() => spikeTimeData && downloadAsJson(spikeTimeData, `spike-time-${quickSelection.mtype}-${quickSelection.etype}_${quickSelection.ach}-${quickSelection.depolarisation}`)}\n                    >\n                        Spike time{\"  \"}\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.mtype}-{quickSelection.etype}</span>\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.ach}-{quickSelection.depolarisation}</span>\n                    </DownloadButton>\n                </Collapsible>\n\n                <Collapsible id='meanFiringRateSection' properties={[quickSelection.mtype + \"-\" + quickSelection.etype]} title=\"Mean Firing Rate\">\n                    <div className=\"graph\">\n                        <MeanFiringRatePlot plotData={meanFiringRateData} xAxis={\"Firing Rate (Hz)\"} yAxis={\"Frequency\"} xAxisTickStep={0.1} />\n                    </div>\n                    <DownloadButton\n                        theme={theme}\n                        onClick={() => downloadAsJson(meanFiringRateData, `mean-firing-trate-${quickSelection.mtype}-${quickSelection.etype}_${quickSelection.ach}-${quickSelection.depolarisation}`)}>\n                        Mean Firing Rate{\"  \"}\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.mtype}-{quickSelection.etype}</span>\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.ach}-{quickSelection.depolarisation}</span>\n                    </DownloadButton>\n                </Collapsible>\n\n                <Collapsible id='traceSection' properties={[quickSelection.mtype + \"-\" + quickSelection.etype]} title=\"Traces\">\n                    <div className=\"graph\">\n                        <TraceGraph plotData={traceData} />\n                    </div>\n                    <DownloadButton\n                        theme={theme}\n                        onClick={() => downloadAsJson(traceData, `mean-firing-trate-${quickSelection.mtype}-${quickSelection.etype}_${quickSelection.ach}-${quickSelection.depolarisation}`)}>\n                        Trace{\"  \"}\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.mtype}-{quickSelection.etype}</span>\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.ach}-{quickSelection.depolarisation}</span>\n                    </DownloadButton>\n                </Collapsible>\n            </DataContainer>\n        </>\n    );\n};\n\nexport default ThetaMSInputView;\n","import Head from 'next/head';\nimport ThetaMSInputView from '@/views/5_predictions/ThetaMSInput';\n\nexport default function ThetaMSInputPage() {\n    const metadata = {\n        title: 'Theta - MS Input - Predictions | The Hippocampus Hub',\n        description:\n            'Simulate theta rhythmic activity in hippocampal neurons by modeling medial septum (MS) input. Explore spike time, firing rate, and membrane potential traces to understand the effect of rhythmic depolarization.',\n        keywords: [\n            'Theta',\n            'MS Input',\n            'Spike Time',\n            'Firing Rate',\n            'Hippocampus',\n            'Neuroscience',\n            'Blue Brain Project',\n            'The Hippocampus Hub',\n        ],\n        author: 'Blue Brain Project',\n        creator: 'EPFL Blue Brain Project',\n        publisher: 'The Hippocampus Hub',\n    };\n\n    return (\n        <>\n            <Head>\n                <title>{metadata.title}</title>\n                <meta name=\"description\" content={metadata.description} />\n                <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n                <meta name=\"author\" content={metadata.author} />\n                <meta name=\"creator\" content={metadata.creator} />\n                <meta name=\"publisher\" content={metadata.publisher} />\n            </Head>\n\n            <ThetaMSInputView />\n        </>\n    );\n}"],"names":["window","__NEXT_P","push","__webpack_require__","ACh","Depolarisation","getaCh","getDepolarisation","getMtypes","Set","models","map","model","mtype","sort","getEtypes","filter","etype","ThetaMSInput","router","useRouter","quickSelection","setQuickSelection","useState","spikeTimeData","setSpikeTimeData","meanFiringRateData","setMeanFiringRateData","traceData","setTraceData","spikeTimePlotSvg","setSpikeTimePlotSvg","useEffect","isReady","ach","depolarisation","query","newQuickSelection","parseFloat","availableEtypes","includes","Object","keys","length","defaultMtype","defaultSelection","replace","undefined","shallow","fetchData","baseUrl","dataPath","concat","name","setter","response","fetch","ok","data","json","status","console","warn","error","svgResponse","svgText","text","setParams","newQuery","params","pathname","handleMtypeSelect","newEtype","prev","handleEtypeSelect","mtypes","etypes","jsx_runtime","jsxs","Fragment","jsx","Filters","theme","div","className","StickyContainer","Title","title","subtitle","role","InfoBox","p","List","block","list","value","onSelect","ScatterPlotSelector","path","xRange","yRange","xAxisLabel","yAxisLabel","selectedX","selectedY","DataContainer","navItems","id","label","quickSelectorEntries","key","getValuesFn","sliderRange","values","setFn","Collapsible","properties","style","width","height","display","justifyContent","alignItems","dangerouslySetInnerHTML","__html","DownloadButton","onClick","downloadAsJson","span","MeanFiringRatePlot","plotData","xAxis","yAxis","xAxisTickStep","TraceGraph","ThetaMSInputPage","metadata","description","keywords","author","creator","publisher","Head","meta","content","join","ThetaMSInputView"],"sourceRoot":""}