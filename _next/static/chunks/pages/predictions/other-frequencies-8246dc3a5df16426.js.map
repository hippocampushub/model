{"version":3,"file":"static/chunks/pages/predictions/other-frequencies-8246dc3a5df16426.js","mappings":"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","sources":["webpack://_N_E/?bac2","webpack://_N_E/./src/views/5_predictions/OtherFrequencies.tsx","webpack://_N_E/./src/pages/predictions/other-frequencies.tsx","webpack://_N_E/./src/views/5_predictions/components/TimeSpikePlot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/predictions/other-frequencies\",\n      function () {\n        return require(\"private-next-pages/predictions/other-frequencies.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/predictions/other-frequencies\"])\n      });\n    }\n  ","import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport List from '@/components/List';\nimport ScatterPlotSelector from '@/components/ScatterPlotSelector';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\nimport TimeSpikePlot from './components/TimeSpikePlot';\nimport MeanFiringRatePlot from './components/MeanFiringRatePlot';\nimport { QuickSelectorEntry, VolumeSection } from '@/types';\nimport models from \"./models.json\";\nimport { basePath, dataPath } from '@/config';\nimport { volumeSections } from '@/constants';\nimport TraceGraph from './components/Trace';\nimport DownloadButton from '@/components/DownloadButton';\nimport { downloadAsJson } from '@/utils';\nimport DistributionPlot from '@/components/DistributionPlot';\n\nconst cell_frequency: number[] = [0.1, 0.2, 0.4, 0.8];\nconst signal_frequency: number[] = [0, 1, 2, 4, 6, 8, 10, 12, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200];\n\nconst OtherFrequenciesView: React.FC = () => {\n    const router = useRouter();\n    const theme = 5;\n\n    const [quickSelection, setQuickSelection] = useState<Record<string, string | number>>({});\n    const [spikeTimeData, setSpikeTimeData] = useState<any>(null);\n    const [meanFiringRateData, setMeanFiringRateData] = useState<any>(null);\n    const [traceData, setTraceData] = useState<any>(null);\n    const [spikeTimePlotSvg, setSpikeTimePlotSvg] = useState<string | null>(null);\n\n    const getMtypes = (): string[] => [...new Set(models.map(model => model.mtype))].sort();\n    const getEtypes = (mtype: string): string[] => [...new Set(models.filter(model => model.mtype === mtype).map(model => model.etype))].sort();\n\n    useEffect(() => {\n        if (!router.isReady) return;\n        const { mtype, etype, signal_frequency: querySignalFreq, cell_frequency: queryCellFreq } = router.query;\n        const newQuickSelection: Record<string, string | number> = {};\n        if (typeof mtype === 'string') newQuickSelection.mtype = mtype;\n        if (typeof querySignalFreq === 'string') newQuickSelection.signal_frequency = parseFloat(querySignalFreq);\n        if (typeof queryCellFreq === 'string') newQuickSelection.cell_frequency = parseFloat(queryCellFreq);\n        if (typeof mtype === 'string') {\n            const availableEtypes = getEtypes(mtype);\n            newQuickSelection.etype = typeof etype === 'string' && availableEtypes.includes(etype) ? etype : availableEtypes[0] || '';\n        }\n        setQuickSelection(newQuickSelection);\n        if (Object.keys(newQuickSelection).length === 0) {\n            const defaultMtype = getMtypes()[0];\n            const defaultSelection = {\n                mtype: defaultMtype,\n                etype: getEtypes(defaultMtype)[0] || '',\n                signal_frequency: signal_frequency[0],\n                cell_frequency: cell_frequency[0]\n            };\n            setQuickSelection(defaultSelection);\n            router.replace({ query: defaultSelection }, undefined, { shallow: true });\n        }\n    }, [router.isReady, router.query]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const { signal_frequency, cell_frequency, mtype, etype } = quickSelection;\n            if (signal_frequency === undefined || cell_frequency === undefined || !mtype || !etype) return;\n            const baseUrl = `${dataPath}/5_prediction/other-frequencies/${cell_frequency}-${signal_frequency}/${mtype}-${etype}`;\n            const dataTypes = [\n                { name: 'spike-time', setter: setSpikeTimeData },\n                { name: 'mean-firing-rate', setter: setMeanFiringRateData },\n                { name: 'trace', setter: setTraceData }\n            ];\n            for (const { name, setter } of dataTypes) {\n                try {\n                    const response = await fetch(`${baseUrl}/${name}.json`);\n                    if (!response.ok) {\n                        if (response.status === 404) {\n                            console.warn(`${name} data not found`);\n                            setter(null);\n                        } else {\n                            throw new Error(`HTTP error! status: ${response.status}`);\n                        }\n                    } else {\n                        const data = await response.json();\n                        setter(data);\n                    }\n                } catch (error) {\n                    console.error(`Error fetching ${name} data:`, error);\n                    setter(null);\n                }\n            }\n\n            // Fetch the spike-time-plot.svg\n            try {\n                const svgResponse = await fetch(`${baseUrl}/spike-time-plot.svg`);\n                if (!svgResponse.ok) {\n                    if (svgResponse.status === 404) {\n                        console.warn('Spike time plot SVG not found');\n                        setSpikeTimePlotSvg(null);\n                    } else {\n                        throw new Error(`HTTP error! status: ${svgResponse.status}`);\n                    }\n                } else {\n                    const svgText = await svgResponse.text();\n                    setSpikeTimePlotSvg(svgText);\n                }\n            } catch (error) {\n                console.error('Error fetching spike-time-plot.svg:', error);\n                setSpikeTimePlotSvg(null);\n            }\n        };\n        fetchData();\n    }, [quickSelection]);\n\n    const setParams = (params: Record<string, string | number>): void => {\n        const newQuery = { ...router.query, ...params };\n        router.push({ query: newQuery, pathname: router.pathname }, undefined, { shallow: true });\n    };\n\n    const handleVolumeSelect = (volume_section: VolumeSection) => {\n        const newSelection = {\n            ...quickSelection,\n            volume_section,\n            signal_frequency: signal_frequency[0],\n            cell_frequency: cell_frequency[0]\n        };\n        setQuickSelection(newSelection);\n        setParams(newSelection);\n    };\n\n    const handleMtypeSelect = (mtype: string) => {\n        const availableEtypes = getEtypes(mtype);\n        const newEtype = availableEtypes[0] || '';\n        setQuickSelection(prev => ({ ...prev, mtype, etype: newEtype }));\n        setParams({ mtype, etype: newEtype });\n    };\n\n    const handleEtypeSelect = (etype: string) => {\n        setQuickSelection(prev => ({ ...prev, etype }));\n        setParams({ etype });\n    };\n\n    const handleScatterPlotSelect = (cell_frequency: number, signal_frequency: number) => {\n        setQuickSelection(prev => ({ ...prev, signal_frequency, cell_frequency }));\n        setParams({ signal_frequency, cell_frequency });\n    };\n\n    const mtypes = getMtypes();\n    const etypes = getEtypes(quickSelection.mtype as string);\n\n    const qsEntries: QuickSelectorEntry[] = [\n        {\n            title: 'Cell Frequency',\n            key: 'cell_frequency',\n            getValuesFn: () => cell_frequency,\n            sliderRange: cell_frequency\n        },\n        {\n            title: 'Signal Frequency',\n            key: 'signal_frequency',\n            getValuesFn: () => signal_frequency,\n            sliderRange: signal_frequency\n        },\n        {\n            title: 'M-type',\n            key: 'mtype',\n            values: mtypes,\n            setFn: handleMtypeSelect,\n        },\n        {\n            title: 'E-Type',\n            key: 'etype',\n            values: etypes,\n            setFn: handleEtypeSelect,\n        },\n    ];\n\n    return (\n        <>\n            <Filters theme={theme} hasData={!!quickSelection.mtype && !!quickSelection.etype}>\n                <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n                    <div className=\"w-full lg:w-1/2 md:w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n                        <StickyContainer>\n                            <Title\n                                title=\"Other Frequencies\"\n                                subtitle=\"Predictions\"\n                                theme={theme}\n                            />\n                            <div role=\"information\">\n                                <InfoBox>\n                                    <p>\n                                        We stimulated the Schaffer collaterals (SC) at different mean frequencies (0.1-0.8 Hz) (cell_frequency). The signal is further modulated with a sinusoidal function of different frequencies (0.5-200 Hz) (signal_frequency). In general, CA1 activity reliably follows the same signal rhythm favoring intermediated frequencies (1 - 30 Hz).\n                                    </p>\n                                </InfoBox>\n                            </div>\n                        </StickyContainer>\n                    </div>\n                    <div className=\"flex flex-col gap-8 mb-12 md:mb-0 mx-8 md:mx-0 lg:w-1/2 md:w-full flex-grow md:flex-none justify-center\" style={{ maxWidth: '800px' }}>\n                        <div className=\"flex flex-col lg:flex-row gap-8 flex-grow p-0 m-0\">\n                            <div className={`selector__column theme-${theme} flex-1`} style={{ maxWidth: \"auto\" }}>\n                                <div className={`selector__head theme-${theme}`}>2. Select extracellular conditions</div>\n                                <div className=\"selector__body\">\n                                    <ScatterPlotSelector\n                                        path={`5_prediction/other-frequencies/`}\n                                        xRange={cell_frequency}\n                                        yRange={signal_frequency}\n                                        xAxisLabel='signal_frequency'\n                                        yAxisLabel='Cell Frequency'\n                                        theme={theme}\n                                        onSelect={handleScatterPlotSelect}\n                                        selectedX={quickSelection.cell_frequency as number}\n                                        selectedY={quickSelection.signal_frequency as number}\n                                    />\n                                </div>\n                            </div>\n                            <div className={`selector__column theme-${theme} flex-1`}>\n                                <div className={`selector__head theme-${theme}`}>3. Select cell types</div>\n                                <div className=\"selector__body\">\n                                    <List block list={mtypes} value={quickSelection.mtype as string} title={`M-type ${mtypes.length ? '(' + mtypes.length + ')' : ''}`} onSelect={handleMtypeSelect} theme={theme} />\n                                    <List block list={etypes} value={quickSelection.etype as string} title={`E-type ${etypes.length ? '(' + etypes.length + ')' : ''}`} onSelect={handleEtypeSelect} theme={theme} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Filters>\n            <DataContainer theme={theme} navItems={[{ id: 'spikeTimeSection', label: \"Spike Time\" }, { id: 'meanFiringRateSection', label: \"Mean Firing Rate\" }, { id: 'traceSection', label: \"Traces\" }]} quickSelectorEntries={qsEntries}>\n                <Collapsible id='spikeTimeSection' properties={[quickSelection.mtype + \"-\" + quickSelection.etype]} title=\"Spike Time\">\n                    <div className=\"graph\">\n                        {spikeTimePlotSvg ? (\n                            <div className=\"svg-container\" style={{ width: '100%', height: '550px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                                <div dangerouslySetInnerHTML={{ __html: spikeTimePlotSvg }} className=\"svg-content\" />\n                            </div>\n                        ) : (\n                            <TimeSpikePlot plotData={spikeTimeData} />\n                        )}\n                    </div>\n                    <DownloadButton\n                        theme={theme}\n                        onClick={() => downloadAsJson(spikeTimeData, `spike-time-${quickSelection.mtype}-${quickSelection.etype}_${quickSelection.signal_frequency}-${quickSelection.cell_frequency}`)}>\n                        Spike time{\"  \"}\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.mtype}-{quickSelection.etype}</span>\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.signal_frequency}-{quickSelection.cell_frequency}</span>\n                    </DownloadButton>\n                </Collapsible>\n                <Collapsible id='meanFiringRateSection' properties={[quickSelection.mtype + \"-\" + quickSelection.etype]} title=\"Mean Firing Rate\">\n                    <div className=\"graph\">\n                        <MeanFiringRatePlot plotData={meanFiringRateData} xAxis={\"Firing Rate (Hz)\"} yAxis={\"Frequency\"} xAxisTickStep={0.05} />\n                    </div>\n                    <DownloadButton\n                        theme={theme}\n                        onClick={() => downloadAsJson(meanFiringRateData, `mean-firing-rate-${quickSelection.mtype}-${quickSelection.etype}_${quickSelection.signal_frequency}-${quickSelection.cell_frequency}`)}>\n                        Mean Firing Rate{\"  \"}\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.mtype}-{quickSelection.etype}</span>\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.signal_frequency}-{quickSelection.cell_frequency}</span>\n                    </DownloadButton>\n                </Collapsible>\n                <Collapsible id='traceSection' title=\"Traces\">\n                    <div className=\"graph\">\n                        <TraceGraph plotData={traceData} />\n                    </div>\n                    <DownloadButton\n                        theme={theme}\n                        onClick={() => downloadAsJson(traceData, `trace-${quickSelection.mtype}-${quickSelection.etype}_${quickSelection.signal_frequency}-${quickSelection.cell_frequency}`)}>\n                        Trace{\"  \"}\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.mtype}-{quickSelection.etype}</span>\n                        <span className=\"!ml-0 collapsible-property small\">{quickSelection.signal_frequency}-{quickSelection.cell_frequency}</span>\n                    </DownloadButton>\n                </Collapsible>\n            </DataContainer>\n        </>\n    );\n};\n\nexport default OtherFrequenciesView;\n","import Head from 'next/head';\nimport OtherFrequenciesView from '@/views/5_predictions/OtherFrequencies';\n\nexport default function OtherFrequenciesPage() {\n    const metadata = {\n        title: 'Other Frequencies - Predictions | The Hippocampus Hub',\n        description:\n            'Explore predictions based on other frequencies in the hippocampal model. Visualize the spike time, mean firing rate, and traces under different extracellular conditions and cell frequencies.',\n        keywords: [\n            'Other Frequencies',\n            'Spike Time',\n            'Firing Rate',\n            'Hippocampus',\n            'Neuroscience',\n            'Predictions',\n            'Blue Brain Project',\n            'The Hippocampus Hub',\n        ],\n        author: 'Blue Brain Project',\n        creator: 'EPFL Blue Brain Project',\n        publisher: 'The Hippocampus Hub',\n    };\n\n    return (\n        <>\n            <Head>\n                <title>{metadata.title}</title>\n                <meta name=\"description\" content={metadata.description} />\n                <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n                <meta name=\"author\" content={metadata.author} />\n                <meta name=\"creator\" content={metadata.creator} />\n                <meta name=\"publisher\" content={metadata.publisher} />\n            </Head>\n\n            <OtherFrequenciesView />\n        </>\n    );\n}","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport dynamic from 'next/dynamic';\nimport { Loader2 } from 'lucide-react';\nimport { graphTheme } from '@/constants';\nimport debounce from 'lodash/debounce';\n\nconst Plot = dynamic(() => import('react-plotly.js'), {\n    ssr: false,\n    loading: () => <Loader2 className=\"w-8 h-8 animate-spin\" />,\n}) as any;\n\ninterface PlotData {\n    name: string;\n    description: string;\n    units: string | null;\n    value_map: {\n        t: { [key: string]: number };\n        gid: { [key: string]: number };\n    };\n}\n\ninterface PlotDetailsProps {\n    plotData: PlotData | PlotData[] | null;\n}\n\nconst LargeDatasetScatterPlot: React.FC<PlotDetailsProps> = ({ plotData }) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [chartData, setChartData] = useState<any>(null);\n    const [dataRange, setDataRange] = useState<{ x: [number, number], y: [number, number] }>({ x: [0, 0], y: [0, 0] });\n\n    const formatScientificNotation = (value: number): string => {\n        if (value === 0) return '0';\n        const exponent = Math.floor(Math.log10(Math.abs(value)));\n        const mantissa = value / Math.pow(10, exponent);\n        const roundedMantissa = Math.round(mantissa * 100) / 100;\n        const superscriptDigits = ['⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹'];\n        const superscriptExponent = Math.abs(exponent).toString().split('').map(digit => superscriptDigits[parseInt(digit)]).join('');\n        return `${roundedMantissa}*10${exponent < 0 ? '⁻' : ''}${superscriptExponent}`;\n    };\n\n    const processData = useCallback((data: PlotData) => {\n        if (!data || !data.value_map || !data.value_map.t || !data.value_map.gid) {\n            setChartData(null);\n            setIsLoading(false);\n            return;\n        }\n\n        setIsLoading(true);\n\n        const { t, gid } = data.value_map;\n        const x = Object.values(t);\n        const y = Object.values(gid);\n\n        const maxPoints = 100000;\n        let finalX = x;\n        let finalY = y;\n        if (x.length > maxPoints) {\n            const skipFactor = Math.ceil(x.length / maxPoints);\n            finalX = x.filter((_, index) => index % skipFactor === 0);\n            finalY = y.filter((_, index) => index % skipFactor === 0);\n        }\n\n        setChartData([{\n            x: finalX,\n            y: finalY,\n            type: 'scatter',\n            mode: 'markers',\n            marker: { color: graphTheme.blue, size: 2 },\n        }]);\n\n        setDataRange({\n            x: [Math.min(...finalX), Math.max(...finalX)],\n            y: [Math.min(...finalY), Math.max(...finalY)],\n        });\n\n        setIsLoading(false);\n    }, []);\n\n    const debouncedProcessData = useCallback(debounce(processData, 300), [processData]);\n\n    useEffect(() => {\n        if (Array.isArray(plotData)) {\n            debouncedProcessData(plotData[0]);\n        } else if (plotData) {\n            debouncedProcessData(plotData);\n        } else {\n            setChartData(null);\n            setIsLoading(false);\n        }\n\n        return () => {\n            debouncedProcessData.cancel();\n        };\n    }, [plotData, debouncedProcessData]);\n\n    const generateTicks = useCallback((min: number, max: number, count: number = 6) => {\n        const range = max - min;\n        const step = range / (count - 1);\n        return Array.from({ length: count }, (_, i) => min + i * step);\n    }, []);\n\n    const layout = useMemo(() => {\n        const xTicks = generateTicks(dataRange.x[0], dataRange.x[1]);\n        const yTicks = generateTicks(dataRange.y[0], dataRange.y[1]);\n\n        return {\n            xaxis: {\n                title: 'Time (ms)',\n                color: '#666666',\n                titlefont: { size: 12 },\n                tickfont: { color: '#666666', size: 10 },\n                showgrid: false,\n                tickmode: 'array',\n                tickvals: xTicks,\n                ticktext: xTicks.map(value => Math.round(value).toString()),\n            },\n            yaxis: {\n                title: {\n                    text: 'Neuron Index',\n                    standoff: 20,\n                },\n                color: '#666666',\n                titlefont: { size: 12 },\n                tickfont: { color: '#666666', size: 10 },\n                showgrid: false,\n                tickmode: 'array',\n                tickvals: yTicks,\n                ticktext: yTicks.map(formatScientificNotation),\n            },\n            autosize: true,\n            plot_bgcolor: '#EFF1F8',\n            paper_bgcolor: '#EFF1F8',\n            showlegend: false,\n            margin: { l: 60, r: 10, b: 50, t: 10, pad: 4 }\n        };\n    }, [dataRange, generateTicks, formatScientificNotation]);\n\n    const config = {\n        responsive: true,\n        displayModeBar: true,\n    };\n\n    return (\n        <div style={{ width: '100%', height: '400px', position: 'relative', backgroundColor: '#EFF1F8' }}>\n            {isLoading ? (\n                <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n                    <Loader2 className=\"w-8 h-8 animate-spin\" />\n                </div>\n            ) : !chartData ? (\n                <p className=\"text-center text-gray-500 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">No data available.</p>\n            ) : (\n                <Plot\n                    data={chartData}\n                    layout={layout}\n                    config={config}\n                    style={{ width: '100%', height: '100%' }}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default LargeDatasetScatterPlot;\n"],"names":["window","__NEXT_P","push","__webpack_require__","cell_frequency","signal_frequency","OtherFrequencies","router","useRouter","quickSelection","setQuickSelection","useState","spikeTimeData","setSpikeTimeData","meanFiringRateData","setMeanFiringRateData","traceData","setTraceData","spikeTimePlotSvg","setSpikeTimePlotSvg","getMtypes","Set","models","map","model","mtype","sort","getEtypes","filter","etype","useEffect","isReady","querySignalFreq","queryCellFreq","query","newQuickSelection","parseFloat","availableEtypes","includes","Object","keys","length","defaultMtype","defaultSelection","replace","undefined","shallow","fetchData","baseUrl","dataPath","concat","name","setter","response","fetch","ok","data","json","status","console","warn","error","svgResponse","svgText","text","setParams","newQuery","params","pathname","handleMtypeSelect","newEtype","prev","handleEtypeSelect","mtypes","etypes","jsx_runtime","jsxs","Fragment","jsx","Filters","theme","hasData","div","className","StickyContainer","Title","title","subtitle","role","InfoBox","p","style","maxWidth","ScatterPlotSelector","path","xRange","yRange","xAxisLabel","yAxisLabel","onSelect","selectedX","selectedY","List","block","list","value","DataContainer","navItems","id","label","quickSelectorEntries","key","getValuesFn","sliderRange","values","setFn","Collapsible","properties","width","height","display","justifyContent","alignItems","dangerouslySetInnerHTML","__html","TimeSpikePlot","plotData","DownloadButton","onClick","downloadAsJson","span","MeanFiringRatePlot","xAxis","yAxis","xAxisTickStep","TraceGraph","OtherFrequenciesPage","metadata","description","keywords","author","creator","publisher","Head","meta","content","join","OtherFrequenciesView","Plot","dynamic","Promise","all","e","then","bind","ssr","loading","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","Loader2","__webpack_exports__","Z","param","isLoading","setIsLoading","chartData","setChartData","dataRange","setDataRange","x","y","formatScientificNotation","exponent","Math","floor","log10","abs","mantissa","pow","superscriptDigits","superscriptExponent","toString","split","digit","parseInt","round","processData","useCallback","value_map","t","gid","finalX","finalY","skipFactor","ceil","_","index","type","mode","marker","color","graphTheme","blue","size","min","max","debouncedProcessData","debounce","Array","isArray","cancel","generateTicks","count","range","step","from","i","layout","useMemo","xTicks","yTicks","xaxis","titlefont","tickfont","showgrid","tickmode","tickvals","ticktext","yaxis","standoff","autosize","plot_bgcolor","paper_bgcolor","showlegend","margin","l","r","b","pad","position","backgroundColor","top","left","transform","config","responsive","displayModeBar"],"sourceRoot":""}