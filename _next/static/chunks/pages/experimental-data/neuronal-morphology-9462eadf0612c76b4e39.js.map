{"version":3,"sources":["webpack://_N_E/./node_modules/file-saver/dist/FileSaver.min.js","webpack://_N_E/./node_modules/lodash/isNil.js","webpack://_N_E/./node_modules/lodash/isNumber.js","webpack://_N_E/./src/components/ESData/index.tsx","webpack://_N_E/./src/components/LayerSelector/index.tsx","webpack://_N_E/./src/components/NexusPlugin/index.tsx","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/Unit/index.tsx","webpack://_N_E/./src/components/ExpMorphologyFactsheet/index.tsx","webpack://_N_E/./src/components/ImageViewer/index.tsx","webpack://_N_E/./src/components/ExpMorphologyTable/index.tsx","webpack://_N_E/./src/utils/index.ts","webpack://_N_E/./src/components/NexusFileDownloadButton/index.tsx","webpack://_N_E/./src/views/experimental/NeuronMorphology.tsx","webpack://_N_E/./src/pages/experimental-data/neuronal-morphology.tsx","webpack://_N_E/./src/queries/es/index.ts","webpack://_N_E/./src/views/experimental/config.ts","webpack://_N_E/","webpack://_N_E/./src/components/ExpMorphologyTable/styles.module.scss","webpack://_N_E/./src/components/LayerSelector/styles.module.scss","webpack://_N_E/./src/styles/experimental-data/neuron-morphology.module.scss"],"names":["b","a","autoBom","console","warn","test","type","Blob","c","d","XMLHttpRequest","open","responseType","onload","g","response","onerror","error","send","status","e","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","f","self","global","navigator","userAgent","saveAs","HTMLAnchorElement","prototype","h","i","URL","webkitURL","j","createElement","name","download","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","body","innerText","HTMLElement","safari","FileReader","k","onloadend","result","replace","readAsDataURL","l","m","module","exports","value","baseGetTag","isObjectLike","query","children","React","data","loading","state","setState","nexus","useNexusContext","View","elasticSearchQuery","hippocampus","then","hits","LAYERS","activeLayer","onLayerSelected","map","layer","className","styles","onClick","NexusPluginLazy","dynamic","ssr","props","significantFigures","thousandSeparator","prefix","suffix","isNumber","fixed","parseFloat","toPrecision","formatted","toLocaleString","replacement","MOhm","MorphologyFactsheetSingleValueEntry","fact","isNil","NumberFormat","Unit","unit","MorphologyFactsheetEntry","neuriteTypes","strPrettify","str","morphologyName","id","stats","expMorphologyStats","getFactsheetEntries","neuriteType","Object","entries","statKey","statValue","includes","mean_soma_radius","filter","max_section_length","neuriteHasStats","ImageViewerLazy","entryToArray","entry","Array","isArray","getAgentLabel","agent","givenName","familyName","getAgentType","currentMorphology","morphologies","agentIds","reduce","ids","morphology","currIds","contribution","Boolean","from","Set","useState","agentMap","setAgentMap","useEffect","length","contributionEsQuery","size","terms","esDocuments","esDocument","_source","agents","label","keyBy","isCurrent","morph","style","textAlign","src","basePath","alt","annotation","hasBody","sort","a1","a2","nexusEntities","nexusUrlR","RegExp","join","filename","url","org","project","setLoading","nexusUrl","Error","mulEntityTypeR","mulEntityTypeMatch","match","matches","deployment","entityType","slice","schema","parseUrl","fileOrg","fileProject","fileId","split","reverse","File","get","as","imageData","router","useRouter","setQuery","push","pathname","undefined","shallow","currentLayer","mtypes","region","mtype","currentMtype","instances","currentInstance","instance","getMorphologyDistribution","morphologyResource","distribution","find","getAndSortMorphologies","m1","m2","Filters","backgroundAlt","Title","primaryColor","colorName","subtitle","InfoBox","color","text","LayerSelector","List","list","onSelect","anchor","DataContainer","visible","Collapsible","ESData","morphologyDataQuery","NexusPlugin","resource","nexusClient","encodeURIComponent","contentUrl","ExpMorphologyFactsheet","mtypeExpMorphologyListDataQuery","About","MainLayout","NeuronMorphology","electroPhysiologyDataQuery","etype","experiment","bool","must","term","nested","path","should","etypeTracesDataQuery","must_not","exists","accentColors","__NEXT_P"],"mappings":"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","file":"static/chunks/pages/experimental-data/neuronal-morphology-9462eadf0612c76b4e39.js","sourcesContent":["(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open(\"GET\",a),d.responseType=\"blob\",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error(\"could not download file\")},d.send()}function d(a){var b=new XMLHttpRequest;b.open(\"HEAD\",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open(\"\",\"_blank\"),g&&(g.document.title=g.document.body.innerText=\"downloading...\"),\"string\"==typeof b)return c(b,d,e);var h=\"application/octet-stream\"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&\"undefined\"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,\"undefined\"!=typeof module&&(module.exports=g)});\n\n//# sourceMappingURL=FileSaver.min.js.map","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nmodule.exports = isNil;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n","import React from 'react';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { ElasticSearchViewQueryResponse } from '@bbp/nexus-sdk';\n\nimport { hippocampus } from '../../config';\n\n\ntype ESDataProps = {\n  query: Record<string, unknown> | null;\n  children: (\n    data: ElasticSearchViewQueryResponse<any>['hits']['hits'] | null,\n    loading: boolean,\n    error: any,\n  ) => React.ReactNode;\n};\n\nconst ESData: React.FC<ESDataProps> = ({\n  query,\n  children,\n}) => {\n  const [state, setState] = React.useState<{\n    data: ElasticSearchViewQueryResponse<any>['hits']['hits'] | null;\n    loading: boolean;\n    error: any;\n  }>({\n    data: null,\n    loading: false,\n    error: null,\n  });\n  const nexus = useNexusContext();\n\n  React.useEffect(() => {\n    if (query) {\n      setState({ ...state, loading: true, data: null });\n      nexus.View.elasticSearchQuery(\n        hippocampus.org,\n        hippocampus.project,\n        hippocampus.datasetViewId,\n        query,\n      )\n        .then(data =>\n          setState({ ...state, loading: false, data: data.hits.hits }),\n        )\n        .catch(error => setState({ ...state, loading: false, error }));\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query]);\n\n  return (\n    <>\n      {children(state.data, state.loading, state.error)}\n    </>\n  );\n};\n\nexport default ESData;\n","import React, { ReactChild, ReactFragment } from 'react';\nimport { Layer } from '../../types';\n\nimport styles from './styles.module.scss'\n\n\ntype LayerSelectProps = {\n  activeLayer?: Layer;\n  onLayerSelected?: (layer: Layer) => void;\n};\n\nconst LAYERS: Layer[] = ['SLM', 'SR', 'SP', 'SO'];\n\nconst LayerSelector: React.FC<LayerSelectProps> = ({\n  activeLayer,\n  onLayerSelected = () => {},\n}) => {\n  const selectLayer = (l: Layer): void => onLayerSelected(l);\n\n  return (\n    <div>\n      {LAYERS.map(layer => (\n        <div\n          key={layer}\n          className={`${styles.layer} ${layer === activeLayer ? styles.active : ''}`}\n          onClick={() => selectLayer(layer)}\n        >\n          {layer}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default LayerSelector;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nimport { NexusPluginClassProps } from './nexus-plugin';\n\n\nconst NexusPluginLazy = dynamic(() => import('./nexus-plugin'), { ssr: false });\n\nconst ImageViewer: React.FC<NexusPluginClassProps<any>> = (props) => {\n  return (\n    <NexusPluginLazy {...props} />\n  );\n};\n\n\nexport default ImageViewer;\n","import React from 'react';\n\nimport isNumber from 'lodash/isNumber';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  if (!isNumber(value)) return value;\n\n  const fixed = parseFloat(value.toPrecision(significantFigures));\n\n  const formatted = thousandSeparator\n    ? fixed.toLocaleString('en')\n    : fixed;\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\n\nexport default NumberFormat;\n","import React from 'react';\n\ntype UnitProps = {\n  value?: string;\n}\n\nconst replacement = {\n  MOhm: 'MΩ',\n};\n\nconst Unit: React.FC<UnitProps> = ({ value = '' }) => {\n  return (\n    <>\n      {replacement[value] ?? value}\n    </>\n  );\n};\n\n\nexport default Unit;\n","import React from 'react';\nimport NumberFormat from '../NumberFormat';\nimport isNil from 'lodash/isNil';\n\nimport Unit from '../Unit';\nimport expMorphologyStats from '../../exp-morphology-stats.json';\n\n\nconst classPrefix = 'factsheet__';\n\n\ntype MorphologyFactsheetEntryType = {\n  name: string;\n  description?: string;\n  unit?: string;\n  value?: number | string;\n  value_map?: {\n    [key: string]: string | number;\n  };\n};\n\n\ntype MorphologyFactsheetProps = {\n  morphologyName: string;\n  className?: string;\n  id?: string;\n};\n\n\nconst MorphologyFactsheetSingleValueEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType;\n}> = ({\n  fact\n}) => {\n  return (\n    <div className=\"row mt-1\">\n      <div className=\"col-xs-8 col-sm-4 name\">{fact.name}</div>\n      <div className=\"col-xs-4 col-sm-8 value\">\n        {isNil(fact.value)\n          ? (<span>-</span>)\n          : (<span>\n              <NumberFormat value={fact.value} /> <Unit value={fact.unit} />\n            </span>)\n        }\n      </div>\n    </div>\n  );\n};\n\nconst MorphologyFactsheetEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType\n}> = ({\n  fact\n}) => {\n  return (<MorphologyFactsheetSingleValueEntry fact={fact} />);\n};\n\nconst neuriteTypes = ['all', 'axon', 'apical_dendrite', 'basal_dendrite'];\n\nconst strPrettify = (str) => str ? str.replace(/\\_/g, ' ') : str;\n\nconst MorphologyFactsheet: React.FC<MorphologyFactsheetProps> = ({\n  morphologyName,\n  className = '',\n  id,\n}) => {\n  const stats = expMorphologyStats[morphologyName];\n\n  if (!stats) {\n    return (\n      <p className=\"red\">No morphology stats found</p>\n    );\n  }\n\n  const neuriteHasStats = (neuriteType) => !!stats[neuriteType].max_section_length;\n\n  const getFactsheetEntries = (neuriteType) => {\n    return Object.entries(stats[neuriteType]).map(([statKey, statValue]) => ({\n      name: strPrettify(statKey),\n      unit: (statKey as string).includes('volume') ? 'µm³' : ((statKey as string).includes('length') ? 'µm' : ''),\n      value: statValue\n    }));\n  };\n\n  return (\n    <div id={id} className={`${classPrefix}basis ${className}`}>\n      <h3>Morphometrics</h3>\n\n      <div className=\"mb-3 mt-3\">\n        <MorphologyFactsheetEntry fact={{\n          name: 'soma diameter',\n          unit: 'µm',\n          value: stats.mean_soma_radius * 2,\n        }} />\n      </div>\n\n      {neuriteTypes.filter(neuriteType => neuriteHasStats(neuriteType)).map(neuriteType => (\n        <div className=\"mb-2\" key={neuriteType}>\n          <strong className=\"text-capitalize\">{strPrettify(neuriteType)}</strong>\n          {getFactsheetEntries(neuriteType).map(fact => (\n            <MorphologyFactsheetEntry key={fact.name} fact={fact as MorphologyFactsheetEntryType} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MorphologyFactsheet;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nimport { ImageViewerProps } from './image-viewer';\n\n\nconst ImageViewerLazy = dynamic(() => import('./image-viewer'), { ssr: false });\n\nconst ImageViewer: React.FC<ImageViewerProps> = (props) => {\n  return (\n    <ImageViewerLazy {...props} />\n  );\n};\n\n\nexport default ImageViewer;\n","import React, { useState, useEffect } from 'react';\nimport { keyBy } from 'lodash';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport { hippocampus, basePath } from '../../config';\nimport ImageViewer from '../ImageViewer';\n\nimport styles from './styles.module.scss'\n\n\ntype ExpMorphologyTableProps = {\n  morphologies: Record<string, any>[];\n  currentMorphology?: string;\n};\n\nfunction entryToArray(entry) {\n  if (Array.isArray(entry)) return entry;\n\n  return [entry];\n}\n\nfunction getAgentLabel(agent) {\n  return agent.name\n    ? agent.name\n    : `${agent.givenName} ${agent.familyName}`;\n}\n\nfunction getAgentType(agent) {\n  return agent.name\n    ? 'institution'\n    : 'person';\n}\n\nconst ExpMorphologyTable: React.FC<ExpMorphologyTableProps> = ({ currentMorphology, morphologies = [] }) => {\n  const nexus = useNexusContext();\n\n  const agentIds = morphologies.reduce((ids: string[], morphology) => {\n    const currIds = entryToArray(morphology.contribution)\n      .map(contribution => contribution.agent?.['@id'])\n      .filter(Boolean);\n\n    return Array.from(new Set([...ids, ...currIds]));\n  }, []);\n\n  const [agentMap, setAgentMap] = useState<Record<string, any>>(null);\n\n  useEffect(() => {\n    if (!agentIds.length) return;\n\n    const contributionEsQuery = {\n      from: 0,\n      size: 100,\n      query: {\n        terms: {\n          '_id': agentIds,\n        }\n      }\n    }\n\n    nexus.View\n      // query ElesticSearch endpoint to get agents by their ids\n      .elasticSearchQuery(hippocampus.org, hippocampus.project, hippocampus.datasetViewId, contributionEsQuery)\n      // extract ES documents\n      .then(data => data.hits.hits)\n      // extract Nexus original documents\n      .then(esDocuments => esDocuments.map(esDocument => esDocument._source))\n      // pick only agent ids and labels\n      .then(agents => agents.map(agent => ({\n        id: agent['@id'],\n        label: getAgentLabel(agent),\n        type: getAgentType(agent),\n      })))\n      // create a map of agents of type Record<id, label>\n      .then(agents => keyBy(agents, 'id'))\n      .then(agentMap => setAgentMap(agentMap));\n  }, [morphologies]);\n\n  const isCurrent = morphology => morphology.name === morphology;\n\n  return (\n    <div id=\"expMorphologyTable\" className=\"layer-anatomy-summary__basis mt-2\">\n      <table>\n        <thead className={styles.highlightedRowBg}>\n          <tr>\n            <th>Name</th>\n            <th>Image</th>\n            <th>M-Type</th>\n            <th>Contribution</th>\n          </tr>\n        </thead>\n        <tbody>\n          {morphologies.map(morph => (\n            <tr key={morph.name}>\n              <td className={`text-capitalize ${isCurrent(morph) ? 'text-bold' : ''}`}>\n                {morph.name}\n              </td>\n              <td style={{ textAlign: 'center'}}>\n                <div className={styles.morphImageContainer}>\n                  <ImageViewer\n                    src={`${basePath}/assets/images/exp-morph-images/${morph.name}.jpeg`}\n                    alt={`Morphology ${morph.name} image`}\n                    loading=\"lazy\"\n                  />\n                </div>\n              </td>\n              <td className={isCurrent(morph) ? 'text-bold' : ''}>\n                {morph.annotation.hasBody.label}\n              </td>\n              <td>\n                {agentMap && entryToArray(morph.contribution)\n                  .map(contribution => agentMap[contribution.agent['@id']])\n                  .sort((a1, a2) => a1.type > a2.type ? 1 : -1)\n                  .map(agent => <span key={agent.label}>{agent.label} <br/></span>)\n                }\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\nexport default ExpMorphologyTable;\n","interface ParsedNexusUrl {\n  deployment: string;\n  entityType: string;\n  org: string;\n  project: string;\n  schema: string;\n  id: string;\n}\n\nconst nexusEntities = [\n  'orgs',\n  'projects',\n  'acls',\n  'views',\n  'resources',\n  'files',\n];\n\nconst nexusUrlR = new RegExp(\n  [\n    '^',\n    '(https?://.+)', // nexus deployment\n    '/',\n    `(${nexusEntities.join('|')})`, // entity type\n    '/',\n    '([^/]+)', // org\n    '/',\n    '([^/]+)', // proj\n    '/?',\n    '([^/]+)?', // schema [optional]\n    '/?',\n    '([^/]+)?', // id [optional]\n    '/?',\n    '$',\n  ].join(''),\n);\n\n/**\n * @author pgetta\n * With given Nexus URL (might be self/project/id url), return it's:\n * * deployment URL\n * * entity type\n * * org label\n * * project label\n * * id\n *\n * @param nexusUrl\n */\nexport const parseUrl = (nexusUrl: string): ParsedNexusUrl => {\n  if (!nexusUrl) throw new Error('selfUrl should be defined');\n\n  const mulEntityTypeR = new RegExp(`(${nexusEntities.join('|')})`, 'g');\n  const mulEntityTypeMatch = nexusUrl.match(mulEntityTypeR);\n  if (mulEntityTypeMatch && mulEntityTypeMatch.length > 1) {\n    throw new Error(\n      'Url contains multiple entity types which is not supported',\n    );\n  }\n\n  const matches = nexusUrl.match(nexusUrlR);\n  if (!matches || matches.length <= 5) {\n    throw new Error('Error while parsing selfUrl');\n  }\n\n  return {\n    deployment: matches[1],\n    entityType: matches[2].slice(0, -1),\n    org: matches[3],\n    project: matches[4],\n    schema: matches[5],\n    id: matches[6],\n  };\n};\n","import React, { useState } from 'react';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { saveAs } from 'file-saver';\nimport { Button } from 'antd';\n\nimport { parseUrl } from '../../utils';\n\n\n\nexport type NexusFileDownloadButtonProps = {\n  filename: string;\n  url: string;\n  org?: string;\n  project?: string;\n  children: React.ReactNode;\n  className?: string;\n  id?: string;\n};\n\nconst NexusFileDownloadButton: React.FC<NexusFileDownloadButtonProps> = ({\n  filename,\n  url,\n  org,\n  project,\n  children,\n  className = '',\n  id,\n}) => {\n  const nexus = useNexusContext();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const download = () => {\n    setLoading(true);\n    const { org: fileOrg, project: fileProject } = {...parseUrl(url), ...{ org, project }};\n    const fileId = url.split('/').reverse()[0];\n\n    nexus.File.get(fileOrg as string, fileProject as string, fileId, { as: 'blob' })\n      .then(imageData => saveAs(imageData as Blob, filename))\n      .catch(console.error)\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <Button\n      id={id}\n      className={className}\n      type=\"primary\"\n      size=\"small\"\n      onClick={download}\n      loading={loading}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default NexusFileDownloadButton;\n","import React from 'react';\nimport { useRouter } from 'next/router';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { Button } from 'antd';\n\nimport ESData from '../../components/ESData';\nimport DataContainer from '../../components/DataContainer';\nimport LayerSelector from '../../components/LayerSelector';\nimport { morphologyDataQuery, mtypeExpMorphologyListDataQuery } from '../../queries/es';\nimport Filters from '../../layouts/Filters';\nimport Title from '../../components/Title';\nimport InfoBox from '../../components/InfoBox';\nimport NexusPlugin from '../../components/NexusPlugin';\nimport { colorName } from './config';\nimport { Layer } from '../../types';\nimport Collapsible from '../../components/Collapsible';\nimport List from '../../components/List';\nimport morphologies from '../../exp-morphology-list.json';\nimport ExpMorphologyFactsheet from '../../components/ExpMorphologyFactsheet';\nimport ExpMorphologyTable from '../../components/ExpMorphologyTable';\nimport NexusFileDownloadButton from '../../components/NexusFileDownloadButton';\nimport { hippocampus } from '../../config';\n\nimport styles from '../../styles/experimental-data/neuron-morphology.module.scss';\n\n\nconst NeuronExperimentalMorphology: React.FC = () => {\n  const router = useRouter();\n  const nexus = useNexusContext();\n\n  const { query } = router;\n\n  const setQuery = (query: any): void => {\n    router.push({ query, pathname: router.pathname }, undefined, { shallow: true });\n  };\n\n  const setLayer = (layer: Layer) => {\n    setQuery({\n      layer,\n      mtype: null,\n      instance: null,\n    });\n  };\n  const currentLayer: Layer = query.layer as Layer;\n\n  const mtypes = currentLayer\n    ? Array.from(new Set(morphologies.filter(m => m.region === currentLayer).map(m => m.mtype))).sort()\n    : [];\n\n  const setMtype = (mtype: string) => {\n    setQuery({\n      mtype,\n      layer: currentLayer,\n      instance: null,\n    });\n  };\n  const currentMtype: string = query.mtype as string;\n\n  const instances = currentMtype\n    ? morphologies.filter(m => m.mtype === currentMtype).map(m => m.name).sort()\n    : []\n\n  const setInstance = (instance: string) => {\n    setQuery({\n      instance,\n      layer: currentLayer,\n      mtype: currentMtype,\n    });\n  };\n  const currentInstance: string = query.instance as string;\n\n  const getMorphologyDistribution = (morphologyResource: any) => {\n    return morphologyResource.distribution.find((d: any) => d.name.match(/\\.asc$/i));\n  };\n\n  const getAndSortMorphologies = (esDocuments) => {\n    return esDocuments\n      .map(esDocument => esDocument._source)\n      .sort((m1, m2) => (m1.name > m2.name) ? 1 : -1);\n  };\n\n  return (\n    <>\n      <Filters backgroundAlt>\n        <div className=\"row bottom-xs w-100\">\n          <div className=\"col-xs-12 col-lg-6\">\n            <Title\n              primaryColor={colorName}\n              title={<span>Neuronal <br /> Morphology</span>}\n              subtitle=\"Experimental Data\"\n            />\n            <InfoBox\n              color=\"grey-1\"\n              text=\"We classified neuronal morphologies in different morphological types (m-types) and created digital 3D reconstructions. Using objective classification methods, we have identified 12 m-types in rat hippocampus CA1.\"\n            />\n          </div>\n          <div className=\"col-xs-12 col-lg-6\">\n            <div className={styles.selector}>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>1. Choose a layer</div>\n                <div className={styles.selectorBody}>\n                  <LayerSelector\n                    activeLayer={currentLayer}\n                    onLayerSelected={setLayer}\n                  />\n                </div>\n              </div>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>2. Select reconstruction</div>\n                <div className={styles.selectorBody}>\n                  <List\n                    list={mtypes}\n                    value={currentMtype}\n                    title=\"m-type\"\n                    color={colorName}\n                    onSelect={setMtype}\n                  />\n                  <br />\n                  <br />\n                  <br />\n                  <List\n                    list={instances}\n                    value={currentInstance}\n                    title=\"Reconstructed morphology\"\n                    color={colorName}\n                    onSelect={setInstance}\n                    anchor=\"data\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <DataContainer visible={!!currentInstance}>\n        <Collapsible\n          id=\"morphologySection\"\n          title={`Neuron Morphology ${currentMtype} ${currentInstance}`}\n        >\n          <ESData\n            query={morphologyDataQuery(currentMtype, currentInstance)}\n          >\n            {esDocuments => (\n              <>\n                {!!esDocuments && !!esDocuments.length && (\n                  <>\n                    <h3>3D view</h3>\n                    <NexusPlugin\n                      className=\"mt-3\"\n                      name=\"neuron-morphology\"\n                      resource={esDocuments[0]._source}\n                      nexusClient={nexus}\n                    />\n                    <div className=\"text-right\">\n                      <Button\n                        className=\"mr-1\"\n                        type=\"primary\"\n                        size=\"small\"\n                        href={`/build/data/morphology?query=${encodeURIComponent(currentInstance)}`}\n                      >\n                        Send to the Build section\n                      </Button>\n\n                      <NexusFileDownloadButton\n                        id=\"morphologyDownloadBtn\"\n                        className=\"mt-3\"\n                        filename={getMorphologyDistribution(esDocuments[0]._source).name}\n                        url={getMorphologyDistribution(esDocuments[0]._source).contentUrl}\n                        org={hippocampus.org}\n                        project={hippocampus.project}\n                      >\n                        Download morphology\n                      </NexusFileDownloadButton>\n                    </div>\n                  </>\n                )}\n              </>\n            )}\n          </ESData>\n          <ExpMorphologyFactsheet\n            id=\"morphometrics\"\n            className=\"mt-3\"\n            morphologyName={currentInstance}\n          />\n        </Collapsible>\n\n        <Collapsible title=\"Population\" className=\"mt-4 mb-4\">\n          <h3>Reconstructed morphologies</h3>\n          <ESData query={mtypeExpMorphologyListDataQuery(currentMtype)}>\n            {esDocuments => (\n              <>\n                {!!esDocuments &&\n                  <ExpMorphologyTable\n                    morphologies={getAndSortMorphologies(esDocuments)}\n                    currentMorphology={currentInstance}\n                  />\n                }\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default NeuronExperimentalMorphology;\n","import React from 'react';\n\nimport MainLayout from '../../layouts/MainLayout';\nimport NeuronMorphologyView from '../../views/experimental/NeuronMorphology';\n\n\nexport default function About() {\n  return (\n    <MainLayout>\n      <NeuronMorphologyView />\n    </MainLayout>\n  );\n};\n","\ntype ESQuery = Record<string, unknown>;\n\n/**\n * Lists get specific experiment of specific e-type\n *\n */\nexport const layerAnatomyDataQuery = {\n  from: 0,\n  size: 1000,\n  query: {\n    bool: {\n      filter: [\n        {\n          bool: {\n            should: [\n              {\n                term: {\n                  '@type': 'LayerThickness',\n                },\n              },\n              {\n                term: {\n                  '@type': 'NeuronDensity',\n                },\n              },\n              {\n                term: {\n                  '@type': 'SliceCollection',\n                }\n              }\n            ],\n          },\n        },\n      ],\n    },\n  },\n};\n\nexport const electroPhysiologyDataQuery = (\n  etype: string,\n  experiment: string,\n): ESQuery | null => {\n  if (!etype || !experiment) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must: {\n                term: { 'name.raw': experiment }\n              }\n            }\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: { term: { 'annotation.hasBody.label.raw': etype } },\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/nwb' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const ephysByNameDataQuery = (\n  names: string[],\n): ESQuery | null => {\n  if (!names) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 10000,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must: {\n                terms: { 'name.raw': names }\n              }\n            }\n          },\n          {\n            bool: {\n              must: {\n                term: { 'note': 'subset' }\n              }\n            }\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/nwb' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const mtypeExpMorphologyListDataQuery = (\n  mtype: string\n): ESQuery | null => {\n  if (!mtype) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 200,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@type': 'ReconstructedCell',\n                  },\n                },\n              ],\n            },\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: [\n                    {\n                      term: {\n                        'annotation.hasBody.label.raw': mtype,\n                      },\n                    },\n                  ],\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const morphologyDataQuery = (\n  mtype: string,\n  instance: string\n): ESQuery | null => {\n  if(!mtype || !instance) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@type': 'NeuronMorphology',\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    'name.raw': instance,\n                  },\n                },\n              ],\n            },\n          },\n          // {\n          //   nested: {\n          //     path: 'annotation.hasBody',\n          //     query: {\n          //       bool: {\n          //         filter: [\n          //           {\n          //             term: {\n          //               'annotation.hasBody.label.raw': mtype,\n          //             },\n          //           },\n          //         ],\n          //       },\n          //     },\n          //   },\n          // },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const dataByIdQuery = (\n  id: string | string[]\n): ESQuery | null => {\n  if(!id) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@id': id,\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const etypeTracesDataQuery = (\n  etype: string,\n): ESQuery | null => {\n  if (!etype) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 10000,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must_not: {\n                exists: {\n                  \"field\": \"note\",\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: { term: { 'annotation.hasBody.label.raw': etype } },\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/rab' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n","import { accentColors } from '../../config';\nimport { Color } from '../../types';\n\nexport const sectionTitle = 'Experimental Data';\nexport const colorName: Color = 'grey-1';\nexport const primaryColor = accentColors[colorName];\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/neuronal-morphology\",\n      function () {\n        return require(\"private-next-pages/experimental-data/neuronal-morphology.tsx\");\n      }\n    ]);\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"morphImageContainer\":\"styles_morphImageContainer__1PM2z\",\"highlightedRowBg\":\"styles_highlightedRowBg__3x0pZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layer\":\"styles_layer__uUJ49\",\"active\":\"styles_active__1RUjp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"neuron-morphology_selector__2Hh7F\",\"selectorColumn\":\"neuron-morphology_selectorColumn__1ltHl\",\"selectorHead\":\"neuron-morphology_selectorHead__3ZykT\",\"selectorBody\":\"neuron-morphology_selectorBody__Gr9_a\"};"],"sourceRoot":""}