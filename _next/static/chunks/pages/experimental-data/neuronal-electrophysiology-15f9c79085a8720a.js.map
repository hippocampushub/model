{"version":3,"file":"static/chunks/pages/experimental-data/neuronal-electrophysiology-15f9c79085a8720a.js","mappings":"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","sources":["webpack://_N_E/?1f85","webpack://_N_E/./src/components/ExpTraceTable/index.tsx","webpack://_N_E/./src/views/experimental/NeuronElectrophysiology.tsx","webpack://_N_E/./src/pages/experimental-data/neuronal-electrophysiology.tsx","webpack://_N_E/./src/components/ExpTraceTable/styles.module.scss","webpack://_N_E/./src/styles/experimental-data/neuron-electrophysiology.module.scss"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/neuronal-electrophysiology\",\n      function () {\n        return require(\"private-next-pages/experimental-data/neuronal-electrophysiology.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/experimental-data/neuronal-electrophysiology\"])\n      });\n    }\n  ","import React, { useState, useEffect } from 'react';\nimport { keyBy } from 'lodash';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport { hippocampus } from '../../config';\nimport ImageViewer from '../ImageViewer';\n\nimport styles from './styles.module.scss'\n\n\ntype ExpTraceTableProps = {\n  traces: Record<string, any>[];\n  currentTrace?: string;\n};\n\nfunction entryToArray(entry) {\n  if (Array.isArray(entry)) return entry;\n\n  return [entry];\n}\n\nfunction getAgentLabel(agent) {\n  return agent.name\n    ? agent.name\n    : `${agent.givenName} ${agent.familyName}`;\n}\n\nfunction getAgentType(agent) {\n  return agent.name\n    ? 'institution'\n    : 'person';\n}\n\nconst ExpTraceTable: React.FC<ExpTraceTableProps> = ({ currentTrace, traces = [] }) => {\n  const nexus = useNexusContext();\n\n  const agentIds = traces.reduce((ids: string[], trace) => {\n    const currIds = entryToArray(trace.contribution)\n      .map(contribution => contribution.agent?.['@id'])\n      .filter(Boolean);\n\n    return Array.from(new Set([...ids, ...currIds]));\n  }, []);\n\n  const [agentMap, setAgentMap] = useState<Record<string, any>>(null);\n\n  useEffect(() => {\n    if (!agentIds.length) return;\n\n    const contributionEsQuery = {\n      from: 0,\n      size: 100,\n      query: {\n        terms: {\n          '_id': agentIds,\n        }\n      }\n    }\n\n    nexus.View\n      // query ElesticSearch endpoint to get agents by their ids\n      .elasticSearchQuery(hippocampus.org, hippocampus.project, hippocampus.datasetViewId, contributionEsQuery)\n      // extract ES documents\n      .then(data => data.hits.hits)\n      // extract Nexus original documents\n      .then(esDocuments => esDocuments.map(esDocument => esDocument._source))\n      // pick only agent ids and labels\n      .then(agents => agents.map(agent => ({\n        id: agent['@id'],\n        label: getAgentLabel(agent),\n        type: getAgentType(agent),\n      })))\n      // create a map of agents of type Record<id, label>\n      .then(agents => keyBy(agents, 'id'))\n      .then(agentMap => setAgentMap(agentMap));\n  }, [traces]);\n\n  const isCurrent = trace => trace.name === currentTrace;\n\n  return (\n    <div\n      id={traces.length && agentMap ? 'expTraceTable' : null}\n      className=\"layer-anatomy-summary__basis mt-2\"\n    >\n      <table>\n        <thead>\n          <tr className={styles.highlightedRowBg}>\n            <th>Name</th>\n            {/* <th>Image</th> */}\n            <th>E-Type</th>\n            <th>Contribution</th>\n          </tr>\n        </thead>\n        <tbody>\n          {traces.map(trace => (\n            <tr className={isCurrent(trace) ? styles.highlightedRowBg : undefined} key={trace.name}>\n              <td className={`text-capitalize ${isCurrent(trace) ? 'text-bold' : undefined}`}>\n                {trace.name}\n              </td>\n              <td className={`text-capitalize ${isCurrent(trace) ? 'text-bold' : undefined}`}>\n                {trace.annotation.hasBody.label}\n              </td>\n              <td>\n                {agentMap && entryToArray(trace.contribution)\n                  .map(contribution => agentMap[contribution.agent['@id']])\n                  .sort((a1, a2) => a1.type > a2.type ? 1 : -1)\n                  .map(agent => <span key={agent.label}>{agent.label} <br/></span>)\n                }\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\nexport default ExpTraceTable;\n","import React from 'react';\nimport { useRouter } from 'next/router';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { Button } from 'antd';\n\nimport ESData from '../../components/ESData';\nimport DataContainer from '../../components/DataContainer';\nimport NexusPlugin from '../../components/NexusPlugin';\nimport { electroPhysiologyDataQuery, etypeTracesDataQuery } from '../../queries/es';\nimport Filters from '../../layouts/Filters';\nimport Title from '../../components/Title';\nimport InfoBox from '../../components/InfoBox';\nimport { colorName } from './config';\nimport List from '../../components/List';\nimport Collapsible from '../../components/Collapsible';\nimport ExpTraceTable from '../../components/ExpTraceTable';\nimport traces from '../../traces.json';\nimport styles from '../../styles/experimental-data/neuron-electrophysiology.module.scss';\n\n\nconst NeuronElectrophysiology: React.FC = () => {\n  const router = useRouter();\n  const nexus = useNexusContext();\n\n  const query = {\n    ...router.query\n  };\n\n  const setQuery = (query: any) => {\n    router.push({ query, pathname: router.pathname }, undefined, { shallow: true });\n  }\n\n  const setEtype = (etype: string) => {\n    setQuery({\n      etype,\n      etype_instance: currentInstance,\n    });\n  };\n  const setInstance = (instance: string) => {\n    setQuery({\n      etype: currentEtype,\n      etype_instance: instance,\n    });\n  };\n\n  const currentEtype: string = query.etype as string;\n  const currentInstance: string = query.etype_instance as string;\n\n  const etypes = Object.keys(traces).sort();\n  const instances = currentEtype\n    ? traces[currentEtype].sort()\n    : []\n\n  const getAndSortTraces = (esDocuments) => {\n    return esDocuments\n      .map(esDocument => esDocument._source)\n      .sort((m1, m2) => (m1.name > m2.name) ? 1 : -1);\n  };\n\n  return (\n    <>\n      <Filters\n        backgroundAlt\n      >\n        <div className=\"row bottom-xs w-100\">\n          <div className=\"col-xs-12 col-lg-6\">\n            <Title\n              primaryColor={colorName}\n              title={<span>Neuron <br /> Electrophysiology</span>}\n              subtitle=\"Experimental Data\"\n            />\n            <InfoBox\n              color=\"grey-1\"\n              text=\"We recorded electrical traces from neurons using single-cell recording experiments in brain slices. Then, we classified the traces in different electrical types (e-types) based on their firing patterns. We have identified one e-type for excitatory cells and four e-types for inhibitory cells.\"\n            />\n          </div>\n\n          <div className=\"col-xs-12 col-lg-4 col-lg-offset-1\">\n            <div className={styles.selector}>\n              <div className={styles.selectorHead}>Select cell type</div>\n              <div className={styles.selectorBody}>\n                <List\n                  list={etypes}\n                  value={currentEtype}\n                  title=\"e-type\"\n                  color={colorName}\n                  onSelect={setEtype}\n                />\n                <br />\n                <br />\n                <br />\n                <List\n                  list={instances}\n                  value={currentInstance}\n                  title={`Experiment instance (${instances.length})`}\n                  color={colorName}\n                  onSelect={setInstance}\n                  anchor=\"data\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <DataContainer visible={!!currentInstance}>\n        <Collapsible\n          id=\"instanceSection\"\n          title={`Electrophysiological Recordings for ${currentEtype}_${currentInstance}`}\n        >\n          <ESData query={electroPhysiologyDataQuery(currentEtype, currentInstance)} >\n            {esDocuments => (\n              <>\n                {!!esDocuments && !!esDocuments.length && (\n                  <>\n                    <NexusPlugin\n                      name=\"neuron-electrophysiology\"\n                      resource={esDocuments[0]._source}\n                      nexusClient={nexus}\n                    />\n                    <div className=\"text-right\">\n                      <Button\n                        className=\"mr-1\"\n                        type=\"primary\"\n                        size=\"small\"\n                        href={`/build/data/electrophysiology?query=${encodeURIComponent(currentInstance)}`}\n                      >\n                        Send to the Build section\n                      </Button>\n                    </div>\n                  </>\n                )}\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n\n        <Collapsible\n          id=\"etypeSection\"\n          className=\"mt-4\"\n          title=\"Population\"\n        >\n          <h3 className=\"mt-3\">Experimental instances</h3>\n\n          <ESData query={etypeTracesDataQuery(currentEtype)}>\n            {esDocuments => (\n              <>\n                {!!esDocuments && (\n                  <ExpTraceTable\n                    traces={getAndSortTraces(esDocuments)}\n                    currentTrace={currentInstance}\n                  />\n                )}\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default NeuronElectrophysiology;\n","import React from 'react';\n\nimport NeuronEphysView from '../../views/experimental/NeuronElectrophysiology';\n\n\nexport default function About() {\n  return (\n    <NeuronEphysView />\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"highlightedRowBg\":\"styles_highlightedRowBg__KXEdg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"neuron-electrophysiology_selector__MCmCG\",\"selectorColumn\":\"neuron-electrophysiology_selectorColumn__VgH4S\",\"selectorHead\":\"neuron-electrophysiology_selectorHead__AsJgx\",\"selectorBody\":\"neuron-electrophysiology_selectorBody__owuqe\"};"],"names":["window","__NEXT_P","push","entryToArray","entry","Array","isArray","getAgentLabel","agent","name","givenName","familyName","getAgentType","currentTrace","traces","nexus","useNexusContext","agentIds","reduce","ids","trace","currIds","contribution","map","filter","Boolean","from","Set","useState","agentMap","setAgentMap","useEffect","length","contributionEsQuery","size","query","terms","View","elasticSearchQuery","hippocampus","then","data","hits","esDocuments","esDocument","_source","agents","id","label","type","keyBy","isCurrent","div","className","table","thead","tr","styles","th","tbody","undefined","td","annotation","hasBody","sort","a1","a2","key","span","br","router","useRouter","setQuery","pathname","shallow","currentEtype","etype","currentInstance","etype_instance","etypes","Object","keys","instances","getAndSortTraces","m1","m2","Filters","backgroundAlt","Title","primaryColor","colorName","title","subtitle","InfoBox","color","text","List","list","value","onSelect","instance","anchor","DataContainer","visible","Collapsible","ESData","electroPhysiologyDataQuery","NexusPlugin","resource","nexusClient","Button","href","encodeURIComponent","h3","etypeTracesDataQuery","ExpTraceTable","About","NeuronEphysView","module","exports"],"sourceRoot":""}