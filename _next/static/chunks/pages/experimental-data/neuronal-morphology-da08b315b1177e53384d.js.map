{"version":3,"sources":["webpack://_N_E/./node_modules/file-saver/dist/FileSaver.min.js","webpack://_N_E/./src/components/Collapsible/index.tsx","webpack://_N_E/./src/components/ScrollTo/index.tsx","webpack://_N_E/./src/components/DataContainer/index.tsx","webpack://_N_E/./src/components/ESData/index.tsx","webpack://_N_E/./src/components/InfoBox/index.tsx","webpack://_N_E/./src/components/LayerSelector/index.tsx","webpack://_N_E/./src/components/List/index.tsx","webpack://_N_E/./src/components/NexusPlugin/index.tsx","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/Title/index.tsx","webpack://_N_E/./src/components/Unit/index.tsx","webpack://_N_E/./src/layouts/Filters/index.tsx","webpack://_N_E/./src/components/ExpMorphologyFactsheet/index.tsx","webpack://_N_E/./src/components/ImageViewer/index.tsx","webpack://_N_E/./src/components/ExpMorphologyTable/index.tsx","webpack://_N_E/./src/utils/index.ts","webpack://_N_E/./src/components/NexusFileDownloadButton/index.tsx","webpack://_N_E/./src/views/experimental/NeuronMorphology.tsx","webpack://_N_E/./src/pages/experimental-data/neuronal-morphology.tsx","webpack://_N_E/./src/queries/es/index.ts","webpack://_N_E/./src/views/experimental/config.ts","webpack://_N_E/?a571","webpack://_N_E/./src/components/ExpMorphologyTable/styles.module.scss","webpack://_N_E/./src/components/InfoBox/styles.module.scss","webpack://_N_E/./src/components/LayerSelector/styles.module.scss","webpack://_N_E/./src/styles/experimental-data/neuron-morphology.module.scss"],"names":["b","a","autoBom","console","warn","test","type","Blob","c","d","XMLHttpRequest","open","responseType","onload","g","response","onerror","error","send","status","e","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","f","self","global","navigator","userAgent","saveAs","HTMLAnchorElement","prototype","h","i","URL","webkitURL","j","createElement","name","download","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","body","innerText","HTMLElement","safari","FileReader","k","onloadend","result","replace","readAsDataURL","l","m","module","exports","collapsed","children","color","className","React","isCollapsed","setCollapsed","id","onClick","classPrefix","anchor","direction","querySelector","scrollIntoView","query","data","loading","state","setState","nexus","useNexusContext","View","elasticSearchQuery","hippocampus","then","hits","text","styles","LAYERS","activeLayer","onLayerSelected","map","layer","classPrefixList","list","value","onSelect","role","aria-labelledby","element","aria-checked","tabIndex","handleSelectedElement","NexusPluginLazy","dynamic","ssr","props","significantFigures","thousandSeparator","prefix","suffix","isNumber","fixed","parseFloat","toPrecision","formatted","toLocaleString","subtitle","hint","primaryColor","primary","dangerouslySetInnerHTML","__html","replacement","MOhm","backgroundAlt","MorphologyFactsheetSingleValueEntry","fact","isNil","NumberFormat","Unit","unit","MorphologyFactsheetEntry","neuriteTypes","strPrettify","str","morphologyName","stats","expMorphologyStats","getFactsheetEntries","neuriteType","Object","entries","statKey","statValue","includes","mean_soma_radius","filter","max_section_length","neuriteHasStats","ImageViewerLazy","entryToArray","entry","Array","isArray","getAgentLabel","agent","givenName","familyName","getAgentType","morphologies","agentIds","reduce","ids","morphology","currIds","contribution","Boolean","from","Set","useState","agentMap","setAgentMap","useEffect","length","contributionEsQuery","size","terms","esDocuments","esDocument","_source","agents","label","keyBy","morph","style","textAlign","src","basePath","alt","annotation","hasBody","sort","a1","a2","nexusEntities","nexusUrlR","RegExp","join","filename","url","org","project","setLoading","nexusUrl","Error","mulEntityTypeR","mulEntityTypeMatch","match","matches","deployment","entityType","slice","schema","parseUrl","fileOrg","fileProject","fileId","split","reverse","File","get","as","imageData","router","useRouter","setQuery","push","pathname","undefined","shallow","currentLayer","mtypes","region","mtype","currentMtype","instances","currentInstance","instance","getMorphologyDistribution","morphologyResource","distribution","find","getAndSortMorphologies","m1","m2","Filters","Title","colorName","InfoBox","LayerSelector","List","DataContainer","Collapsible","ESData","mtypeExpMorphologyListDataQuery","ExpMorphologyFactsheet","morphologyDataQuery","contentUrl","NexusPlugin","resource","nexusClient","About","MainLayout","NeuronMorphology","electroPhysiologyDataQuery","etype","experiment","bool","must","term","nested","path","should","etypeTracesDataQuery","must_not","exists","accentColors","__NEXT_P"],"mappings":"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","file":"static/chunks/pages/experimental-data/neuronal-morphology-da08b315b1177e53384d.js","sourcesContent":["(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open(\"GET\",a),d.responseType=\"blob\",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error(\"could not download file\")},d.send()}function d(a){var b=new XMLHttpRequest;b.open(\"HEAD\",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open(\"\",\"_blank\"),g&&(g.document.title=g.document.body.innerText=\"downloading...\"),\"string\"==typeof b)return c(b,d,e);var h=\"application/octet-stream\"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&\"undefined\"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,\"undefined\"!=typeof module&&(module.exports=g)});\n\n//# sourceMappingURL=FileSaver.min.js.map","import React, { ReactChild, ReactFragment } from 'react';\nimport { IoIosArrowUp } from 'react-icons/io';\n\n\nconst classPrefix = 'collapsible__';\n\ntype CollapsibleColor = 'red'\n\ntype CollapsibleProps = {\n  collapsed?: boolean;\n  title: string;\n  children: ReactChild | ReactFragment;\n  color?: CollapsibleColor;\n  className?: string;\n};\n\nconst Collapsible: React.FC<CollapsibleProps> = ({\n  collapsed,\n  title,\n  children,\n  color = '',\n  className = '',\n}) => {\n  const [isCollapsed, setCollapsed] = React.useState(collapsed);\n\n  return (\n    <div id=\"data\" className={`${classPrefix}${isCollapsed ? 'collapsed' : 'expanded'} ${color} ${className}`}>\n      <div\n        className=\"header\"\n        title={title}\n        onClick={() => setCollapsed(!isCollapsed)}\n      >\n        {title}\n        <span className=\"arrow\">\n          <IoIosArrowUp />\n        </span>\n      </div>\n      <div className=\"content\">{children}</div>\n    </div>\n  );\n};\n\nexport default Collapsible;\n","import React, { ReactChild, ReactFragment } from 'react';\nimport { IoIosArrowDown, IoIosArrowUp } from 'react-icons/io';\n\nimport { Direction, Color } from '../../types';\n\n\nconst classPrefix = 'scroll-to__';\n\ntype ScrollToProps = {\n  anchor: string;\n  direction: Direction;\n  children: ReactChild | ReactFragment;\n  color?: Color;\n};\n\nconst ScrollTo: React.FC<ScrollToProps> = ({\n  anchor,\n  direction,\n  children,\n  color = '',\n}) => {\n  const scroll = () => {\n    const target = document.querySelector(`#${anchor}`);\n    if (target) {\n      target.scrollIntoView();\n    }\n  };\n\n  return (\n    <div onClick={scroll} className={`${classPrefix}basis bg-${color}`}>\n      {children}\n      <span className={`${classPrefix}direction`}>\n        {direction === 'up' && <IoIosArrowUp />}\n        {direction === 'down' && <IoIosArrowDown />}\n      </span>\n    </div>\n  );\n};\n\nexport default ScrollTo;\n","import React from 'react';\n\nimport ScrollTo from '../../components/ScrollTo';\n\n\nconst classPrefix = 'data-container__';\n\ntype DataContainerProps = {\n  visible?: boolean;\n  children: React.ReactNode\n};\n\nconst DataContainer: React.FC<DataContainerProps> = ({\n  children,\n}) => {\n  return <div className={`${classPrefix}basis`}>\n    <div className=\"center\">{children}</div>\n    <div className=\"scroll-to\">\n      <ScrollTo anchor=\"filters\" direction=\"up\">\n        Return to selectors\n            </ScrollTo>\n    </div>\n  </div>\n};\n\nexport default DataContainer;\n","import React from 'react';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { ElasticSearchViewQueryResponse } from '@bbp/nexus-sdk';\n\nimport { hippocampus } from '../../config';\n\n\ntype ESDataProps = {\n  query: Record<string, unknown> | null;\n  children: (\n    data: ElasticSearchViewQueryResponse<any>['hits']['hits'] | null,\n    loading: boolean,\n    error: any,\n  ) => React.ReactNode;\n};\n\nconst ESData: React.FC<ESDataProps> = ({\n  query,\n  children,\n}) => {\n  const [state, setState] = React.useState<{\n    data: ElasticSearchViewQueryResponse<any>['hits']['hits'] | null;\n    loading: boolean;\n    error: any;\n  }>({\n    data: null,\n    loading: false,\n    error: null,\n  });\n  const nexus = useNexusContext();\n\n  React.useEffect(() => {\n    if (query) {\n      setState({ ...state, loading: true, data: null });\n      nexus.View.elasticSearchQuery(\n        hippocampus.org,\n        hippocampus.project,\n        hippocampus.datasetViewId,\n        query,\n      )\n        .then(data =>\n          setState({ ...state, loading: false, data: data.hits.hits }),\n        )\n        .catch(error => setState({ ...state, loading: false, error }));\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query]);\n\n  return (\n    <>\n      {children(state.data, state.loading, state.error)}\n    </>\n  );\n};\n\nexport default ESData;\n","import React from 'react';\n\nimport { Color } from '../../types';\nimport styles from './styles.module.scss';\n\n\ntype InfoBoxProps = {\n  title?: string;\n  text: string;\n  color?: Color;\n};\n\nconst InfoBox: React.FC<InfoBoxProps> = ({\n  title,\n  text,\n  color = '',\n}) => {\n  return (\n    <div className={`${styles.container} bg-${color}`}>\n      {title && <h3>{title}</h3>}\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default InfoBox;\n","import React, { ReactChild, ReactFragment } from 'react';\nimport { Layer } from '../../types';\n\nimport styles from './styles.module.scss'\n\n\ntype LayerSelectProps = {\n  activeLayer?: Layer;\n  onLayerSelected?: (layer: Layer) => void;\n};\n\nconst LAYERS: Layer[] = ['SLM', 'SR', 'SP', 'SO'];\n\nconst LayerSelector: React.FC<LayerSelectProps> = ({\n  activeLayer,\n  onLayerSelected = () => {},\n}) => {\n  const selectLayer = (l: Layer): void => onLayerSelected(l);\n\n  return (\n    <div>\n      {LAYERS.map(layer => (\n        <div\n          key={layer}\n          className={`${styles.layer} ${layer === activeLayer ? styles.active : ''}`}\n          onClick={() => selectLayer(layer)}\n        >\n          {layer}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default LayerSelector;\n","import React from 'react';\n\nimport { Color } from '../../types';\n\n\nconst classPrefixList = 'list__';\nconst classPrefixListElement = 'list-element__';\n\ntype ListProps = {\n  title?: string;\n  list: string[];\n  value?: string;\n  onSelect?: (s: string) => void;\n  color?: Color;\n  anchor?: string;\n  block?: boolean;\n  className?: string;\n};\n\nconst List: React.FC<ListProps> = ({\n  title,\n  list,\n  value,\n  onSelect = () => { },\n  color,\n  anchor = '',\n  className = '',\n}) => {\n  const handleSelectedElement = (element: string) => {\n    const target = anchor && document.querySelector(`#${anchor}`);\n    if (target) {\n      window.setTimeout(() => target.scrollIntoView(true), 0)\n    }\n    onSelect(element);\n  }\n\n  const id = title ? title.replace(/\\s/g, '') : 'no_title';\n\n  return (\n    <div\n      className={`${classPrefixList}basis bg-${color} ${className}`}\n      role=\"radiogroup\"\n      aria-labelledby={`${classPrefixList}${id}`}\n    >\n      {title && <p>{title}</p>}\n      <div className=\"elements\">\n        {list.map(element => (\n          <div\n            key={element}\n            role=\"radio\"\n            aria-checked={value === element}\n            tabIndex={0}\n            className={`${classPrefixListElement}basis ${value === element ? 'selected' : ''}`}\n            onClick={() => handleSelectedElement(element)}\n            title={element}\n          >\n            {element}\n          </div>\n\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nimport { NexusPluginClassProps } from './nexus-plugin';\n\n\nconst NexusPluginLazy = dynamic(() => import('./nexus-plugin'), { ssr: false });\n\nconst ImageViewer: React.FC<NexusPluginClassProps<any>> = (props) => {\n  return (\n    <NexusPluginLazy {...props} />\n  );\n};\n\n\nexport default ImageViewer;\n","import React from 'react';\n\nimport isNumber from 'lodash/isNumber';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  if (!isNumber(value)) return value;\n\n  const fixed = parseFloat(value.toPrecision(significantFigures));\n\n  const formatted = thousandSeparator\n    ? fixed.toLocaleString('en')\n    : fixed;\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\n\nexport default NumberFormat;\n","import React from 'react';\n\nimport { Color } from '../../types';\n\n\nconst classPrefix = 'title__';\n\ntype TitleProps = {\n  title?: React.ReactChild;\n  subtitle?: string;\n  primaryColor?: Color;\n  hint?: string;\n  primary?: boolean;\n};\n\nconst Title: React.FC<TitleProps> = ({\n  title,\n  subtitle,\n  hint,\n  primaryColor = 'yellow' as Color,\n  primary,\n}) => {\n  return (\n    <div\n      className={`${classPrefix}basis ${\n        primary ? 'primary' : ''\n      } ${primaryColor}`}\n    >\n      {subtitle && !primary && <h4 className=\"text-white\">{subtitle}</h4>}\n      {title && <h2 role=\"title\" className=\"text-white\">{title}</h2>}\n      {subtitle && primary && <h4 className=\"text-white\">{subtitle}</h4>}\n      {hint && <p dangerouslySetInnerHTML={{ __html: hint }} />}\n    </div>\n  );\n};\n\nexport default Title;\n","import React from 'react';\n\ntype UnitProps = {\n  value?: string;\n}\n\nconst replacement = {\n  MOhm: 'MΩ',\n};\n\nconst Unit: React.FC<UnitProps> = ({ value = '' }) => {\n  return (\n    <>\n      {replacement[value] ?? value}\n    </>\n  );\n};\n\n\nexport default Unit;\n","import React, { ReactChild, ReactFragment } from 'react';\n\nimport ScrollTo from '../../components/ScrollTo';\nimport { Color } from '../../types';\n// import './style.scss';\n\nconst classPrefix = 'filters__';\n\ntype FiltersProps = {\n  children: ReactChild | ReactFragment;\n  backgroundAlt?: boolean;\n  id?: string;\n};\n\nconst Filters: React.FC<FiltersProps> = ({\n  children,\n  backgroundAlt,\n  id = 'filters',\n}) => {\n  return (\n    <div>\n      <div\n        id={id}\n        className={`${classPrefix}basis ${backgroundAlt ? 'background-alt' : ''}`}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Filters;\n","import React from 'react';\nimport NumberFormat from '../NumberFormat';\nimport isNil from 'lodash/isNil';\n\nimport Unit from '../Unit';\nimport expMorphologyStats from '../../exp-morphology-stats.json';\n\n\nconst classPrefix = 'factsheet__';\n\n\ntype MorphologyFactsheetEntryType = {\n  name: string;\n  description?: string;\n  unit?: string;\n  value?: number | string;\n  value_map?: {\n    [key: string]: string | number;\n  };\n};\n\n\ntype MorphologyFactsheetProps = {\n  morphologyName: string;\n  className?: string;\n};\n\n\nconst MorphologyFactsheetSingleValueEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType;\n}> = ({\n  fact\n}) => {\n  return (\n    <div className=\"row mt-1\">\n      <div className=\"col-xs-8 col-sm-4 name\">{fact.name}</div>\n      <div className=\"col-xs-4 col-sm-8 value\">\n        {isNil(fact.value)\n          ? (<span>-</span>)\n          : (<span>\n              <NumberFormat value={fact.value} /> <Unit value={fact.unit} />\n            </span>)\n        }\n      </div>\n    </div>\n  );\n};\n\nconst MorphologyFactsheetEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType\n}> = ({\n  fact\n}) => {\n  return (<MorphologyFactsheetSingleValueEntry fact={fact} />);\n};\n\nconst neuriteTypes = ['all', 'axon', 'apical_dendrite', 'basal_dendrite'];\n\nconst strPrettify = (str) => str ? str.replace(/\\_/g, ' ') : str;\n\nconst MorphologyFactsheet: React.FC<MorphologyFactsheetProps> = ({\n  morphologyName,\n  className = '',\n}) => {\n  const stats = expMorphologyStats[morphologyName];\n\n  if (!stats) {\n    return (\n      <p className=\"red\">No morphology stats found</p>\n    );\n  }\n\n  const neuriteHasStats = (neuriteType) => !!stats[neuriteType].max_section_length;\n\n  const getFactsheetEntries = (neuriteType) => {\n    return Object.entries(stats[neuriteType]).map(([statKey, statValue]) => ({\n      name: strPrettify(statKey),\n      unit: (statKey as string).includes('volume') ? 'µm³' : ((statKey as string).includes('length') ? 'µm' : ''),\n      value: statValue\n    }));\n  };\n\n  return (\n    <div className={`${classPrefix}basis ${className}`}>\n      <h3>Morphology factsheet</h3>\n\n      <div className=\"mb-3 mt-3\">\n        <MorphologyFactsheetEntry fact={{\n          name: 'soma diameter',\n          unit: 'µm',\n          value: stats.mean_soma_radius * 2,\n        }} />\n      </div>\n\n      {neuriteTypes.filter(neuriteType => neuriteHasStats(neuriteType)).map(neuriteType => (\n        <div className=\"mb-2\" key={neuriteType}>\n          <strong className=\"text-capitalize\">{strPrettify(neuriteType)}</strong>\n          {getFactsheetEntries(neuriteType).map(fact => (\n            <MorphologyFactsheetEntry key={fact.name} fact={fact as MorphologyFactsheetEntryType} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MorphologyFactsheet;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nimport { ImageViewerProps } from './image-viewer';\n\n\nconst ImageViewerLazy = dynamic(() => import('./image-viewer'), { ssr: false });\n\nconst ImageViewer: React.FC<ImageViewerProps> = (props) => {\n  return (\n    <ImageViewerLazy {...props} />\n  );\n};\n\n\nexport default ImageViewer;\n","import React, { useState, useEffect } from 'react';\nimport { keyBy } from 'lodash';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport { hippocampus, basePath } from '../../config';\nimport ImageViewer from '../ImageViewer';\n\nimport styles from './styles.module.scss'\n\n\ntype ExpMorphologyTableProps = {\n  morphologies: Record<string, any>[];\n};\n\nfunction entryToArray(entry) {\n  if (Array.isArray(entry)) return entry;\n\n  return [entry];\n}\n\nfunction getAgentLabel(agent) {\n  return agent.name\n    ? agent.name\n    : `${agent.givenName} ${agent.familyName}`;\n}\n\nfunction getAgentType(agent) {\n  return agent.name\n    ? 'institution'\n    : 'person';\n}\n\nconst ExpMorphologyTable: React.FC<ExpMorphologyTableProps> = ({ morphologies = [] }) => {\n  const nexus = useNexusContext();\n\n  const agentIds = morphologies.reduce((ids: string[], morphology) => {\n    const currIds = entryToArray(morphology.contribution)\n      .map(contribution => contribution.agent?.['@id'])\n      .filter(Boolean);\n\n    return Array.from(new Set([...ids, ...currIds]));\n  }, []);\n\n  const [agentMap, setAgentMap] = useState<Record<string, any>>(null);\n\n  useEffect(() => {\n    if (!agentIds.length) return;\n\n    const contributionEsQuery = {\n      from: 0,\n      size: 100,\n      query: {\n        terms: {\n          '_id': agentIds,\n        }\n      }\n    }\n\n    nexus.View\n      // query ElesticSearch endpoint to get agents by their ids\n      .elasticSearchQuery(hippocampus.org, hippocampus.project, hippocampus.datasetViewId, contributionEsQuery)\n      // extract ES documents\n      .then(data => data.hits.hits)\n      // extract Nexus original documents\n      .then(esDocuments => esDocuments.map(esDocument => esDocument._source))\n      // pick only agent ids and labels\n      .then(agents => agents.map(agent => ({\n        id: agent['@id'],\n        label: getAgentLabel(agent),\n        type: getAgentType(agent),\n      })))\n      // create a map of agents of type Record<id, label>\n      .then(agents => keyBy(agents, 'id'))\n      .then(agentMap => setAgentMap(agentMap));\n  }, [morphologies]);\n\n  return (\n    <div className=\"layer-anatomy-summary__basis mt-2\">\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Image</th>\n            <th>M-Type</th>\n            <th>Contribution</th>\n          </tr>\n        </thead>\n        <tbody>\n          {morphologies.map(morph => (\n            <tr key={morph.name}>\n              <td className=\"text-capitalize\">{morph.name}</td>\n              <td style={{ textAlign: 'center'}}>\n                <div className={styles.morphImageContainer}>\n                  <ImageViewer\n                    src={`${basePath}/assets/images/exp-morph-images/${morph.name}.jpeg`}\n                    alt={`Morphology ${morph.name} image`}\n                    loading=\"lazy\"\n                  />\n                </div>\n              </td>\n              <td>{morph.annotation.hasBody.label}</td>\n              <td>\n                {agentMap && entryToArray(morph.contribution)\n                  .map(contribution => agentMap[contribution.agent['@id']])\n                  .sort((a1, a2) => a1.type > a2.type ? 1 : -1)\n                  .map(agent => <span key={agent.label}>{agent.label} <br/></span>)\n                }\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\nexport default ExpMorphologyTable;\n","interface ParsedNexusUrl {\n  deployment: string;\n  entityType: string;\n  org: string;\n  project: string;\n  schema: string;\n  id: string;\n}\n\nconst nexusEntities = [\n  'orgs',\n  'projects',\n  'acls',\n  'views',\n  'resources',\n  'files',\n];\n\nconst nexusUrlR = new RegExp(\n  [\n    '^',\n    '(https?://.+)', // nexus deployment\n    '/',\n    `(${nexusEntities.join('|')})`, // entity type\n    '/',\n    '([^/]+)', // org\n    '/',\n    '([^/]+)', // proj\n    '/?',\n    '([^/]+)?', // schema [optional]\n    '/?',\n    '([^/]+)?', // id [optional]\n    '/?',\n    '$',\n  ].join(''),\n);\n\n/**\n * @author pgetta\n * With given Nexus URL (might be self/project/id url), return it's:\n * * deployment URL\n * * entity type\n * * org label\n * * project label\n * * id\n *\n * @param nexusUrl\n */\nexport const parseUrl = (nexusUrl: string): ParsedNexusUrl => {\n  if (!nexusUrl) throw new Error('selfUrl should be defined');\n\n  const mulEntityTypeR = new RegExp(`(${nexusEntities.join('|')})`, 'g');\n  const mulEntityTypeMatch = nexusUrl.match(mulEntityTypeR);\n  if (mulEntityTypeMatch && mulEntityTypeMatch.length > 1) {\n    throw new Error(\n      'Url contains multiple entity types which is not supported',\n    );\n  }\n\n  const matches = nexusUrl.match(nexusUrlR);\n  if (!matches || matches.length <= 5) {\n    throw new Error('Error while parsing selfUrl');\n  }\n\n  return {\n    deployment: matches[1],\n    entityType: matches[2].slice(0, -1),\n    org: matches[3],\n    project: matches[4],\n    schema: matches[5],\n    id: matches[6],\n  };\n};\n","import React, { useState } from 'react';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { saveAs } from 'file-saver';\nimport { Button } from 'antd';\n\nimport { parseUrl } from '../../utils';\n\n\n\nexport type NexusFileDownloadButtonProps = {\n  filename: string;\n  url: string;\n  org?: string;\n  project?: string;\n  children: React.ReactNode;\n  className?: string;\n};\n\nconst NexusFileDownloadButton: React.FC<NexusFileDownloadButtonProps> = ({\n  filename,\n  url,\n  org,\n  project,\n  children,\n  className = '',\n}) => {\n  const nexus = useNexusContext();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const download = () => {\n    setLoading(true);\n    const { org: fileOrg, project: fileProject } = {...parseUrl(url), ...{ org, project }};\n    const fileId = url.split('/').reverse()[0];\n\n    nexus.File.get(fileOrg as string, fileProject as string, fileId, { as: 'blob' })\n      .then(imageData => saveAs(imageData as Blob, filename))\n      .catch(console.error)\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <Button\n      className={className}\n      type=\"primary\"\n      size=\"small\"\n      onClick={download}\n      loading={loading}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default NexusFileDownloadButton;\n","import React from 'react';\nimport { useRouter } from 'next/router';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport ESData from '../../components/ESData';\nimport DataContainer from '../../components/DataContainer';\nimport LayerSelector from '../../components/LayerSelector';\nimport { morphologyDataQuery, mtypeExpMorphologyListDataQuery } from '../../queries/es';\nimport Filters from '../../layouts/Filters';\nimport Title from '../../components/Title';\nimport InfoBox from '../../components/InfoBox';\nimport NexusPlugin from '../../components/NexusPlugin';\nimport { colorName } from './config';\nimport { Layer } from '../../types';\nimport Collapsible from '../../components/Collapsible';\nimport List from '../../components/List';\nimport morphologies from '../../exp-morphology-list.json';\nimport ExpMorphologyFactsheet from '../../components/ExpMorphologyFactsheet';\nimport ExpMorphologyTable from '../../components/ExpMorphologyTable';\nimport NexusFileDownloadButton from '../../components/NexusFileDownloadButton';\nimport { hippocampus } from '../../config';\n\nimport styles from '../../styles/experimental-data/neuron-morphology.module.scss';\n\n\nconst NeuronExperimentalMorphology: React.FC = () => {\n  const router = useRouter();\n  const nexus = useNexusContext();\n\n  const query = {\n    ...router.query\n  };\n\n  const setQuery = (query: any): void => {\n    router.push({ query, pathname: router.pathname }, undefined, { shallow: true });\n  };\n\n  const setLayer = (layer: Layer) => {\n    setQuery({\n      layer,\n      mtype: null,\n      instance: null,\n    });\n  };\n  const currentLayer: Layer = query.layer as Layer;\n\n  const mtypes = currentLayer\n    ? Array.from(new Set(morphologies.filter(m => m.region === currentLayer).map(m => m.mtype))).sort()\n    : [];\n\n  const setMtype = (mtype: string) => {\n    setQuery({\n      mtype,\n      layer: currentLayer,\n      instance: null,\n    });\n  };\n  const currentMtype: string = query.mtype as string;\n\n  const instances = currentMtype\n    ? morphologies.filter(m => m.mtype === currentMtype).map(m => m.name).sort()\n    : []\n\n  const setInstance = (instance: string) => {\n    setQuery({\n      instance,\n      layer: currentLayer,\n      mtype: currentMtype,\n    });\n  };\n  const currentInstance: string = query.instance as string;\n\n  const getMorphologyDistribution = (morphologyResource: any) => {\n    return morphologyResource.distribution.find((d: any) => d.name.match(/\\.asc$/i));\n  };\n\n  const getAndSortMorphologies = (esDocuments) => {\n    return esDocuments\n      .map(esDocument => esDocument._source)\n      .sort((m1, m2) => (m1.name > m2.name) ? 1 : -1);\n  };\n\n  return (\n    <>\n      <Filters backgroundAlt>\n        <div className=\"row bottom-xs w-100\">\n          <div className=\"col-xs-12 col-lg-6\">\n            <Title\n              primaryColor={colorName}\n              title={<span>Neuronal <br /> Morphology</span>}\n              subtitle=\"Experimental Data\"\n            />\n            <InfoBox\n              color=\"grey-1\"\n              text=\"We classified neuronal morphologies in different morphological types (m-types) and created digital 3D reconstructions. Using objective classification methods, we have identified 12 m-types in rat hippocampus CA1.\"\n            />\n          </div>\n          <div className=\"col-xs-12 col-lg-6\">\n            <div className={styles.selector}>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>1. Choose a layer</div>\n                <div className={styles.selectorBody}>\n                  <LayerSelector\n                    activeLayer={currentLayer}\n                    onLayerSelected={setLayer}\n                  />\n                </div>\n              </div>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>2. Select reconstruction</div>\n                <div className={styles.selectorBody}>\n                  <List\n                    list={mtypes}\n                    value={currentMtype}\n                    title=\"m-type\"\n                    color={colorName}\n                    onSelect={setMtype}\n                  />\n                  <br />\n                  <br />\n                  <br />\n                  <List\n                    list={instances}\n                    value={currentInstance}\n                    title=\"Reconstructed morphology\"\n                    color={colorName}\n                    onSelect={setInstance}\n                    anchor=\"data\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <div id=\"data\" />\n\n      {!!currentInstance && <DataContainer>\n        <Collapsible title=\"Population\">\n          <h3>Reconstructed morphologies</h3>\n          <ESData query={mtypeExpMorphologyListDataQuery(currentMtype)}>\n            {esDocuments => (\n              <>\n                {!!esDocuments &&\n                  <ExpMorphologyTable\n                    morphologies={getAndSortMorphologies(esDocuments)}\n                  />\n                }\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n\n        <Collapsible\n          className=\"mt-4 mb-4\"\n          title={`Neuron Morphology ${currentMtype} ${currentInstance}`}\n        >\n          <ExpMorphologyFactsheet morphologyName={currentInstance} />\n\n          <ESData\n            query={morphologyDataQuery(currentMtype, currentInstance)}\n          >\n            {esDocuments => (\n              <>\n                {!!esDocuments && !!esDocuments.length && (\n                  <div className=\"text-right\">\n                    <NexusFileDownloadButton\n                      className=\"mt-2\"\n                      filename={getMorphologyDistribution(esDocuments[0]._source).name}\n                      url={getMorphologyDistribution(esDocuments[0]._source).contentUrl}\n                      org={hippocampus.org}\n                      project={hippocampus.project}\n                    >\n                      Download morphology\n                    </NexusFileDownloadButton>\n                  </div>\n                )}\n                {!!esDocuments && !!esDocuments.length && (\n                  <NexusPlugin\n                    className=\"mt-3\"\n                    name=\"neuron-morphology\"\n                    resource={esDocuments[0]._source}\n                    nexusClient={nexus}\n                  />\n                )}\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n      </DataContainer>}\n    </>\n  );\n};\n\nexport default NeuronExperimentalMorphology;\n","import React from 'react';\n\nimport MainLayout from '../../layouts/MainLayout';\nimport NeuronMorphologyView from '../../views/experimental/NeuronMorphology';\n\n\nexport default function About() {\n  return (\n    <MainLayout>\n      <NeuronMorphologyView />\n    </MainLayout>\n  );\n};\n","\ntype ESQuery = Record<string, unknown>;\n\n/**\n * Lists get specific experiment of specific e-type\n *\n */\nexport const layerAnatomyDataQuery = {\n  from: 0,\n  size: 1000,\n  query: {\n    bool: {\n      filter: [\n        {\n          bool: {\n            should: [\n              {\n                term: {\n                  '@type': 'LayerThickness',\n                },\n              },\n              {\n                term: {\n                  '@type': 'NeuronDensity',\n                },\n              },\n              {\n                term: {\n                  '@type': 'SliceCollection',\n                }\n              }\n            ],\n          },\n        },\n      ],\n    },\n  },\n};\n\nexport const electroPhysiologyDataQuery = (\n  etype: string,\n  experiment: string,\n): ESQuery | null => {\n  if (!etype || !experiment) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must: {\n                term: { 'name.raw': experiment }\n              }\n            }\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: { term: { 'annotation.hasBody.label.raw': etype } },\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/nwb' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const ephysByNameDataQuery = (\n  names: string[],\n): ESQuery | null => {\n  if (!names) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 10000,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must: {\n                terms: { 'name.raw': names }\n              }\n            }\n          },\n          {\n            bool: {\n              must: {\n                term: { 'note': 'subset' }\n              }\n            }\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/nwb' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const mtypeExpMorphologyListDataQuery = (\n  mtype: string\n): ESQuery | null => {\n  if (!mtype) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 200,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@type': 'ReconstructedCell',\n                  },\n                },\n              ],\n            },\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: [\n                    {\n                      term: {\n                        'annotation.hasBody.label.raw': mtype,\n                      },\n                    },\n                  ],\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const morphologyDataQuery = (\n  mtype: string,\n  instance: string\n): ESQuery | null => {\n  if(!mtype || !instance) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@type': 'NeuronMorphology',\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    'name.raw': instance,\n                  },\n                },\n              ],\n            },\n          },\n          // {\n          //   nested: {\n          //     path: 'annotation.hasBody',\n          //     query: {\n          //       bool: {\n          //         filter: [\n          //           {\n          //             term: {\n          //               'annotation.hasBody.label.raw': mtype,\n          //             },\n          //           },\n          //         ],\n          //       },\n          //     },\n          //   },\n          // },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const dataByIdQuery = (\n  id: string | string[]\n): ESQuery | null => {\n  if(!id) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@id': id,\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const etypeTracesDataQuery = (\n  etype: string,\n): ESQuery | null => {\n  if (!etype) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 10000,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must_not: {\n                exists: {\n                  \"field\": \"note\",\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: { term: { 'annotation.hasBody.label.raw': etype } },\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/rab' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n","import { accentColors } from '../../config';\nimport { Color } from '../../types';\n\nexport const sectionTitle = 'Experimental Data';\nexport const colorName: Color = 'grey-1';\nexport const primaryColor = accentColors[colorName];\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/neuronal-morphology\",\n      function () {\n        return require(\"private-next-pages/experimental-data/neuronal-morphology.tsx\");\n      }\n    ]);\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"morphImageContainer\":\"styles_morphImageContainer__1PM2z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__9zB6A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layer\":\"styles_layer__uUJ49\",\"active\":\"styles_active__1RUjp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"neuron-morphology_selector__2Hh7F\",\"selectorColumn\":\"neuron-morphology_selectorColumn__1ltHl\",\"selectorHead\":\"neuron-morphology_selectorHead__3ZykT\",\"selectorBody\":\"neuron-morphology_selectorBody__Gr9_a\"};"],"sourceRoot":""}