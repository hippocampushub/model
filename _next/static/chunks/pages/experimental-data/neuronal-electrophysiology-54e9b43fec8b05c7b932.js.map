{"version":3,"sources":["webpack://_N_E/./src/components/Collapsible/index.tsx","webpack://_N_E/./src/components/ScrollTo/index.tsx","webpack://_N_E/./src/components/DataContainer/index.tsx","webpack://_N_E/./src/components/ESData/index.tsx","webpack://_N_E/./src/components/InfoBox/index.tsx","webpack://_N_E/./src/components/List/index.tsx","webpack://_N_E/./src/components/NexusPlugin/index.tsx","webpack://_N_E/./src/components/Title/index.tsx","webpack://_N_E/./src/layouts/Filters/index.tsx","webpack://_N_E/./src/components/ExpTraceTable/index.tsx","webpack://_N_E/./src/views/experimental/NeuronElectrophysiology.tsx","webpack://_N_E/./src/pages/experimental-data/neuronal-electrophysiology.tsx","webpack://_N_E/./src/queries/es/index.ts","webpack://_N_E/./src/views/experimental/config.ts","webpack://_N_E/?6832","webpack://_N_E/./src/components/InfoBox/styles.module.scss","webpack://_N_E/./src/styles/experimental-data/neuron-electrophysiology.module.scss"],"names":["collapsed","title","children","color","className","React","isCollapsed","setCollapsed","id","onClick","classPrefix","anchor","direction","target","document","querySelector","scrollIntoView","query","data","loading","error","state","setState","nexus","useNexusContext","View","elasticSearchQuery","hippocampus","then","hits","text","styles","classPrefixList","list","value","onSelect","replace","role","aria-labelledby","map","element","aria-checked","tabIndex","window","setTimeout","block","inline","behavior","handleSelectedElement","NexusPluginLazy","dynamic","ssr","props","subtitle","hint","primaryColor","primary","dangerouslySetInnerHTML","__html","backgroundAlt","entryToArray","entry","Array","isArray","getAgentLabel","agent","name","givenName","familyName","getAgentType","traces","agentIds","reduce","ids","trace","currIds","contribution","filter","Boolean","from","Set","useState","agentMap","setAgentMap","useEffect","length","contributionEsQuery","size","terms","esDocuments","esDocument","_source","agents","label","type","keyBy","annotation","hasBody","sort","a1","a2","router","useRouter","setQuery","push","pathname","undefined","shallow","currentEtype","etype","currentInstance","etype_instance","etypes","Object","keys","instances","getAndSortTraces","m1","m2","Filters","Title","colorName","InfoBox","List","instance","DataContainer","Collapsible","ESData","electroPhysiologyDataQuery","NexusPlugin","resource","nexusClient","etypeTracesDataQuery","About","MainLayout","experiment","bool","must","term","nested","path","match","mtypeExpMorphologyListDataQuery","mtype","should","morphologyDataQuery","must_not","exists","accentColors","__NEXT_P","module","exports"],"mappings":"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","file":"static/chunks/pages/experimental-data/neuronal-electrophysiology-54e9b43fec8b05c7b932.js","sourcesContent":["import React, { ReactChild, ReactFragment } from 'react';\nimport { IoIosArrowUp } from 'react-icons/io';\n\n\nconst classPrefix = 'collapsible__';\n\ntype CollapsibleColor = 'red'\n\ntype CollapsibleProps = {\n  collapsed?: boolean;\n  title: string;\n  children: ReactChild | ReactFragment;\n  color?: CollapsibleColor;\n  className?: string;\n};\n\nconst Collapsible: React.FC<CollapsibleProps> = ({\n  collapsed,\n  title,\n  children,\n  color = '',\n  className = '',\n}) => {\n  const [isCollapsed, setCollapsed] = React.useState(collapsed);\n\n  return (\n    <div id=\"data\" className={`${classPrefix}${isCollapsed ? 'collapsed' : 'expanded'} ${color} ${className}`}>\n      <div\n        className=\"header\"\n        title={title}\n        onClick={() => setCollapsed(!isCollapsed)}\n      >\n        {title}\n        <span className=\"arrow\">\n          <IoIosArrowUp />\n        </span>\n      </div>\n      <div className=\"content\">{children}</div>\n    </div>\n  );\n};\n\nexport default Collapsible;\n","import React, { ReactChild, ReactFragment } from 'react';\nimport { IoIosArrowDown, IoIosArrowUp } from 'react-icons/io';\n\nimport { Direction, Color } from '../../types';\n\n\nconst classPrefix = 'scroll-to__';\n\ntype ScrollToProps = {\n  anchor: string;\n  direction: Direction;\n  children: ReactChild | ReactFragment;\n  color?: Color;\n};\n\nconst ScrollTo: React.FC<ScrollToProps> = ({\n  anchor,\n  direction,\n  children,\n  color = '',\n}) => {\n  const scroll = () => {\n    const target = document.querySelector(`#${anchor}`);\n    if (target) {\n      target.scrollIntoView();\n    }\n  };\n\n  return (\n    <div onClick={scroll} className={`${classPrefix}basis bg-${color}`}>\n      {children}\n      <span className={`${classPrefix}direction`}>\n        {direction === 'up' && <IoIosArrowUp />}\n        {direction === 'down' && <IoIosArrowDown />}\n      </span>\n    </div>\n  );\n};\n\nexport default ScrollTo;\n","import React from 'react';\n\nimport ScrollTo from '../../components/ScrollTo';\n\n\nconst classPrefix = 'data-container__';\n\ntype DataContainerProps = {\n  visible?: boolean;\n  children: React.ReactNode\n};\n\nconst DataContainer: React.FC<DataContainerProps> = ({\n  children,\n}) => {\n  return <div className={`${classPrefix}basis`}>\n    <div className=\"center\">{children}</div>\n    <div className=\"scroll-to\">\n      <ScrollTo anchor=\"filters\" direction=\"up\">\n        Return to selectors\n            </ScrollTo>\n    </div>\n  </div>\n};\n\nexport default DataContainer;\n","import React from 'react';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { ElasticSearchViewQueryResponse } from '@bbp/nexus-sdk';\n\nimport { hippocampus } from '../../config';\n\n\ntype ESDataProps = {\n  query: Record<string, unknown> | null;\n  children: (\n    data: ElasticSearchViewQueryResponse<any>['hits']['hits'] | null,\n    loading: boolean,\n    error: any,\n  ) => React.ReactNode;\n};\n\nconst ESData: React.FC<ESDataProps> = ({\n  query,\n  children,\n}) => {\n  const [state, setState] = React.useState<{\n    data: ElasticSearchViewQueryResponse<any>['hits']['hits'] | null;\n    loading: boolean;\n    error: any;\n  }>({\n    data: null,\n    loading: false,\n    error: null,\n  });\n  const nexus = useNexusContext();\n\n  React.useEffect(() => {\n    if (query) {\n      setState({ ...state, loading: true, data: null });\n      nexus.View.elasticSearchQuery(\n        hippocampus.org,\n        hippocampus.project,\n        hippocampus.datasetViewId,\n        query,\n      )\n        .then(data =>\n          setState({ ...state, loading: false, data: data.hits.hits }),\n        )\n        .catch(error => setState({ ...state, loading: false, error }));\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query]);\n\n  return (\n    <>\n      {children(state.data, state.loading, state.error)}\n    </>\n  );\n};\n\nexport default ESData;\n","import React from 'react';\n\nimport { Color } from '../../types';\nimport styles from './styles.module.scss';\n\n\ntype InfoBoxProps = {\n  title?: string;\n  text: string;\n  color?: Color;\n};\n\nconst InfoBox: React.FC<InfoBoxProps> = ({\n  title,\n  text,\n  color = '',\n}) => {\n  return (\n    <div className={`${styles.container} bg-${color}`}>\n      {title && <h3>{title}</h3>}\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default InfoBox;\n","import React from 'react';\n\nimport { Color } from '../../types';\n\n\nconst classPrefixList = 'list__';\nconst classPrefixListElement = 'list-element__';\n\ntype ListProps = {\n  title?: string;\n  list: string[];\n  value?: string;\n  onSelect?: (s: string) => void;\n  color?: Color;\n  anchor?: string;\n  block?: boolean;\n  className?: string;\n};\n\nconst List: React.FC<ListProps> = ({\n  title,\n  list,\n  value,\n  onSelect = () => { },\n  color,\n  anchor = '',\n  className = '',\n}) => {\n  const handleSelectedElement = (element: string) => {\n    const target = anchor && document.querySelector(`#${anchor}`);\n    if (target) {\n      window.setTimeout(() => target.scrollIntoView({ block: 'start', inline: 'nearest', behavior: 'smooth' }), 0);\n    }\n    onSelect(element);\n  }\n\n  const id = title ? title.replace(/\\s/g, '') : 'no_title';\n\n  return (\n    <div\n      className={`${classPrefixList}basis bg-${color} ${className}`}\n      role=\"radiogroup\"\n      aria-labelledby={`${classPrefixList}${id}`}\n    >\n      {title && <p>{title}</p>}\n      <div className=\"elements\">\n        {list.map(element => (\n          <div\n            key={element}\n            role=\"radio\"\n            aria-checked={value === element}\n            tabIndex={0}\n            className={`${classPrefixListElement}basis ${value === element ? 'selected' : ''}`}\n            onClick={() => handleSelectedElement(element)}\n            title={element}\n          >\n            {element}\n          </div>\n\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nimport { NexusPluginClassProps } from './nexus-plugin';\n\n\nconst NexusPluginLazy = dynamic(() => import('./nexus-plugin'), { ssr: false });\n\nconst ImageViewer: React.FC<NexusPluginClassProps<any>> = (props) => {\n  return (\n    <NexusPluginLazy {...props} />\n  );\n};\n\n\nexport default ImageViewer;\n","import React from 'react';\n\nimport { Color } from '../../types';\n\n\nconst classPrefix = 'title__';\n\ntype TitleProps = {\n  title?: React.ReactChild;\n  subtitle?: string;\n  primaryColor?: Color;\n  hint?: string;\n  primary?: boolean;\n};\n\nconst Title: React.FC<TitleProps> = ({\n  title,\n  subtitle,\n  hint,\n  primaryColor = 'yellow' as Color,\n  primary,\n}) => {\n  return (\n    <div\n      className={`${classPrefix}basis ${\n        primary ? 'primary' : ''\n      } ${primaryColor}`}\n    >\n      {subtitle && !primary && <h4 className=\"text-white\">{subtitle}</h4>}\n      {title && <h2 role=\"title\" className=\"text-white\">{title}</h2>}\n      {subtitle && primary && <h4 className=\"text-white\">{subtitle}</h4>}\n      {hint && <p dangerouslySetInnerHTML={{ __html: hint }} />}\n    </div>\n  );\n};\n\nexport default Title;\n","import React, { ReactChild, ReactFragment } from 'react';\n\nimport ScrollTo from '../../components/ScrollTo';\nimport { Color } from '../../types';\n// import './style.scss';\n\nconst classPrefix = 'filters__';\n\ntype FiltersProps = {\n  children: ReactChild | ReactFragment;\n  backgroundAlt?: boolean;\n  id?: string;\n};\n\nconst Filters: React.FC<FiltersProps> = ({\n  children,\n  backgroundAlt,\n  id = 'filters',\n}) => {\n  return (\n    <div>\n      <div\n        id={id}\n        className={`${classPrefix}basis ${backgroundAlt ? 'background-alt' : ''}`}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Filters;\n","import React, { useState, useEffect } from 'react';\nimport { keyBy } from 'lodash';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport { hippocampus } from '../../config';\nimport ImageViewer from '../ImageViewer';\n\nimport styles from './styles.module.scss'\n\n\ntype ExpTraceTableProps = {\n  traces: Record<string, any>[];\n};\n\nfunction entryToArray(entry) {\n  if (Array.isArray(entry)) return entry;\n\n  return [entry];\n}\n\nfunction getAgentLabel(agent) {\n  return agent.name\n    ? agent.name\n    : `${agent.givenName} ${agent.familyName}`;\n}\n\nfunction getAgentType(agent) {\n  return agent.name\n    ? 'institution'\n    : 'person';\n}\n\nconst ExpTraceTable: React.FC<ExpTraceTableProps> = ({ traces = [] }) => {\n  const nexus = useNexusContext();\n\n  const agentIds = traces.reduce((ids: string[], trace) => {\n    const currIds = entryToArray(trace.contribution)\n      .map(contribution => contribution.agent?.['@id'])\n      .filter(Boolean);\n\n    return Array.from(new Set([...ids, ...currIds]));\n  }, []);\n\n  const [agentMap, setAgentMap] = useState<Record<string, any>>(null);\n\n  useEffect(() => {\n    if (!agentIds.length) return;\n\n    const contributionEsQuery = {\n      from: 0,\n      size: 100,\n      query: {\n        terms: {\n          '_id': agentIds,\n        }\n      }\n    }\n\n    nexus.View\n      // query ElesticSearch endpoint to get agents by their ids\n      .elasticSearchQuery(hippocampus.org, hippocampus.project, hippocampus.datasetViewId, contributionEsQuery)\n      // extract ES documents\n      .then(data => data.hits.hits)\n      // extract Nexus original documents\n      .then(esDocuments => esDocuments.map(esDocument => esDocument._source))\n      // pick only agent ids and labels\n      .then(agents => agents.map(agent => ({\n        id: agent['@id'],\n        label: getAgentLabel(agent),\n        type: getAgentType(agent),\n      })))\n      // create a map of agents of type Record<id, label>\n      .then(agents => keyBy(agents, 'id'))\n      .then(agentMap => setAgentMap(agentMap));\n  }, [traces]);\n\n  return (\n    <div className=\"layer-anatomy-summary__basis mt-2\">\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            {/* <th>Image</th> */}\n            <th>E-Type</th>\n            <th>Contribution</th>\n          </tr>\n        </thead>\n        <tbody>\n          {traces.map(trace => (\n            <tr key={trace.name}>\n              <td className=\"text-capitalize\">{trace.name}</td>\n              <td>{trace.annotation.hasBody.label}</td>\n              <td>\n                {agentMap && entryToArray(trace.contribution)\n                  .map(contribution => agentMap[contribution.agent['@id']])\n                  .sort((a1, a2) => a1.type > a2.type ? 1 : -1)\n                  .map(agent => <span key={agent.label}>{agent.label} <br/></span>)\n                }\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\nexport default ExpTraceTable;\n","import React from 'react';\nimport { useRouter } from 'next/router';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport ESData from '../../components/ESData';\nimport DataContainer from '../../components/DataContainer';\nimport NexusPlugin from '../../components/NexusPlugin';\nimport { electroPhysiologyDataQuery, etypeTracesDataQuery } from '../../queries/es';\nimport Filters from '../../layouts/Filters';\nimport Title from '../../components/Title';\nimport InfoBox from '../../components/InfoBox';\nimport { colorName } from './config';\nimport List from '../../components/List';\nimport Collapsible from '../../components/Collapsible';\nimport ExpTraceTable from '../../components/ExpTraceTable';\nimport traces from '../../traces.json';\nimport styles from '../../styles/experimental-data/neuron-electrophysiology.module.scss';\n\n\nconst NeuronElectrophysiology: React.FC = () => {\n  const router = useRouter();\n  const nexus = useNexusContext();\n\n  const query = {\n    ...router.query\n  };\n\n  const setQuery = (query: any) => {\n    router.push({ query, pathname: router.pathname }, undefined, { shallow: true });\n  }\n\n  const setEtype = (etype: string) => {\n    setQuery({\n      etype,\n      etype_instance: currentInstance,\n    });\n  };\n  const setInstance = (instance: string) => {\n    setQuery({\n      etype: currentEtype,\n      etype_instance: instance,\n    });\n  };\n\n  const currentEtype: string = query.etype as string;\n  const currentInstance: string = query.etype_instance as string;\n\n  const etypes = Object.keys(traces).sort();\n  const instances = currentEtype\n    ? traces[currentEtype].sort()\n    : []\n\n  const getAndSortTraces = (esDocuments) => {\n    return esDocuments\n      .map(esDocument => esDocument._source)\n      .sort((m1, m2) => (m1.name > m2.name) ? 1 : -1);\n  };\n\n  return (\n    <>\n      <Filters\n        backgroundAlt\n      >\n        <div className=\"row bottom-xs w-100\">\n          <div className=\"col-xs-12 col-lg-6\">\n            <Title\n              primaryColor={colorName}\n              title={<span>Neuron <br /> Electrophysiology</span>}\n              subtitle=\"Experimental Data\"\n            />\n            <InfoBox\n              color=\"grey-1\"\n              text=\"We recorded electrical traces from neurons using single-cell recording experiments in brain slices. Then, we classified the traces in different electrical types (e-types) based on their firing patterns. We have identified one e-type for excitatory cells and four e-types for inhibitory cells.\"\n            />\n          </div>\n\n          <div className=\"col-xs-12 col-lg-4 col-lg-offset-1\">\n            <div className={styles.selector}>\n              <div className={styles.selectorHead}>Select cell type</div>\n              <div className={styles.selectorBody}>\n                <List\n                  list={etypes}\n                  value={currentEtype}\n                  title=\"e-type\"\n                  color={colorName}\n                  onSelect={setEtype}\n                />\n                <br />\n                <br />\n                <br />\n                <List\n                  list={instances}\n                  value={currentInstance}\n                  title={`Experiment instance (${instances.length})`}\n                  color={colorName}\n                  onSelect={setInstance}\n                  anchor=\"data\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <div id=\"data\" />\n\n      {!!currentEtype && !!currentInstance && <DataContainer>\n        <Collapsible title={`Electrophysiological Recordings for ${currentEtype}_${currentInstance}`}>\n          <ESData query={electroPhysiologyDataQuery(currentEtype, currentInstance)} >\n            {esDocuments => (\n              <>\n                {!!esDocuments && !!esDocuments.length && (\n                  <NexusPlugin\n                    name=\"neuron-electrophysiology\"\n                    resource={esDocuments[0]._source}\n                    nexusClient={nexus}\n                  />\n                )}\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n\n        <Collapsible title=\"Population\" className=\"mt-4\">\n          <h3 className=\"mt-3\">Experimental instances</h3>\n\n          <ESData query={etypeTracesDataQuery(currentEtype)}>\n            {esDocuments => (\n              <>\n                {!!esDocuments && (\n                  <ExpTraceTable traces={getAndSortTraces(esDocuments)} />\n                )}\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n      </DataContainer>\n      }\n    </>\n  );\n};\n\nexport default NeuronElectrophysiology;\n","import React from 'react';\n\nimport MainLayout from '../../layouts/MainLayout';\nimport NeuronEphysView from '../../views/experimental/NeuronElectrophysiology';\n\n\nexport default function About() {\n  return (\n    <MainLayout>\n      <NeuronEphysView />\n    </MainLayout>\n  );\n};\n","\ntype ESQuery = Record<string, unknown>;\n\n/**\n * Lists get specific experiment of specific e-type\n *\n */\nexport const layerAnatomyDataQuery = {\n  from: 0,\n  size: 1000,\n  query: {\n    bool: {\n      filter: [\n        {\n          bool: {\n            should: [\n              {\n                term: {\n                  '@type': 'LayerThickness',\n                },\n              },\n              {\n                term: {\n                  '@type': 'NeuronDensity',\n                },\n              },\n              {\n                term: {\n                  '@type': 'SliceCollection',\n                }\n              }\n            ],\n          },\n        },\n      ],\n    },\n  },\n};\n\nexport const electroPhysiologyDataQuery = (\n  etype: string,\n  experiment: string,\n): ESQuery | null => {\n  if (!etype || !experiment) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must: {\n                term: { 'name.raw': experiment }\n              }\n            }\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: { term: { 'annotation.hasBody.label.raw': etype } },\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/nwb' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const ephysByNameDataQuery = (\n  names: string[],\n): ESQuery | null => {\n  if (!names) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 10000,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must: {\n                terms: { 'name.raw': names }\n              }\n            }\n          },\n          {\n            bool: {\n              must: {\n                term: { 'note': 'subset' }\n              }\n            }\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/nwb' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const mtypeExpMorphologyListDataQuery = (\n  mtype: string\n): ESQuery | null => {\n  if (!mtype) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 200,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@type': 'ReconstructedCell',\n                  },\n                },\n              ],\n            },\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: [\n                    {\n                      term: {\n                        'annotation.hasBody.label.raw': mtype,\n                      },\n                    },\n                  ],\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const morphologyDataQuery = (\n  mtype: string,\n  instance: string\n): ESQuery | null => {\n  if(!mtype || !instance) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@type': 'NeuronMorphology',\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    'name.raw': instance,\n                  },\n                },\n              ],\n            },\n          },\n          // {\n          //   nested: {\n          //     path: 'annotation.hasBody',\n          //     query: {\n          //       bool: {\n          //         filter: [\n          //           {\n          //             term: {\n          //               'annotation.hasBody.label.raw': mtype,\n          //             },\n          //           },\n          //         ],\n          //       },\n          //     },\n          //   },\n          // },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const dataByIdQuery = (\n  id: string | string[]\n): ESQuery | null => {\n  if(!id) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@id': id,\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const etypeTracesDataQuery = (\n  etype: string,\n): ESQuery | null => {\n  if (!etype) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 10000,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must_not: {\n                exists: {\n                  \"field\": \"note\",\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: { term: { 'annotation.hasBody.label.raw': etype } },\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/rab' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n","import { accentColors } from '../../config';\nimport { Color } from '../../types';\n\nexport const sectionTitle = 'Experimental Data';\nexport const colorName: Color = 'grey-1';\nexport const primaryColor = accentColors[colorName];\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/neuronal-electrophysiology\",\n      function () {\n        return require(\"private-next-pages/experimental-data/neuronal-electrophysiology.tsx\");\n      }\n    ]);\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__9zB6A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"neuron-electrophysiology_selector__1wLqj\",\"selectorColumn\":\"neuron-electrophysiology_selectorColumn__37KZ_\",\"selectorHead\":\"neuron-electrophysiology_selectorHead__3N8Kc\",\"selectorBody\":\"neuron-electrophysiology_selectorBody__35I10\"};"],"sourceRoot":""}