{"version":3,"file":"static/chunks/pages/experimental-data/theta-47ae025dcf4d3016.js","mappings":"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","sources":["webpack://_N_E/?ffa1","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/ResponsiveTable/index.tsx","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/views/1_experimental-data/theta/Phase.tsx","webpack://_N_E/./src/views/1_experimental-data/theta/Rate.tsx","webpack://_N_E/./src/views/1_experimental-data/Theta.tsx","webpack://_N_E/./src/pages/experimental-data/theta.tsx","webpack://_N_E/./src/views/1_experimental-data/config.ts","webpack://_N_E/./src/components/ResponsiveTable/styles.module.scss","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/theta\",\n      function () {\n        return require(\"private-next-pages/experimental-data/theta.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/experimental-data/theta\"])\n      });\n    }\n  ","import React from 'react';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nexport function formatNumber(value, significantFigures = 5, thousandSeparator = true, prefix = '', suffix = '') {\n  const num = parseFloat(value);\n\n  if (!Number.isFinite(num)) return value;\n\n  const formatted = thousandSeparator\n    ? num.toLocaleString('en', { maximumSignificantDigits: significantFigures })\n    : num.toPrecision(significantFigures);\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  return formatNumber(value, significantFigures, thousandSeparator, prefix, suffix);\n}\n\n\nexport default NumberFormat;\n","import React, { useEffect, useState } from 'react';\nimport { Table } from 'antd';\nimport { ColumnType as AntColumnType, ColumnGroupType as AntColumnGroupType, TableProps } from 'antd/lib/table';\nimport { Breakpoint } from 'antd/lib/_util/responsiveObserve';\n\nimport classes from './styles.module.scss';\n\ninterface ColumnType<Type extends object & { isHighlight?: boolean }> extends Omit<AntColumnType<Type>, 'dataIndex'> {\n  dataIndex?: keyof Type;\n}\ninterface GroupColumnType<Type extends object & { isHighlight?: boolean }> extends AntColumnGroupType<Type> { }\n\ninterface ResponsiveTableProps<Type extends object & { isHighlight?: boolean }> extends Omit<TableProps<Type>, 'columns'> {\n  data?: Type[];\n  columns: (ColumnType<Type> | GroupColumnType<Type>)[] | any;\n}\n\nconst renderHighlightValue = (record) => (nestedValue, _value) =>\n  highlightValue(nestedValue, record.isHighlight);\n\nconst highlightValue = (nestedValue, isHighlight) =>\n  isHighlight ? <div className=\"text-bold\">{nestedValue}</div> : nestedValue;\n\n// Utility function to calculate the width of text\nfunction calculateTextWidth(text: string, font: string = '16px Arial'): number {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  if (context) {\n    context.font = font;\n    return context.measureText(text).width;\n  }\n  return 0;\n}\n\nfunction ResponsiveTable<Type extends object & { isHighlight?: boolean }>({\n  columns,\n  data = [], // Provide a default value of an empty array\n  ...restProps\n}: ResponsiveTableProps<Type>) {\n  const [columnWidths, setColumnWidths] = useState<number[]>([]);\n  const font = '14px Arial'; // Set the font to match your table\n\n  useEffect(() => {\n    const newColumnWidths = columns.map((column) => {\n      const maxTextWidth = data.reduce((max, record) => {\n        const dataIndex = (column as ColumnType<Type>).dataIndex;\n        if (dataIndex && record[dataIndex] !== undefined) {\n          const text = String(record[dataIndex]);\n          const textWidth = calculateTextWidth(text, font);\n          return Math.max(max, textWidth);\n        }\n        return max;\n      }, 0);\n      return Math.min(maxTextWidth + 20, 200); // Add some padding and a max limit\n    });\n\n    setColumnWidths(newColumnWidths);\n  }, [columns, data]);\n\n  const expandableColumn = {\n    title: null,\n    dataIndex: null,\n    render: (_value, record, index) => {\n      const nestedTableData = columns\n        .map((column) => {\n          const dataIndex = (column as ColumnType<Type>).dataIndex;\n          if (dataIndex) {\n            return {\n              key: column.title,\n              value: record[dataIndex],\n            };\n          }\n\n          const children = (column as GroupColumnType<Type>).children;\n          if (children) {\n            const childrenValue = children.map((child) => (\n              <div key={child.key}>\n                {child.title}: {record[(child as ColumnType<Type>).dataIndex]}\n              </div>\n            ));\n            return {\n              key: column.title,\n              value: childrenValue,\n            };\n          }\n\n          return null;\n        })\n        .filter((item) => item !== null); // Filter out null values\n\n      const nestedColumns: ColumnType<{ key: any; value: any }>[] = [\n        {\n          dataIndex: 'key',\n          title: 'Field',\n          render: renderHighlightValue(record),\n        },\n        {\n          dataIndex: 'value',\n          title: 'Value',\n          render: renderHighlightValue(record),\n        },\n      ];\n\n      return (\n        <Table\n          className=\"responsiveTable no-left-margin nested-table xs-column\"\n          rowClassName={index % 2 ? classes.responsiveTablEven : classes.responsiveTablOdd}\n          rowKey={(record: any, index) => `${record.key}__${index}`}\n          showHeader={false}\n          columns={nestedColumns}\n          tableLayout=\"auto\" // Use auto layout for nested table as well\n          dataSource={nestedTableData as object[]} // Ensure dataSource does not contain null values\n          pagination={false}\n        />\n      );\n    },\n    responsive: ['xs' as Breakpoint],\n  };\n\n  const tableColumns = columns\n    .map((column, index) => ({\n      ...column,\n      title: column.title,\n      dataIndex: (column as ColumnType<Type>).dataIndex,\n      responsive: ['sm' as Breakpoint],\n      render: (value: any, record: Type, index: number) =>\n        highlightValue(column.render ? column.render(value, record, index) : value, record.isHighlight),\n      children: (column as GroupColumnType<Type>).children?.map((child) => ({\n        render: (value: any, record: Type) => highlightValue(value, record.isHighlight),\n        ...child,\n      })),\n      width: column.key === 'yourSpecificKey' ? columnWidths[index] : undefined, // Set width dynamically for a specific column\n    }))\n    .concat(expandableColumn as any);\n\n  const { className = '' } = restProps;\n\n  return (\n    <Table<Type>\n      bordered\n      size=\"small\"\n      scroll={{ x: true }}\n      rowKey={(record: any) => record.key || `${record.dataIndex}__`}\n      pagination={false}\n      columns={tableColumns}\n      dataSource={data}\n      rowClassName={(record: Type, index: number) => (index % 2 ? classes.responsiveTablEven : classes.responsiveTablOdd)}\n      {...restProps}\n      className={`responsiveTable no-left-margin nested-table xs-column text-nowrap ${className}`}\n      tableLayout=\"auto\" // Ensure layout is auto for dynamic column sizing\n    />\n  );\n}\n\nexport default ResponsiveTable;","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import React, { useEffect, useState } from 'react';\nimport { FixedType } from 'rc-table/lib/interface';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport NumberFormat from '@/components/NumberFormat';\nimport { downloadAsJson } from '@/utils';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\n\ntype TableEntry = {\n    morphologicalType: string;\n    meanAngle: number;\n    angularDeviation: number | null;\n    meanFiringRate: number | null;\n    minFiringRate: number | null;\n    maxFiringRate: number | null;\n    n: number;\n    specie: string;\n    reference: string;\n    referenceLink: string | null;\n};\n\nconst preprocessData = (data: any[]): TableEntry[] => {\n    return data.map((item) => ({\n        morphologicalType: item['Morphological type'],\n        meanAngle: item['Mean angle (deg)'],\n        angularDeviation: item['Angular deviation (deg)'],\n        meanFiringRate: item['Mean firing rate (Hz)'],\n        minFiringRate: item['Min firing rate (Hz)'],\n        maxFiringRate: item['Max firing rate (Hz)'],\n        n: item['n'],\n        specie: item['Specie'],\n        reference: item['Reference'],\n        referenceLink: item['Reference_link'] || null,\n    }));\n};\n\nconst PhaseColumns = [\n    {\n        title: 'Morphological Type',\n        dataIndex: 'morphologicalType',\n        key: 'morphologicalType',\n        fixed: 'left' as FixedType,\n    },\n    {\n        title: 'Mean Angle (deg)',\n        dataIndex: 'meanAngle',\n        key: 'meanAngle',\n        render: (value: number) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'Angular Deviation (deg)',\n        dataIndex: 'angularDeviation',\n        key: 'angularDeviation',\n        render: (value: number | null) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'Mean Firing Rate (Hz)',\n        dataIndex: 'meanFiringRate',\n        key: 'meanFiringRate',\n        render: (value: number | null) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'Min Firing Rate (Hz)',\n        dataIndex: 'minFiringRate',\n        key: 'minFiringRate',\n        render: (value: number | null) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'Max Firing Rate (Hz)',\n        dataIndex: 'maxFiringRate',\n        key: 'maxFiringRate',\n        render: (value: number | null) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'n',\n        dataIndex: 'n',\n        key: 'n',\n        render: (value: number) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'Specie',\n        dataIndex: 'specie',\n        key: 'specie',\n    },\n    {\n        title: 'Reference',\n        dataIndex: 'reference',\n        key: 'reference',\n        render: (reference: string, record: TableEntry) =>\n            record.referenceLink ? (\n                <a href={record.referenceLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {reference}\n                </a>\n            ) : (\n                <>{reference}</>\n            ),\n    },\n];\n\ntype PhaseProps = {\n    theme?: number;\n};\n\nconst Phase: React.FC<PhaseProps> = ({ theme }) => {\n    const [phaseData, setPhaseData] = useState<TableEntry[]>([]);\n\n    useEffect(() => {\n        fetch(`${dataPath}/1_experimental-data/theta/phase.json`)\n            .then(response => response.json())\n            .then(data => setPhaseData(preprocessData(data)));\n    }, []);\n\n    return (\n        <>\n            <ResponsiveTable<TableEntry>\n                className=\"mt-3\"\n                data={phaseData}\n                columns={PhaseColumns}\n                rowKey={({ morphologicalType, specie, reference }) => `${morphologicalType}_${specie}_${reference}`}\n            />\n            <div className=\"mt-4\">\n                <DownloadButton\n                    theme={theme}\n                    onClick={() => downloadAsJson(phaseData, `theta-phase-data.json`)}\n                >\n                    Phase Data\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default Phase;","import React, { useEffect, useState } from 'react';\nimport { FixedType } from 'rc-table/lib/interface';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport { downloadAsJson } from '@/utils';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\nimport NumberFormat from '@/components/NumberFormat';\n\ntype TableEntry = {\n    neuronType: string;\n    meanRateHz: number;\n    seRateHz: number;\n    n: number;\n    sdRateHz: number;\n    recordingCondition: string;\n    source: string;\n    sourceLink: string | null;\n};\n\nconst preprocessData = (data: any[]): TableEntry[] => {\n    if (!Array.isArray(data)) {\n        console.error(\"Data is not an array\", data);\n        return [];\n    }\n\n    return data.map((item) => ({\n        neuronType: item['neuron_type'],\n        meanRateHz: item['mean_rate_Hz'],\n        seRateHz: item['SE_rate_Hz'],\n        n: item['n'],\n        sdRateHz: item['SD_rate_Hz'],\n        recordingCondition: item['recording_condition'],\n        source: item['source'],\n        sourceLink: item['source_link'] || null, // Handle source_link\n    }));\n};\n\nconst RateColumns = [\n    {\n        title: 'Neuron Type',\n        dataIndex: 'neuronType',\n        key: 'neuronType',\n        fixed: 'left' as FixedType,\n    },\n    {\n        title: 'Mean Rate (Hz)',\n        dataIndex: 'meanRateHz',\n        key: 'meanRateHz',\n        render: (value: number) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'SE Rate (Hz)',\n        dataIndex: 'seRateHz',\n        key: 'seRateHz',\n        render: (value: number) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'n',\n        dataIndex: 'n',\n        key: 'n',\n        render: (value: number) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'SD Rate (Hz)',\n        dataIndex: 'sdRateHz',\n        key: 'sdRateHz',\n        render: (value: number) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'Recording Condition',\n        dataIndex: 'recordingCondition',\n        key: 'recordingCondition',\n    },\n    {\n        title: 'Source',\n        dataIndex: 'source',\n        key: 'source',\n        render: (source: string, record: TableEntry) =>\n            record.sourceLink ? (\n                <a href={record.sourceLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {source}\n                </a>\n            ) : (\n                <>{source}</>\n            ),\n    }\n];\n\ntype RateProps = {\n    theme?: number;\n};\n\nconst Rate: React.FC<RateProps> = ({ theme }) => {\n    const [rateData, setRateData] = useState<TableEntry[]>([]);\n\n    useEffect(() => {\n        fetch(`${dataPath}/1_experimental-data/theta/rate.json`)\n            .then(response => response.json())\n            .then(data => setRateData(preprocessData(data)));\n    }, []);\n\n    return (\n        <>\n            <ResponsiveTable<TableEntry>\n                className=\"mt-3\"\n                data={rateData}\n                columns={RateColumns}\n                rowKey={({ neuronType, recordingCondition, source }) => `${neuronType}_${recordingCondition}_${source}`}\n            />\n            <div className=\"mt-4\">\n                <DownloadButton\n                    theme={theme}\n                    onClick={() => downloadAsJson(\n                        rateData,\n                        `theta-rate-data.json`\n                    )}\n                >\n                    Rate Data\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default Rate;","import React from 'react';\nimport Image from 'next/image';\n\n// Component Imports\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\n\nimport PhaseTable from './theta/Phase';\nimport RateTable from './theta/Rate';\n\n// Config Import\nimport { colorName } from './config';\n\nconst ThetaView: React.FC = () => {\n  const theme = 1;\n\n  return (\n    <>\n      {/* Filters Section */}\n      <Filters theme={theme} hasData={true}>\n        <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n          <div className=\"w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n            <StickyContainer>\n              <Title\n                primaryColor={colorName}\n                title=\"Theta\"\n                subtitle=\"Experimental Data\"\n                theme={theme}\n              />\n              <div role=\"information\">\n                <InfoBox>\n                  <p>\n                    Extracellular electrical recordings of region CA1 display different types of\n                    oscillatory activity related to behavioral states. One of the most prominent\n                    and well-studied is the theta rhythm, a 4-12 Hz regular oscillation that occurs\n                    during locomotion and rapid eye movement (REM) sleep. Theta rhythms are believed\n                    to coordinate the encoding and retrieval of episodic memory during spatial\n                    navigation. Here, we report on phases and rates of spiking during network theta\n                    rhythmic activity.\n                  </p>\n                </InfoBox>\n              </div>\n            </StickyContainer>\n          </div>\n        </div>\n      </Filters>\n\n      {/* Data Container Section */}\n      <DataContainer\n        theme={theme}\n        navItems={[\n          { id: 'phaseSection', label: 'Phase' },\n          { id: 'rateSection', label: 'Rate' },\n        ]}\n      >\n        <Collapsible\n          id=\"phaseSection\"\n          className=\"mt-3\"\n          title=\"Phase\"\n        >\n          <p>\n            Different morphological types of CA1 neuron respond preferentially at\n            specific phases of theta rhythmic activity.\n          </p>\n          <PhaseTable theme={theme} />\n        </Collapsible>\n\n        <Collapsible\n          id=\"rateSection\"\n          className=\"mt-3\"\n          title=\"Rate\"\n        >\n          <p>\n            During periods of theta rhythmic activity, each morphological type of\n            CA1 neuron tends to respond with a different average spiking rate.\n          </p>\n          <RateTable theme={theme} />\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default ThetaView;","import Head from 'next/head';\n\nimport ThetaView from '@/views/1_experimental-data/Theta';\n\n\nexport default function ThetaPage() {\n  return (\n    <>\n      <Head>\n        <title>Theta / Experimental data / Hippocampus Hub Explore</title>\n        {/* TODO: add description */}\n        <meta\n          name=\"description\"\n          content=\"\"\n        />\n      </Head>\n\n      <ThetaView />\n    </>\n  );\n}\n","import { accentColors } from '../../config';\nimport { Color } from '../../types';\n\nexport const sectionTitle = 'Experimental Data';\nexport const colorName: Color = 'blue-2';\nexport const primaryColor = accentColors[colorName];\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"responsiveTable\":\"styles_responsiveTable__njQH4\",\"ant-table-cell\":\"styles_ant-table-cell__Fj0OS\",\"ant-table-cell-auto\":\"styles_ant-table-cell-auto__Yw8kj\",\"responsiveTablOdd\":\"styles_responsiveTablOdd__ix6_m\",\"responsiveTablEven\":\"styles_responsiveTablEven__sIcPO\",\"highlightBackground\":\"styles_highlightBackground__eWdTL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};"],"names":["window","__NEXT_P","push","__webpack_require__","__webpack_exports__","Z","value","significantFigures","thousandSeparator","prefix","suffix","param","formatNumber","num","parseFloat","Number","isFinite","formatted","toLocaleString","maximumSignificantDigits","toPrecision","concat","renderHighlightValue","nestedValue","_value","highlightValue","record","isHighlight","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","columns","data","restProps","columnWidths","setColumnWidths","useState","useEffect","newColumnWidths","map","maxTextWidth","reduce","max","dataIndex","column","undefined","text","String","textWidth","calculateTextWidth","font","canvas","document","createElement","context","getContext","measureText","width","Math","min","tableColumns","index","_column_children","title","responsive","render","children","child","key","nestedTableData","childrenValue","jsxs","filter","item","nestedColumns","Table","rowClassName","classes","rowKey","showHeader","tableLayout","dataSource","pagination","bordered","size","scroll","x","centered","styles","classNames","preprocessData","morphologicalType","meanAngle","angularDeviation","meanFiringRate","minFiringRate","maxFiringRate","n","specie","reference","referenceLink","PhaseColumns","fixed","jsx_runtime","NumberFormat","a","href","target","rel","Fragment","theta_Phase","theme","phaseData","setPhaseData","fetch","dataPath","then","response","json","ResponsiveTable","DownloadButton","onClick","downloadAsJson","isArray","neuronType","meanRateHz","seRateHz","sdRateHz","recordingCondition","source","sourceLink","console","error","RateColumns","theta_Rate","rateData","setRateData","Theta","Filters","hasData","StickyContainer","Title","primaryColor","colorName","subtitle","role","InfoBox","p","DataContainer","navItems","id","label","Collapsible","PhaseTable","RateTable","ThetaPage","Head","meta","name","content","ThetaView","accentColors","module","exports"],"sourceRoot":""}