{"version":3,"sources":["webpack://_N_E/./node_modules/file-saver/dist/FileSaver.min.js","webpack://_N_E/./src/components/LayerSelector/index.tsx","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/Unit/index.tsx","webpack://_N_E/./src/components/ExpMorphologyFactsheet/index.tsx","webpack://_N_E/./src/components/ImageViewer/index.tsx","webpack://_N_E/./src/components/ExpMorphologyTable/index.tsx","webpack://_N_E/./src/utils/index.ts","webpack://_N_E/./src/components/NexusFileDownloadButton/index.tsx","webpack://_N_E/./src/views/experimental/NeuronMorphology.tsx","webpack://_N_E/./src/pages/experimental-data/neuronal-morphology.tsx","webpack://_N_E/?a571","webpack://_N_E/./src/components/ExpMorphologyTable/styles.module.scss","webpack://_N_E/./src/components/LayerSelector/styles.module.scss","webpack://_N_E/./src/styles/experimental-data/neuron-morphology.module.scss"],"names":["b","a","autoBom","console","warn","test","type","Blob","c","d","XMLHttpRequest","open","responseType","onload","g","response","onerror","error","send","status","e","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","f","self","global","navigator","userAgent","saveAs","HTMLAnchorElement","prototype","h","i","URL","webkitURL","j","createElement","name","download","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","body","innerText","HTMLElement","safari","FileReader","k","onloadend","result","replace","readAsDataURL","l","m","module","exports","LAYERS","activeLayer","onLayerSelected","map","layer","className","styles","onClick","value","significantFigures","thousandSeparator","prefix","suffix","isNumber","fixed","parseFloat","toPrecision","formatted","toLocaleString","replacement","MOhm","MorphologyFactsheetSingleValueEntry","fact","isNil","NumberFormat","Unit","unit","MorphologyFactsheetEntry","neuriteTypes","strPrettify","str","morphologyName","stats","expMorphologyStats","getFactsheetEntries","neuriteType","Object","entries","statKey","statValue","includes","mean_soma_radius","filter","max_section_length","neuriteHasStats","ImageViewerLazy","dynamic","ssr","props","entryToArray","entry","Array","isArray","getAgentLabel","agent","givenName","familyName","getAgentType","morphologies","nexus","useNexusContext","agentIds","reduce","ids","morphology","currIds","contribution","Boolean","from","Set","useState","agentMap","setAgentMap","useEffect","length","contributionEsQuery","size","query","terms","View","elasticSearchQuery","hippocampus","then","data","hits","esDocuments","esDocument","_source","agents","id","label","keyBy","morph","style","textAlign","src","basePath","alt","loading","annotation","hasBody","sort","a1","a2","nexusEntities","nexusUrlR","RegExp","join","filename","url","org","project","children","setLoading","nexusUrl","Error","mulEntityTypeR","mulEntityTypeMatch","match","matches","deployment","entityType","slice","schema","parseUrl","fileOrg","fileProject","fileId","split","reverse","File","get","as","imageData","router","useRouter","setQuery","push","pathname","undefined","shallow","currentLayer","mtypes","region","mtype","currentMtype","instances","currentInstance","instance","getMorphologyDistribution","morphologyResource","distribution","find","getAndSortMorphologies","m1","m2","Filters","backgroundAlt","Title","primaryColor","colorName","subtitle","InfoBox","color","text","LayerSelector","List","list","onSelect","anchor","DataContainer","Collapsible","ESData","mtypeExpMorphologyListDataQuery","ExpMorphologyFactsheet","morphologyDataQuery","contentUrl","NexusPlugin","resource","nexusClient","About","MainLayout","NeuronMorphology","__NEXT_P"],"mappings":"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","file":"static/chunks/pages/experimental-data/neuronal-morphology-25c3e2dd35a94eae41c2.js","sourcesContent":["(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open(\"GET\",a),d.responseType=\"blob\",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error(\"could not download file\")},d.send()}function d(a){var b=new XMLHttpRequest;b.open(\"HEAD\",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open(\"\",\"_blank\"),g&&(g.document.title=g.document.body.innerText=\"downloading...\"),\"string\"==typeof b)return c(b,d,e);var h=\"application/octet-stream\"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&\"undefined\"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,\"undefined\"!=typeof module&&(module.exports=g)});\n\n//# sourceMappingURL=FileSaver.min.js.map","import React, { ReactChild, ReactFragment } from 'react';\nimport { Layer } from '../../types';\n\nimport styles from './styles.module.scss'\n\n\ntype LayerSelectProps = {\n  activeLayer?: Layer;\n  onLayerSelected?: (layer: Layer) => void;\n};\n\nconst LAYERS: Layer[] = ['SLM', 'SR', 'SP', 'SO'];\n\nconst LayerSelector: React.FC<LayerSelectProps> = ({\n  activeLayer,\n  onLayerSelected = () => {},\n}) => {\n  const selectLayer = (l: Layer): void => onLayerSelected(l);\n\n  return (\n    <div>\n      {LAYERS.map(layer => (\n        <div\n          key={layer}\n          className={`${styles.layer} ${layer === activeLayer ? styles.active : ''}`}\n          onClick={() => selectLayer(layer)}\n        >\n          {layer}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default LayerSelector;\n","import React from 'react';\n\nimport isNumber from 'lodash/isNumber';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  decimals?: number;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  if (!isNumber(value)) return value;\n\n  const fixed = parseFloat(value.toPrecision(significantFigures));\n\n  const formatted = thousandSeparator\n    ? fixed.toLocaleString('en')\n    : fixed;\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\n\nexport default NumberFormat;\n","import React from 'react';\n\ntype UnitProps = {\n  value?: string;\n}\n\nconst replacement = {\n  MOhm: 'MΩ',\n};\n\nconst Unit: React.FC<UnitProps> = ({ value = '' }) => {\n  return (\n    <>\n      {replacement[value] ?? value}\n    </>\n  );\n};\n\n\nexport default Unit;\n","import React from 'react';\nimport NumberFormat from '../NumberFormat';\nimport isNil from 'lodash/isNil';\n\nimport Unit from '../Unit';\nimport expMorphologyStats from '../../exp-morphology-stats.json';\n\n\nconst classPrefix = 'factsheet__';\n\n\ntype MorphologyFactsheetEntryType = {\n  name: string;\n  description?: string;\n  unit?: string;\n  value?: number | string;\n  value_map?: {\n    [key: string]: string | number;\n  };\n};\n\n\ntype MorphologyFactsheetProps = {\n  morphologyName: string;\n  className?: string;\n};\n\n\nconst MorphologyFactsheetSingleValueEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType;\n}> = ({\n  fact\n}) => {\n  return (\n    <div className=\"row mt-1\">\n      <div className=\"col-xs-8 col-sm-4 name\">{fact.name}</div>\n      <div className=\"col-xs-4 col-sm-8 value\">\n        {isNil(fact.value)\n          ? (<span>-</span>)\n          : (<span>\n              <NumberFormat value={fact.value} /> <Unit value={fact.unit} />\n            </span>)\n        }\n      </div>\n    </div>\n  );\n};\n\nconst MorphologyFactsheetEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType\n}> = ({\n  fact\n}) => {\n  return (<MorphologyFactsheetSingleValueEntry fact={fact} />);\n};\n\nconst neuriteTypes = ['all', 'axon', 'apical_dendrite', 'basal_dendrite'];\n\nconst strPrettify = (str) => str ? str.replace(/\\_/g, ' ') : str;\n\nconst MorphologyFactsheet: React.FC<MorphologyFactsheetProps> = ({\n  morphologyName,\n  className = '',\n}) => {\n  const stats = expMorphologyStats[morphologyName];\n\n  if (!stats) {\n    return (\n      <p className=\"red\">No morphology stats found</p>\n    );\n  }\n\n  const neuriteHasStats = (neuriteType) => !!stats[neuriteType].max_section_length;\n\n  const getFactsheetEntries = (neuriteType) => {\n    return Object.entries(stats[neuriteType]).map(([statKey, statValue]) => ({\n      name: strPrettify(statKey),\n      unit: (statKey as string).includes('volume') ? 'µm³' : ((statKey as string).includes('length') ? 'µm' : ''),\n      value: statValue\n    }));\n  };\n\n  return (\n    <div className={`${classPrefix}basis ${className}`}>\n      <h3>Morphology factsheet</h3>\n\n      <div className=\"mb-3 mt-3\">\n        <MorphologyFactsheetEntry fact={{\n          name: 'soma diameter',\n          unit: 'µm',\n          value: stats.mean_soma_radius * 2,\n        }} />\n      </div>\n\n      {neuriteTypes.filter(neuriteType => neuriteHasStats(neuriteType)).map(neuriteType => (\n        <div className=\"mb-2\" key={neuriteType}>\n          <strong className=\"text-capitalize\">{strPrettify(neuriteType)}</strong>\n          {getFactsheetEntries(neuriteType).map(fact => (\n            <MorphologyFactsheetEntry key={fact.name} fact={fact as MorphologyFactsheetEntryType} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MorphologyFactsheet;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nimport { ImageViewerProps } from './image-viewer';\n\n\nconst ImageViewerLazy = dynamic(() => import('./image-viewer'), { ssr: false });\n\nconst ImageViewer: React.FC<ImageViewerProps> = (props) => {\n  return (\n    <ImageViewerLazy {...props} />\n  );\n};\n\n\nexport default ImageViewer;\n","import React, { useState, useEffect } from 'react';\nimport { keyBy } from 'lodash';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport { hippocampus, basePath } from '../../config';\nimport ImageViewer from '../ImageViewer';\n\nimport styles from './styles.module.scss'\n\n\ntype ExpMorphologyTableProps = {\n  morphologies: Record<string, any>[];\n};\n\nfunction entryToArray(entry) {\n  if (Array.isArray(entry)) return entry;\n\n  return [entry];\n}\n\nfunction getAgentLabel(agent) {\n  return agent.name\n    ? agent.name\n    : `${agent.givenName} ${agent.familyName}`;\n}\n\nfunction getAgentType(agent) {\n  return agent.name\n    ? 'institution'\n    : 'person';\n}\n\nconst ExpMorphologyTable: React.FC<ExpMorphologyTableProps> = ({ morphologies = [] }) => {\n  const nexus = useNexusContext();\n\n  const agentIds = morphologies.reduce((ids: string[], morphology) => {\n    const currIds = entryToArray(morphology.contribution)\n      .map(contribution => contribution.agent?.['@id'])\n      .filter(Boolean);\n\n    return Array.from(new Set([...ids, ...currIds]));\n  }, []);\n\n  const [agentMap, setAgentMap] = useState<Record<string, any>>(null);\n\n  useEffect(() => {\n    if (!agentIds.length) return;\n\n    const contributionEsQuery = {\n      from: 0,\n      size: 100,\n      query: {\n        terms: {\n          '_id': agentIds,\n        }\n      }\n    }\n\n    nexus.View\n      // query ElesticSearch endpoint to get agents by their ids\n      .elasticSearchQuery(hippocampus.org, hippocampus.project, hippocampus.datasetViewId, contributionEsQuery)\n      // extract ES documents\n      .then(data => data.hits.hits)\n      // extract Nexus original documents\n      .then(esDocuments => esDocuments.map(esDocument => esDocument._source))\n      // pick only agent ids and labels\n      .then(agents => agents.map(agent => ({\n        id: agent['@id'],\n        label: getAgentLabel(agent),\n        type: getAgentType(agent),\n      })))\n      // create a map of agents of type Record<id, label>\n      .then(agents => keyBy(agents, 'id'))\n      .then(agentMap => setAgentMap(agentMap));\n  }, [morphologies]);\n\n  return (\n    <div className=\"layer-anatomy-summary__basis mt-2\">\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Image</th>\n            <th>M-Type</th>\n            <th>Contribution</th>\n          </tr>\n        </thead>\n        <tbody>\n          {morphologies.map(morph => (\n            <tr key={morph.name}>\n              <td className=\"text-capitalize\">{morph.name}</td>\n              <td style={{ textAlign: 'center'}}>\n                <div className={styles.morphImageContainer}>\n                  <ImageViewer\n                    src={`${basePath}/assets/images/exp-morph-images/${morph.name}.jpeg`}\n                    alt={`Morphology ${morph.name} image`}\n                    loading=\"lazy\"\n                  />\n                </div>\n              </td>\n              <td>{morph.annotation.hasBody.label}</td>\n              <td>\n                {agentMap && entryToArray(morph.contribution)\n                  .map(contribution => agentMap[contribution.agent['@id']])\n                  .sort((a1, a2) => a1.type > a2.type ? 1 : -1)\n                  .map(agent => <span key={agent.label}>{agent.label} <br/></span>)\n                }\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\nexport default ExpMorphologyTable;\n","interface ParsedNexusUrl {\n  deployment: string;\n  entityType: string;\n  org: string;\n  project: string;\n  schema: string;\n  id: string;\n}\n\nconst nexusEntities = [\n  'orgs',\n  'projects',\n  'acls',\n  'views',\n  'resources',\n  'files',\n];\n\nconst nexusUrlR = new RegExp(\n  [\n    '^',\n    '(https?://.+)', // nexus deployment\n    '/',\n    `(${nexusEntities.join('|')})`, // entity type\n    '/',\n    '([^/]+)', // org\n    '/',\n    '([^/]+)', // proj\n    '/?',\n    '([^/]+)?', // schema [optional]\n    '/?',\n    '([^/]+)?', // id [optional]\n    '/?',\n    '$',\n  ].join(''),\n);\n\n/**\n * @author pgetta\n * With given Nexus URL (might be self/project/id url), return it's:\n * * deployment URL\n * * entity type\n * * org label\n * * project label\n * * id\n *\n * @param nexusUrl\n */\nexport const parseUrl = (nexusUrl: string): ParsedNexusUrl => {\n  if (!nexusUrl) throw new Error('selfUrl should be defined');\n\n  const mulEntityTypeR = new RegExp(`(${nexusEntities.join('|')})`, 'g');\n  const mulEntityTypeMatch = nexusUrl.match(mulEntityTypeR);\n  if (mulEntityTypeMatch && mulEntityTypeMatch.length > 1) {\n    throw new Error(\n      'Url contains multiple entity types which is not supported',\n    );\n  }\n\n  const matches = nexusUrl.match(nexusUrlR);\n  if (!matches || matches.length <= 5) {\n    throw new Error('Error while parsing selfUrl');\n  }\n\n  return {\n    deployment: matches[1],\n    entityType: matches[2].slice(0, -1),\n    org: matches[3],\n    project: matches[4],\n    schema: matches[5],\n    id: matches[6],\n  };\n};\n","import React, { useState } from 'react';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { saveAs } from 'file-saver';\nimport { Button } from 'antd';\n\nimport { parseUrl } from '../../utils';\n\n\n\nexport type NexusFileDownloadButtonProps = {\n  filename: string;\n  url: string;\n  org?: string;\n  project?: string;\n  children: React.ReactNode;\n  className?: string;\n};\n\nconst NexusFileDownloadButton: React.FC<NexusFileDownloadButtonProps> = ({\n  filename,\n  url,\n  org,\n  project,\n  children,\n  className = '',\n}) => {\n  const nexus = useNexusContext();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const download = () => {\n    setLoading(true);\n    const { org: fileOrg, project: fileProject } = {...parseUrl(url), ...{ org, project }};\n    const fileId = url.split('/').reverse()[0];\n\n    nexus.File.get(fileOrg as string, fileProject as string, fileId, { as: 'blob' })\n      .then(imageData => saveAs(imageData as Blob, filename))\n      .catch(console.error)\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <Button\n      className={className}\n      type=\"primary\"\n      size=\"small\"\n      onClick={download}\n      loading={loading}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default NexusFileDownloadButton;\n","import React from 'react';\nimport { useRouter } from 'next/router';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport ESData from '../../components/ESData';\nimport DataContainer from '../../components/DataContainer';\nimport LayerSelector from '../../components/LayerSelector';\nimport { morphologyDataQuery, mtypeExpMorphologyListDataQuery } from '../../queries/es';\nimport Filters from '../../layouts/Filters';\nimport Title from '../../components/Title';\nimport InfoBox from '../../components/InfoBox';\nimport NexusPlugin from '../../components/NexusPlugin';\nimport { colorName } from './config';\nimport { Layer } from '../../types';\nimport Collapsible from '../../components/Collapsible';\nimport List from '../../components/List';\nimport morphologies from '../../exp-morphology-list.json';\nimport ExpMorphologyFactsheet from '../../components/ExpMorphologyFactsheet';\nimport ExpMorphologyTable from '../../components/ExpMorphologyTable';\nimport NexusFileDownloadButton from '../../components/NexusFileDownloadButton';\nimport { hippocampus } from '../../config';\n\nimport styles from '../../styles/experimental-data/neuron-morphology.module.scss';\n\n\nconst NeuronExperimentalMorphology: React.FC = () => {\n  const router = useRouter();\n  const nexus = useNexusContext();\n\n  const query = {\n    ...router.query\n  };\n\n  const setQuery = (query: any): void => {\n    router.push({ query, pathname: router.pathname }, undefined, { shallow: true });\n  };\n\n  const setLayer = (layer: Layer) => {\n    setQuery({\n      layer,\n      mtype: null,\n      instance: null,\n    });\n  };\n  const currentLayer: Layer = query.layer as Layer;\n\n  const mtypes = currentLayer\n    ? Array.from(new Set(morphologies.filter(m => m.region === currentLayer).map(m => m.mtype))).sort()\n    : [];\n\n  const setMtype = (mtype: string) => {\n    setQuery({\n      mtype,\n      layer: currentLayer,\n      instance: null,\n    });\n  };\n  const currentMtype: string = query.mtype as string;\n\n  const instances = currentMtype\n    ? morphologies.filter(m => m.mtype === currentMtype).map(m => m.name).sort()\n    : []\n\n  const setInstance = (instance: string) => {\n    setQuery({\n      instance,\n      layer: currentLayer,\n      mtype: currentMtype,\n    });\n  };\n  const currentInstance: string = query.instance as string;\n\n  const getMorphologyDistribution = (morphologyResource: any) => {\n    return morphologyResource.distribution.find((d: any) => d.name.match(/\\.asc$/i));\n  };\n\n  const getAndSortMorphologies = (esDocuments) => {\n    return esDocuments\n      .map(esDocument => esDocument._source)\n      .sort((m1, m2) => (m1.name > m2.name) ? 1 : -1);\n  };\n\n  return (\n    <>\n      <Filters backgroundAlt>\n        <div className=\"row bottom-xs w-100\">\n          <div className=\"col-xs-12 col-lg-6\">\n            <Title\n              primaryColor={colorName}\n              title={<span>Neuronal <br /> Morphology</span>}\n              subtitle=\"Experimental Data\"\n            />\n            <InfoBox\n              color=\"grey-1\"\n              text=\"We classified neuronal morphologies in different morphological types (m-types) and created digital 3D reconstructions. Using objective classification methods, we have identified 12 m-types in rat hippocampus CA1.\"\n            />\n          </div>\n          <div className=\"col-xs-12 col-lg-6\">\n            <div className={styles.selector}>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>1. Choose a layer</div>\n                <div className={styles.selectorBody}>\n                  <LayerSelector\n                    activeLayer={currentLayer}\n                    onLayerSelected={setLayer}\n                  />\n                </div>\n              </div>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>2. Select reconstruction</div>\n                <div className={styles.selectorBody}>\n                  <List\n                    list={mtypes}\n                    value={currentMtype}\n                    title=\"m-type\"\n                    color={colorName}\n                    onSelect={setMtype}\n                  />\n                  <br />\n                  <br />\n                  <br />\n                  <List\n                    list={instances}\n                    value={currentInstance}\n                    title=\"Reconstructed morphology\"\n                    color={colorName}\n                    onSelect={setInstance}\n                    anchor=\"data\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <div id=\"data\" />\n\n      {!!currentInstance && <DataContainer>\n        <Collapsible title=\"Population\">\n          <h3>Reconstructed morphologies</h3>\n          <ESData query={mtypeExpMorphologyListDataQuery(currentMtype)}>\n            {esDocuments => (\n              <>\n                {!!esDocuments &&\n                  <ExpMorphologyTable\n                    morphologies={getAndSortMorphologies(esDocuments)}\n                  />\n                }\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n\n        <Collapsible\n          className=\"mt-4 mb-4\"\n          title={`Neuron Morphology ${currentMtype} ${currentInstance}`}\n        >\n          <ExpMorphologyFactsheet morphologyName={currentInstance} />\n\n          <ESData\n            query={morphologyDataQuery(currentMtype, currentInstance)}\n          >\n            {esDocuments => (\n              <>\n                {!!esDocuments && !!esDocuments.length && (\n                  <div className=\"text-right\">\n                    <NexusFileDownloadButton\n                      className=\"mt-2\"\n                      filename={getMorphologyDistribution(esDocuments[0]._source).name}\n                      url={getMorphologyDistribution(esDocuments[0]._source).contentUrl}\n                      org={hippocampus.org}\n                      project={hippocampus.project}\n                    >\n                      Download morphology\n                    </NexusFileDownloadButton>\n                  </div>\n                )}\n                {!!esDocuments && !!esDocuments.length && (\n                  <NexusPlugin\n                    className=\"mt-3\"\n                    name=\"neuron-morphology\"\n                    resource={esDocuments[0]._source}\n                    nexusClient={nexus}\n                  />\n                )}\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n      </DataContainer>}\n    </>\n  );\n};\n\nexport default NeuronExperimentalMorphology;\n","import React from 'react';\n\nimport MainLayout from '../../layouts/MainLayout';\nimport NeuronMorphologyView from '../../views/experimental/NeuronMorphology';\n\n\nexport default function About() {\n  return (\n    <MainLayout>\n      <NeuronMorphologyView />\n    </MainLayout>\n  );\n};\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/neuronal-morphology\",\n      function () {\n        return require(\"private-next-pages/experimental-data/neuronal-morphology.tsx\");\n      }\n    ]);\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"morphImageContainer\":\"styles_morphImageContainer__1PM2z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layer\":\"styles_layer__uUJ49\",\"active\":\"styles_active__1RUjp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"neuron-morphology_selector__2Hh7F\",\"selectorColumn\":\"neuron-morphology_selectorColumn__1ltHl\",\"selectorHead\":\"neuron-morphology_selectorHead__3ZykT\",\"selectorBody\":\"neuron-morphology_selectorBody__Gr9_a\"};"],"sourceRoot":""}