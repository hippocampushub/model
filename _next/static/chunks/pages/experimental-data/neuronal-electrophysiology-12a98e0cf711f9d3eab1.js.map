{"version":3,"sources":["webpack://_N_E/./src/components/ExpTraceTable/index.tsx","webpack://_N_E/./src/views/experimental/NeuronElectrophysiology.tsx","webpack://_N_E/./src/pages/experimental-data/neuronal-electrophysiology.tsx","webpack://_N_E/?6832","webpack://_N_E/./src/styles/experimental-data/neuron-electrophysiology.module.scss"],"names":["entryToArray","entry","Array","isArray","getAgentLabel","agent","name","givenName","familyName","getAgentType","traces","nexus","useNexusContext","agentIds","reduce","ids","trace","currIds","contribution","map","filter","Boolean","from","Set","useState","agentMap","setAgentMap","useEffect","length","contributionEsQuery","size","query","terms","View","elasticSearchQuery","hippocampus","then","data","hits","esDocuments","esDocument","_source","agents","id","label","type","keyBy","className","annotation","hasBody","sort","a1","a2","router","useRouter","setQuery","push","pathname","undefined","shallow","currentEtype","etype","currentInstance","etype_instance","etypes","Object","keys","instances","getAndSortTraces","m1","m2","Filters","backgroundAlt","Title","primaryColor","colorName","title","subtitle","InfoBox","color","text","styles","List","list","value","onSelect","instance","anchor","DataContainer","Collapsible","ESData","electroPhysiologyDataQuery","NexusPlugin","resource","nexusClient","etypeTracesDataQuery","About","MainLayout","window","__NEXT_P","module","exports"],"mappings":"kWAcA,SAASA,EAAaC,GACpB,OAAIC,MAAMC,QAAQF,GAAeA,EAE1B,CAACA,GAGV,SAASG,EAAcC,GACrB,OAAOA,EAAMC,KACTD,EAAMC,KADH,UAEAD,EAAME,UAFN,YAEmBF,EAAMG,YAGlC,SAASC,EAAaJ,GACpB,OAAOA,EAAMC,KACT,cACA,SAGN,IA4EA,EA5EoD,SAAC,GAAoB,QAAlBI,cAAkB,MAAT,GAAS,EACjEC,GAAQC,SAERC,EAAWH,EAAOI,QAAO,SAACC,EAAeC,GAC7C,IAAMC,EAAUjB,EAAagB,EAAME,cAChCC,KAAI,SAAAD,GAAY,uBAAIA,EAAab,aAAjB,aAAI,EAAqB,UACzCe,OAAOC,SAEV,OAAOnB,MAAMoB,KAAK,IAAIC,IAAJ,kBAAYR,IAAZ,OAAoBE,QACrC,IAToE,GAWvCO,cAA8B,MAAvDC,EAXgE,KAWtDC,EAXsD,KA4CvE,OA/BAC,gBAAU,WACR,GAAKd,EAASe,OAAd,CAEA,IAAMC,EAAsB,CAC1BP,KAAM,EACNQ,KAAM,IACNC,MAAO,CACLC,MAAO,CACL,IAAOnB,KAKbF,EAAMsB,KAEHC,mBAAmBC,QAAiBA,YAAqBA,kBAA2BN,GAEpFO,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKA,QAEvBF,MAAK,SAAAG,GAAW,OAAIA,EAAYpB,KAAI,SAAAqB,GAAU,OAAIA,EAAWC,cAE7DL,MAAK,SAAAM,GAAM,OAAIA,EAAOvB,KAAI,SAAAd,GAAK,MAAK,CACnCsC,GAAItC,EAAM,OACVuC,MAAOxC,EAAcC,GACrBwC,KAAMpC,EAAaJ,UAGpB+B,MAAK,SAAAM,GAAM,OAAII,WAAMJ,EAAQ,SAC7BN,MAAK,SAAAX,GAAQ,OAAIC,EAAYD,SAC/B,CAACf,KAGF,gBAAKqC,UAAU,oCAAf,UACE,8BACE,4BACE,2BACE,kCAEA,oCACA,+CAGJ,2BACGrC,EAAOS,KAAI,SAAAH,GAAK,OACf,2BACE,eAAI+B,UAAU,kBAAd,SAAiC/B,EAAMV,QACvC,wBAAKU,EAAMgC,WAAWC,QAAQL,SAC9B,wBACGnB,GAAYzB,EAAagB,EAAME,cAC7BC,KAAI,SAAAD,GAAY,OAAIO,EAASP,EAAab,MAAM,WAChD6C,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGN,KAAOO,EAAGP,KAAO,GAAK,KAC1C1B,KAAI,SAAAd,GAAK,OAAI,4BAAyBA,EAAMuC,MAA/B,KAAsC,oBAA3BvC,EAAMuC,cAP5B5B,EAAMV,iB,uzDCtE3B,IA2HA,EA3H0C,WACxC,IAAM+C,GAASC,iBACT3C,GAAQC,SAERmB,E,qWAAQ,CAAH,GACNsB,EAAOtB,OAGNwB,EAAW,SAACxB,GAChBsB,EAAOG,KAAK,CAAEzB,QAAO0B,SAAUJ,EAAOI,eAAYC,EAAW,CAAEC,SAAS,KAgBpEC,EAAuB7B,EAAM8B,MAC7BC,EAA0B/B,EAAMgC,eAEhCC,EAASC,OAAOC,KAAKxD,GAAQwC,OAC7BiB,EAAYP,EACdlD,EAAOkD,GAAcV,OACrB,GAEEkB,EAAmB,SAAC7B,GACxB,OAAOA,EACJpB,KAAI,SAAAqB,GAAU,OAAIA,EAAWC,WAC7BS,MAAK,SAACmB,EAAIC,GAAL,OAAaD,EAAG/D,KAAOgE,EAAGhE,KAAQ,GAAK,MAGjD,OACE,iCACE,SAACiE,EAAA,EAAD,CACEC,eAAa,EADf,UAGE,iBAAKzB,UAAU,sBAAf,WACE,iBAAKA,UAAU,qBAAf,WACE,SAAC0B,EAAA,EAAD,CACEC,aAAcC,KACdC,OAAO,uCAAa,kBAAb,wBACPC,SAAS,uBAEX,SAACC,EAAA,EAAD,CACEC,MAAM,SACNC,KAAK,6SAIT,gBAAKjC,UAAU,qCAAf,UACE,iBAAKA,UAAWkC,aAAhB,WACE,gBAAKlC,UAAWkC,iBAAhB,+BACA,iBAAKlC,UAAWkC,iBAAhB,WACE,SAACC,EAAA,EAAD,CACEC,KAAMnB,EACNoB,MAAOxB,EACPgB,MAAM,SACNG,MAAOJ,KACPU,SAtDC,SAACxB,GAChBN,EAAS,CACPM,QACAE,eAAgBD,QAqDN,mBACA,mBACA,mBACA,SAACoB,EAAA,EAAD,CACEC,KAAMhB,EACNiB,MAAOtB,EACPc,MAAK,+BAA0BT,EAAUvC,OAApC,KACLmD,MAAOJ,KACPU,SA1DI,SAACC,GACnB/B,EAAS,CACPM,MAAOD,EACPG,eAAgBuB,KAwDJC,OAAO,uBAQnB,gBAAK5C,GAAG,WAELiB,KAAkBE,IAAmB,UAAC0B,EAAA,EAAD,YACtC,SAACC,EAAA,EAAD,CAAab,MAAK,8CAAyChB,EAAzC,YAAyDE,GAA3E,UACE,SAAC4B,EAAA,EAAD,CAAQ3D,OAAO4D,QAA2B/B,EAAcE,GAAxD,SACG,SAAAvB,GAAW,OACV,gCACKA,KAAiBA,EAAYX,SAC9B,SAACgE,EAAA,EAAD,CACEtF,KAAK,2BACLuF,SAAUtD,EAAY,GAAGE,QACzBqD,YAAanF,YAQzB,UAAC8E,EAAA,EAAD,CAAab,MAAM,aAAa7B,UAAU,OAA1C,WACE,eAAIA,UAAU,OAAd,qCAEA,SAAC2C,EAAA,EAAD,CAAQ3D,OAAOgE,QAAqBnC,GAApC,SACG,SAAArB,GAAW,OACV,gCACKA,IACD,SAAC,EAAD,CAAe7B,OAAQ0D,EAAiB7B,oBC5H3C,SAASyD,IACtB,OACE,SAACC,EAAA,EAAD,WACE,SAAC,EAAD,Q,sBCRDC,OAAOC,SAAWD,OAAOC,UAAY,IAAI3C,KAAK,CAC7C,gDACA,WACE,OAAO,EAAQ,W,kBCHvB4C,EAAOC,QAAU,CAAC,SAAW,2CAA2C,eAAiB,iDAAiD,aAAe,+CAA+C,aAAe,kD","file":"static/chunks/pages/experimental-data/neuronal-electrophysiology-12a98e0cf711f9d3eab1.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { keyBy } from 'lodash';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport { hippocampus } from '../../config';\nimport ImageViewer from '../ImageViewer';\n\nimport styles from './styles.module.scss'\n\n\ntype ExpTraceTableProps = {\n  traces: Record<string, any>[];\n};\n\nfunction entryToArray(entry) {\n  if (Array.isArray(entry)) return entry;\n\n  return [entry];\n}\n\nfunction getAgentLabel(agent) {\n  return agent.name\n    ? agent.name\n    : `${agent.givenName} ${agent.familyName}`;\n}\n\nfunction getAgentType(agent) {\n  return agent.name\n    ? 'institution'\n    : 'person';\n}\n\nconst ExpTraceTable: React.FC<ExpTraceTableProps> = ({ traces = [] }) => {\n  const nexus = useNexusContext();\n\n  const agentIds = traces.reduce((ids: string[], trace) => {\n    const currIds = entryToArray(trace.contribution)\n      .map(contribution => contribution.agent?.['@id'])\n      .filter(Boolean);\n\n    return Array.from(new Set([...ids, ...currIds]));\n  }, []);\n\n  const [agentMap, setAgentMap] = useState<Record<string, any>>(null);\n\n  useEffect(() => {\n    if (!agentIds.length) return;\n\n    const contributionEsQuery = {\n      from: 0,\n      size: 100,\n      query: {\n        terms: {\n          '_id': agentIds,\n        }\n      }\n    }\n\n    nexus.View\n      // query ElesticSearch endpoint to get agents by their ids\n      .elasticSearchQuery(hippocampus.org, hippocampus.project, hippocampus.datasetViewId, contributionEsQuery)\n      // extract ES documents\n      .then(data => data.hits.hits)\n      // extract Nexus original documents\n      .then(esDocuments => esDocuments.map(esDocument => esDocument._source))\n      // pick only agent ids and labels\n      .then(agents => agents.map(agent => ({\n        id: agent['@id'],\n        label: getAgentLabel(agent),\n        type: getAgentType(agent),\n      })))\n      // create a map of agents of type Record<id, label>\n      .then(agents => keyBy(agents, 'id'))\n      .then(agentMap => setAgentMap(agentMap));\n  }, [traces]);\n\n  return (\n    <div className=\"layer-anatomy-summary__basis mt-2\">\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            {/* <th>Image</th> */}\n            <th>E-Type</th>\n            <th>Contribution</th>\n          </tr>\n        </thead>\n        <tbody>\n          {traces.map(trace => (\n            <tr key={trace.name}>\n              <td className=\"text-capitalize\">{trace.name}</td>\n              <td>{trace.annotation.hasBody.label}</td>\n              <td>\n                {agentMap && entryToArray(trace.contribution)\n                  .map(contribution => agentMap[contribution.agent['@id']])\n                  .sort((a1, a2) => a1.type > a2.type ? 1 : -1)\n                  .map(agent => <span key={agent.label}>{agent.label} <br/></span>)\n                }\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\nexport default ExpTraceTable;\n","import React from 'react';\nimport { useRouter } from 'next/router';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport ESData from '../../components/ESData';\nimport DataContainer from '../../components/DataContainer';\nimport NexusPlugin from '../../components/NexusPlugin';\nimport { electroPhysiologyDataQuery, etypeTracesDataQuery } from '../../queries/es';\nimport Filters from '../../layouts/Filters';\nimport Title from '../../components/Title';\nimport InfoBox from '../../components/InfoBox';\nimport { colorName } from './config';\nimport List from '../../components/List';\nimport Collapsible from '../../components/Collapsible';\nimport ExpTraceTable from '../../components/ExpTraceTable';\nimport traces from '../../traces.json';\nimport styles from '../../styles/experimental-data/neuron-electrophysiology.module.scss';\n\n\nconst NeuronElectrophysiology: React.FC = () => {\n  const router = useRouter();\n  const nexus = useNexusContext();\n\n  const query = {\n    ...router.query\n  };\n\n  const setQuery = (query: any) => {\n    router.push({ query, pathname: router.pathname }, undefined, { shallow: true });\n  }\n\n  const setEtype = (etype: string) => {\n    setQuery({\n      etype,\n      etype_instance: currentInstance,\n    });\n  };\n  const setInstance = (instance: string) => {\n    setQuery({\n      etype: currentEtype,\n      etype_instance: instance,\n    });\n  };\n\n  const currentEtype: string = query.etype as string;\n  const currentInstance: string = query.etype_instance as string;\n\n  const etypes = Object.keys(traces).sort();\n  const instances = currentEtype\n    ? traces[currentEtype].sort()\n    : []\n\n  const getAndSortTraces = (esDocuments) => {\n    return esDocuments\n      .map(esDocument => esDocument._source)\n      .sort((m1, m2) => (m1.name > m2.name) ? 1 : -1);\n  };\n\n  return (\n    <>\n      <Filters\n        backgroundAlt\n      >\n        <div className=\"row bottom-xs w-100\">\n          <div className=\"col-xs-12 col-lg-6\">\n            <Title\n              primaryColor={colorName}\n              title={<span>Neuron <br /> Electrophysiology</span>}\n              subtitle=\"Experimental Data\"\n            />\n            <InfoBox\n              color=\"grey-1\"\n              text=\"We recorded electrical traces from neurons using single-cell recording experiments in brain slices. Then, we classified the traces in different electrical types (e-types) based on their firing patterns. We have identified one e-type for excitatory cells and four e-types for inhibitory cells.\"\n            />\n          </div>\n\n          <div className=\"col-xs-12 col-lg-4 col-lg-offset-1\">\n            <div className={styles.selector}>\n              <div className={styles.selectorHead}>Select cell type</div>\n              <div className={styles.selectorBody}>\n                <List\n                  list={etypes}\n                  value={currentEtype}\n                  title=\"e-type\"\n                  color={colorName}\n                  onSelect={setEtype}\n                />\n                <br />\n                <br />\n                <br />\n                <List\n                  list={instances}\n                  value={currentInstance}\n                  title={`Experiment instance (${instances.length})`}\n                  color={colorName}\n                  onSelect={setInstance}\n                  anchor=\"data\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <div id=\"data\" />\n\n      {!!currentEtype && !!currentInstance && <DataContainer>\n        <Collapsible title={`Electrophysiological Recordings for ${currentEtype}_${currentInstance}`}>\n          <ESData query={electroPhysiologyDataQuery(currentEtype, currentInstance)} >\n            {esDocuments => (\n              <>\n                {!!esDocuments && !!esDocuments.length && (\n                  <NexusPlugin\n                    name=\"neuron-electrophysiology\"\n                    resource={esDocuments[0]._source}\n                    nexusClient={nexus}\n                  />\n                )}\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n\n        <Collapsible title=\"Population\" className=\"mt-4\">\n          <h3 className=\"mt-3\">Experimental instances</h3>\n\n          <ESData query={etypeTracesDataQuery(currentEtype)}>\n            {esDocuments => (\n              <>\n                {!!esDocuments && (\n                  <ExpTraceTable traces={getAndSortTraces(esDocuments)} />\n                )}\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n      </DataContainer>\n      }\n    </>\n  );\n};\n\nexport default NeuronElectrophysiology;\n","import React from 'react';\n\nimport MainLayout from '../../layouts/MainLayout';\nimport NeuronEphysView from '../../views/experimental/NeuronElectrophysiology';\n\n\nexport default function About() {\n  return (\n    <MainLayout>\n      <NeuronEphysView />\n    </MainLayout>\n  );\n};\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/neuronal-electrophysiology\",\n      function () {\n        return require(\"private-next-pages/experimental-data/neuronal-electrophysiology.tsx\");\n      }\n    ]);\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"neuron-electrophysiology_selector__1wLqj\",\"selectorColumn\":\"neuron-electrophysiology_selectorColumn__37KZ_\",\"selectorHead\":\"neuron-electrophysiology_selectorHead__3N8Kc\",\"selectorBody\":\"neuron-electrophysiology_selectorBody__35I10\"};"],"sourceRoot":""}