{"version":3,"file":"static/chunks/pages/experimental-data/connection-anatomy-94afe43e255a8797.js","mappings":"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","sources":["webpack://_N_E/?856a","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/ResponsiveTable/index.tsx","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/components/Term/index.tsx","webpack://_N_E/./src/views/1_experimental-data/connection-anatomy/BoutonDensityTable.tsx","webpack://_N_E/./src/views/1_experimental-data/connection-anatomy/SynsPerConnTable.tsx","webpack://_N_E/./src/views/1_experimental-data/connection-anatomy/ConnectionProbabilityTable.tsx","webpack://_N_E/./src/views/1_experimental-data/connection-anatomy/SDPerPrenapticTypeTable.tsx","webpack://_N_E/./src/views/1_experimental-data/connection-anatomy/PercentageSDOntoPyramidalCells.tsx","webpack://_N_E/./src/views/1_experimental-data/connection-anatomy/SynDivLay.tsx","webpack://_N_E/./src/views/1_experimental-data/ConnectionAnatomy.tsx","webpack://_N_E/./src/pages/experimental-data/connection-anatomy.tsx","webpack://_N_E/./src/terms.tsx","webpack://_N_E/./src/views/1_experimental-data/config.ts","webpack://_N_E/./src/components/ResponsiveTable/styles.module.scss","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/./src/components/Term/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/connection-anatomy\",\n      function () {\n        return require(\"private-next-pages/experimental-data/connection-anatomy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/experimental-data/connection-anatomy\"])\n      });\n    }\n  ","import React from 'react';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nexport function formatNumber(value, significantFigures = 5, thousandSeparator = true, prefix = '', suffix = '') {\n  const num = parseFloat(value);\n\n  if (!Number.isFinite(num)) return value;\n\n  const formatted = thousandSeparator\n    ? num.toLocaleString('en', { maximumSignificantDigits: significantFigures })\n    : num.toPrecision(significantFigures);\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  return formatNumber(value, significantFigures, thousandSeparator, prefix, suffix);\n}\n\n\nexport default NumberFormat;\n","import React, { useEffect, useState } from 'react';\nimport { Table } from 'antd';\nimport { ColumnType as AntColumnType, ColumnGroupType as AntColumnGroupType, TableProps } from 'antd/lib/table';\nimport { Breakpoint } from 'antd/lib/_util/responsiveObserve';\n\nimport classes from './styles.module.scss';\n\ninterface ColumnType<Type extends object & { isHighlight?: boolean }> extends Omit<AntColumnType<Type>, 'dataIndex'> {\n  dataIndex?: keyof Type;\n}\ninterface GroupColumnType<Type extends object & { isHighlight?: boolean }> extends AntColumnGroupType<Type> { }\n\ninterface ResponsiveTableProps<Type extends object & { isHighlight?: boolean }> extends Omit<TableProps<Type>, 'columns'> {\n  data?: Type[];\n  columns: (ColumnType<Type> | GroupColumnType<Type>)[] | any;\n}\n\nconst renderHighlightValue = (record) => (nestedValue, _value) =>\n  highlightValue(nestedValue, record.isHighlight);\n\nconst highlightValue = (nestedValue, isHighlight) =>\n  isHighlight ? <div className=\"text-bold\">{nestedValue}</div> : nestedValue;\n\n// Utility function to calculate the width of text\nfunction calculateTextWidth(text: string, font: string = '16px Arial'): number {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  if (context) {\n    context.font = font;\n    return context.measureText(text).width;\n  }\n  return 0;\n}\n\nfunction ResponsiveTable<Type extends object & { isHighlight?: boolean }>({\n  columns,\n  data = [], // Provide a default value of an empty array\n  ...restProps\n}: ResponsiveTableProps<Type>) {\n  const [columnWidths, setColumnWidths] = useState<number[]>([]);\n  const font = '14px Arial'; // Set the font to match your table\n\n  useEffect(() => {\n    const newColumnWidths = columns.map((column) => {\n      const maxTextWidth = data.reduce((max, record) => {\n        const dataIndex = (column as ColumnType<Type>).dataIndex;\n        if (dataIndex && record[dataIndex] !== undefined) {\n          const text = String(record[dataIndex]);\n          const textWidth = calculateTextWidth(text, font);\n          return Math.max(max, textWidth);\n        }\n        return max;\n      }, 0);\n      return Math.min(maxTextWidth + 20, 200); // Add some padding and a max limit\n    });\n\n    setColumnWidths(newColumnWidths);\n  }, [columns, data]);\n\n  const expandableColumn = {\n    title: null,\n    dataIndex: null,\n    render: (_value, record, index) => {\n      const nestedTableData = columns\n        .map((column) => {\n          const dataIndex = (column as ColumnType<Type>).dataIndex;\n          if (dataIndex) {\n            return {\n              key: column.title,\n              value: record[dataIndex],\n            };\n          }\n\n          const children = (column as GroupColumnType<Type>).children;\n          if (children) {\n            const childrenValue = children.map((child) => (\n              <div key={child.key}>\n                {child.title}: {record[(child as ColumnType<Type>).dataIndex]}\n              </div>\n            ));\n            return {\n              key: column.title,\n              value: childrenValue,\n            };\n          }\n\n          return null;\n        })\n        .filter((item) => item !== null); // Filter out null values\n\n      const nestedColumns: ColumnType<{ key: any; value: any }>[] = [\n        {\n          dataIndex: 'key',\n          title: 'Field',\n          render: renderHighlightValue(record),\n        },\n        {\n          dataIndex: 'value',\n          title: 'Value',\n          render: renderHighlightValue(record),\n        },\n      ];\n\n      return (\n        <Table\n          className=\"responsiveTable no-left-margin nested-table xs-column\"\n          rowClassName={index % 2 ? classes.responsiveTablEven : classes.responsiveTablOdd}\n          rowKey={(record: any, index) => `${record.key}__${index}`}\n          showHeader={false}\n          columns={nestedColumns}\n          tableLayout=\"auto\" // Use auto layout for nested table as well\n          dataSource={nestedTableData as object[]} // Ensure dataSource does not contain null values\n          pagination={false}\n        />\n      );\n    },\n    responsive: ['xs' as Breakpoint],\n  };\n\n  const tableColumns = columns\n    .map((column, index) => ({\n      ...column,\n      title: column.title,\n      dataIndex: (column as ColumnType<Type>).dataIndex,\n      responsive: ['sm' as Breakpoint],\n      render: (value: any, record: Type, index: number) =>\n        highlightValue(column.render ? column.render(value, record, index) : value, record.isHighlight),\n      children: (column as GroupColumnType<Type>).children?.map((child) => ({\n        render: (value: any, record: Type) => highlightValue(value, record.isHighlight),\n        ...child,\n      })),\n      width: column.key === 'yourSpecificKey' ? columnWidths[index] : undefined, // Set width dynamically for a specific column\n    }))\n    .concat(expandableColumn as any);\n\n  const { className = '' } = restProps;\n\n  return (\n    <Table<Type>\n      bordered\n      size=\"small\"\n      scroll={{ x: true }}\n      rowKey={(record: any) => record.key || `${record.dataIndex}__`}\n      pagination={false}\n      columns={tableColumns}\n      dataSource={data}\n      rowClassName={(record: Type, index: number) => (index % 2 ? classes.responsiveTablEven : classes.responsiveTablOdd)}\n      {...restProps}\n      className={`responsiveTable no-left-margin nested-table xs-column text-nowrap ${className}`}\n      tableLayout=\"auto\" // Ensure layout is auto for dynamic column sizing\n    />\n  );\n}\n\nexport default ResponsiveTable;","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import React from 'react';\nimport { Tooltip } from 'antd';\n\nimport { TermDescription } from '@/terms';\n\nimport style from './styles.module.scss';\n\ntype TermProps = {\n  term: string;\n  description?: any;\n  className?: string;\n};\n\ntype TermFormatter = (term: string) => string;\n\nexport const termFactory = (termDescription: TermDescription = {}, termFormatter?: TermFormatter) => {\n  const Term: React.FC<TermProps> = ({ className, term, description }) => {\n    const currentDescription = description || termDescription[term];\n    const formattedTerm = termFormatter\n      ? termFormatter(term)\n      : term;\n\n    if (!currentDescription) {\n      return (<span className={className}>{formattedTerm}</span>);\n    }\n\n    return (\n      <Tooltip title={currentDescription} destroyTooltipOnHide={true}>\n        <span className={`${style.container} ${className ?? ''}`}>{formattedTerm}</span>\n      </Tooltip>\n    );\n  };\n\n  return Term;\n};\n","import React, { useState, useEffect } from 'react';\nimport { downloadAsJson } from '@/utils';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport NumberFormat from '@/components/NumberFormat';\nimport { layerDescription, mtypeDescription } from '@/terms';\nimport { termFactory } from '@/components/Term';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\n\ntype BoutonDensity = {\n  mtype: string;\n  region: string;\n  specie: string;\n  weight: string;\n  mean: number;\n  std: number;\n  unit: string;\n  n: number;\n  sem: number;\n  ref: string; // Changed from 'reference' to 'ref' to match the data\n  ref_link?: string; // Added optional 'ref_link'\n};\n\nconst termDescription = {\n  ...mtypeDescription,\n  ...layerDescription,\n};\n\nconst Term = termFactory(termDescription);\n\nfunction getMtypeDescription(fullMtype: string) {\n  const [layer, mtype] = fullMtype.split('_');\n  return layerDescription[layer] && mtypeDescription[mtype]\n    ? `${mtypeDescription[mtype]} from ${layerDescription[layer]} layer`\n    : null;\n}\n\nconst columns = [\n  {\n    title: 'M-type',\n    dataIndex: 'mtype' as keyof BoutonDensity,\n    render: (mtype: string) => (\n      <Term term={mtype} description={getMtypeDescription(mtype)} />\n    ),\n  },\n  {\n    title: 'Region',\n    dataIndex: 'region' as keyof BoutonDensity,\n  },\n  {\n    title: 'Specie',\n    dataIndex: 'specie' as keyof BoutonDensity,\n  },\n  {\n    title: 'Weight',\n    dataIndex: 'weight' as keyof BoutonDensity,\n  },\n  {\n    title: 'Bouton Density, boutons/µm',\n    children: [\n      {\n        title: <> Mean ± std</>,\n        dataIndex: 'mean' as keyof BoutonDensity,\n        render: (mean: number, record: BoutonDensity) => (\n          <>\n            <NumberFormat value={mean} /> ± <NumberFormat value={record.std} />\n          </>\n        ),\n      },\n      {\n        title: <> SEM</>,\n        dataIndex: 'sem' as keyof BoutonDensity,\n        render: (sem: number) => <NumberFormat value={sem} />,\n      },\n      {\n        title: 'N. cells',\n        dataIndex: 'n' as keyof BoutonDensity,\n      },\n    ],\n  },\n  {\n    title: 'Reference',\n    dataIndex: 'ref' as keyof BoutonDensity,\n    render: (ref: string | string[], record: BoutonDensity) => {\n      if (Array.isArray(ref) && Array.isArray(record.ref_link)) {\n        return ref.map((r, index) => (\n          <React.Fragment key={index}>\n            <a href={record.ref_link?.[index] ?? '#'} target=\"_blank\" rel=\"noopener noreferrer\">\n              {r}\n            </a>\n            {index < ref.length - 1 && ', '}\n          </React.Fragment>\n        ));\n      } else if (typeof ref === 'string' && typeof record.ref_link === 'string') {\n        return (\n          <a href={record.ref_link} target=\"_blank\" rel=\"noopener noreferrer\">\n            {ref}\n          </a>\n        );\n      } else {\n        return ref;\n      }\n    },\n  },\n];\n\ntype BoutonDensityTableProps = {\n  theme?: number;\n};\n\nconst BoutonDensityTable: React.FC<BoutonDensityTableProps> = ({ theme }) => {\n  const [data, setData] = useState<BoutonDensity[] | null>(null);\n\n  useEffect(() => {\n    fetch(`${dataPath}/1_experimental-data/connection-anatomy/bouton-density.json`)\n      .then((response) => response.json())\n      .then((fetchedData) => setData(fetchedData));\n  }, []);\n\n  if (!data) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <ResponsiveTable<BoutonDensity>\n        className=\"mb-2\"\n        columns={columns}\n        data={data}\n        rowKey={({ mtype }) => mtype}\n      />\n\n      <small>\n        <sup>[1]</sup> The authors do not specify if this is std or SEM. Anyway,\n        in a previous publication (Sik et al., 1994) they used std. We can assume they are std.\n      </small>{' '}\n      <br />\n      <small>\n        <sup>[2]</sup> The authors define the sample size (n) probably as the number of sampled segments\n        rather than the number of animals.\n      </small>{' '}\n      <br />\n      <small>\n        <sup>[3]</sup> The authors do not mention specie and age in the paper. Anyway,\n        a later paper (Sik et al., 1995) mentions the result so we assume they use the same method.\n      </small>{' '}\n      <br />\n      <small>\n        <sup>[4]</sup> Calculated (see below).\n      </small>\n\n      <div className=\"mt-2\">\n        <DownloadButton\n          theme={theme}\n          onClick={() => downloadAsJson(data, `Bouton-Density-Data.json`)}\n        >\n          Bouton density\n        </DownloadButton>\n      </div>\n\n      <h3 className=\"text-2xl mt-12 mb-2\">Calculations</h3>\n\n      <h4 className=\"text-lg mb-2\">\n        <a\n          href=\"https://doi.org/10.1002/(sici)1096-9861(19990614)408:4%3C449::aid-cne1%3E3.0.co;2-r\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Esclapez et al., 1999\n        </a>\n      </h4>\n      <p className=\"mb-2\">\n        Mean number of varicosities per 100 μm of axon for each segment order:\n      </p>\n      <ul className=\"mb-2\">\n        <li>\n          4.02 ± 1.5 and 4.31 ± 1.33, respectively, for first-order segments.\n        </li>\n        <li>10.04 ± 2.98 and 9.15 ± 2.56 for second-order segments.</li>\n        <li>14.78 ± 3.42 and 13.51 ± 5.36 for third-order segments.</li>\n        <li>12.34 ± 2.6 and 10.04 ± 3.57 for fourth-order segments.</li>\n      </ul>\n\n      <h4 className=\"text-lg mb-2\">\n        <a\n          href=\"https://dx.doi.org/10.1002%2Fhipo.22141\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Bezaire and Soltesz, 2013\n        </a>\n      </h4>\n      <p>\n        In a representative CA1 pyramidal axonal arbor, segments of third or fourth order constituted\n        most of the axonal length; therefore we used an average of the bouton densities of the third and\n        fourth order segments that is 13.56 ± 3.01 boutons per 100 um).\n      </p>\n    </>\n  );\n};\n\nexport default BoutonDensityTable;","import React, { useState, useEffect } from 'react';\nimport { downloadAsJson } from '@/utils';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport NumberFormat from '@/components/NumberFormat';\nimport { layerDescription, mtypeDescription } from '@/terms';\nimport { termFactory } from '@/components/Term';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\n\ntype DataEntry = {\n  from: string;\n  to: string;\n  region: string;\n  specie: string;\n  age?: string;\n  weight?: string;\n  mean: number | string;\n  std: number | 'n/a' | string;\n  nConns: number | string;\n  sem: number | '-' | string;\n  ref: string;\n  ref_link?: string;\n};\n\nconst termDescription = {\n  ...mtypeDescription,\n  ...layerDescription,\n};\n\nconst Term = termFactory(termDescription);\n\nfunction getMtypeDescription(fullMtype: string) {\n  const [layer, mtype] = fullMtype.split('_');\n  return layerDescription[layer] && mtypeDescription[mtype]\n    ? `${mtypeDescription[mtype]} from ${layerDescription[layer]} layer`\n    : null;\n}\n\nconst columns = [\n  {\n    title: 'From',\n    dataIndex: 'from' as keyof DataEntry,\n    render: (from: string) => (\n      <Term term={from} description={getMtypeDescription(from)} />\n    ),\n  },\n  {\n    title: 'To',\n    dataIndex: 'to' as keyof DataEntry,\n    render: (to: string) => (\n      <Term term={to} description={getMtypeDescription(to)} />\n    ),\n  },\n  {\n    title: 'Region',\n    dataIndex: 'region' as keyof DataEntry,\n    render: (region: string) => region || 'N/A',\n  },\n  {\n    title: 'Specie',\n    dataIndex: 'specie' as keyof DataEntry,\n    render: (specie: string) => specie || 'N/A',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age' as keyof DataEntry,\n    render: (age?: string) => age || 'N/A',\n  },\n  {\n    title: 'Weight',\n    dataIndex: 'weight' as keyof DataEntry,\n    render: (weight?: string) => weight || 'N/A',\n  },\n  {\n    title: 'Synapses per connection',\n    children: [\n      {\n        title: 'Mean ± std',\n        dataIndex: 'mean' as keyof DataEntry,\n        render: (mean: number | string, record: DataEntry) => (\n          <>\n            {typeof mean === 'number' ? <NumberFormat value={mean} /> : 'N/A'} ±{' '}\n            {typeof record.std === 'number' ? <NumberFormat value={record.std} /> : 'N/A'}\n          </>\n        ),\n      },\n      {\n        title: 'SEM',\n        dataIndex: 'sem' as keyof DataEntry,\n        render: (sem: number | '-' | string) => (\n          typeof sem === 'number' ? <NumberFormat value={sem} /> : 'N/A'\n        ),\n      },\n      {\n        title: 'N. conns',\n        dataIndex: 'nConns' as keyof DataEntry,\n        render: (nConns: number | string) => (\n          typeof nConns === 'number' ? nConns : 'N/A'\n        ),\n      },\n    ],\n  },\n  {\n    title: 'Reference',\n    dataIndex: 'ref' as keyof DataEntry,\n    render: (ref: string, record: DataEntry) =>\n      record.ref_link && record.ref_link.trim() !== '' ? (\n        <a\n          href={record.ref_link}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          aria-label={`Reference: ${ref}`}\n        >\n          {ref}\n        </a>\n      ) : (\n        ref\n      ),\n  },\n];\n\ntype SynsPerConnTableProps = {\n  theme?: number;\n}\n\nconst SynsPerConnTable: React.FC<SynsPerConnTableProps> = ({ theme }) => {\n  const [data, setData] = useState<DataEntry[] | null>(null);\n  const [error, setError] = useState<string | null>(null); // State for handling errors\n\n  useEffect(() => {\n    fetch(`${dataPath}/1_experimental-data/connection-anatomy/syns-per-conn.json`)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((fetchedData: DataEntry[]) => setData(fetchedData))\n      .catch((error) => {\n        console.error('Error fetching syns-per-conn data:', error);\n        setError('Failed to load data.');\n      });\n  }, []);\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!data) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <ResponsiveTable<DataEntry>\n        className=\"mb-2\"\n        columns={columns}\n        data={data}\n        rowKey={(record, index) => `${record.from}_${record.to}_${index}`} // Ensure uniqueness\n      />\n      <div className=\"mt-2\">\n        <DownloadButton\n          theme={theme}\n          onClick={() => downloadAsJson(data, `exp-connection-anatomy_-_syns-per-conn-table.json`)}\n        >\n          Number of synapses per connection\n        </DownloadButton>\n      </div>\n    </>\n  );\n};\n\nexport default SynsPerConnTable;","import React, { useState, useEffect } from 'react';\nimport { downloadAsJson } from '@/utils';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport NumberFormat from '@/components/NumberFormat';\nimport { layerDescription, mtypeDescription } from '@/terms';\nimport { termFactory } from '@/components/Term';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\n\ntype DataEntry = {\n    Pre: string;\n    Post: string;\n    Specie: string;\n    Age: string;\n    Weight: string;\n    \"Slice thickness\": string;\n    Distance: string;\n    n: number | string;\n    N: number | string;\n    p: number | string;\n    Reference: string;\n    Reference_link?: string; // Ensure this is included\n};\n\nconst termDescription = {\n    ...mtypeDescription,\n    ...layerDescription,\n};\n\nconst Term = termFactory(termDescription);\n\nfunction getMtypeDescription(fullMtype: string) {\n    const [layer, mtype] = fullMtype.split('_');\n    return layerDescription[layer] && mtypeDescription[mtype]\n        ? `${mtypeDescription[mtype]} from ${layerDescription[layer]} layer`\n        : null;\n}\n\nconst columns = [\n    {\n        title: 'Pre',\n        dataIndex: 'Pre' as keyof DataEntry,\n        render: (pre: string) => (\n            <Term term={pre} description={getMtypeDescription(pre)} />\n        ),\n    },\n    {\n        title: 'Post',\n        dataIndex: 'Post' as keyof DataEntry,\n        render: (post: string) => (\n            <Term term={post} description={getMtypeDescription(post)} />\n        ),\n    },\n    {\n        title: 'Specie',\n        dataIndex: 'Specie' as keyof DataEntry,\n    },\n    {\n        title: 'Age',\n        dataIndex: 'Age' as keyof DataEntry,\n    },\n    {\n        title: 'Weight',\n        dataIndex: 'Weight' as keyof DataEntry,\n    },\n    {\n        title: 'Slice thickness',\n        dataIndex: 'Slice thickness' as keyof DataEntry,\n    },\n    {\n        title: 'Distance',\n        dataIndex: 'Distance' as keyof DataEntry,\n    },\n    {\n        title: 'n',\n        dataIndex: 'n' as keyof DataEntry,\n        render: (n: number | string) => n,\n    },\n    {\n        title: 'N',\n        dataIndex: 'N' as keyof DataEntry,\n        render: (N: number | string) => N,\n    },\n    {\n        title: 'p',\n        dataIndex: 'p' as keyof DataEntry,\n        render: (p: number | string) =>\n            typeof p === 'number' ? <NumberFormat value={p} /> : p,\n    },\n    {\n        title: 'Reference',\n        dataIndex: 'Reference' as keyof DataEntry,\n        render: (reference: string, record: DataEntry) =>\n            record.Reference_link ? (\n                <a href={record.Reference_link} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {reference}\n                </a>\n            ) : (\n                reference\n            ),\n    },\n];\n\ntype ConnectionProbabilityTableProps = {\n    theme?: number;\n}\n\nconst ConnectionProbabilityTable: React.FC<ConnectionProbabilityTableProps> = ({ theme }) => {\n    const [data, setData] = useState<DataEntry[] | null>(null);\n    const [error, setError] = useState<string | null>(null); // Optional: For error handling\n\n    useEffect(() => {\n        fetch(`${dataPath}/1_experimental-data/connection-anatomy/connection-probability.json`)\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((fetchedData) => setData(fetchedData))\n            .catch((error) => {\n                console.error('Error fetching connection probability data:', error);\n                setError('Failed to load data.');\n            });\n    }, []);\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    if (!data) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <>\n            <ResponsiveTable<DataEntry>\n                className=\"mb-2\"\n                columns={columns}\n                data={data}\n                rowKey={(record) => `${record.Pre}-${record.Post}-${record.Specie}-${record.Reference}`} // Ensure uniqueness\n            />\n\n            <div className=\"mt-4\">\n                <DownloadButton\n                    theme={theme}\n                    onClick={() => downloadAsJson(data, `Connection-Probability-Data.json`)}\n                >\n                    Connection probability\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default ConnectionProbabilityTable;","import React, { useState, useEffect } from 'react';\nimport { downloadAsJson } from '@/utils';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport NumberFormat from '@/components/NumberFormat';\nimport { layerDescription, mtypeDescription } from '@/terms';\nimport { termFactory } from '@/components/Term';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\n\ntype DataEntry = {\n    mtype: string;\n    Region: string;\n    Specie: string | null;\n    Age: string | null;\n    Weight: string | null;\n    mean: number;\n    n_cells: number | null;\n    std: number;\n    SEM: number;\n    Reference: string;\n    Reference_link?: string; // Optional field\n};\n\nconst termDescription = {\n    ...mtypeDescription,\n    ...layerDescription,\n};\n\nconst Term = termFactory(termDescription);\n\nfunction getMtypeDescription(fullMtype: string) {\n    const [layer, mtype] = fullMtype.split('_');\n    return layerDescription[layer] && mtypeDescription[mtype]\n        ? `${mtypeDescription[mtype]} from ${layerDescription[layer]} layer`\n        : null;\n}\n\nconst columns = [\n    {\n        title: 'MType',\n        dataIndex: 'mtype' as keyof DataEntry,\n        render: (mtype: string) => (\n            <Term term={mtype} description={getMtypeDescription(mtype)} />\n        ),\n    },\n    {\n        title: 'Region',\n        dataIndex: 'Region' as keyof DataEntry,\n    },\n    {\n        title: 'Specie',\n        dataIndex: 'Specie' as keyof DataEntry,\n        render: (specie: string | null) => specie || 'N/A',\n    },\n    {\n        title: 'Age',\n        dataIndex: 'Age' as keyof DataEntry,\n        render: (age: string | null) => age || 'N/A',\n    },\n    {\n        title: 'Weight',\n        dataIndex: 'Weight' as keyof DataEntry,\n        render: (weight: string | null) => weight || 'N/A',\n    },\n    {\n        title: 'Mean',\n        dataIndex: 'mean' as keyof DataEntry,\n        render: (mean: number) => <NumberFormat value={mean} />,\n    },\n    {\n        title: 'N. Cells',\n        dataIndex: 'n_cells' as keyof DataEntry,\n        render: (n_cells: number | null) => (n_cells !== null ? n_cells : 'N/A'),\n    },\n    {\n        title: 'STD',\n        dataIndex: 'std' as keyof DataEntry,\n        render: (std: number) => <NumberFormat value={std} />,\n    },\n    {\n        title: 'SEM',\n        dataIndex: 'SEM' as keyof DataEntry,\n        render: (sem: number) => <NumberFormat value={sem} />,\n    },\n    {\n        title: 'Reference',\n        dataIndex: 'Reference' as keyof DataEntry,\n        render: (reference: string | string[], record: DataEntry) => {\n            if (Array.isArray(reference) && Array.isArray(record.Reference_link)) {\n                return reference.map((ref, index) => (\n                    <React.Fragment key={index}>\n                        {record.Reference_link?.[index] ? (\n                            <a href={record.Reference_link[index] ?? '#'} target=\"_blank\" rel=\"noopener noreferrer\">\n                                {ref}\n                            </a>\n                        ) : (\n                            ref\n                        )}\n                        {index < reference.length - 1 && ', '}\n                    </React.Fragment>\n                ));\n            } else if (typeof reference === 'string' && typeof record.Reference_link === 'string') {\n                return record.Reference_link.trim() !== \"\" ? (\n                    <a href={record.Reference_link} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {reference}\n                    </a>\n                ) : (\n                    reference\n                );\n            } else {\n                return reference;\n            }\n        },\n    }\n];\n\ntype SDPerPresynapticTypeTableProps = {\n    theme?: number;\n}\n\nconst SDPerPresynapticTypeTable: React.FC<SDPerPresynapticTypeTableProps> = ({ theme }) => {\n    const [data, setData] = useState<DataEntry[] | null>(null);\n    const [error, setError] = useState<string | null>(null); // State for handling errors\n\n    useEffect(() => {\n        fetch(`${dataPath}/1_experimental-data/connection-anatomy/sd-per-presynaptic-type.json`)\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((fetchedData: DataEntry[]) => setData(fetchedData))\n            .catch((error) => {\n                console.error('Error fetching Synapse Divergence data:', error);\n                setError('Failed to load data.');\n            });\n    }, []);\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    if (!data) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <>\n            <ResponsiveTable<DataEntry>\n                className=\"mb-2\"\n                columns={columns}\n                data={data}\n                rowKey={(record, index) => `${record.mtype}-${index}`} // Ensure uniqueness\n            />\n            <div className=\"mt-4\">\n                <DownloadButton\n                    theme={theme}\n                    onClick={() => downloadAsJson(data, `Synapse-Divergence-Per-Presynaptic-Type-Data.json`)}\n                >\n                    Synapse divergence per presynaptic type data\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default SDPerPresynapticTypeTable;","import React, { useState, useEffect } from 'react';\nimport { downloadAsJson } from '@/utils';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport { layerDescription, mtypeDescription } from '@/terms';\nimport { termFactory } from '@/components/Term';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\n\ntype DataEntry = {\n    \"m-type\": string;\n    Specie: string | null;\n    Age: string | null;\n    Weight: string | null;\n    PC: number;\n    INT: number;\n    n: number | null;\n    Reference: string;\n    Reference_link?: string; // Optional field\n};\n\nconst termDescription = {\n    ...mtypeDescription,\n    ...layerDescription,\n};\n\nconst Term = termFactory(termDescription);\n\nfunction getMtypeDescription(fullMtype: string) {\n    const [layer, mtype] = fullMtype.split('_');\n    return layerDescription[layer] && mtypeDescription[mtype]\n        ? `${mtypeDescription[mtype]} from ${layerDescription[layer]} layer`\n        : null;\n}\n\nconst columns = [\n    {\n        title: 'MType',\n        dataIndex: 'm-type' as keyof DataEntry,\n        render: (mtype: string) => (\n            <Term term={mtype} description={getMtypeDescription(mtype)} />\n        ),\n    },\n    {\n        title: 'Specie',\n        dataIndex: 'Specie' as keyof DataEntry,\n        render: (specie: string | null) => specie || 'N/A',\n    },\n    {\n        title: 'Age',\n        dataIndex: 'Age' as keyof DataEntry,\n        render: (age: string | null) => age || 'N/A',\n    },\n    {\n        title: 'Weight',\n        dataIndex: 'Weight' as keyof DataEntry,\n        render: (weight: string | null) => weight || 'N/A',\n    },\n    {\n        title: 'PC',\n        dataIndex: 'PC' as keyof DataEntry,\n        render: (pc: number) => pc.toFixed(3),\n    },\n    {\n        title: 'INT',\n        dataIndex: 'INT' as keyof DataEntry,\n        render: (int: number) => int.toFixed(3),\n    },\n    {\n        title: 'N',\n        dataIndex: 'n' as keyof DataEntry,\n        render: (n: number | null) => (n !== null ? n : 'N/A'),\n    },\n    {\n        title: 'Reference',\n        dataIndex: 'Reference' as keyof DataEntry,\n        render: (reference: string, record: DataEntry) =>\n            record.Reference_link ? (\n                <a href={record.Reference_link} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {reference}\n                </a>\n            ) : (\n                reference\n            ),\n    }\n];\n\ntype PercentageSDOntoPyramidalCellsProps = {\n    theme?: number;\n}\n\nconst PercentageSDOntoPyramidalCells: React.FC<PercentageSDOntoPyramidalCellsProps> = ({ theme }) => {\n    const [data, setData] = useState<DataEntry[] | null>(null);\n    const [error, setError] = useState<string | null>(null); // State for handling errors\n\n    useEffect(() => {\n        fetch(`${dataPath}/1_experimental-data/connection-anatomy/percentage-SD-onto-pyramidal-cells.json`)\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((fetchedData: DataEntry[]) => setData(fetchedData))\n            .catch((error) => {\n                console.error('Error fetching percentage SD data:', error);\n                setError('Failed to load data.');\n            });\n    }, []);\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    if (!data) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <>\n            <ResponsiveTable<DataEntry>\n                className=\"mb-2\"\n                columns={columns}\n                data={data}\n                rowKey={(record, index) => `${record[\"m-type\"]}-${index}`} // Ensure uniqueness\n            />\n\n            <div className=\"mt-4\">\n                <DownloadButton\n                    theme={theme}\n                    onClick={() => downloadAsJson(data, `Percentage-of-Synapse-Divergence-Onto-Pyramidal-Cells-And-Interneurons-Data.json`)}\n                >\n                    Percentage of synapse divergence onto pyramidal cells and interneurons\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default PercentageSDOntoPyramidalCells;","import React, { useState, useEffect } from 'react';\nimport { downloadAsJson } from '@/utils';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport NumberFormat from '@/components/NumberFormat';\nimport { layerDescription, mtypeDescription } from '@/terms';\nimport { termFactory } from '@/components/Term';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\n\ntype DataEntry = {\n    \"m-type\": string;\n    Specie: string;\n    Weight: string;\n    SO: number;\n    SP: number;\n    SR: number;\n    SLM: number;\n    \"n.neurons\": number;\n    \"n.boutons\": number;\n    Reference: string;\n    Reference_link?: string; // Optional field\n};\n\nconst termDescription = {\n    ...mtypeDescription,\n    ...layerDescription,\n};\n\nconst Term = termFactory(termDescription);\n\nfunction getMtypeDescription(fullMtype: string | undefined) {\n    if (!fullMtype) return null;\n    const [layer, mtype] = fullMtype.split('_');\n    return layerDescription[layer] && mtypeDescription[mtype]\n        ? `${mtypeDescription[mtype]} from ${layerDescription[layer]} layer`\n        : null;\n}\n\nconst columns = [\n    {\n        title: 'MType',\n        dataIndex: 'm-type' as keyof DataEntry,\n        render: (mtype: string) => (\n            <Term term={mtype} description={getMtypeDescription(mtype)} />\n        ),\n    },\n    {\n        title: 'Region',\n        dataIndex: 'Region' as keyof DataEntry,\n        render: (region: string) => region || 'N/A',\n    },\n    {\n        title: 'Specie',\n        dataIndex: 'Specie' as keyof DataEntry,\n        render: (specie: string) => specie || 'N/A',\n    },\n    {\n        title: 'Weight',\n        dataIndex: 'Weight' as keyof DataEntry,\n        render: (weight: string) => weight || 'N/A',\n    },\n    {\n        title: 'SO',\n        dataIndex: 'SO' as keyof DataEntry,\n        render: (so: number) => so.toFixed(2),\n    },\n    {\n        title: 'SP',\n        dataIndex: 'SP' as keyof DataEntry,\n        render: (sp: number) => sp.toFixed(2),\n    },\n    {\n        title: 'SR',\n        dataIndex: 'SR' as keyof DataEntry,\n        render: (sr: number) => sr.toFixed(2),\n    },\n    {\n        title: 'SLM',\n        dataIndex: 'SLM' as keyof DataEntry,\n        render: (slm: number) => slm.toFixed(2),\n    },\n    {\n        title: 'N. Neurons',\n        dataIndex: 'n.neurons' as keyof DataEntry,\n        render: (nNeurons: number) => nNeurons,\n    },\n    {\n        title: 'N. Boutons',\n        dataIndex: 'n.boutons' as keyof DataEntry,\n        render: (nBoutons: number) => nBoutons,\n    },\n    {\n        title: 'Reference',\n        dataIndex: 'Reference' as keyof DataEntry,\n        render: (reference: string, record: DataEntry) =>\n            record.Reference_link && record.Reference_link.trim() !== '' ? (\n                <a\n                    href={record.Reference_link}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    aria-label={`Reference: ${reference}`}\n                >\n                    {reference}\n                </a>\n            ) : (\n                reference\n            ),\n    }\n];\n\ntype SynDivLayProps = {\n    theme?: number;\n}\n\nconst SynDivLay: React.FC<SynDivLayProps> = ({ theme }) => {\n    const [data, setData] = useState<DataEntry[] | null>(null);\n    const [error, setError] = useState<string | null>(null); // State for handling errors\n\n    useEffect(() => {\n        fetch(`${dataPath}/1_experimental-data/connection-anatomy/syn-div-lay.json`)\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((fetchedData: DataEntry[]) => setData(fetchedData))\n            .catch((error) => {\n                console.error('Error fetching syn-div-lay data:', error);\n                setError('Failed to load data.');\n            });\n    }, []);\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    if (!data) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <>\n            <ResponsiveTable<DataEntry>\n                className=\"mb-2\"\n                columns={columns}\n                data={data}\n                rowKey={(record, index) => `${record[\"m-type\"]}-${index}`} // Ensure uniqueness\n            />\n            <div className=\"mt-4\">\n                <DownloadButton\n                    theme={theme}\n                    onClick={() => downloadAsJson(data, `Percentage-of-synapse-divergence-per-layer-Data.json`)}\n                >\n                    Percentage ff synapse divergence per layer\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default SynDivLay;","import React from 'react';\n\n// Component Imports\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\n\n// Table Component Imports\nimport BoutonDensityTable from './connection-anatomy/BoutonDensityTable';\nimport SynsPerConnTable from './connection-anatomy/SynsPerConnTable';\nimport ConnectionProbabilityTable from './connection-anatomy/ConnectionProbabilityTable';\nimport SDPerPrenapticTypeTable from './connection-anatomy/SDPerPrenapticTypeTable';\nimport PercentageSDOntoPyramidalCells from './connection-anatomy/PercentageSDOntoPyramidalCells';\nimport SynDivLayTable from './connection-anatomy/SynDivLay';\n\n// Config Import\nimport { colorName } from './config';\n\nconst ConnectionAnatomyView: React.FC = () => {\n  const theme = 1;\n\n  return (\n    <>\n      {/* Filters Section */}\n      <Filters theme={theme} hasData={true}>\n        <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n          <div className=\"w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n            <StickyContainer>\n              <Title\n                primaryColor={colorName}\n                title=\"Connection Anatomy\"\n                subtitle=\"Experimental Data\"\n                theme={theme}\n              />\n              <div role=\"information\">\n                <InfoBox>\n                  <p>\n                    We collected and organized data on the local connectivity of pairs of pre- and\n                    postsynaptic morphological types (m-types). We used a subset of the data to\n                    constrain the connectome (the set of connections), namely bouton density and\n                    number of synapses per connection, and the rest to validate it.\n                  </p>\n                </InfoBox>\n              </div>\n            </StickyContainer>\n          </div>\n        </div>\n      </Filters>\n\n      {/* Data Container Section */}\n      <DataContainer\n        theme={theme}\n        navItems={[\n          { id: 'boutonDensitySection', label: 'Bouton density' },\n          { id: 'synNumPerConnectionSection', label: 'Syn./Conn.' },\n          { id: 'connectionProbabilitySection', label: 'Conn. Probability' },\n          { id: 'synapseDivergencePerTypeSection', label: 'Syn. Divergence' },\n          { id: 'synapseDivergenceOntoPyramidalCellsSection', label: 'Syn. Divergence over E/I' },\n          { id: 'synapseDivergencePerLayerSection', label: 'Syn. Divergence/layer' },\n        ]}\n      >\n        <Collapsible id=\"boutonDensitySection\" title=\"Bouton density\">\n          <p className=\"mb-4\">\n            Synaptic boutons, or simply, boutons, are enlargements of the axon, visible with light\n            microscopy, that represent putative synaptic contacts. Bouton density is normally\n            expressed as the number of boutons per 100 μm.\n          </p>\n          <BoutonDensityTable theme={theme} />\n        </Collapsible>\n\n        <Collapsible id=\"synNumPerConnectionSection\" className=\"mt-4\" title=\"Number of synapses per connection\">\n          <p className=\"mb-4\">\n            Each connection between pairs of morphological types could include one or multiple\n            synapses, which in part affects the strength of the connection.\n          </p>\n          <SynsPerConnTable theme={theme} />\n        </Collapsible>\n\n        <Collapsible id=\"connectionProbabilitySection\" className=\"mt-4\" title=\"Connection probability\">\n          <p className=\"mb-4\">\n            Connection probability is the number of connected pairs among all the tested pairs.\n            Available experimental data suffers from at least two important limitations. First,\n            the data often come from slice experiments where a subset of connections may have been cut.\n            Second, the method usually does not report precise distance of the pairs and this does\n            not allow an accurate replica in the model.\n          </p>\n          <ConnectionProbabilityTable theme={theme} />\n        </Collapsible>\n\n        <Collapsible id=\"synapseDivergencePerTypeSection\" className=\"mt-4\" title=\"Synapse divergence per presynaptic type\">\n          <p className=\"mb-4\">\n            We can express the synapse divergence also in relation to the postsynaptic target.\n            Here, we calculate the percentage of synapses made by a morphological type onto\n            pyramidal cells or interneurons.\n          </p>\n          <SDPerPrenapticTypeTable theme={theme} />\n        </Collapsible>\n\n        <Collapsible id=\"synapseDivergenceOntoPyramidalCellsSection\" className=\"mt-4\" title=\"Percentage of synapse divergence onto pyramidal cells and interneurons\">\n          <p className=\"mb-4\">\n            We can express the synapse divergence also in relation to the postsynaptic target.\n            Here, we calculate the percentage of synapses made by a morphological type onto\n            pyramidal cells or interneurons.\n          </p>\n          <PercentageSDOntoPyramidalCells theme={theme} />\n        </Collapsible>\n\n        <Collapsible id=\"synapseDivergencePerLayerSection\" className=\"mt-4\" title=\"Percentage of synapse divergence per layer\">\n          <p className=\"mb-4\">\n            We present here the distribution of synapse divergence per morphological type across\n            the different layers.\n          </p>\n          <SynDivLayTable theme={theme} />\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default ConnectionAnatomyView;","import Head from 'next/head';\nimport ConnectionAnatomyView from '../../views/1_experimental-data/ConnectionAnatomy';\n\nexport default function ConnectionAnatomyPage() {\n  const metadata = {\n    title: 'Connection Anatomy - Experimental Data | The Hippocampus Hub',\n    description:\n      'Explore comprehensive data on connection anatomy, including synaptic density, connectivity, and anatomical pathways in the hippocampus. Analyze the synapse distribution across different regions and populations of neurons.',\n    keywords: [\n      'Connection Anatomy',\n      'Synaptic Density',\n      'Hippocampus',\n      'Experimental Data',\n      'Neuroscience',\n      'Anatomical Connections',\n      'Synapse Distribution',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <ConnectionAnatomyView />\n    </>\n  );\n}","import React from 'react';\n\nexport type TermDescription = Record<string, string>;\n\n\nexport const layerDescription: TermDescription = {\n  SLM: 'Stratum Lacunosum-Moleculare',\n  SR: 'Stratum Radiatum',\n  SP: 'Stratum Pyramidal',\n  SO: 'Stratum Oriens',\n};\n\nexport const mtypeDescription: TermDescription = {\n  PPA: 'Perforant Pathway Associated Cell',\n  SCA: 'Schaffer Collateral Associated Cell',\n  AA: 'Axon Axonic Cell',\n  BS: 'Bistratified Cell',\n  PVBC: 'PV+ Basket Cell',\n  CCKBC: 'CCK+ Basket Cell',\n  PC: 'Pyramidal Cell',\n  BP: 'Back-Projecting Cell',\n  OLM: 'Oriens Lacunosum-Moleculare Cell',\n  Tri: 'Trilaminar Cell',\n  Ivy: 'Ivy Cell',\n};\n\nexport const stypeDescription: TermDescription = {\n  E1: 'Excitatory facilitating',\n  E2: 'Excitatory depressing',\n  I1: 'Inhibitory facilitating',\n  I2: 'Inhibitory depressing',\n  I3: 'Inhibitory pseudo linear',\n};\n\nexport const etypeDescription: TermDescription = {\n  cADpyr: 'continuous Accommodating (Adapting) for pyramidal cells',\n  cAC: 'continuous Accommodating',\n  bAC: 'burst Accommodating',\n  cNAC: 'continuous Non-accommodating',\n  bNAC: 'burst Non-accommodating',\n  dNAC: 'delayed Non-accommodating',\n  cSTUT: 'continuous Stuttering',\n  bSTUT: 'burst Stuttering',\n  dSTUT: 'delayed Stuttering',\n  cIR: 'continuous Irregular',\n  bIR: 'burst Irregular',\n};\n\nexport const pathwayDescription: TermDescription = {\n  gsyn: 'The peak conductance (in nS) for a single synaptic contact',\n  U: 'Utilization of synaptic efficacy - analogous to the transmitter release probability at a single synaptic contact',\n  D: 'Time constant (in ms) for recovery from depression',\n  F: 'Time constant (in ms) for recovery from facilitation',\n};\n\nexport const formattedTerm: Record<string, React.ReactNode> = {\n  gsyn: (<span>g<sub>syn</sub></span>),\n};\n","import { accentColors } from '../../config';\nimport { Color } from '../../types';\n\nexport const sectionTitle = 'Experimental Data';\nexport const colorName: Color = 'blue-2';\nexport const primaryColor = accentColors[colorName];\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"responsiveTable\":\"styles_responsiveTable__njQH4\",\"ant-table-cell\":\"styles_ant-table-cell__Fj0OS\",\"ant-table-cell-auto\":\"styles_ant-table-cell-auto__Yw8kj\",\"responsiveTablOdd\":\"styles_responsiveTablOdd__ix6_m\",\"responsiveTablEven\":\"styles_responsiveTablEven__sIcPO\",\"highlightBackground\":\"styles_highlightBackground__eWdTL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__pHcWR\"};"],"names":["window","__NEXT_P","push","__webpack_require__","__webpack_exports__","Z","value","significantFigures","thousandSeparator","prefix","suffix","param","formatNumber","num","parseFloat","Number","isFinite","formatted","toLocaleString","maximumSignificantDigits","toPrecision","concat","renderHighlightValue","nestedValue","_value","highlightValue","record","isHighlight","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","columns","data","restProps","columnWidths","setColumnWidths","useState","useEffect","newColumnWidths","map","maxTextWidth","reduce","max","dataIndex","column","undefined","text","String","textWidth","calculateTextWidth","font","canvas","document","createElement","context","getContext","measureText","width","Math","min","tableColumns","index","_column_children","title","responsive","render","children","child","key","nestedTableData","childrenValue","jsxs","filter","item","nestedColumns","Table","rowClassName","classes","rowKey","showHeader","tableLayout","dataSource","pagination","bordered","size","scroll","x","centered","styles","classNames","termFactory","termDescription","termFormatter","term","description","currentDescription","formattedTerm","Tooltip","destroyTooltipOnHide","span","style","mtypeDescription","layerDescription","Term","jsx_runtime","mtype","getMtypeDescription","fullMtype","layer","split","Fragment","mean","NumberFormat","std","sem","ref","isArray","Array","ref_link","r","React","a","href","target","rel","length","connection_anatomy_BoutonDensityTable","theme","setData","fetch","dataPath","then","response","json","fetchedData","ResponsiveTable","small","sup","br","DownloadButton","onClick","downloadAsJson","h3","h4","p","ul","li","from","to","region","specie","age","weight","nConns","trim","aria-label","connection_anatomy_SynsPerConnTable","error","setError","ok","status","catch","console","pre","post","n","N","reference","Reference_link","connection_anatomy_ConnectionProbabilityTable","Pre","Post","Specie","Reference","n_cells","SDPerPrenapticTypeTable","pc","toFixed","int","connection_anatomy_PercentageSDOntoPyramidalCells","so","sp","sr","slm","nNeurons","nBoutons","connection_anatomy_SynDivLay","ConnectionAnatomy","Filters","hasData","StickyContainer","Title","primaryColor","colorName","subtitle","role","InfoBox","DataContainer","navItems","id","label","Collapsible","BoutonDensityTable","SynsPerConnTable","ConnectionProbabilityTable","PercentageSDOntoPyramidalCells","SynDivLayTable","ConnectionAnatomyPage","metadata","keywords","author","creator","publisher","Head","meta","name","content","join","ConnectionAnatomyView","SLM","SR","SP","SO","PPA","SCA","AA","BS","PVBC","CCKBC","PC","BP","OLM","Tri","Ivy","stypeDescription","E1","E2","I1","I2","I3","etypeDescription","cADpyr","cAC","bAC","cNAC","bNAC","dNAC","cSTUT","bSTUT","dSTUT","cIR","bIR","pathwayDescription","gsyn","U","D","F","accentColors","module","exports"],"sourceRoot":""}