{"version":3,"file":"static/chunks/pages/experimental-data/cell-density-4a898d043b4a1184.js","mappings":"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","sources":["webpack://_N_E/?8462","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/ResponsiveTable/index.tsx","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/views/1_experimental-data/cell-density/CellDensity.tsx","webpack://_N_E/./src/views/1_experimental-data/CellDensity.tsx","webpack://_N_E/./src/pages/experimental-data/cell-density.tsx","webpack://_N_E/./src/components/ResponsiveTable/styles.module.scss","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/cell-density\",\n      function () {\n        return require(\"private-next-pages/experimental-data/cell-density.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/experimental-data/cell-density\"])\n      });\n    }\n  ","import React from 'react';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nexport function formatNumber(value, significantFigures = 5, thousandSeparator = true, prefix = '', suffix = '') {\n  const num = parseFloat(value);\n\n  if (!Number.isFinite(num)) return value;\n\n  const formatted = thousandSeparator\n    ? num.toLocaleString('en', { maximumSignificantDigits: significantFigures })\n    : num.toPrecision(significantFigures);\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  return formatNumber(value, significantFigures, thousandSeparator, prefix, suffix);\n}\n\n\nexport default NumberFormat;\n","import React, { useEffect, useState } from 'react';\nimport { Table } from 'antd';\nimport { ColumnType as AntColumnType, ColumnGroupType as AntColumnGroupType, TableProps } from 'antd/lib/table';\nimport { Breakpoint } from 'antd/lib/_util/responsiveObserve';\n\nimport classes from './styles.module.scss';\n\ninterface ColumnType<Type extends object & { isHighlight?: boolean }> extends Omit<AntColumnType<Type>, 'dataIndex'> {\n  dataIndex?: keyof Type;\n}\ninterface GroupColumnType<Type extends object & { isHighlight?: boolean }> extends AntColumnGroupType<Type> { }\n\ninterface ResponsiveTableProps<Type extends object & { isHighlight?: boolean }> extends Omit<TableProps<Type>, 'columns'> {\n  data?: Type[];\n  columns: (ColumnType<Type> | GroupColumnType<Type>)[] | any;\n}\n\nconst renderHighlightValue = (record) => (nestedValue, _value) =>\n  highlightValue(nestedValue, record.isHighlight);\n\nconst highlightValue = (nestedValue, isHighlight) =>\n  isHighlight ? <div className=\"text-bold\">{nestedValue}</div> : nestedValue;\n\n// Utility function to calculate the width of text\nfunction calculateTextWidth(text: string, font: string = '16px Arial'): number {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  if (context) {\n    context.font = font;\n    return context.measureText(text).width;\n  }\n  return 0;\n}\n\nfunction ResponsiveTable<Type extends object & { isHighlight?: boolean }>({\n  columns,\n  data = [], // Provide a default value of an empty array\n  ...restProps\n}: ResponsiveTableProps<Type>) {\n  const [columnWidths, setColumnWidths] = useState<number[]>([]);\n  const font = '14px Arial'; // Set the font to match your table\n\n  useEffect(() => {\n    const newColumnWidths = columns.map((column) => {\n      const maxTextWidth = data.reduce((max, record) => {\n        const dataIndex = (column as ColumnType<Type>).dataIndex;\n        if (dataIndex && record[dataIndex] !== undefined) {\n          const text = String(record[dataIndex]);\n          const textWidth = calculateTextWidth(text, font);\n          return Math.max(max, textWidth);\n        }\n        return max;\n      }, 0);\n      return Math.min(maxTextWidth + 20, 200); // Add some padding and a max limit\n    });\n\n    setColumnWidths(newColumnWidths);\n  }, [columns, data]);\n\n  const expandableColumn = {\n    title: null,\n    dataIndex: null,\n    render: (_value, record, index) => {\n      const nestedTableData = columns\n        .map((column) => {\n          const dataIndex = (column as ColumnType<Type>).dataIndex;\n          if (dataIndex) {\n            return {\n              key: column.title,\n              value: record[dataIndex],\n            };\n          }\n\n          const children = (column as GroupColumnType<Type>).children;\n          if (children) {\n            const childrenValue = children.map((child) => (\n              <div key={child.key}>\n                {child.title}: {record[(child as ColumnType<Type>).dataIndex]}\n              </div>\n            ));\n            return {\n              key: column.title,\n              value: childrenValue,\n            };\n          }\n\n          return null;\n        })\n        .filter((item) => item !== null); // Filter out null values\n\n      const nestedColumns: ColumnType<{ key: any; value: any }>[] = [\n        {\n          dataIndex: 'key',\n          title: 'Field',\n          render: renderHighlightValue(record),\n        },\n        {\n          dataIndex: 'value',\n          title: 'Value',\n          render: renderHighlightValue(record),\n        },\n      ];\n\n      return (\n        <Table\n          className=\"responsiveTable no-left-margin nested-table xs-column\"\n          rowClassName={index % 2 ? classes.responsiveTablEven : classes.responsiveTablOdd}\n          rowKey={(record: any, index) => `${record.key}__${index}`}\n          showHeader={false}\n          columns={nestedColumns}\n          tableLayout=\"auto\" // Use auto layout for nested table as well\n          dataSource={nestedTableData as object[]} // Ensure dataSource does not contain null values\n          pagination={false}\n        />\n      );\n    },\n    responsive: ['xs' as Breakpoint],\n  };\n\n  const tableColumns = columns\n    .map((column, index) => ({\n      ...column,\n      title: column.title,\n      dataIndex: (column as ColumnType<Type>).dataIndex,\n      responsive: ['sm' as Breakpoint],\n      render: (value: any, record: Type, index: number) =>\n        highlightValue(column.render ? column.render(value, record, index) : value, record.isHighlight),\n      children: (column as GroupColumnType<Type>).children?.map((child) => ({\n        render: (value: any, record: Type) => highlightValue(value, record.isHighlight),\n        ...child,\n      })),\n      width: column.key === 'yourSpecificKey' ? columnWidths[index] : undefined, // Set width dynamically for a specific column\n    }))\n    .concat(expandableColumn as any);\n\n  const { className = '' } = restProps;\n\n  return (\n    <Table<Type>\n      bordered\n      size=\"small\"\n      scroll={{ x: true }}\n      rowKey={(record: any) => record.key || `${record.dataIndex}__`}\n      pagination={false}\n      columns={tableColumns}\n      dataSource={data}\n      rowClassName={(record: Type, index: number) => (index % 2 ? classes.responsiveTablEven : classes.responsiveTablOdd)}\n      {...restProps}\n      className={`responsiveTable no-left-margin nested-table xs-column text-nowrap ${className}`}\n      tableLayout=\"auto\" // Ensure layout is auto for dynamic column sizing\n    />\n  );\n}\n\nexport default ResponsiveTable;","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import React, { useState, useEffect } from 'react';\nimport { FixedType } from 'rc-table/lib/interface';\nimport { dataPath } from \"../../../config\";\n\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport NumberFormat from '@/components/NumberFormat';\nimport { downloadAsJson } from '@/utils';\nimport DownloadButton from '@/components/DownloadButton';\n\ntype CellDensityEntry = {\n    Cell_type: string;\n    Region: string;\n    Specie: string;\n    Age: string;\n    mean: number;\n    n_animals: number;\n    std: number;\n    SEM: number;\n    Reference: string;\n    Reference_link: string | null;\n};\n\nconst CellDensityColumns = [\n    {\n        title: 'Cell Type',\n        dataIndex: 'Cell_type' as keyof CellDensityEntry,\n        fixed: 'left' as FixedType,\n    },\n    {\n        title: 'Region',\n        dataIndex: 'Region' as keyof CellDensityEntry,\n    },\n    {\n        title: 'Species',\n        dataIndex: 'Specie' as keyof CellDensityEntry,\n    },\n    {\n        title: 'Age',\n        dataIndex: 'Age' as keyof CellDensityEntry,\n    },\n    {\n        title: 'Mean Density',\n        dataIndex: 'mean' as keyof CellDensityEntry,\n        render: (value: number) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'n',\n        dataIndex: 'n_animals' as keyof CellDensityEntry,\n    },\n    {\n        title: 'Std Dev',\n        dataIndex: 'std' as keyof CellDensityEntry,\n        render: (value: number) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'SEM',\n        dataIndex: 'SEM' as keyof CellDensityEntry,\n        render: (value: number) => <NumberFormat value={value} />,\n    },\n    {\n        title: 'Reference',\n        dataIndex: 'Reference' as keyof CellDensityEntry,\n        render: (value: string, record: CellDensityEntry) =>\n            record.Reference_link ? (\n                <a href={record.Reference_link} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {value}\n                </a>\n            ) : (\n                <>{value}</>\n            ),\n    },\n];\n\ntype CellDensityTableProps = {\n    theme?: number;\n};\n\nconst CellDensityTable: React.FC<CellDensityTableProps> = ({ theme }) => {\n    const [data, setData] = useState<CellDensityEntry[]>([]);\n\n    useEffect(() => {\n        fetch(`${dataPath}/1_experimental-data/cell-density/cell-density.json`)\n            .then(response => response.json())\n            .then(fetchedData => setData(fetchedData));\n    }, []);\n\n    if (!data.length) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <>\n            <ResponsiveTable<CellDensityEntry>\n                className=\"mt-3\"\n                data={data}\n                columns={CellDensityColumns}\n                scroll={{ x: true }}\n            />\n\n            <div className=\"mt-4\">\n                <DownloadButton onClick={() => downloadAsJson(data, 'cell-density-data.json')} theme={theme}>\n                    Download Cell Density Data\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default CellDensityTable;","import React from 'react';\n\n// Component Imports\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\n\n// Table Component Import\nimport CellDensityTable from './cell-density/CellDensity';\n\nconst CellDensityView: React.FC = () => {\n    const theme = 1;\n\n    return (\n        <>\n            {/* Filters Section */}\n            <Filters theme={theme}>\n                <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n                    <div className=\"w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n                        <StickyContainer>\n                            <Title\n                                title=\"Cell Density\"\n                                subtitle=\"Experimental Data\"\n                                theme={theme}\n                            />\n                            <div role=\"information\">\n                                <InfoBox>\n                                    <p>\n                                        We collected data on cell density for different neuronal classes.\n                                    </p>\n                                </InfoBox>\n                            </div>\n                        </StickyContainer>\n                    </div>\n                </div>\n            </Filters>\n\n            {/* Data Container Section */}\n            < DataContainer\n                theme={theme}\n                navItems={\n                    [\n                        { id: 'cellDensitySection', label: 'Cell Density' },\n                    ]}\n            >\n                <Collapsible\n                    id=\"cellDensitySection\"\n                    className=\"mt-4\"\n                    title=\"Cell Density\"\n                >\n                    <p className='text-base mb-4'>\n                        Cell density is the number of cells per unitary volume.\n                    </p>\n                    <CellDensityTable theme={theme} />\n                </Collapsible>\n            </DataContainer >\n        </>\n    );\n};\n\nexport default CellDensityView;","import Head from 'next/head';\nimport CellDensityView from '@/views/1_experimental-data/CellDensity';\n\nexport default function CellDensityPage() {\n  const metadata = {\n    title: 'Cell Density - Experimental Data | The Hippocampus Hub',\n    description: 'Explore detailed data on cell density for different neuronal classes in the hippocampus. View information about the number of cells per unit volume across various regions and species.',\n    keywords: [\n      'Cell Density',\n      'Hippocampus',\n      'Experimental Data',\n      'Neuroscience',\n      'Neuronal Classes',\n      'Cellular Data',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <CellDensityView />\n    </>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"responsiveTable\":\"styles_responsiveTable__njQH4\",\"ant-table-cell\":\"styles_ant-table-cell__Fj0OS\",\"ant-table-cell-auto\":\"styles_ant-table-cell-auto__Yw8kj\",\"responsiveTablOdd\":\"styles_responsiveTablOdd__ix6_m\",\"responsiveTablEven\":\"styles_responsiveTablEven__sIcPO\",\"highlightBackground\":\"styles_highlightBackground__eWdTL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};"],"names":["window","__NEXT_P","push","__webpack_require__","__webpack_exports__","Z","value","significantFigures","thousandSeparator","prefix","suffix","param","formatNumber","num","parseFloat","Number","isFinite","formatted","toLocaleString","maximumSignificantDigits","toPrecision","concat","renderHighlightValue","nestedValue","_value","highlightValue","record","isHighlight","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","columns","data","restProps","columnWidths","setColumnWidths","useState","useEffect","newColumnWidths","map","maxTextWidth","reduce","max","dataIndex","column","undefined","text","String","textWidth","calculateTextWidth","font","canvas","document","createElement","context","getContext","measureText","width","Math","min","tableColumns","index","_column_children","title","responsive","render","children","child","key","nestedTableData","childrenValue","jsxs","filter","item","nestedColumns","Table","rowClassName","classes","rowKey","showHeader","tableLayout","dataSource","pagination","bordered","size","scroll","x","centered","styles","classNames","CellDensityColumns","fixed","jsx_runtime","NumberFormat","Reference_link","a","href","target","rel","Fragment","CellDensity","theme","setData","fetch","dataPath","then","response","json","fetchedData","length","ResponsiveTable","DownloadButton","onClick","downloadAsJson","_1_experimental_data_CellDensity","Filters","StickyContainer","Title","subtitle","role","InfoBox","p","DataContainer","navItems","id","label","Collapsible","CellDensityTable","CellDensityPage","metadata","description","keywords","author","creator","publisher","Head","meta","name","content","join","CellDensityView","module","exports"],"sourceRoot":""}