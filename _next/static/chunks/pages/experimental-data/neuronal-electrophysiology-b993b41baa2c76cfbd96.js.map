{"version":3,"sources":["webpack://_N_E/./src/components/ESData/index.tsx","webpack://_N_E/./src/components/NexusPlugin/index.tsx","webpack://_N_E/./src/components/ExpTraceTable/index.tsx","webpack://_N_E/./src/views/experimental/NeuronElectrophysiology.tsx","webpack://_N_E/./src/pages/experimental-data/neuronal-electrophysiology.tsx","webpack://_N_E/./src/queries/es/index.ts","webpack://_N_E/./src/views/experimental/config.ts","webpack://_N_E/?6832","webpack://_N_E/./src/styles/experimental-data/neuron-electrophysiology.module.scss"],"names":["query","children","React","data","loading","error","state","setState","nexus","useNexusContext","View","elasticSearchQuery","hippocampus","then","hits","NexusPluginLazy","dynamic","ssr","props","entryToArray","entry","Array","isArray","getAgentLabel","agent","name","givenName","familyName","getAgentType","traces","agentIds","reduce","ids","trace","currIds","contribution","map","filter","Boolean","from","Set","useState","agentMap","setAgentMap","useEffect","length","contributionEsQuery","size","terms","esDocuments","esDocument","_source","agents","id","label","type","keyBy","className","annotation","hasBody","sort","a1","a2","router","useRouter","setQuery","push","pathname","undefined","shallow","currentEtype","etype","currentInstance","etype_instance","etypes","Object","keys","instances","getAndSortTraces","m1","m2","Filters","backgroundAlt","Title","primaryColor","colorName","title","subtitle","InfoBox","color","text","styles","List","list","value","onSelect","instance","anchor","DataContainer","Collapsible","ESData","electroPhysiologyDataQuery","NexusPlugin","resource","nexusClient","href","encodeURIComponent","etypeTracesDataQuery","About","MainLayout","experiment","bool","must","term","nested","path","match","mtypeExpMorphologyListDataQuery","mtype","should","morphologyDataQuery","must_not","exists","accentColors","window","__NEXT_P","module","exports"],"mappings":"suBAuDA,IAvCsC,SAAC,GAGjC,IAFJA,EAEI,EAFJA,MACAC,EACI,EADJA,SACI,EACsBC,WAIvB,CACDC,KAAM,KACNC,SAAS,EACTC,MAAO,OARL,eACGC,EADH,KACUC,EADV,KAUEC,GAAQC,SAmBd,OAjBAP,aAAgB,WACVF,IACFO,EAAS,EAAD,KAAMD,GAAN,IAAaF,SAAS,EAAMD,KAAM,QAC1CK,EAAME,KAAKC,mBACTC,QACAA,YACAA,kBACAZ,GAECa,MAAK,SAAAV,GAAI,OACRI,EAAS,EAAD,KAAMD,GAAN,IAAaF,SAAS,EAAOD,KAAMA,EAAKW,KAAKA,WAPzD,OASS,SAAAT,GAAK,OAAIE,EAAS,EAAD,KAAMD,GAAN,IAAaF,SAAS,EAAOC,iBAGxD,CAACL,KAGF,8BACGC,EAASK,EAAMH,KAAMG,EAAMF,QAASE,EAAMD,W,gSC5CjD,IAAMU,GAAkBC,E,QAAAA,UAAQ,kBAAM,gCAA0B,CAAEC,KAAK,EAAP,yHAShE,IAP0D,SAACC,GACzD,OACE,SAACH,E,qWAAD,IAAqBG,M,yRCIzB,SAASC,EAAaC,GACpB,OAAIC,MAAMC,QAAQF,GAAeA,EAE1B,CAACA,GAGV,SAASG,EAAcC,GACrB,OAAOA,EAAMC,KACTD,EAAMC,KADH,UAEAD,EAAME,UAFN,YAEmBF,EAAMG,YAGlC,SAASC,EAAaJ,GACpB,OAAOA,EAAMC,KACT,cACA,SAGN,IA4EA,EA5EoD,SAAC,GAAoB,QAAlBI,cAAkB,MAAT,GAAS,EACjErB,GAAQC,SAERqB,EAAWD,EAAOE,QAAO,SAACC,EAAeC,GAC7C,IAAMC,EAAUf,EAAac,EAAME,cAChCC,KAAI,SAAAD,GAAY,uBAAIA,EAAaX,aAAjB,aAAI,EAAqB,UACzCa,OAAOC,SAEV,OAAOjB,MAAMkB,KAAK,IAAIC,IAAJ,kBAAYR,IAAZ,OAAoBE,QACrC,IAToE,GAWvCO,cAA8B,MAAvDC,EAXgE,KAWtDC,EAXsD,KA4CvE,OA/BAC,gBAAU,WACR,GAAKd,EAASe,OAAd,CAEA,IAAMC,EAAsB,CAC1BP,KAAM,EACNQ,KAAM,IACN/C,MAAO,CACLgD,MAAO,CACL,IAAOlB,KAKbtB,EAAME,KAEHC,mBAAmBC,QAAiBA,YAAqBA,kBAA2BkC,GAEpFjC,MAAK,SAAAV,GAAI,OAAIA,EAAKW,KAAKA,QAEvBD,MAAK,SAAAoC,GAAW,OAAIA,EAAYb,KAAI,SAAAc,GAAU,OAAIA,EAAWC,cAE7DtC,MAAK,SAAAuC,GAAM,OAAIA,EAAOhB,KAAI,SAAAZ,GAAK,MAAK,CACnC6B,GAAI7B,EAAM,OACV8B,MAAO/B,EAAcC,GACrB+B,KAAM3B,EAAaJ,UAGpBX,MAAK,SAAAuC,GAAM,OAAII,WAAMJ,EAAQ,SAC7BvC,MAAK,SAAA6B,GAAQ,OAAIC,EAAYD,SAC/B,CAACb,KAGF,gBAAK4B,UAAU,oCAAf,UACE,8BACE,4BACE,2BACE,kCAEA,oCACA,+CAGJ,2BACG5B,EAAOO,KAAI,SAAAH,GAAK,OACf,2BACE,eAAIwB,UAAU,kBAAd,SAAiCxB,EAAMR,QACvC,wBAAKQ,EAAMyB,WAAWC,QAAQL,SAC9B,wBACGZ,GAAYvB,EAAac,EAAME,cAC7BC,KAAI,SAAAD,GAAY,OAAIO,EAASP,EAAaX,MAAM,WAChDoC,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGN,KAAOO,EAAGP,KAAO,GAAK,KAC1CnB,KAAI,SAAAZ,GAAK,OAAI,4BAAyBA,EAAM8B,MAA/B,KAAsC,oBAA3B9B,EAAM8B,cAP5BrB,EAAMR,iB,ioCCrE3B,IAuIA,EAvI0C,WACxC,IAAMsC,GAASC,iBACTxD,GAAQC,SAERT,E,qWAAQ,CAAH,GACN+D,EAAO/D,OAGNiE,EAAW,SAACjE,GAChB+D,EAAOG,KAAK,CAAElE,QAAOmE,SAAUJ,EAAOI,eAAYC,EAAW,CAAEC,SAAS,KAgBpEC,EAAuBtE,EAAMuE,MAC7BC,EAA0BxE,EAAMyE,eAEhCC,EAASC,OAAOC,KAAK/C,GAAQ+B,OAC7BiB,EAAYP,EACdzC,EAAOyC,GAAcV,OACrB,GAEEkB,EAAmB,SAAC7B,GACxB,OAAOA,EACJb,KAAI,SAAAc,GAAU,OAAIA,EAAWC,WAC7BS,MAAK,SAACmB,EAAIC,GAAL,OAAaD,EAAGtD,KAAOuD,EAAGvD,KAAQ,GAAK,MAGjD,OACE,iCACE,SAACwD,EAAA,EAAD,CACEC,eAAa,EADf,UAGE,iBAAKzB,UAAU,sBAAf,WACE,iBAAKA,UAAU,qBAAf,WACE,SAAC0B,EAAA,EAAD,CACEC,aAAcC,KACdC,OAAO,uCAAa,kBAAb,wBACPC,SAAS,uBAEX,SAACC,EAAA,EAAD,CACEC,MAAM,SACNC,KAAK,6SAIT,gBAAKjC,UAAU,qCAAf,UACE,iBAAKA,UAAWkC,aAAhB,WACE,gBAAKlC,UAAWkC,iBAAhB,+BACA,iBAAKlC,UAAWkC,iBAAhB,WACE,SAACC,EAAA,EAAD,CACEC,KAAMnB,EACNoB,MAAOxB,EACPgB,MAAM,SACNG,MAAOJ,KACPU,SAtDC,SAACxB,GAChBN,EAAS,CACPM,QACAE,eAAgBD,QAqDN,mBACA,mBACA,mBACA,SAACoB,EAAA,EAAD,CACEC,KAAMhB,EACNiB,MAAOtB,EACPc,MAAK,+BAA0BT,EAAUhC,OAApC,KACL4C,MAAOJ,KACPU,SA1DI,SAACC,GACnB/B,EAAS,CACPM,MAAOD,EACPG,eAAgBuB,KAwDJC,OAAO,uBAQnB,gBAAK5C,GAAG,WAELiB,KAAkBE,IAAmB,UAAC0B,EAAA,EAAD,YACtC,SAACC,EAAA,EAAD,CAAab,MAAK,8CAAyChB,EAAzC,YAAyDE,GAA3E,UACE,SAAC4B,EAAA,EAAD,CAAQpG,OAAOqG,QAA2B/B,EAAcE,GAAxD,SACG,SAAAvB,GAAW,OACV,gCACKA,KAAiBA,EAAYJ,SAC9B,iCACE,SAACyD,EAAA,EAAD,CACE7E,KAAK,2BACL8E,SAAUtD,EAAY,GAAGE,QACzBqD,YAAahG,KAEf,gBAAKiD,UAAU,aAAf,UACE,SAAC,IAAD,CACEA,UAAU,OACVF,KAAK,UACLR,KAAK,QACL0D,KAAI,8CAAyCC,mBAAmBlC,IAJlE,oDAgBd,UAAC2B,EAAA,EAAD,CAAab,MAAM,aAAa7B,UAAU,OAA1C,WACE,eAAIA,UAAU,OAAd,qCAEA,SAAC2C,EAAA,EAAD,CAAQpG,OAAO2G,QAAqBrC,GAApC,SACG,SAAArB,GAAW,OACV,gCACKA,IACD,SAAC,EAAD,CAAepB,OAAQiD,EAAiB7B,oBCzI3C,SAAS2D,IACtB,OACE,SAACC,EAAA,EAAD,WACE,SAAC,EAAD,Q,2ICFC,IAgCMR,EAA6B,SACxC9B,EACAuC,GAEA,OAAKvC,GAAUuC,EAIR,CACLvE,KAAM,EACNQ,KAAM,IACN/C,MAAO,CACL+G,KAAM,CACJ1E,OAAQ,CACN,CACE0E,KAAM,CACJC,KAAM,CACJ,CAAEC,KAAM,CAAE,QAAS,aAIzB,CACEF,KAAM,CACJC,KAAM,CACJC,KAAM,CAAE,WAAYH,MAI1B,CACEI,OAAQ,CACNC,KAAM,qBACNnH,MAAO,CACL+G,KAAM,CACJ1E,OAAQ,CAAE4E,KAAM,CAAE,+BAAgC1C,QAK1D,CACE2C,OAAQ,CACNC,KAAM,eACNnH,MAAO,CACL+G,KAAM,CACJC,KAAM,CACJI,MAAO,CAAE,8BAA+B,4BAvCjD,MAwGEC,EAAkC,SAC7CC,GAEA,OAAKA,EAIE,CACL/E,KAAM,EACNQ,KAAM,IACN/C,MAAO,CACL+G,KAAM,CACJ1E,OAAQ,CACN,CACE0E,KAAM,CACJQ,OAAQ,CACN,CACEN,KAAM,CACJ,aAAe,OAMzB,CACEF,KAAM,CACJQ,OAAQ,CACN,CACEN,KAAM,CACJ,QAAS,yBAMnB,CACEC,OAAQ,CACNC,KAAM,qBACNnH,MAAO,CACL+G,KAAM,CACJ1E,OAAQ,CACN,CACE4E,KAAM,CACJ,+BAAgCK,aAvC7C,MAqDEE,EAAsB,SACjCF,EACAtB,GAEA,OAAIsB,GAAUtB,EAIP,CACLzD,KAAM,EACNQ,KAAM,IACN/C,MAAO,CACL+G,KAAM,CACJ1E,OAAQ,CACN,CACE0E,KAAM,CACJQ,OAAQ,CACN,CACEN,KAAM,CACJ,aAAe,OAMzB,CACEF,KAAM,CACJQ,OAAQ,CACN,CACEN,KAAM,CACJ,QAAS,wBAMnB,CACEF,KAAM,CACJQ,OAAQ,CACN,CACEN,KAAM,CACJ,WAAYjB,WApCrB,MA2GEW,EAAuB,SAClCpC,GAEA,OAAKA,EAIE,CACLhC,KAAM,EACNQ,KAAM,IACN/C,MAAO,CACL+G,KAAM,CACJ1E,OAAQ,CACN,CACE0E,KAAM,CACJC,KAAM,CACJ,CAAEC,KAAM,CAAE,QAAS,aAIzB,CACEF,KAAM,CACJU,SAAU,CACRC,OAAQ,CACN,MAAS,WAKjB,CACER,OAAQ,CACNC,KAAM,qBACNnH,MAAO,CACL+G,KAAM,CACJ1E,OAAQ,CAAE4E,KAAM,CAAE,+BAAgC1C,QAK1D,CACE2C,OAAQ,CACNC,KAAM,eACNnH,MAAO,CACL+G,KAAM,CACJC,KAAM,CACJI,MAAO,CAAE,8BAA+B,4BAzCjD,O,iFC7TE/B,EAAmB,SACJsC,KAAatC,I,sBCJpCuC,OAAOC,SAAWD,OAAOC,UAAY,IAAI3D,KAAK,CAC7C,gDACA,WACE,OAAO,EAAQ,U,iBCHvB4D,EAAOC,QAAU,CAAC,SAAW,2CAA2C,eAAiB,iDAAiD,aAAe,+CAA+C,aAAe,kD","file":"static/chunks/pages/experimental-data/neuronal-electrophysiology-b993b41baa2c76cfbd96.js","sourcesContent":["import React from 'react';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { ElasticSearchViewQueryResponse } from '@bbp/nexus-sdk';\n\nimport { hippocampus } from '../../config';\n\n\ntype ESDataProps = {\n  query: Record<string, unknown> | null;\n  children: (\n    data: ElasticSearchViewQueryResponse<any>['hits']['hits'] | null,\n    loading: boolean,\n    error: any,\n  ) => React.ReactNode;\n};\n\nconst ESData: React.FC<ESDataProps> = ({\n  query,\n  children,\n}) => {\n  const [state, setState] = React.useState<{\n    data: ElasticSearchViewQueryResponse<any>['hits']['hits'] | null;\n    loading: boolean;\n    error: any;\n  }>({\n    data: null,\n    loading: false,\n    error: null,\n  });\n  const nexus = useNexusContext();\n\n  React.useEffect(() => {\n    if (query) {\n      setState({ ...state, loading: true, data: null });\n      nexus.View.elasticSearchQuery(\n        hippocampus.org,\n        hippocampus.project,\n        hippocampus.datasetViewId,\n        query,\n      )\n        .then(data =>\n          setState({ ...state, loading: false, data: data.hits.hits }),\n        )\n        .catch(error => setState({ ...state, loading: false, error }));\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query]);\n\n  return (\n    <>\n      {children(state.data, state.loading, state.error)}\n    </>\n  );\n};\n\nexport default ESData;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nimport { NexusPluginClassProps } from './nexus-plugin';\n\n\nconst NexusPluginLazy = dynamic(() => import('./nexus-plugin'), { ssr: false });\n\nconst ImageViewer: React.FC<NexusPluginClassProps<any>> = (props) => {\n  return (\n    <NexusPluginLazy {...props} />\n  );\n};\n\n\nexport default ImageViewer;\n","import React, { useState, useEffect } from 'react';\nimport { keyBy } from 'lodash';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport { hippocampus } from '../../config';\nimport ImageViewer from '../ImageViewer';\n\nimport styles from './styles.module.scss'\n\n\ntype ExpTraceTableProps = {\n  traces: Record<string, any>[];\n};\n\nfunction entryToArray(entry) {\n  if (Array.isArray(entry)) return entry;\n\n  return [entry];\n}\n\nfunction getAgentLabel(agent) {\n  return agent.name\n    ? agent.name\n    : `${agent.givenName} ${agent.familyName}`;\n}\n\nfunction getAgentType(agent) {\n  return agent.name\n    ? 'institution'\n    : 'person';\n}\n\nconst ExpTraceTable: React.FC<ExpTraceTableProps> = ({ traces = [] }) => {\n  const nexus = useNexusContext();\n\n  const agentIds = traces.reduce((ids: string[], trace) => {\n    const currIds = entryToArray(trace.contribution)\n      .map(contribution => contribution.agent?.['@id'])\n      .filter(Boolean);\n\n    return Array.from(new Set([...ids, ...currIds]));\n  }, []);\n\n  const [agentMap, setAgentMap] = useState<Record<string, any>>(null);\n\n  useEffect(() => {\n    if (!agentIds.length) return;\n\n    const contributionEsQuery = {\n      from: 0,\n      size: 100,\n      query: {\n        terms: {\n          '_id': agentIds,\n        }\n      }\n    }\n\n    nexus.View\n      // query ElesticSearch endpoint to get agents by their ids\n      .elasticSearchQuery(hippocampus.org, hippocampus.project, hippocampus.datasetViewId, contributionEsQuery)\n      // extract ES documents\n      .then(data => data.hits.hits)\n      // extract Nexus original documents\n      .then(esDocuments => esDocuments.map(esDocument => esDocument._source))\n      // pick only agent ids and labels\n      .then(agents => agents.map(agent => ({\n        id: agent['@id'],\n        label: getAgentLabel(agent),\n        type: getAgentType(agent),\n      })))\n      // create a map of agents of type Record<id, label>\n      .then(agents => keyBy(agents, 'id'))\n      .then(agentMap => setAgentMap(agentMap));\n  }, [traces]);\n\n  return (\n    <div className=\"layer-anatomy-summary__basis mt-2\">\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            {/* <th>Image</th> */}\n            <th>E-Type</th>\n            <th>Contribution</th>\n          </tr>\n        </thead>\n        <tbody>\n          {traces.map(trace => (\n            <tr key={trace.name}>\n              <td className=\"text-capitalize\">{trace.name}</td>\n              <td>{trace.annotation.hasBody.label}</td>\n              <td>\n                {agentMap && entryToArray(trace.contribution)\n                  .map(contribution => agentMap[contribution.agent['@id']])\n                  .sort((a1, a2) => a1.type > a2.type ? 1 : -1)\n                  .map(agent => <span key={agent.label}>{agent.label} <br/></span>)\n                }\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\nexport default ExpTraceTable;\n","import React from 'react';\nimport { useRouter } from 'next/router';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { Button } from 'antd';\n\nimport ESData from '../../components/ESData';\nimport DataContainer from '../../components/DataContainer';\nimport NexusPlugin from '../../components/NexusPlugin';\nimport { electroPhysiologyDataQuery, etypeTracesDataQuery } from '../../queries/es';\nimport Filters from '../../layouts/Filters';\nimport Title from '../../components/Title';\nimport InfoBox from '../../components/InfoBox';\nimport { colorName } from './config';\nimport List from '../../components/List';\nimport Collapsible from '../../components/Collapsible';\nimport ExpTraceTable from '../../components/ExpTraceTable';\nimport traces from '../../traces.json';\nimport styles from '../../styles/experimental-data/neuron-electrophysiology.module.scss';\n\n\nconst NeuronElectrophysiology: React.FC = () => {\n  const router = useRouter();\n  const nexus = useNexusContext();\n\n  const query = {\n    ...router.query\n  };\n\n  const setQuery = (query: any) => {\n    router.push({ query, pathname: router.pathname }, undefined, { shallow: true });\n  }\n\n  const setEtype = (etype: string) => {\n    setQuery({\n      etype,\n      etype_instance: currentInstance,\n    });\n  };\n  const setInstance = (instance: string) => {\n    setQuery({\n      etype: currentEtype,\n      etype_instance: instance,\n    });\n  };\n\n  const currentEtype: string = query.etype as string;\n  const currentInstance: string = query.etype_instance as string;\n\n  const etypes = Object.keys(traces).sort();\n  const instances = currentEtype\n    ? traces[currentEtype].sort()\n    : []\n\n  const getAndSortTraces = (esDocuments) => {\n    return esDocuments\n      .map(esDocument => esDocument._source)\n      .sort((m1, m2) => (m1.name > m2.name) ? 1 : -1);\n  };\n\n  return (\n    <>\n      <Filters\n        backgroundAlt\n      >\n        <div className=\"row bottom-xs w-100\">\n          <div className=\"col-xs-12 col-lg-6\">\n            <Title\n              primaryColor={colorName}\n              title={<span>Neuron <br /> Electrophysiology</span>}\n              subtitle=\"Experimental Data\"\n            />\n            <InfoBox\n              color=\"grey-1\"\n              text=\"We recorded electrical traces from neurons using single-cell recording experiments in brain slices. Then, we classified the traces in different electrical types (e-types) based on their firing patterns. We have identified one e-type for excitatory cells and four e-types for inhibitory cells.\"\n            />\n          </div>\n\n          <div className=\"col-xs-12 col-lg-4 col-lg-offset-1\">\n            <div className={styles.selector}>\n              <div className={styles.selectorHead}>Select cell type</div>\n              <div className={styles.selectorBody}>\n                <List\n                  list={etypes}\n                  value={currentEtype}\n                  title=\"e-type\"\n                  color={colorName}\n                  onSelect={setEtype}\n                />\n                <br />\n                <br />\n                <br />\n                <List\n                  list={instances}\n                  value={currentInstance}\n                  title={`Experiment instance (${instances.length})`}\n                  color={colorName}\n                  onSelect={setInstance}\n                  anchor=\"data\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <div id=\"data\" />\n\n      {!!currentEtype && !!currentInstance && <DataContainer>\n        <Collapsible title={`Electrophysiological Recordings for ${currentEtype}_${currentInstance}`}>\n          <ESData query={electroPhysiologyDataQuery(currentEtype, currentInstance)} >\n            {esDocuments => (\n              <>\n                {!!esDocuments && !!esDocuments.length && (\n                  <>\n                    <NexusPlugin\n                      name=\"neuron-electrophysiology\"\n                      resource={esDocuments[0]._source}\n                      nexusClient={nexus}\n                    />\n                    <div className=\"text-right\">\n                      <Button\n                        className=\"mr-1\"\n                        type=\"primary\"\n                        size=\"small\"\n                        href={`/build/data/electrophysiology?query=${encodeURIComponent(currentInstance)}`}\n                      >\n                        Send to the Build section\n                      </Button>\n                    </div>\n                  </>\n                )}\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n\n        <Collapsible title=\"Population\" className=\"mt-4\">\n          <h3 className=\"mt-3\">Experimental instances</h3>\n\n          <ESData query={etypeTracesDataQuery(currentEtype)}>\n            {esDocuments => (\n              <>\n                {!!esDocuments && (\n                  <ExpTraceTable traces={getAndSortTraces(esDocuments)} />\n                )}\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n      </DataContainer>\n      }\n    </>\n  );\n};\n\nexport default NeuronElectrophysiology;\n","import React from 'react';\n\nimport MainLayout from '../../layouts/MainLayout';\nimport NeuronEphysView from '../../views/experimental/NeuronElectrophysiology';\n\n\nexport default function About() {\n  return (\n    <MainLayout>\n      <NeuronEphysView />\n    </MainLayout>\n  );\n};\n","\ntype ESQuery = Record<string, unknown>;\n\n/**\n * Lists get specific experiment of specific e-type\n *\n */\nexport const layerAnatomyDataQuery = {\n  from: 0,\n  size: 1000,\n  query: {\n    bool: {\n      filter: [\n        {\n          bool: {\n            should: [\n              {\n                term: {\n                  '@type': 'LayerThickness',\n                },\n              },\n              {\n                term: {\n                  '@type': 'NeuronDensity',\n                },\n              },\n              {\n                term: {\n                  '@type': 'SliceCollection',\n                }\n              }\n            ],\n          },\n        },\n      ],\n    },\n  },\n};\n\nexport const electroPhysiologyDataQuery = (\n  etype: string,\n  experiment: string,\n): ESQuery | null => {\n  if (!etype || !experiment) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must: {\n                term: { 'name.raw': experiment }\n              }\n            }\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: { term: { 'annotation.hasBody.label.raw': etype } },\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/nwb' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const ephysByNameDataQuery = (\n  names: string[],\n): ESQuery | null => {\n  if (!names) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 10000,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must: {\n                terms: { 'name.raw': names }\n              }\n            }\n          },\n          {\n            bool: {\n              must: {\n                term: { 'note': 'subset' }\n              }\n            }\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/nwb' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const mtypeExpMorphologyListDataQuery = (\n  mtype: string\n): ESQuery | null => {\n  if (!mtype) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 200,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@type': 'ReconstructedCell',\n                  },\n                },\n              ],\n            },\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: [\n                    {\n                      term: {\n                        'annotation.hasBody.label.raw': mtype,\n                      },\n                    },\n                  ],\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const morphologyDataQuery = (\n  mtype: string,\n  instance: string\n): ESQuery | null => {\n  if(!mtype || !instance) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@type': 'NeuronMorphology',\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    'name.raw': instance,\n                  },\n                },\n              ],\n            },\n          },\n          // {\n          //   nested: {\n          //     path: 'annotation.hasBody',\n          //     query: {\n          //       bool: {\n          //         filter: [\n          //           {\n          //             term: {\n          //               'annotation.hasBody.label.raw': mtype,\n          //             },\n          //           },\n          //         ],\n          //       },\n          //     },\n          //   },\n          // },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const dataByIdQuery = (\n  id: string | string[]\n): ESQuery | null => {\n  if(!id) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '_deprecated': false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@id': id,\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const etypeTracesDataQuery = (\n  etype: string,\n): ESQuery | null => {\n  if (!etype) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 10000,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must_not: {\n                exists: {\n                  \"field\": \"note\",\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: { term: { 'annotation.hasBody.label.raw': etype } },\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/rab' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n","import { accentColors } from '../../config';\nimport { Color } from '../../types';\n\nexport const sectionTitle = 'Experimental Data';\nexport const colorName: Color = 'grey-1';\nexport const primaryColor = accentColors[colorName];\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/neuronal-electrophysiology\",\n      function () {\n        return require(\"private-next-pages/experimental-data/neuronal-electrophysiology.tsx\");\n      }\n    ]);\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"neuron-electrophysiology_selector__1wLqj\",\"selectorColumn\":\"neuron-electrophysiology_selectorColumn__37KZ_\",\"selectorHead\":\"neuron-electrophysiology_selectorHead__3N8Kc\",\"selectorBody\":\"neuron-electrophysiology_selectorBody__35I10\"};"],"sourceRoot":""}