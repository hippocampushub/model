{"version":3,"file":"static/chunks/pages/experimental-data/acetylcholine-041da3f0d0e0650d.js","mappings":"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","sources":["webpack://_N_E/?c916","webpack://_N_E/./src/components/ResponsiveTable/index.tsx","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/components/Term/index.tsx","webpack://_N_E/./src/views/1_experimental-data/acetylcholine/RestingMembranePotential.tsx","webpack://_N_E/./src/views/1_experimental-data/acetylcholine/FiringRate.tsx","webpack://_N_E/./src/views/1_experimental-data/acetylcholine/synapses.tsx","webpack://_N_E/./src/views/1_experimental-data/acetylcholine/network.tsx","webpack://_N_E/./src/views/1_experimental-data/Acetylcholine.tsx","webpack://_N_E/./src/pages/experimental-data/acetylcholine.tsx","webpack://_N_E/./src/terms.tsx","webpack://_N_E/./src/views/1_experimental-data/config.ts","webpack://_N_E/./src/components/ResponsiveTable/styles.module.scss","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/./src/components/Term/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/acetylcholine\",\n      function () {\n        return require(\"private-next-pages/experimental-data/acetylcholine.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/experimental-data/acetylcholine\"])\n      });\n    }\n  ","import React, { useEffect, useState } from 'react';\nimport { Table } from 'antd';\nimport { ColumnType as AntColumnType, ColumnGroupType as AntColumnGroupType, TableProps } from 'antd/lib/table';\nimport { Breakpoint } from 'antd/lib/_util/responsiveObserve';\n\nimport classes from './styles.module.scss';\n\ninterface ColumnType<Type extends object & { isHighlight?: boolean }> extends Omit<AntColumnType<Type>, 'dataIndex'> {\n  dataIndex?: keyof Type;\n}\ninterface GroupColumnType<Type extends object & { isHighlight?: boolean }> extends AntColumnGroupType<Type> { }\n\ninterface ResponsiveTableProps<Type extends object & { isHighlight?: boolean }> extends Omit<TableProps<Type>, 'columns'> {\n  data?: Type[];\n  columns: (ColumnType<Type> | GroupColumnType<Type>)[] | any;\n}\n\nconst renderHighlightValue = (record) => (nestedValue, _value) =>\n  highlightValue(nestedValue, record.isHighlight);\n\nconst highlightValue = (nestedValue, isHighlight) =>\n  isHighlight ? <div className=\"text-bold\">{nestedValue}</div> : nestedValue;\n\n// Utility function to calculate the width of text\nfunction calculateTextWidth(text: string, font: string = '16px Arial'): number {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  if (context) {\n    context.font = font;\n    return context.measureText(text).width;\n  }\n  return 0;\n}\n\nfunction ResponsiveTable<Type extends object & { isHighlight?: boolean }>({\n  columns,\n  data = [], // Provide a default value of an empty array\n  ...restProps\n}: ResponsiveTableProps<Type>) {\n  const [columnWidths, setColumnWidths] = useState<number[]>([]);\n  const font = '14px Arial'; // Set the font to match your table\n\n  useEffect(() => {\n    const newColumnWidths = columns.map((column) => {\n      const maxTextWidth = data.reduce((max, record) => {\n        const dataIndex = (column as ColumnType<Type>).dataIndex;\n        if (dataIndex && record[dataIndex] !== undefined) {\n          const text = String(record[dataIndex]);\n          const textWidth = calculateTextWidth(text, font);\n          return Math.max(max, textWidth);\n        }\n        return max;\n      }, 0);\n      return Math.min(maxTextWidth + 20, 200); // Add some padding and a max limit\n    });\n\n    setColumnWidths(newColumnWidths);\n  }, [columns, data]);\n\n  const expandableColumn = {\n    title: null,\n    dataIndex: null,\n    render: (_value, record, index) => {\n      const nestedTableData = columns\n        .map((column) => {\n          const dataIndex = (column as ColumnType<Type>).dataIndex;\n          if (dataIndex) {\n            return {\n              key: column.title,\n              value: record[dataIndex],\n            };\n          }\n\n          const children = (column as GroupColumnType<Type>).children;\n          if (children) {\n            const childrenValue = children.map((child) => (\n              <div key={child.key}>\n                {child.title}: {record[(child as ColumnType<Type>).dataIndex]}\n              </div>\n            ));\n            return {\n              key: column.title,\n              value: childrenValue,\n            };\n          }\n\n          return null;\n        })\n        .filter((item) => item !== null); // Filter out null values\n\n      const nestedColumns: ColumnType<{ key: any; value: any }>[] = [\n        {\n          dataIndex: 'key',\n          title: 'Field',\n          render: renderHighlightValue(record),\n        },\n        {\n          dataIndex: 'value',\n          title: 'Value',\n          render: renderHighlightValue(record),\n        },\n      ];\n\n      return (\n        <Table\n          className=\"responsiveTable no-left-margin nested-table xs-column\"\n          rowClassName={index % 2 ? classes.responsiveTablEven : classes.responsiveTablOdd}\n          rowKey={(record: any, index) => `${record.key}__${index}`}\n          showHeader={false}\n          columns={nestedColumns}\n          tableLayout=\"auto\" // Use auto layout for nested table as well\n          dataSource={nestedTableData as object[]} // Ensure dataSource does not contain null values\n          pagination={false}\n        />\n      );\n    },\n    responsive: ['xs' as Breakpoint],\n  };\n\n  const tableColumns = columns\n    .map((column, index) => ({\n      ...column,\n      title: column.title,\n      dataIndex: (column as ColumnType<Type>).dataIndex,\n      responsive: ['sm' as Breakpoint],\n      render: (value: any, record: Type, index: number) =>\n        highlightValue(column.render ? column.render(value, record, index) : value, record.isHighlight),\n      children: (column as GroupColumnType<Type>).children?.map((child) => ({\n        render: (value: any, record: Type) => highlightValue(value, record.isHighlight),\n        ...child,\n      })),\n      width: column.key === 'yourSpecificKey' ? columnWidths[index] : undefined, // Set width dynamically for a specific column\n    }))\n    .concat(expandableColumn as any);\n\n  const { className = '' } = restProps;\n\n  return (\n    <Table<Type>\n      bordered\n      size=\"small\"\n      scroll={{ x: true }}\n      rowKey={(record: any) => record.key || `${record.dataIndex}__`}\n      pagination={false}\n      columns={tableColumns}\n      dataSource={data}\n      rowClassName={(record: Type, index: number) => (index % 2 ? classes.responsiveTablEven : classes.responsiveTablOdd)}\n      {...restProps}\n      className={`responsiveTable no-left-margin nested-table xs-column text-nowrap ${className}`}\n      tableLayout=\"auto\" // Ensure layout is auto for dynamic column sizing\n    />\n  );\n}\n\nexport default ResponsiveTable;","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import React from 'react';\nimport { Tooltip } from 'antd';\n\nimport { TermDescription } from '@/terms';\n\nimport style from './styles.module.scss';\n\ntype TermProps = {\n  term: string;\n  description?: any;\n  className?: string;\n};\n\ntype TermFormatter = (term: string) => string;\n\nexport const termFactory = (termDescription: TermDescription = {}, termFormatter?: TermFormatter) => {\n  const Term: React.FC<TermProps> = ({ className, term, description }) => {\n    const currentDescription = description || termDescription[term];\n    const formattedTerm = termFormatter\n      ? termFormatter(term)\n      : term;\n\n    if (!currentDescription) {\n      return (<span className={className}>{formattedTerm}</span>);\n    }\n\n    return (\n      <Tooltip title={currentDescription} destroyTooltipOnHide={true}>\n        <span className={`${style.container} ${className ?? ''}`}>{formattedTerm}</span>\n      </Tooltip>\n    );\n  };\n\n  return Term;\n};\n","import React, { useState, useEffect } from 'react';\nimport { downloadAsJson } from '@/utils';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport { layerDescription, mtypeDescription } from '@/terms';\nimport { termFactory } from '@/components/Term';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\n\ntype DataEntry = {\n    \"Neuron Type\": string;\n    \"Dose (µM)\": number;\n    \"Drug\": string;\n    \"Region\": string;\n    \"Layer\": string;\n    \"Species\": string;\n    \"Age\": string;\n    \"Weight\": string;\n    \"Vm_control (mV) mean\": number;\n    \"Vm_control (mV) std\": number | string;\n    \"Vm_ACh (mV) mean\": number;\n    \"Vm_ACh (mV) std\": number;\n    \"∆Vm (mV)\": number;\n    \"Current (nA)\": number;\n    \"n. cells\": string;\n    \"ref_link\": string;\n};\n\n// Define custom types to match ResponsiveTable's expectations\ntype ColumnType<T> = {\n    title: string;\n    dataIndex: keyof T | (string | number)[];\n    key?: string;\n    render?: (value: any, record: T, index: number) => React.ReactNode;\n};\n\ntype GroupColumnType<T> = {\n    title: string;\n    children: ColumnType<T>[];\n};\n\nconst termDescription = {\n    ...mtypeDescription,\n    ...layerDescription,\n};\n\nconst Term = termFactory(termDescription);\n\nfunction getMtypeDescription(fullMtype: string) {\n    const [layer, mtype] = fullMtype.split('_');\n    return layerDescription[layer] && mtypeDescription[mtype]\n        ? `${mtypeDescription[mtype]} from ${layerDescription[layer]} layer`\n        : null;\n}\n\n// Define columns using the custom types\nconst columns: (ColumnType<DataEntry> | GroupColumnType<DataEntry>)[] = [\n    { title: 'Neuron Type', dataIndex: 'Neuron Type', key: 'neuronType' },\n    { title: 'Dose (µM)', dataIndex: 'Dose (µM)', key: 'dose' },\n    { title: 'Drug', dataIndex: 'Drug', key: 'drug' },\n    { title: 'Region', dataIndex: 'Region', key: 'region' },\n    { title: 'Layer', dataIndex: 'Layer', key: 'layer' },\n    { title: 'Species', dataIndex: 'Species', key: 'species' },\n    { title: 'Age', dataIndex: 'Age', key: 'age' },\n    { title: 'Weight', dataIndex: 'Weight', key: 'weight' },\n    {\n        title: 'Vm_control (mV)',\n        children: [\n            {\n                title: 'Mean',\n                dataIndex: 'Vm_control (mV) mean',\n                key: 'vmControlMean',\n                render: (value: number) => value.toFixed(1)\n            },\n            {\n                title: 'std',\n                dataIndex: 'Vm_control (mV) std',\n                key: 'vmControlStd',\n                render: (value: number | string) => value === '-' ? value : Number(value).toFixed(1)\n            },\n        ],\n    },\n    {\n        title: 'Vm_ACh (mV)',\n        children: [\n            {\n                title: 'Mean',\n                dataIndex: 'Vm_ACh (mV) mean',\n                key: 'vmAChMean',\n                render: (value: number) => value.toFixed(1)\n            },\n            {\n                title: 'std',\n                dataIndex: 'Vm_ACh (mV) std',\n                key: 'vmAChStd',\n                render: (value: number) => value.toFixed(1)\n            },\n        ],\n    },\n    {\n        title: 'Current (nA)',\n        dataIndex: '∆Vm (mV)',\n        key: 'deltaVm',\n        render: (value: number) => value.toFixed(2)\n    },\n    { title: 'N.Cell', dataIndex: 'Current (nA)', key: 'current' },\n    {\n        title: 'Reference',\n        dataIndex: 'n. cells',\n        render: (reference: string, record: DataEntry) => (\n            <a href={record.ref_link} target=\"_blank\" rel=\"noopener noreferrer\">{reference}</a>\n        )\n    },\n];\n\ntype RestingMembranePotentialProps = {\n    theme?: number;\n};\n\nconst RestingMembranePotential: React.FC<RestingMembranePotentialProps> = ({ theme }) => {\n    const [data, setData] = useState<DataEntry[] | null>(null);\n\n    useEffect(() => {\n        fetch(`${dataPath}/1_experimental-data/acetylcholine/resting-membrane-potential.json`)\n            .then((response) => response.json())\n            .then((fetchedData) => setData(fetchedData));\n    }, []);\n\n    if (!data) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <>\n\n            <ResponsiveTable<DataEntry>\n                className=\"mb-2\"\n                columns={columns}\n                data={data}\n                rowKey={({ 'Neuron Type': neuronType, 'Dose (µM)': dose }) => `${neuronType}-${dose}`}\n            />\n            <div className=\"mt-4\">\n                <DownloadButton\n                    theme={theme}\n                    onClick={() => downloadAsJson(data, `Resting-Membrane-Potential-Data.json`)}\n                >\n                    Resting Membrane Potential Data\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default RestingMembranePotential;","import React, { useState, useEffect } from 'react';\nimport { downloadAsJson } from '@/utils';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport { layerDescription, mtypeDescription } from '@/terms';\nimport { termFactory } from '@/components/Term';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\nimport { ColumnsType } from 'antd/lib/table';\n\ntype DataEntry = {\n    \"Neuron Type\": string;\n    \"Dose (µM)\": number;\n    \"Drug\": string;\n    \"Region\": string;\n    \"Layer\": string;\n    \"Species\": string;\n    \"Age\": string;\n    \"Weight\": string | null;\n    \"FR control (Hz)\": { mean: number; std: number | null };\n    \"FR ACh (Hz)\": { mean: number; std: number | null };\n    \"∆FR (Hz)\": number;\n    \"Current (nA)\": number;\n    \"n. cells\": number;\n    \"Reference\": string;\n    \"Reference_link\": string | null;\n};\n\nconst termDescription = {\n    ...mtypeDescription,\n    ...layerDescription,\n};\n\nconst Term = termFactory(termDescription);\n\nfunction getMtypeDescription(fullMtype: string) {\n    const [layer, mtype] = fullMtype.split('_');\n    return layerDescription[layer] && mtypeDescription[mtype]\n        ? `${mtypeDescription[mtype]} from ${layerDescription[layer]} layer`\n        : null;\n}\n\n// Explicitly typing the columns array\nconst columns: ColumnsType<DataEntry> = [\n    { title: 'Neuron Type', dataIndex: 'Neuron Type' },\n    { title: 'Dose (µM)', dataIndex: 'Dose (µM)' },\n    { title: 'Drug', dataIndex: 'Drug' },\n    { title: 'Region', dataIndex: 'Region' },\n    { title: 'Layer', dataIndex: 'Layer' },\n    { title: 'Species', dataIndex: 'Species' },\n    { title: 'Age', dataIndex: 'Age' },\n    { title: 'Weight', dataIndex: 'Weight' },\n    {\n        title: 'FR control (Hz)',\n        children: [\n            { title: 'Mean', dataIndex: ['FR control (Hz)', 'mean'] as const, render: (mean: number) => <>{mean}</> },\n            { title: 'std', dataIndex: ['FR control (Hz)', 'std'] as const, render: (std: number | null) => <>{std !== null ? std : '-'}</> },\n        ],\n    },\n    {\n        title: 'FR ACh (Hz)',\n        children: [\n            { title: 'Mean', dataIndex: ['FR ACh (Hz)', 'mean'] as const, render: (mean: number) => <>{mean}</> },\n            { title: 'std', dataIndex: ['FR ACh (Hz)', 'std'] as const, render: (std: number | null) => <>{std !== null ? std : '-'}</> },\n        ],\n    },\n    { title: '∆FR (Hz)', dataIndex: '∆FR (Hz)' },\n    { title: 'Current (nA)', dataIndex: 'Current (nA)' },\n    { title: 'n. cells', dataIndex: 'n. cells' },\n    {\n        title: 'Reference',\n        dataIndex: 'Reference',\n        render: (reference: string, record: DataEntry) =>\n            record.Reference_link ? (\n                <a href={record.Reference_link} target=\"_blank\" rel=\"noopener noreferrer\">{reference}</a>\n            ) : (\n                <>{reference}</>\n            )\n    },\n];\n\ntype FiringRateProps = {\n    theme?: number;\n};\n\nconst FiringRate: React.FC<FiringRateProps> = ({ theme }) => {\n    const [data, setData] = useState<DataEntry[] | null>(null);\n\n    useEffect(() => {\n        fetch(`${dataPath}/1_experimental-data/acetylcholine/firing-rate.json`)\n            .then((response) => response.json())\n            .then((fetchedData) => setData(fetchedData));\n    }, []);\n\n    if (!data) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <>\n            <ResponsiveTable<DataEntry>\n                className=\"mb-2\"\n                columns={columns as any}  // Temporarily cast to any if type issue persists\n                data={data}\n                rowKey={(record) => record.Reference}\n            />\n            <div className=\"mt-4\">\n                <DownloadButton\n                    theme={theme}\n                    onClick={() => downloadAsJson(data, `Firing-Rate-Data.json`)}\n                >\n                    Firing Rate Data\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default FiringRate;","import React, { useState, useEffect } from 'react';\nimport { downloadAsJson } from '@/utils';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport { layerDescription, mtypeDescription } from '@/terms';\nimport { termFactory } from '@/components/Term';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\n\ntype DataEntry = {\n    \"Pre Neuron Type\": string;\n    \"Post Neuron Type\": string;\n    \"Dose (µM)\": number;\n    \"Drug\": string;\n    \"Region\": string;\n    \"Layer\": string;\n    \"Species\": string;\n    \"Age\": string;\n    \"Weight\": string;\n    \"PSP/PSC\": string;\n    \"Ratio ACh/Control\": string;\n    \"n. connections\": number;\n    \"Reference\": string;\n    \"Reference_link\": string | null;\n};\n\nconst termDescription = {\n    ...mtypeDescription,\n    ...layerDescription,\n};\n\nconst Term = termFactory(termDescription);\n\nfunction getMtypeDescription(fullMtype: string) {\n    const [layer, mtype] = fullMtype.split('_');\n    return layerDescription[layer] && mtypeDescription[mtype]\n        ? `${mtypeDescription[mtype]} from ${layerDescription[layer]} layer`\n        : null;\n}\n\nconst columns = [\n    {\n        title: 'Pre Neuron Type',\n        dataIndex: 'Pre Neuron Type' as keyof DataEntry,\n        render: pre => (<Term term={pre} description={getMtypeDescription(pre)} />),\n    },\n    {\n        title: 'Post Neuron Type',\n        dataIndex: 'Post Neuron Type' as keyof DataEntry,\n        render: post => (<Term term={post} description={getMtypeDescription(post)} />),\n    },\n    {\n        title: 'Species',\n        dataIndex: 'Species' as keyof DataEntry,\n    },\n    {\n        title: 'Age',\n        dataIndex: 'Age' as keyof DataEntry,\n    },\n    {\n        title: 'Weight',\n        dataIndex: 'Weight' as keyof DataEntry,\n    },\n    {\n        title: 'PSP/PSC',\n        dataIndex: 'PSP/PSC' as keyof DataEntry,\n    },\n    {\n        title: 'Ratio ACh/Control',\n        dataIndex: 'Ratio ACh/Control' as keyof DataEntry,\n    },\n    {\n        title: 'n. connections',\n        dataIndex: 'n. connections' as keyof DataEntry,\n    },\n    {\n        title: 'Reference',\n        dataIndex: 'Reference',\n        render: (reference: string, record: DataEntry) =>\n            record.Reference_link ? (\n                <a href={record.Reference_link} target=\"_blank\" rel=\"noopener noreferrer\">{reference}</a>\n            ) : (\n                <>{reference}</>\n            )\n    },\n];\n\ntype SynapsesProps = {\n    theme?: number;\n};\n\nconst Synapses: React.FC<SynapsesProps> = ({ theme }) => {\n    const [data, setData] = useState<DataEntry[] | null>(null);\n\n    useEffect(() => {\n        fetch(`${dataPath}/1_experimental-data/acetylcholine/synapses.json`)\n            .then((response) => response.json())\n            .then((fetchedData) => setData(fetchedData));\n    }, []);\n\n    if (!data) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <>\n            <ResponsiveTable<DataEntry>\n                className=\"mb-2\"\n                columns={columns}\n                data={data}\n                rowKey={({ 'Pre Neuron Type': pre, 'Post Neuron Type': post }) => `${pre}-${post}`}\n            />\n            <div className=\"mt-4\">\n                <DownloadButton\n                    theme={theme}\n                    onClick={() => downloadAsJson(data, `Synapses-Data.json`)}\n                >\n                    Synapses Data\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default Synapses;","import React, { useState, useEffect } from 'react';\nimport { downloadAsJson } from '@/utils';\nimport ResponsiveTable from '@/components/ResponsiveTable';\nimport { layerDescription, mtypeDescription } from '@/terms';\nimport { termFactory } from '@/components/Term';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\n\ntype DataEntry = {\n    Species: string;\n    Age: string;\n    Weight: string;\n    \"Dose (µM)\": number | string;\n    Drug: string;\n    Application: string;\n    Region: string;\n    Layer: string;\n    \"Slice Thickness (µm)\": number | string;\n    \"ACSF (mM)\": {\n        Ca: number | string;\n        Mg: number | string;\n        K: number | string;\n    };\n    Measurement: string;\n    Effects: string;\n    \"n slices\": number | string;\n    Reference: string;\n    \"Reference_link\": string | null;\n};\n\nconst termDescription = {\n    ...mtypeDescription,\n    ...layerDescription,\n};\n\nconst Term = termFactory(termDescription);\n\nfunction getMtypeDescription(fullMtype: string) {\n    const [layer, mtype] = fullMtype.split('_');\n    return layerDescription[layer] && mtypeDescription[mtype]\n        ? `${mtypeDescription[mtype]} from ${layerDescription[layer]} layer`\n        : null;\n}\n\nconst columns = [\n    { title: 'Species', dataIndex: 'Species' as keyof DataEntry },\n    { title: 'Age', dataIndex: 'Age' as keyof DataEntry },\n    { title: 'Weight', dataIndex: 'Weight' as keyof DataEntry },\n    { title: 'Dose (µM)', dataIndex: 'Dose (µM)' as keyof DataEntry },\n    { title: 'Drug', dataIndex: 'Drug' as keyof DataEntry },\n    { title: 'Application', dataIndex: 'Application' as keyof DataEntry },\n    { title: 'Region', dataIndex: 'Region' as keyof DataEntry },\n    { title: 'Layer', dataIndex: 'Layer' as keyof DataEntry },\n    { title: 'Slice Thickness (µm)', dataIndex: 'Slice Thickness (µm)' as keyof DataEntry },\n    {\n        title: 'ACSF (mM)',\n        children: [\n            { title: 'Ca', dataIndex: ['ACSF (mM)', 'Ca'], render: (Ca: number | string) => <>{Ca !== null ? Ca : '-'}</> },\n            { title: 'Mg', dataIndex: ['ACSF (mM)', 'Mg'], render: (Mg: number | string) => <>{Mg !== null ? Mg : '-'}</> },\n            { title: 'K', dataIndex: ['ACSF (mM)', 'K'], render: (K: number | string) => <>{K !== null ? K : '-'}</> },\n        ],\n    },\n    { title: 'Measurement', dataIndex: 'Measurement' as keyof DataEntry },\n    { title: 'Effects', dataIndex: 'Effects' as keyof DataEntry },\n    { title: 'N Slices', dataIndex: 'n slices' as keyof DataEntry },\n    {\n        title: 'Reference',\n        dataIndex: 'Reference',\n        render: (reference: string, record: DataEntry) =>\n            record.Reference_link ? (\n                <a href={record.Reference_link} target=\"_blank\" rel=\"noopener noreferrer\">{reference}</a>\n            ) : (\n                <>{reference}</>\n            )\n    },\n];\n\ntype NetworkProps = {\n    theme?: number;\n};\n\nconst Network: React.FC<NetworkProps> = ({ theme }) => {\n    const [data, setData] = useState<DataEntry[] | null>(null);\n\n    useEffect(() => {\n        fetch(`${dataPath}/1_experimental-data/acetylcholine/network.json`)\n            .then((response) => response.json())\n            .then((fetchedData) => setData(fetchedData));\n    }, []);\n\n    if (!data) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <>\n            <ResponsiveTable<DataEntry>\n                className=\"mb-2\"\n                columns={columns}\n                data={data}\n                rowKey={(record) => record.Reference}\n            />\n            <div className=\"mt-4\">\n                <DownloadButton\n                    theme={theme}\n                    onClick={() => downloadAsJson(data, `Network-Data.json`)}\n                >\n                    Network Data\n                </DownloadButton>\n            </div>\n        </>\n    );\n};\n\nexport default Network;","import React from 'react';\nimport Image from 'next/image';\n\n// Component Imports\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\n\n// Table Component Imports\nimport RestingMembranePotentialTable from './acetylcholine/RestingMembranePotential';\nimport FiringRateTable from './acetylcholine/FiringRate';\nimport SynapsesTable from './acetylcholine/synapses';\nimport NetworkTable from './acetylcholine/network';\n\n// Config Import\nimport { colorName } from './config';\n\nconst AcetylcholineView: React.FC = () => {\n  const theme = 1;\n\n  return (\n    <>\n      {/* Filters Section */}\n      <Filters theme={theme}>\n        <div className=\"flex flex-col lg:flex-row w-full lg:items-center mt-40 lg:mt-0\">\n          <div className=\"w-full md:flex-none mb-8 md:mb-8 lg:pr-0\">\n            <StickyContainer>\n              <Title\n                primaryColor={colorName}\n                title=\"Acetylcholine\"\n                subtitle=\"Experimental Data\"\n                theme={theme}\n              />\n              <div role=\"information\">\n                <InfoBox>\n                  <p>\n                    Acetylcholine (ACh) is one of the most studied neuromodulators, particularly\n                    important for the hippocampus. Like other neuromodulators, its effect on the\n                    network can span several time and space scales. Here, we report the effect of\n                    ACh on resting membrane potential, firing rate, synaptic function, and network activity.\n                  </p>\n                </InfoBox>\n              </div>\n            </StickyContainer>\n          </div>\n        </div>\n      </Filters>\n\n      {/* Data Container Section */}\n      <DataContainer\n        theme={theme}\n        navItems={[\n          { id: 'restingMembranePotentialSection', label: 'Resting membrane potential' },\n          { id: 'firingRateSection', label: 'Firing rate' },\n          { id: 'synapseSection', label: 'Synapse' },\n          { id: 'networkSection', label: 'Network' }\n        ]}\n      >\n        <Collapsible\n          id=\"restingMembranePotentialSection\"\n          className=\"mt-4\"\n          title=\"Resting membrane potential\"\n        >\n          <p className=\"mb-4\">The data below shows that ACh tends to increase the resting membrane potential of CA1 neurons.</p>\n          <RestingMembranePotentialTable theme={theme} />\n        </Collapsible>\n\n        <Collapsible\n          id=\"firingRateSection\"\n          className=\"mt-4\"\n          title=\"Firing rate\"\n        >\n          <p className=\"mb-4\">The data below shows that ACh tends to increase the firing rates of CA1 neurons.</p>\n          <FiringRateTable theme={theme} />\n        </Collapsible>\n\n        <Collapsible\n          id=\"synapseSection\"\n          className=\"mt-4\"\n          title=\"Synapse\"\n        >\n          <p className=\"mb-4\">The data below shows that ACh tends to increase the postsynaptic response (potential or current) in CA1.</p>\n          <SynapsesTable theme={theme} />\n        </Collapsible>\n\n        <Collapsible\n          id=\"networkSection\"\n          className=\"mt-4\"\n          title=\"Network\"\n        >\n          <p className=\"mb-4\">Consistent with the effect on neurons and synapses, ACh tends to increase the network activity, which in turn induces oscillations.</p>\n          <NetworkTable theme={theme} />\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default AcetylcholineView;","import Head from 'next/head';\nimport AcetylcholineView from '@/views/1_experimental-data/Acetylcholine';\n\nexport default function AcetylcholinePage() {\n  const metadata = {\n    title: 'Acetylcholine - Experimental Data | The Hippocampus Hub',\n    description:\n      'Explore experimental data on the effects of Acetylcholine (ACh) on hippocampal neurons, including its impact on resting membrane potential, firing rate, synaptic function, and network activity. Acetylcholine plays a crucial role in modulating neuronal activity in the hippocampus.',\n    keywords: [\n      'Acetylcholine',\n      'Resting Membrane Potential',\n      'Firing Rate',\n      'Synapses',\n      'Hippocampus',\n      'Neuroscience',\n      'Network Activity',\n      'Experimental Data',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <AcetylcholineView />\n    </>\n  );\n}","import React from 'react';\n\nexport type TermDescription = Record<string, string>;\n\n\nexport const layerDescription: TermDescription = {\n  SLM: 'Stratum Lacunosum-Moleculare',\n  SR: 'Stratum Radiatum',\n  SP: 'Stratum Pyramidal',\n  SO: 'Stratum Oriens',\n};\n\nexport const mtypeDescription: TermDescription = {\n  PPA: 'Perforant Pathway Associated Cell',\n  SCA: 'Schaffer Collateral Associated Cell',\n  AA: 'Axon Axonic Cell',\n  BS: 'Bistratified Cell',\n  PVBC: 'PV+ Basket Cell',\n  CCKBC: 'CCK+ Basket Cell',\n  PC: 'Pyramidal Cell',\n  BP: 'Back-Projecting Cell',\n  OLM: 'Oriens Lacunosum-Moleculare Cell',\n  Tri: 'Trilaminar Cell',\n  Ivy: 'Ivy Cell',\n};\n\nexport const stypeDescription: TermDescription = {\n  E1: 'Excitatory facilitating',\n  E2: 'Excitatory depressing',\n  I1: 'Inhibitory facilitating',\n  I2: 'Inhibitory depressing',\n  I3: 'Inhibitory pseudo linear',\n};\n\nexport const etypeDescription: TermDescription = {\n  cADpyr: 'continuous Accommodating (Adapting) for pyramidal cells',\n  cAC: 'continuous Accommodating',\n  bAC: 'burst Accommodating',\n  cNAC: 'continuous Non-accommodating',\n  bNAC: 'burst Non-accommodating',\n  dNAC: 'delayed Non-accommodating',\n  cSTUT: 'continuous Stuttering',\n  bSTUT: 'burst Stuttering',\n  dSTUT: 'delayed Stuttering',\n  cIR: 'continuous Irregular',\n  bIR: 'burst Irregular',\n};\n\nexport const pathwayDescription: TermDescription = {\n  gsyn: 'The peak conductance (in nS) for a single synaptic contact',\n  U: 'Utilization of synaptic efficacy - analogous to the transmitter release probability at a single synaptic contact',\n  D: 'Time constant (in ms) for recovery from depression',\n  F: 'Time constant (in ms) for recovery from facilitation',\n};\n\nexport const formattedTerm: Record<string, React.ReactNode> = {\n  gsyn: (<span>g<sub>syn</sub></span>),\n};\n","import { accentColors } from '../../config';\nimport { Color } from '../../types';\n\nexport const sectionTitle = 'Experimental Data';\nexport const colorName: Color = 'blue-2';\nexport const primaryColor = accentColors[colorName];\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"responsiveTable\":\"styles_responsiveTable__njQH4\",\"ant-table-cell\":\"styles_ant-table-cell__Fj0OS\",\"ant-table-cell-auto\":\"styles_ant-table-cell-auto__Yw8kj\",\"responsiveTablOdd\":\"styles_responsiveTablOdd__ix6_m\",\"responsiveTablEven\":\"styles_responsiveTablEven__sIcPO\",\"highlightBackground\":\"styles_highlightBackground__eWdTL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__pHcWR\"};"],"names":["window","__NEXT_P","push","__webpack_require__","renderHighlightValue","nestedValue","_value","highlightValue","record","isHighlight","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","__webpack_exports__","Z","param","columns","data","restProps","columnWidths","setColumnWidths","useState","useEffect","newColumnWidths","map","maxTextWidth","reduce","max","dataIndex","column","undefined","text","String","textWidth","calculateTextWidth","font","canvas","document","createElement","context","getContext","measureText","width","Math","min","tableColumns","index","_column_children","title","responsive","render","value","children","child","key","concat","nestedTableData","childrenValue","jsxs","filter","item","nestedColumns","Table","rowClassName","classes","rowKey","showHeader","tableLayout","dataSource","pagination","bordered","size","scroll","x","centered","styles","classNames","termFactory","termDescription","termFormatter","term","description","currentDescription","formattedTerm","Tooltip","destroyTooltipOnHide","span","style","mtypeDescription","layerDescription","toFixed","Number","reference","jsx_runtime","a","href","ref_link","target","rel","acetylcholine_RestingMembranePotential","theme","setData","fetch","dataPath","then","response","json","fetchedData","Fragment","ResponsiveTable","neuronType","dose","DownloadButton","onClick","downloadAsJson","mean","std","Reference_link","acetylcholine_FiringRate","Reference","Term","getMtypeDescription","fullMtype","layer","mtype","split","pre","post","synapses","Ca","Mg","K","network","Acetylcholine","Filters","StickyContainer","Title","primaryColor","colorName","subtitle","role","InfoBox","p","DataContainer","navItems","id","label","Collapsible","RestingMembranePotentialTable","FiringRateTable","SynapsesTable","NetworkTable","AcetylcholinePage","metadata","keywords","author","creator","publisher","Head","meta","name","content","join","AcetylcholineView","SLM","SR","SP","SO","PPA","SCA","AA","BS","PVBC","CCKBC","PC","BP","OLM","Tri","Ivy","stypeDescription","E1","E2","I1","I2","I3","etypeDescription","cADpyr","cAC","bAC","cNAC","bNAC","dNAC","cSTUT","bSTUT","dSTUT","cIR","bIR","pathwayDescription","gsyn","U","D","F","accentColors","module","exports"],"sourceRoot":""}