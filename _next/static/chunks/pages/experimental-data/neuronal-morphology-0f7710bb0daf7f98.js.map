{"version":3,"file":"static/chunks/pages/experimental-data/neuronal-morphology-0f7710bb0daf7f98.js","mappings":"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","sources":["webpack://_N_E/./node_modules/file-saver/dist/FileSaver.min.js","webpack://_N_E/./node_modules/lodash/isNil.js","webpack://_N_E/./node_modules/lodash/isNumber.js","webpack://_N_E/?bb23","webpack://_N_E/./src/components/LayerSelector/index.tsx","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/Unit/index.tsx","webpack://_N_E/./src/components/ExpMorphologyFactsheet/index.tsx","webpack://_N_E/./src/components/ImageViewer/index.tsx","webpack://_N_E/./src/components/ExpMorphologyTable/index.tsx","webpack://_N_E/./src/utils/index.ts","webpack://_N_E/./src/components/NexusFileDownloadButton/index.tsx","webpack://_N_E/./src/views/experimental/NeuronMorphology.tsx","webpack://_N_E/./src/pages/experimental-data/neuronal-morphology.tsx","webpack://_N_E/./src/components/ExpMorphologyTable/styles.module.scss","webpack://_N_E/./src/components/LayerSelector/styles.module.scss","webpack://_N_E/./src/styles/experimental-data/neuron-morphology.module.scss"],"sourcesContent":["(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open(\"GET\",a),d.responseType=\"blob\",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error(\"could not download file\")},d.send()}function d(a){var b=new XMLHttpRequest;b.open(\"HEAD\",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open(\"\",\"_blank\"),g&&(g.document.title=g.document.body.innerText=\"downloading...\"),\"string\"==typeof b)return c(b,d,e);var h=\"application/octet-stream\"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&\"undefined\"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,\"undefined\"!=typeof module&&(module.exports=g)});\n\n//# sourceMappingURL=FileSaver.min.js.map","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nmodule.exports = isNil;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/experimental-data/neuronal-morphology\",\n      function () {\n        return require(\"private-next-pages/experimental-data/neuronal-morphology.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/experimental-data/neuronal-morphology\"])\n      });\n    }\n  ","import React, { ReactChild, ReactFragment } from 'react';\nimport { Layer } from '../../types';\n\nimport styles from './styles.module.scss'\n\n\ntype LayerSelectProps = {\n  activeLayer?: Layer;\n  onLayerSelected?: (layer: Layer) => void;\n};\n\nconst LAYERS: Layer[] = ['SLM', 'SR', 'SP', 'SO'];\n\nconst LayerSelector: React.FC<LayerSelectProps> = ({\n  activeLayer,\n  onLayerSelected = () => {},\n}) => {\n  const selectLayer = (l: Layer): void => onLayerSelected(l);\n\n  return (\n    <div>\n      {LAYERS.map(layer => (\n        <div\n          key={layer}\n          className={`${styles.layer} ${layer === activeLayer ? styles.active : ''}`}\n          onClick={() => selectLayer(layer)}\n        >\n          {layer}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default LayerSelector;\n","import React from 'react';\n\nimport isNumber from 'lodash/isNumber';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  if (!isNumber(value)) return value;\n\n  const fixed = parseFloat(value.toPrecision(significantFigures));\n\n  const formatted = thousandSeparator\n    ? fixed.toLocaleString('en')\n    : fixed;\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\n\nexport default NumberFormat;\n","import React from 'react';\n\ntype UnitProps = {\n  value?: string;\n}\n\nconst replacement = {\n  MOhm: 'MΩ',\n};\n\nconst Unit: React.FC<UnitProps> = ({ value = '' }) => {\n  return (\n    <>\n      {replacement[value] ?? value}\n    </>\n  );\n};\n\n\nexport default Unit;\n","import React from 'react';\nimport NumberFormat from '../NumberFormat';\nimport isNil from 'lodash/isNil';\n\nimport Unit from '../Unit';\nimport expMorphologyStats from '../../exp-morphology-stats.json';\n\n\nconst classPrefix = 'factsheet__';\n\n\ntype MorphologyFactsheetEntryType = {\n  name: string;\n  description?: string;\n  unit?: string;\n  value?: number | string;\n  value_map?: {\n    [key: string]: string | number;\n  };\n};\n\n\ntype MorphologyFactsheetProps = {\n  morphologyName: string;\n  className?: string;\n  id?: string;\n};\n\n\nconst MorphologyFactsheetSingleValueEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType;\n}> = ({\n  fact\n}) => {\n  return (\n    <div className=\"row mt-1\">\n      <div className=\"col-xs-8 col-sm-4 name\">{fact.name}</div>\n      <div className=\"col-xs-4 col-sm-8 value\">\n        {isNil(fact.value)\n          ? (<span>-</span>)\n          : (<span>\n              <NumberFormat value={fact.value} /> <Unit value={fact.unit} />\n            </span>)\n        }\n      </div>\n    </div>\n  );\n};\n\nconst MorphologyFactsheetEntry: React.FC<{\n  fact: MorphologyFactsheetEntryType\n}> = ({\n  fact\n}) => {\n  return (<MorphologyFactsheetSingleValueEntry fact={fact} />);\n};\n\nconst neuriteTypes = ['all', 'axon', 'apical_dendrite', 'basal_dendrite'];\n\nconst strPrettify = (str) => str ? str.replace(/\\_/g, ' ') : str;\n\nconst MorphologyFactsheet: React.FC<MorphologyFactsheetProps> = ({\n  morphologyName,\n  className = '',\n  id,\n}) => {\n  const stats = expMorphologyStats[morphologyName];\n\n  if (!stats) {\n    return (\n      <p className=\"red\">No morphology stats found</p>\n    );\n  }\n\n  const neuriteHasStats = (neuriteType) => !!stats[neuriteType].max_section_length;\n\n  const getFactsheetEntries = (neuriteType) => {\n    return Object.entries(stats[neuriteType]).map(([statKey, statValue]) => ({\n      name: strPrettify(statKey),\n      unit: (statKey as string).includes('volume') ? 'µm³' : ((statKey as string).includes('length') ? 'µm' : ''),\n      value: statValue\n    }));\n  };\n\n  return (\n    <div id={id} className={`${classPrefix}basis ${className}`}>\n      <h3>Morphometrics</h3>\n\n      <div className=\"mb-3 mt-3\">\n        <MorphologyFactsheetEntry fact={{\n          name: 'soma diameter',\n          unit: 'µm',\n          value: stats.mean_soma_radius * 2,\n        }} />\n      </div>\n\n      {neuriteTypes.filter(neuriteType => neuriteHasStats(neuriteType)).map(neuriteType => (\n        <div className=\"mb-2\" key={neuriteType}>\n          <strong className=\"text-capitalize\">{strPrettify(neuriteType)}</strong>\n          {getFactsheetEntries(neuriteType).map(fact => (\n            <MorphologyFactsheetEntry key={fact.name} fact={fact as MorphologyFactsheetEntryType} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MorphologyFactsheet;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nimport { ImageViewerProps } from './image-viewer';\n\n\nconst ImageViewerLazy = dynamic(() => import('./image-viewer'), { ssr: false });\n\nconst ImageViewer: React.FC<ImageViewerProps> = (props) => {\n  return (\n    <ImageViewerLazy {...props} />\n  );\n};\n\n\nexport default ImageViewer;\n","import React, { useState, useEffect } from 'react';\nimport { keyBy } from 'lodash';\nimport { useNexusContext } from '@bbp/react-nexus';\n\nimport { hippocampus, basePath } from '../../config';\nimport ImageViewer from '../ImageViewer';\n\nimport styles from './styles.module.scss'\n\n\ntype ExpMorphologyTableProps = {\n  morphologies: Record<string, any>[];\n  currentMorphology?: string;\n};\n\nfunction entryToArray(entry) {\n  if (Array.isArray(entry)) return entry;\n\n  return [entry];\n}\n\nfunction getAgentLabel(agent) {\n  return agent.name\n    ? agent.name\n    : `${agent.givenName} ${agent.familyName}`;\n}\n\nfunction getAgentType(agent) {\n  return agent.name\n    ? 'institution'\n    : 'person';\n}\n\nconst ExpMorphologyTable: React.FC<ExpMorphologyTableProps> = ({ currentMorphology, morphologies = [] }) => {\n  const nexus = useNexusContext();\n\n  const agentIds = morphologies.reduce((ids: string[], morphology) => {\n    const currIds = entryToArray(morphology.contribution)\n      .map(contribution => contribution.agent?.['@id'])\n      .filter(Boolean);\n\n    return Array.from(new Set([...ids, ...currIds]));\n  }, []);\n\n  const [agentMap, setAgentMap] = useState<Record<string, any>>(null);\n\n  useEffect(() => {\n    if (!agentIds.length) return;\n\n    const contributionEsQuery = {\n      from: 0,\n      size: 100,\n      query: {\n        terms: {\n          '_id': agentIds,\n        }\n      }\n    }\n\n    nexus.View\n      // query ElesticSearch endpoint to get agents by their ids\n      .elasticSearchQuery(hippocampus.org, hippocampus.project, hippocampus.datasetViewId, contributionEsQuery)\n      // extract ES documents\n      .then(data => data.hits.hits)\n      // extract Nexus original documents\n      .then(esDocuments => esDocuments.map(esDocument => esDocument._source))\n      // pick only agent ids and labels\n      .then(agents => agents.map(agent => ({\n        id: agent['@id'],\n        label: getAgentLabel(agent),\n        type: getAgentType(agent),\n      })))\n      // create a map of agents of type Record<id, label>\n      .then(agents => keyBy(agents, 'id'))\n      .then(agentMap => setAgentMap(agentMap));\n  }, [morphologies]);\n\n  const isCurrent = morphology => morphology.name === currentMorphology;\n\n  return (\n    <div id=\"expMorphologyTable\" className=\"layer-anatomy-summary__basis mt-2\">\n      <table>\n        <thead className={styles.highlightedRowBg}>\n          <tr>\n            <th>Name</th>\n            <th>Image</th>\n            <th>M-Type</th>\n            <th>Contribution</th>\n          </tr>\n        </thead>\n        <tbody>\n          {morphologies.map(morph => (\n            <tr\n              className={isCurrent(morph) ? styles.highlightedRowBg : undefined}\n              key={morph.name}\n            >\n              <td className={`text-capitalize ${isCurrent(morph) ? 'text-bold' : ''}`}>\n                {morph.name}\n              </td>\n              <td style={{ textAlign: 'center'}}>\n                <div className={styles.morphImageContainer}>\n                  <ImageViewer\n                    src={`${basePath}/assets/images/exp-morph-images/${morph.name}.jpeg`}\n                    alt={`Morphology ${morph.name} image`}\n                    loading=\"lazy\"\n                  />\n                </div>\n              </td>\n              <td className={isCurrent(morph) ? 'text-bold' : ''}>\n                {morph.annotation.hasBody.label}\n              </td>\n              <td>\n                {agentMap && entryToArray(morph.contribution)\n                  .map(contribution => agentMap[contribution.agent['@id']])\n                  .sort((a1, a2) => a1.type > a2.type ? 1 : -1)\n                  .map(agent => <span key={agent.label}>{agent.label} <br/></span>)\n                }\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\nexport default ExpMorphologyTable;\n","interface ParsedNexusUrl {\n  deployment: string;\n  entityType: string;\n  org: string;\n  project: string;\n  schema: string;\n  id: string;\n}\n\nconst nexusEntities = [\n  'orgs',\n  'projects',\n  'acls',\n  'views',\n  'resources',\n  'files',\n];\n\nconst nexusUrlR = new RegExp(\n  [\n    '^',\n    '(https?://.+)', // nexus deployment\n    '/',\n    `(${nexusEntities.join('|')})`, // entity type\n    '/',\n    '([^/]+)', // org\n    '/',\n    '([^/]+)', // proj\n    '/?',\n    '([^/]+)?', // schema [optional]\n    '/?',\n    '([^/]+)?', // id [optional]\n    '/?',\n    '$',\n  ].join(''),\n);\n\n/**\n * @author pgetta\n * With given Nexus URL (might be self/project/id url), return it's:\n * * deployment URL\n * * entity type\n * * org label\n * * project label\n * * id\n *\n * @param nexusUrl\n */\nexport const parseUrl = (nexusUrl: string): ParsedNexusUrl => {\n  if (!nexusUrl) throw new Error('selfUrl should be defined');\n\n  const mulEntityTypeR = new RegExp(`(${nexusEntities.join('|')})`, 'g');\n  const mulEntityTypeMatch = nexusUrl.match(mulEntityTypeR);\n  if (mulEntityTypeMatch && mulEntityTypeMatch.length > 1) {\n    throw new Error(\n      'Url contains multiple entity types which is not supported',\n    );\n  }\n\n  const matches = nexusUrl.match(nexusUrlR);\n  if (!matches || matches.length <= 5) {\n    throw new Error('Error while parsing selfUrl');\n  }\n\n  return {\n    deployment: matches[1],\n    entityType: matches[2].slice(0, -1),\n    org: matches[3],\n    project: matches[4],\n    schema: matches[5],\n    id: matches[6],\n  };\n};\n","import React, { useState } from 'react';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { saveAs } from 'file-saver';\nimport { Button } from 'antd';\n\nimport { parseUrl } from '../../utils';\n\n\n\nexport type NexusFileDownloadButtonProps = {\n  filename: string;\n  url: string;\n  org?: string;\n  project?: string;\n  children: React.ReactNode;\n  className?: string;\n  id?: string;\n};\n\nconst NexusFileDownloadButton: React.FC<NexusFileDownloadButtonProps> = ({\n  filename,\n  url,\n  org,\n  project,\n  children,\n  className = '',\n  id,\n}) => {\n  const nexus = useNexusContext();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const download = () => {\n    setLoading(true);\n    const { org: fileOrg, project: fileProject } = {...parseUrl(url), ...{ org, project }};\n    const fileId = url.split('/').reverse()[0];\n\n    nexus.File.get(fileOrg as string, fileProject as string, fileId, { as: 'blob' })\n      .then(imageData => saveAs(imageData as Blob, filename))\n      .catch(console.error)\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <Button\n      id={id}\n      className={className}\n      type=\"primary\"\n      size=\"small\"\n      onClick={download}\n      loading={loading}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default NexusFileDownloadButton;\n","import React from 'react';\nimport { useRouter } from 'next/router';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { Button } from 'antd';\n\nimport ESData from '../../components/ESData';\nimport DataContainer from '../../components/DataContainer';\nimport LayerSelector from '../../components/LayerSelector';\nimport { morphologyDataQuery, mtypeExpMorphologyListDataQuery } from '../../queries/es';\nimport Filters from '../../layouts/Filters';\nimport Title from '../../components/Title';\nimport InfoBox from '../../components/InfoBox';\nimport NexusPlugin from '../../components/NexusPlugin';\nimport { colorName } from './config';\nimport { Layer } from '../../types';\nimport Collapsible from '../../components/Collapsible';\nimport List from '../../components/List';\nimport morphologies from '../../exp-morphology-list.json';\nimport ExpMorphologyFactsheet from '../../components/ExpMorphologyFactsheet';\nimport ExpMorphologyTable from '../../components/ExpMorphologyTable';\nimport NexusFileDownloadButton from '../../components/NexusFileDownloadButton';\nimport { hippocampus } from '../../config';\n\nimport styles from '../../styles/experimental-data/neuron-morphology.module.scss';\n\n\nconst NeuronExperimentalMorphology: React.FC = () => {\n  const router = useRouter();\n  const nexus = useNexusContext();\n\n  const { query } = router;\n\n  const setQuery = (query: any): void => {\n    router.push({ query, pathname: router.pathname }, undefined, { shallow: true });\n  };\n\n  const setLayer = (layer: Layer) => {\n    setQuery({\n      layer,\n      mtype: null,\n      instance: null,\n    });\n  };\n  const currentLayer: Layer = query.layer as Layer;\n\n  const mtypes = currentLayer\n    ? Array.from(new Set(morphologies.filter(m => m.region === currentLayer).map(m => m.mtype))).sort()\n    : [];\n\n  const setMtype = (mtype: string) => {\n    setQuery({\n      mtype,\n      layer: currentLayer,\n      instance: null,\n    });\n  };\n  const currentMtype: string = query.mtype as string;\n\n  const instances = currentMtype\n    ? morphologies.filter(m => m.mtype === currentMtype).map(m => m.name).sort()\n    : []\n\n  const setInstance = (instance: string) => {\n    setQuery({\n      instance,\n      layer: currentLayer,\n      mtype: currentMtype,\n    });\n  };\n  const currentInstance: string = query.instance as string;\n\n  const getMorphologyDistribution = (morphologyResource: any) => {\n    return morphologyResource.distribution.find((d: any) => d.name.match(/\\.asc$/i));\n  };\n\n  const getAndSortMorphologies = (esDocuments) => {\n    return esDocuments\n      .map(esDocument => esDocument._source)\n      .sort((m1, m2) => (m1.name > m2.name) ? 1 : -1);\n  };\n\n  return (\n    <>\n      <Filters backgroundAlt>\n        <div className=\"row bottom-xs w-100\">\n          <div className=\"col-xs-12 col-lg-6\">\n            <Title\n              primaryColor={colorName}\n              title={<span>Neuronal <br /> Morphology</span>}\n              subtitle=\"Experimental Data\"\n            />\n            <InfoBox\n              color=\"grey-1\"\n              text=\"We classified neuronal morphologies in different morphological types (m-types) and created digital 3D reconstructions. Using objective classification methods, we have identified 12 m-types in rat hippocampus CA1.\"\n            />\n          </div>\n          <div className=\"col-xs-12 col-lg-6\">\n            <div className={styles.selector}>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>1. Choose a layer</div>\n                <div className={styles.selectorBody}>\n                  <LayerSelector\n                    activeLayer={currentLayer}\n                    onLayerSelected={setLayer}\n                  />\n                </div>\n              </div>\n              <div className={styles.selectorColumn}>\n                <div className={styles.selectorHead}>2. Select reconstruction</div>\n                <div className={styles.selectorBody}>\n                  <List\n                    list={mtypes}\n                    value={currentMtype}\n                    title=\"m-type\"\n                    color={colorName}\n                    onSelect={setMtype}\n                  />\n                  <br />\n                  <br />\n                  <br />\n                  <List\n                    list={instances}\n                    value={currentInstance}\n                    title=\"Reconstructed morphology\"\n                    color={colorName}\n                    onSelect={setInstance}\n                    anchor=\"data\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <DataContainer visible={!!currentInstance}>\n        <Collapsible\n          id=\"morphologySection\"\n          title={`Neuron Morphology ${currentMtype} ${currentInstance}`}\n        >\n          <ESData\n            query={morphologyDataQuery(currentMtype, currentInstance)}\n          >\n            {esDocuments => (\n              <>\n                {!!esDocuments && !!esDocuments.length && (\n                  <>\n                    <h3>3D view</h3>\n                    <NexusPlugin\n                      className=\"mt-3\"\n                      name=\"neuron-morphology\"\n                      resource={esDocuments[0]._source}\n                      nexusClient={nexus}\n                    />\n                    <div className=\"text-right\">\n                      <Button\n                        className=\"mr-1\"\n                        type=\"primary\"\n                        size=\"small\"\n                        href={`/build/data/morphology?query=${encodeURIComponent(currentInstance)}`}\n                      >\n                        Send to the Build section\n                      </Button>\n\n                      <NexusFileDownloadButton\n                        id=\"morphologyDownloadBtn\"\n                        className=\"mt-3\"\n                        filename={getMorphologyDistribution(esDocuments[0]._source).name}\n                        url={getMorphologyDistribution(esDocuments[0]._source).contentUrl}\n                        org={hippocampus.org}\n                        project={hippocampus.project}\n                      >\n                        Download morphology\n                      </NexusFileDownloadButton>\n                    </div>\n                  </>\n                )}\n              </>\n            )}\n          </ESData>\n          <ExpMorphologyFactsheet\n            id=\"morphometrics\"\n            className=\"mt-3\"\n            morphologyName={currentInstance}\n          />\n        </Collapsible>\n\n        <Collapsible title=\"Population\" className=\"mt-4 mb-4\">\n          <h3>Reconstructed morphologies</h3>\n          <ESData query={mtypeExpMorphologyListDataQuery(currentMtype)}>\n            {esDocuments => (\n              <>\n                {!!esDocuments &&\n                  <ExpMorphologyTable\n                    morphologies={getAndSortMorphologies(esDocuments)}\n                    currentMorphology={currentInstance}\n                  />\n                }\n              </>\n            )}\n          </ESData>\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default NeuronExperimentalMorphology;\n","import React from 'react';\n\nimport NeuronMorphologyView from '../../views/experimental/NeuronMorphology';\n\n\nexport default function About() {\n  return (\n    <NeuronMorphologyView />\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"morphImageContainer\":\"styles_morphImageContainer__NU9Xa\",\"highlightedRowBg\":\"styles_highlightedRowBg__YAZKs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layer\":\"styles_layer__uRzj5\",\"active\":\"styles_active__dKoqz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"neuron-morphology_selector__WWybD\",\"selectorColumn\":\"neuron-morphology_selectorColumn__kAGQ2\",\"selectorHead\":\"neuron-morphology_selectorHead__1BiuM\",\"selectorBody\":\"neuron-morphology_selectorBody__zv7w_\"};"],"names":["b","a","autoBom","console","warn","test","type","Blob","c","d","XMLHttpRequest","open","responseType","onload","g","response","onerror","error","send","status","e","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","f","self","global","navigator","userAgent","saveAs","HTMLAnchorElement","prototype","h","i","URL","webkitURL","j","createElement","name","download","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","body","innerText","HTMLElement","safari","FileReader","k","onloadend","result","replace","readAsDataURL","l","m","module","exports","value","baseGetTag","isObjectLike","__NEXT_P","push","LAYERS","activeLayer","onLayerSelected","div","map","layer","className","styles","onClick","selectLayer","significantFigures","thousandSeparator","prefix","suffix","isNumber","fixed","parseFloat","toPrecision","formatted","toLocaleString","replacement","MOhm","MorphologyFactsheetSingleValueEntry","fact","isNil","span","NumberFormat","Unit","unit","MorphologyFactsheetEntry","neuriteTypes","strPrettify","str","morphologyName","id","stats","expMorphologyStats","p","getFactsheetEntries","neuriteType","Object","entries","statKey","statValue","includes","h3","mean_soma_radius","filter","neuriteHasStats","max_section_length","strong","ImageViewerLazy","dynamic","ssr","props","entryToArray","entry","Array","isArray","getAgentLabel","agent","givenName","familyName","getAgentType","currentMorphology","morphologies","nexus","useNexusContext","agentIds","reduce","ids","morphology","currIds","contribution","Boolean","from","Set","useState","agentMap","setAgentMap","useEffect","length","contributionEsQuery","size","query","terms","View","elasticSearchQuery","hippocampus","then","data","hits","esDocuments","esDocument","_source","agents","label","keyBy","isCurrent","table","thead","tr","th","tbody","morph","undefined","td","style","textAlign","ImageViewer","src","basePath","alt","loading","annotation","hasBody","sort","a1","a2","key","br","nexusEntities","nexusUrlR","RegExp","join","filename","url","org","project","children","setLoading","Button","nexusUrl","Error","mulEntityTypeR","mulEntityTypeMatch","match","matches","deployment","entityType","slice","schema","parseUrl","fileOrg","fileProject","fileId","split","reverse","File","get","as","imageData","catch","finally","router","useRouter","setQuery","pathname","shallow","currentLayer","mtypes","region","mtype","currentMtype","instances","currentInstance","instance","getMorphologyDistribution","morphologyResource","distribution","find","getAndSortMorphologies","m1","m2","Filters","backgroundAlt","Title","primaryColor","colorName","subtitle","InfoBox","color","text","LayerSelector","List","list","onSelect","anchor","DataContainer","visible","Collapsible","ESData","morphologyDataQuery","NexusPlugin","resource","nexusClient","encodeURIComponent","NexusFileDownloadButton","contentUrl","ExpMorphologyFactsheet","mtypeExpMorphologyListDataQuery","ExpMorphologyTable","About","NeuronMorphologyView"],"sourceRoot":""}