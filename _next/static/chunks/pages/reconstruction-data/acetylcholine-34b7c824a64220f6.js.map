{"version":3,"file":"static/chunks/pages/reconstruction-data/acetylcholine-34b7c824a64220f6.js","mappings":"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","sources":["webpack://_N_E/./node_modules/better-react-mathjax/esm/MathJax/MathJax.js","webpack://_N_E/./node_modules/better-react-mathjax/esm/MathJaxContext/MathJaxContext.js","webpack://_N_E/?70f4","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/views/2_reconstruction-data/acetylcholine/NeuronsGraph.tsx","webpack://_N_E/./src/views/2_reconstruction-data/acetylcholine/SynapsesGraph.tsx","webpack://_N_E/./src/views/2_reconstruction-data/Acetylcholine.tsx","webpack://_N_E/./src/pages/reconstruction-data/acetylcholine.tsx","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},__rest=this&&this.__rest||function(t,e){var n={};for(i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&\"function\"==typeof Object.getOwnPropertySymbols)for(var r=0,i=Object.getOwnPropertySymbols(t);r<i.length;r++)e.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(t,i[r])&&(n[i[r]]=t[i[r]]);return n};import React,{useContext,useEffect,useLayoutEffect,useRef}from\"react\";import{MathJaxBaseContext}from\"../MathJaxContext\";var typesettingFailed=function(t){return\"Typesetting failed: \".concat(void 0!==t.message?t.message:t.toString())},MathJax=function(t){function r(){var t;\"every\"===h&&m&&\"post\"===v&&null!==f.current&&(f.current.style.visibility=null!=(t=null==(t=p.style)?void 0:t.visibility)?t:\"visible\"),_.current||(\"first\"===h&&null!==f.current&&(f.current.style.visibility=\"visible\"),n&&n(),_.current=!0),o&&o(),b.current=!1}var e=t.inline,i=void 0!==e&&e,e=t.hideUntilTypeset,n=t.onInitTypeset,o=t.onTypeset,s=t.text,u=t.dynamic,a=t.typesettingOptions,l=t.renderMode,c=t.children,p=__rest(t,[\"inline\",\"hideUntilTypeset\",\"onInitTypeset\",\"onTypeset\",\"text\",\"dynamic\",\"typesettingOptions\",\"renderMode\",\"children\"]),y=useRef(\"\"),f=useRef(null),d=useContext(MathJaxBaseContext),h=null!=e?e:null==d?void 0:d.hideUntilTypeset,v=null!=l?l:null==d?void 0:d.renderMode,g=null!=a?a:null==d?void 0:d.typesettingOptions,m=!1!==u&&(u||\"production\"!==process.env.NODE_ENV),_=useRef(!1),b=useRef(!1);return!b.current&&null!==f.current&&m&&\"every\"===h&&\"post\"===v&&(f.current.style.visibility=\"hidden\"),(\"undefined\"!=typeof window?useLayoutEffect:useEffect)(function(){if((m||!_.current)&&null!==f.current){if(!d)throw Error(\"MathJax was not loaded, did you use the MathJax component outside of a MathJaxContext?\");if(\"pre\"===v){if(!(\"string\"==typeof(t=s)&&0<t.length))throw Error(\"Render mode 'pre' requires text prop to be set and non-empty, which was currently \\\"\".concat(s,'\"'));if(!a||!a.fn)throw Error(\"Render mode 'pre' requires 'typesettingOptions' prop with 'fn' property to be set on MathJax element or in the MathJaxContext\");if(2===d.version)throw Error(\"Render mode 'pre' only available with MathJax 3, and version 2 is currently in use\")}\"post\"!==v&&s===y.current||b.current||(b.current=!0,3===d.version?d.promise.then(function(e){var n;\"pre\"===v?(n=function(t){y.current=s,e.startup.document.clear(),e.startup.document.updateDocument(),null!==f.current&&(f.current.innerHTML=t.outerHTML),r()},a.fn.endsWith(\"Promise\")?e.startup.promise.then(function(){return e[g.fn](s,__assign(__assign({},(null==g?void 0:g.options)||{}),{display:!i}))}).then(n).catch(function(t){throw r(),Error(typesettingFailed(t))}):e.startup.promise.then(function(){var t=e[g.fn](s,__assign(__assign({},(null==g?void 0:g.options)||{}),{display:!i}));n(t)}).catch(function(t){throw r(),Error(typesettingFailed(t))})):e.startup.promise.then(function(){return e.typesetClear([f.current]),e.typesetPromise([f.current])}).then(r).catch(function(t){throw r(),Error(typesettingFailed(t))})}).catch(function(t){throw r(),Error(typesettingFailed(t))}):d.promise.then(function(t){t.Hub.Queue([\"Typeset\",t.Hub,f.current]),t.Hub.Queue(r)}).catch(function(t){throw r(),Error(typesettingFailed(t))}))}var t}),React.createElement(\"span\",__assign({},p,{style:__assign(__assign({display:i?\"inline\":\"block\"},p.style),{visibility:h?\"hidden\":null==(t=p.style)?void 0:t.visibility}),ref:f}),c)};export default MathJax;","var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var t,o=1,n=arguments.length;o<n;o++)for(var a in t=arguments[o])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};import React,{createContext,useContext,useRef}from\"react\";var v2Promise,v3Promise,MathJaxBaseContext=createContext(void 0),DEFAULT_V2_SRC=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-MML-AM_CHTML\",DEFAULT_V3_SRC=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-mml-chtml.js\",MathJaxContext=function(e){var n=e.config,t=e.version,t=void 0===t?3:t,o=e.src,o=void 0===o?2===t?DEFAULT_V2_SRC:DEFAULT_V3_SRC:o,a=e.onStartup,r=e.onLoad,i=e.onError,s=e.typesettingOptions,h=e.renderMode,h=void 0===h?\"post\":h,d=e.hideUntilTypeset,e=e.children,c=useContext(MathJaxBaseContext);if(void 0!==(null==c?void 0:c.version)&&(null==c?void 0:c.version)!==t)throw Error(\"Cannot nest MathJaxContexts with different versions. MathJaxContexts should not be nested at all but if they are, they cannot have different versions. Stick with one version of MathJax in your app and avoid using more than one MathJaxContext.\");if(2===t&&void 0!==v3Promise||3===t&&void 0!==v2Promise)throw Error(\"Cannot use MathJax versions 2 and 3 simultaneously in the same app due to how MathJax is set up in the browser; either you have multiple MathJaxContexts with different versions or you have mounted and unmounted MathJaxContexts with different versions. Please stick with one version of MathJax in your app. File an issue in the project Github page if you need this feature.\");var u=useRef(c),c=useRef((null==c?void 0:c.version)||null);if(null===c.current)c.current=t;else if(c.current!==t)throw Error(\"Cannot change version of MathJax in a MathJaxContext after it has mounted. Reload the page with a new version when this must happen.\");var v=o||(2===t?DEFAULT_V2_SRC:DEFAULT_V3_SRC);function f(t,o){n&&(window.MathJax=n);var e=document.createElement(\"script\");e.type=\"text/javascript\",e.src=v,e.async=!1,e.addEventListener(\"load\",function(){var e=window.MathJax;a&&a(e),t(e),r&&r()}),e.addEventListener(\"error\",function(e){return o(e)}),document.getElementsByTagName(\"head\")[0].appendChild(e)}return void 0===u.current&&(c={typesettingOptions:s,renderMode:h,hideUntilTypeset:d},2===t?void 0===v2Promise&&(\"undefined\"!=typeof window?(v2Promise=new Promise(f)).catch(function(e){if(!i)throw Error(\"Failed to download MathJax version 2 from '\".concat(v,\"' due to: \").concat(e));i(e)}):(v2Promise=Promise.reject()).catch(function(e){})):void 0===v3Promise&&(\"undefined\"!=typeof window?(v3Promise=new Promise(f)).catch(function(e){if(!i)throw Error(\"Failed to download MathJax version 3 from '\".concat(v,\"' due to: \").concat(e));i(e)}):(v3Promise=Promise.reject()).catch(function(e){})),u.current=__assign(__assign({},c),2===t?{version:2,promise:v2Promise}:{version:3,promise:v3Promise})),React.createElement(MathJaxBaseContext.Provider,{value:u.current},e)};export default MathJaxContext;export{MathJaxBaseContext};","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/reconstruction-data/acetylcholine\",\n      function () {\n        return require(\"private-next-pages/reconstruction-data/acetylcholine.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/reconstruction-data/acetylcholine\"])\n      });\n    }\n  ","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import React, { useEffect, useRef, useState } from 'react';\nimport {\n    Chart,\n    ScatterController,\n    CategoryScale,\n    LinearScale,\n    LineController,\n    LogarithmicScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    ChartConfiguration\n} from 'chart.js';\nimport HttpDownloadButton from '@/components/HttpDownloadButton';\nimport { downloadAsJson } from '@/utils';\nimport DownloadButton from '@/components/DownloadButton';\nimport { MathJaxContext, MathJax } from 'better-react-mathjax';\nimport { dataPath } from '@/config';\n\nChart.register(\n    ScatterController,\n    CategoryScale,\n    LinearScale,\n    LineController,\n    LogarithmicScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n);\n\ninterface DataPoint {\n    x: number;\n    y: number;\n}\n\ninterface NeuronGraphData {\n    dataPoints: DataPoint[];\n    equation: string;\n}\n\nconst calculateY = (x: number): number => {\n    const ACH = x;\n    const numerator = 0.567 * Math.pow(ACH, 0.436);\n    const denominator = Math.pow(100, 0.436) + Math.pow(ACH, 0.436);\n    return numerator / denominator;\n};\n\nconst generateLineData = (): DataPoint[] => {\n    const lineData: DataPoint[] = [];\n    for (let i = 0.01; i <= 1000; i *= 1.1) {\n        lineData.push({ x: i, y: calculateY(i) });\n    }\n    return lineData;\n};\n\nconst splitLineData = (data: DataPoint[]): { solidData: DataPoint[], dottedData: DataPoint[] } => {\n    const solidData: DataPoint[] = [];\n    const dottedData: DataPoint[] = [];\n    const splitPoint = 100;\n\n    data.forEach(point => {\n        if (point.x <= splitPoint) {\n            solidData.push(point);\n        } else {\n            dottedData.push(point);\n        }\n    });\n\n    return { solidData, dottedData };\n};\n\nexport type NeuronsGraphProps = {\n    theme?: number;\n};\n\nconst NeuronsGraph: React.FC<NeuronsGraphProps> = ({ theme }) => {\n    const chartRef = useRef<HTMLCanvasElement | null>(null);\n    const chartInstanceRef = useRef<Chart | null>(null);\n    const [data, setData] = useState<NeuronGraphData | null>(null);\n\n    useEffect(() => {\n        fetch(dataPath + '/2_reconstruction-data/acetylcholine/neuron-graph-data.json')\n            .then((response) => response.json())\n            .then((fetchedData) => {\n                const neuronGraphData: NeuronGraphData = {\n                    dataPoints: fetchedData.filter((item: any) => 'x' in item && 'y' in item),\n                    equation: fetchedData.find((item: any) => 'equation' in item)?.equation || ''\n                };\n                setData(neuronGraphData);\n            });\n    }, []);\n\n    const createChart = () => {\n        if (chartRef.current && data) {\n            const ctx = chartRef.current.getContext('2d');\n            if (ctx) {\n                const lineData = generateLineData();\n                const { solidData, dottedData } = splitLineData(lineData);\n\n                if (chartInstanceRef.current) {\n                    chartInstanceRef.current.destroy();\n                }\n\n                const chartConfig: ChartConfiguration = {\n                    type: 'scatter',\n                    data: {\n                        datasets: [\n                            {\n                                label: 'Experimental data',\n                                data: data.dataPoints,\n                                backgroundColor: '#3B4165',\n                                pointRadius: 3\n                            },\n                            {\n                                label: 'Fit',\n                                data: solidData,\n                                borderColor: '#3B4165',\n                                type: 'line',\n                                fill: false,\n                                pointRadius: 0,\n                                borderWidth: 2,\n                                tension: 0\n                            },\n                            {\n                                label: 'Extrapolated',\n                                data: dottedData,\n                                borderColor: '#3B4165',\n                                type: 'line',\n                                fill: false,\n                                pointRadius: 0,\n                                borderWidth: 2,\n                                borderDash: [6, 6],\n                                tension: 0\n                            }\n                        ]\n                    },\n                    options: {\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        animation: { duration: 0 },\n                        scales: {\n                            x: {\n                                type: 'logarithmic' as const,\n                                position: 'bottom',\n                                min: 0.01,\n                                max: 1000,\n                                title: {\n                                    display: true,\n                                    text: 'ACh Concentration (µM)',\n                                    color: '#050A30'\n                                },\n                                grid: {\n                                    color: 'rgba(0, 0, 0, 0.1)',\n                                    drawOnChartArea: true,\n                                },\n                                ticks: {\n                                    callback: function (value) {\n                                        const logValue = Math.log10(value as number);\n                                        switch (logValue) {\n                                            case -2: return '10⁻²';\n                                            case -1: return '10⁻¹';\n                                            case 0: return '1';\n                                            case 1: return '10';\n                                            case 2: return '10²';\n                                            case 3: return '10³';\n                                            default: return '';\n                                        }\n                                    },\n                                    autoSkip: false,\n                                    maxTicksLimit: 6,\n                                    color: '#050A30'\n                                }\n                            },\n                            y: {\n                                type: 'linear',\n                                min: 0,\n                                max: 0.4,\n                                title: {\n                                    display: true,\n                                    text: 'Current (nA)',\n                                    color: '#050A30'\n                                },\n                                grid: {\n                                    color: 'rgba(0, 0, 0, 0.1)',\n                                    drawOnChartArea: true,\n                                },\n                                ticks: {\n                                    color: '#050A30'\n                                }\n                            }\n                        },\n                        plugins: {\n                            legend: {\n                                display: true,\n                                position: 'top',\n                                labels: {\n                                    color: '#050A30'\n                                }\n                            },\n                            title: {\n                                display: false,\n                                text: '',\n                                color: '#050A30'\n                            }\n                        },\n                        backgroundColor: 'white',\n                    }\n                };\n\n                chartInstanceRef.current = new Chart(ctx, chartConfig);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (data) {\n            createChart();\n\n            const handleResize = () => {\n                createChart();\n            };\n\n            window.addEventListener('resize', handleResize);\n\n            return () => {\n                window.removeEventListener('resize', handleResize);\n                if (chartInstanceRef.current) {\n                    chartInstanceRef.current.destroy();\n                }\n            };\n        }\n    }, [data]);\n\n    return (\n        <div>\n            <MathJaxContext>\n                <MathJax>\n                    {data ? `\\\\[${data.equation}\\\\]` : ''}\n                </MathJax>\n            </MathJaxContext>\n\n            <div className=\"graph\" style={{ height: '400px' }}>\n                <canvas ref={chartRef} />\n            </div>\n            <ul className='graph flex flex-row gap-4 !py-2'>\n                <li>• Experimental data</li>\n                <li>― Fit</li>\n                <li>- - Extrapolated</li>\n            </ul>\n\n            <div className=\"mt-4\">\n                <DownloadButton theme={theme} onClick={() => data && downloadAsJson(data, `neuron-graph-data.json`)}>\n                    Neuron\n                </DownloadButton>\n            </div>\n        </div>\n    );\n};\n\nexport default NeuronsGraph;\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n    Chart,\n    ScatterController,\n    LineController,\n    CategoryScale,\n    LinearScale,\n    LogarithmicScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Title,\n    ChartConfiguration\n} from 'chart.js';\n\nimport HttpDownloadButton from '@/components/HttpDownloadButton';\nimport { downloadAsJson } from '@/utils';\nimport DownloadButton from '@/components/DownloadButton';\nimport { MathJaxContext, MathJax } from 'better-react-mathjax';\n\nimport { dataPath } from '@/config';\n\nChart.register(\n    ScatterController,\n    LineController,\n    CategoryScale,\n    LinearScale,\n    LogarithmicScale,\n    PointElement,\n    LineElement,\n    Tooltip,\n    Title\n);\n\ninterface DataPoint {\n    x: number;\n    y: number;\n}\n\ninterface SynapsesGraphData {\n    dataPoints: DataPoint[];\n    equation: string;\n}\n\nconst calculateFormulaPoints = (): DataPoint[] => {\n    const points: DataPoint[] = [];\n    for (let x = 0.01; x <= 1000; x *= 1.1) {\n        const ACh = x;\n        const y = (1.0 * Math.pow(ACh, -0.576)) / (Math.pow(4.541, -0.576) + Math.pow(ACh, -0.576));\n        points.push({ x: ACh, y });\n    }\n    return points;\n};\n\nconst splitFormulaPoints = (points: DataPoint[]): { solidPoints: DataPoint[]; dottedPoints: DataPoint[] } => {\n    const solidPoints: DataPoint[] = [];\n    const dottedPoints: DataPoint[] = [];\n    const splitPoint = 500;\n\n    points.forEach(point => {\n        if (point.x <= splitPoint) {\n            solidPoints.push(point);\n        } else {\n            dottedPoints.push(point);\n        }\n    });\n\n    return { solidPoints, dottedPoints };\n};\n\nexport type SynapsesGraphProps = {\n    theme?: number;\n};\n\nconst SynapsesGraph: React.FC<SynapsesGraphProps> = ({ theme }) => {\n    const chartRef = useRef<HTMLCanvasElement | null>(null);\n    const chartInstanceRef = useRef<Chart | null>(null);\n    const [data, setData] = useState<SynapsesGraphData | null>(null);\n\n    useEffect(() => {\n        fetch(dataPath + '/2_reconstruction-data/acetylcholine/synapses-graph-data.json')\n            .then((response) => response.json())\n            .then((fetchedData) => {\n                const synapsesGraphData: SynapsesGraphData = {\n                    dataPoints: fetchedData.filter((item: any) => 'x' in item && 'y' in item),\n                    equation: fetchedData.find((item: any) => 'equation' in item)?.equation || ''\n                };\n                setData(synapsesGraphData);\n            });\n    }, []);\n\n    const createChart = () => {\n        if (chartRef.current && data) {\n            const ctx = chartRef.current.getContext('2d');\n            if (ctx) {\n                const formulaPoints = calculateFormulaPoints();\n                const { solidPoints, dottedPoints } = splitFormulaPoints(formulaPoints);\n\n                if (chartInstanceRef.current) {\n                    chartInstanceRef.current.destroy();\n                }\n\n                const chartConfig: ChartConfiguration = {\n                    type: 'scatter',\n                    data: {\n                        datasets: [\n                            {\n                                label: 'Synapses Data',\n                                data: data.dataPoints,\n                                backgroundColor: '#3B4165',\n                                pointRadius: 3\n                            },\n                            {\n                                label: 'Fit',\n                                data: solidPoints,\n                                type: 'line',\n                                borderColor: '#3B4165',\n                                borderWidth: 2,\n                                fill: false,\n                                showLine: true,\n                                pointRadius: 0,\n                                tension: 0.4\n                            },\n                            {\n                                label: 'Experimental data',\n                                data: dottedPoints,\n                                type: 'line',\n                                borderColor: '#3B4165',\n                                borderWidth: 2,\n                                fill: false,\n                                showLine: true,\n                                pointRadius: 0,\n                                borderDash: [6, 6],\n                                tension: 0.4\n                            }\n                        ]\n                    },\n                    options: {\n                        responsive: true,\n                        animation: { duration: 0 },\n                        maintainAspectRatio: false,\n                        scales: {\n                            x: {\n                                type: 'logarithmic',\n                                position: 'bottom',\n                                min: 0.01,\n                                max: 1000,\n                                title: {\n                                    display: true,\n                                    text: 'ACh Concentration (µM)',\n                                    color: '#050A30'\n                                },\n                                grid: {\n                                    color: 'rgba(0, 0, 0, 0.1)',\n                                    drawOnChartArea: true,\n                                },\n                                ticks: {\n                                    callback: function (value) {\n                                        const logValue = Math.log10(value as number);\n                                        switch (logValue) {\n                                            case -2: return '10⁻²';\n                                            case -1: return '10⁻¹';\n                                            case 0: return '1';\n                                            case 1: return '10';\n                                            case 2: return '10²';\n                                            case 3: return '10³';\n                                            default: return '';\n                                        }\n                                    },\n                                    autoSkip: false,\n                                    maxTicksLimit: 6,\n                                    color: '#050A30',\n                                }\n                            },\n                            y: {\n                                type: 'linear',\n                                min: 0,\n                                max: 1.2,\n                                title: {\n                                    display: true,\n                                    text: 'Use scaling',\n                                    color: '#050A30'\n                                },\n                                grid: {\n                                    color: 'rgba(0, 0, 0, 0.1)',\n                                    drawOnChartArea: true,\n                                },\n                                ticks: {\n                                    stepSize: 0.2,\n                                    color: '#050A30'\n                                }\n                            }\n                        }\n                    }\n                };\n\n                chartInstanceRef.current = new Chart(ctx, chartConfig);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (data) {\n            createChart();\n\n            const handleResize = () => {\n                createChart();\n            };\n\n            window.addEventListener('resize', handleResize);\n\n            return () => {\n                window.removeEventListener('resize', handleResize);\n                if (chartInstanceRef.current) {\n                    chartInstanceRef.current.destroy();\n                }\n            };\n        }\n    }, [data]);\n\n    return (\n        <div>\n            <MathJaxContext>\n                <MathJax>\n                    {data ? `\\\\[${data.equation}\\\\]` : ''}\n                </MathJax>\n            </MathJaxContext>\n            <div className=\"graph mb-4\" style={{ height: '400px' }}>\n                <canvas ref={chartRef} />\n            </div>\n            <ul className='graph flex flex-row gap-4 !py-2'>\n                <li>• Experimental data</li>\n                <li>― Fit</li>\n                <li>- - Extrapolated</li>\n            </ul>\n            <div className=\"mt-4\">\n                <DownloadButton theme={theme} onClick={() => data && downloadAsJson(data, `synapses-graph-data.json`)}>\n                    Synapses\n                </DownloadButton>\n            </div>\n        </div>\n    );\n};\n\nexport default SynapsesGraph;","import React from 'react';\nimport { Row, Col } from 'antd';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\nimport { colorName } from './config';\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\n\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\n\nimport NeuronsGraph from './acetylcholine/NeuronsGraph';\nimport SynapsesGraph from './acetylcholine/SynapsesGraph';\n\nimport selectorStyle from '@/styles/selector.module.scss';\n\nconst AcetylcholineView: React.FC = () => {\n\n  const theme = 2;\n\n  return (\n    <>\n      <Filters theme={theme}>\n        <div className=\"flex flex-col md:flex-row w-full md:items-center mt-40 md:mt-0\">\n          {/* Title and Info */}\n          <div className=\"w-full mb-12 md:mb-0\">\n            <StickyContainer>\n              <Title\n                title=\"Acetylcholine\"\n                subtitle=\"Reconstruction Data\"\n                theme={theme}\n              />\n              <div role=\"information\">\n                <InfoBox>\n                  <p>\n                    Using data from <Link className={\"link theme-\" + theme} href={\"/experimental-data/acetylcholine/\"}>literature</Link>, we derive a dose-effect behavior of a tonic application of ACh on neurons and synapses.\n                  </p>\n                </InfoBox>\n              </div>\n            </StickyContainer>\n          </div>\n        </div>\n      </Filters>\n\n      <DataContainer theme={theme} navItems={[\n        { id: 'neuronsSection', label: 'Neurons' },\n        { id: 'synapsesSection', label: 'Synapses' },\n      ]}>\n\n        <Collapsible id=\"neuronsSection\" title=\"Neurons\" className=\"mt-4\">\n          <p className='text-lg mb-4'>The net effect of ACh on CA1 neurons results in a depolarising current. The dose-effect relationship can be described with a Hill function.</p>\n          <NeuronsGraph theme={theme} />\n        </Collapsible>\n\n        <Collapsible id=\"synapsesSection\" title=\"Synapses\" className=\"mt-4\">\n          <p className='text-lg mb-4'>The net effect of ACh on CA1 synapses results in an increase of the initial release probability (i.e. U parameter of TM synapse model). The dose-effect relationship can be described with a Hill function.</p>\n          <SynapsesGraph theme={theme} />\n        </Collapsible>\n\n      </DataContainer >\n    </>\n  );\n};\n\nexport default AcetylcholineView;","import Head from 'next/head';\nimport AcetylcholineView from '@/views/2_reconstruction-data/Acetylcholine';\n\nexport default function AcetylcholinePage() {\n  const metadata = {\n    title: 'Acetylcholine - Reconstruction Data | The Hippocampus Hub',\n    description:\n      'Analyze the dose-effect behavior of acetylcholine (ACh) on CA1 neurons and synapses. Explore dose-dependent changes in depolarizing currents and synaptic release probability.',\n    keywords: [\n      'Acetylcholine',\n      'Hippocampus',\n      'Dose-Effect Behavior',\n      'Neurons',\n      'Synapses',\n      'Reconstruction Data',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <AcetylcholineView />\n    </>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};"],"names":["__assign","Object","assign","t","e","n","r","arguments","length","i","prototype","hasOwnProperty","call","apply","__rest","indexOf","getOwnPropertySymbols","propertyIsEnumerable","typesettingFailed","concat","message","toString","__webpack_exports__","Z","h","m","v","f","current","style","visibility","p","_","o","b","inline","hideUntilTypeset","onInitTypeset","onTypeset","s","text","u","dynamic","a","typesettingOptions","l","renderMode","c","children","y","react__WEBPACK_IMPORTED_MODULE_0__","useRef","d","useContext","_MathJaxContext__WEBPACK_IMPORTED_MODULE_1__","g","window","useLayoutEffect","useEffect","Error","fn","version","promise","then","startup","document","clear","updateDocument","innerHTML","outerHTML","endsWith","options","display","catch","typesetClear","typesetPromise","Hub","Queue","createElement","ref","v2Promise","v3Promise","MathJaxBaseContext","createContext","DEFAULT_V2_SRC","DEFAULT_V3_SRC","config","src","onStartup","onLoad","onError","MathJax","type","async","addEventListener","getElementsByTagName","appendChild","Promise","reject","Provider","value","__NEXT_P","push","__webpack_require__","centered","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","styles","classNames","Chart","register","ScatterController","CategoryScale","LinearScale","LineController","LogarithmicScale","PointElement","LineElement","Tooltip","calculateY","numerator","Math","pow","x","generateLineData","lineData","splitLineData","solidData","dottedData","data","forEach","point","acetylcholine_NeuronsGraph","theme","chartRef","chartInstanceRef","setData","useState","fetch","dataPath","response","json","fetchedData","neuronGraphData","dataPoints","filter","item","equation","find","createChart","ctx","getContext","destroy","chartConfig","datasets","label","backgroundColor","pointRadius","borderColor","fill","borderWidth","tension","borderDash","responsive","maintainAspectRatio","animation","duration","scales","position","min","max","title","color","grid","drawOnChartArea","ticks","callback","log10","autoSkip","maxTicksLimit","plugins","legend","labels","handleResize","removeEventListener","jsx_runtime","jsxs","MathJaxContext","height","canvas","ul","li","DownloadButton","onClick","downloadAsJson","Title","calculateFormulaPoints","points","ACh","splitFormulaPoints","solidPoints","dottedPoints","acetylcholine_SynapsesGraph","synapsesGraphData","formulaPoints","showLine","stepSize","Acetylcholine","Fragment","Filters","StickyContainer","subtitle","role","InfoBox","Link","href","DataContainer","navItems","id","Collapsible","NeuronsGraph","SynapsesGraph","AcetylcholinePage","metadata","description","keywords","author","creator","publisher","Head","meta","name","content","join","AcetylcholineView","module","exports"],"sourceRoot":""}