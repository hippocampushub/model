{"version":3,"file":"static/chunks/pages/reconstruction-data/connection-anatomy-1fc4cda61ac72f24.js","mappings":"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","sources":["webpack://_N_E/?074a","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/views/2_reconstruction-data/connection-anatomy/synapsesPerConnection.tsx","webpack://_N_E/./src/views/2_reconstruction-data/ConnectionAnatomy.tsx","webpack://_N_E/./src/pages/reconstruction-data/connection-anatomy.tsx","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/reconstruction-data/connection-anatomy\",\n      function () {\n        return require(\"private-next-pages/reconstruction-data/connection-anatomy.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/reconstruction-data/connection-anatomy\"])\n      });\n    }\n  ","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import React, { useEffect, useRef, useState } from 'react';\nimport { Chart, ChartConfiguration, ChartDataset, registerables } from 'chart.js';\nimport { downloadAsJson } from '@/utils';\nimport DownloadButton from '@/components/DownloadButton';\nimport { dataPath } from '@/config';\nimport { MathJaxContext, MathJax } from 'better-react-mathjax';\n\nChart.register(...registerables);\n\ninterface SynapsesPerConnectionProps {\n    theme?: number;\n}\n\ninterface SynapsesPerConnectionData {\n    values: [\n        {\n            value_map: {\n                connection_class: Record<string, string>;\n                mod_mean: Record<string, number>;\n                bio_mean: Record<string, number>;\n                mod_std: Record<string, number>;\n                bio_std: Record<string, number>;\n            };\n        },\n        { value: number },\n        { value: number }\n    ];\n}\n\ninterface CustomDataPoint {\n    x: number;\n    y: number;\n    xErr?: number;\n    yErr?: number;\n}\n\n// Custom plugin for error bars\nconst errorBarsPlugin = {\n    id: 'errorBars',\n    afterDatasetsDraw(chart) {\n        const ctx = chart.ctx;\n        chart.data.datasets.forEach((dataset, i) => {\n            const meta = chart.getDatasetMeta(i);\n            if (!meta.hidden) {\n                meta.data.forEach((element, index) => {\n                    const { x, y, xErr, yErr } = dataset.data[index] as CustomDataPoint;\n                    const xScale = chart.scales.x;\n                    const yScale = chart.scales.y;\n\n                    ctx.save();\n                    ctx.lineWidth = 2;\n                    ctx.strokeStyle = dataset.borderColor as string;\n\n                    if (xErr) {\n                        ctx.beginPath();\n                        ctx.moveTo(xScale.getPixelForValue(x - xErr), yScale.getPixelForValue(y));\n                        ctx.lineTo(xScale.getPixelForValue(x + xErr), yScale.getPixelForValue(y));\n                        ctx.stroke();\n                    }\n\n                    if (yErr) {\n                        ctx.beginPath();\n                        ctx.moveTo(xScale.getPixelForValue(x), yScale.getPixelForValue(y - yErr));\n                        ctx.lineTo(xScale.getPixelForValue(x), yScale.getPixelForValue(y + yErr));\n                        ctx.stroke();\n                    }\n\n                    ctx.restore();\n                });\n            }\n        });\n    }\n};\n\nconst SynapsesPerConnection: React.FC<SynapsesPerConnectionProps> = ({ theme }) => {\n    const chartRef = useRef<HTMLCanvasElement>(null);\n    const [chartSize, setChartSize] = useState(0);\n    const [data, setData] = useState<SynapsesPerConnectionData | null>(null);\n\n    useEffect(() => {\n        fetch(dataPath + '/2_reconstruction-data/connection-anatomy/synapses-per-conections.json')\n            .then((response) => response.json())\n            .then((fetchedData) => setData(fetchedData));\n    }, []);\n\n    useEffect(() => {\n        const updateSize = () => {\n            const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n            const size = Math.min(vw * 0.8, 600); // 80% of viewport width, max 600px\n            setChartSize(size);\n        };\n\n        updateSize();\n        window.addEventListener('resize', updateSize);\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    useEffect(() => {\n        if (!chartRef.current || chartSize === 0 || !data) return;\n\n        const ctx = chartRef.current.getContext('2d');\n        if (!ctx) return;\n\n        const createDatasets = (): ChartDataset<'scatter'>[] => {\n            const valueMap = data.values[0].value_map;\n            const connectionClasses = ['ee', 'ei', 'ie', 'ii'];\n            const colors = ['red', 'green', 'blue', 'magenta'];\n\n            const datasets: ChartDataset<'scatter'>[] = connectionClasses.map((connectionClass, index) => ({\n                label: connectionClass.toUpperCase(),\n                data: Object.keys(valueMap.connection_class)\n                    .filter(key => valueMap.connection_class[key] === connectionClass)\n                    .map(key => ({\n                        x: valueMap.mod_mean[key],\n                        y: valueMap.bio_mean[key],\n                        xErr: valueMap.mod_std[key],\n                        yErr: valueMap.bio_std[key],\n                    } as CustomDataPoint)),\n                backgroundColor: colors[index],\n                borderColor: colors[index],\n            }));\n\n            const maxX = Math.max(...Object.values(valueMap.mod_mean));\n            const maxY = Math.max(...Object.values(valueMap.bio_mean));\n            const maxValue = Math.max(maxX, maxY);\n\n            // Add diagonal line\n            datasets.push({\n                label: 'Diagonal',\n                data: [\n                    { x: 0, y: 0, xErr: 0, yErr: 0 },\n                    { x: maxValue, y: maxValue, xErr: 0, yErr: 0 }\n                ] as CustomDataPoint[],\n                borderColor: 'black',\n                borderDash: [5, 5],\n                pointRadius: 0,\n                showLine: true,\n            });\n\n            // Add fit lines\n            const slopeII = data.values[1].value;\n            const slopeRest = data.values[2].value;\n\n            datasets.push({\n                label: 'Fit (II)',\n                data: [\n                    { x: 0, y: 0, xErr: 0, yErr: 0 },\n                    { x: maxValue, y: maxValue * slopeII, xErr: 0, yErr: 0 }\n                ] as CustomDataPoint[],\n                borderColor: 'magenta',\n                pointRadius: 0,\n                showLine: true,\n            });\n\n            datasets.push({\n                label: 'Fit (Rest)',\n                data: [\n                    { x: 0, y: 0, xErr: 0, yErr: 0 },\n                    { x: maxValue, y: maxValue * slopeRest, xErr: 0, yErr: 0 }\n                ] as CustomDataPoint[],\n                borderColor: 'red',\n                pointRadius: 0,\n                showLine: true,\n            });\n\n            return datasets;\n        };\n\n        const chartConfig: ChartConfiguration<'scatter'> = {\n            type: 'scatter',\n            data: {\n                datasets: createDatasets(),\n            },\n            options: {\n                animation: {\n                    duration: 0\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: { position: 'top' },\n                    tooltip: {\n                        callbacks: {\n                            label: (context) => {\n                                const point = context.raw as CustomDataPoint;\n                                return `${context.dataset.label}: (${point.x.toFixed(2)} ± ${point.xErr?.toFixed(2) || 'N/A'}, ${point.y.toFixed(2)} ± ${point.yErr?.toFixed(2) || 'N/A'})`;\n                            },\n                        },\n                    },\n                },\n                scales: {\n                    x: {\n                        type: 'linear',\n                        position: 'bottom',\n                        title: { display: true, text: 'Structural circuit (#)' },\n                    },\n                    y: {\n                        type: 'linear',\n                        position: 'left',\n                        title: { display: true, text: 'Bio data (#)' },\n                    },\n                },\n            },\n            plugins: [errorBarsPlugin],\n        };\n\n        const chart = new Chart(ctx, chartConfig);\n\n        return () => {\n            chart.destroy();\n        };\n    }, [chartSize, data]);\n\n    if (!data) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className=\"w-full max-w-3xl\">\n            <div className=\"flex flex-row\">\n                <div className=\"flex flex-col\">\n                    <span>  Pink line: <i>y = 0.1096x</i></span>\n                    <span>  Red line: <i>y=1.1690x</i></span>\n                    <span>  Dashed line: <i>y = x</i></span>\n                </div>\n            </div>\n            <div className='graph' style={{ width: `${chartSize}px`, height: `${chartSize}px` }}>\n                <canvas ref={chartRef} />\n            </div>\n            <div className=\"mt-4 \">\n                <DownloadButton\n                    theme={theme}\n                    onClick={() => downloadAsJson(data, 'Synapses-Per-Connection-Data.json')}\n                >\n                    Synapses per connection\n                </DownloadButton>\n            </div>\n        </div>\n    );\n};\n\nexport default SynapsesPerConnection;\n","import React from 'react';\nimport Link from 'next/link';\n\nimport Filters from '@/layouts/Filters';\nimport StickyContainer from '@/components/StickyContainer';\nimport Title from '@/components/Title';\nimport InfoBox from '@/components/InfoBox';\nimport DataContainer from '@/components/DataContainer';\nimport Collapsible from '@/components/Collapsible';\n\nimport SynsPerConnectionTable from './connection-anatomy/synapsesPerConnection';\n\nconst ConnectionsView: React.FC = () => {\n\n  const theme = 2;\n\n  return (\n    <>\n      <Filters theme={theme}>\n        <div className=\"flex flex-col md:flex-row w-full md:items-center mt-40 md:mt-0\">\n          {/* Title and Info */}\n          <div className=\"w-full mb-12 md:mb-0\">\n            <StickyContainer>\n              <Title\n                title=\"Connection Anatomy\"\n                subtitle=\"Reconstruction Data\"\n                theme={theme}\n              />\n              <div role=\"information\">\n                <InfoBox>\n                  <p>\n                    We used sparse data on <Link href={\"/experimental-data/connection-anatomy/\"} className={\"link theme-\" + theme}>connections</Link> to estimate properties of uncharacterized pathways.\n                  </p>\n                </InfoBox>\n              </div>\n            </StickyContainer>\n          </div>\n        </div>\n      </Filters>\n\n      <DataContainer theme={theme} navItems={[\n        { id: 'nbSynapsesPerConnectionSection', label: 'Nb synapses p. connection' },\n        { id: 'boutonDensitySection', label: 'Bouton density' },\n      ]}>\n\n        <Collapsible id=\"nbSynapsesPerConnectionSection\" title=\"Number of synapses per connection\">\n          <p>For <u>characterized pathways</u> we can use data from literature (see <Link href={\"/experimental-data/connection-anatomy/\"}> connection anatomy</Link>)</p>\n          <p>For <u>uncharacterized pathways</u> we can use the following plot to extrapolate the ratio between appositions and synapses per connection.</p>\n          <div className=\"my-8\">\n            <SynsPerConnectionTable theme={theme} />\n          </div>\n          <p>For each pathway, the standard deviation is computed multiplying the mean and the coefficient of variation (CV) which is set to 0.5.</p>\n        </Collapsible>\n\n        <Collapsible id=\"boutonDensitySection\" title=\"Bouton density\">\n          <p>For <u>characterized pathways</u> we can use data from literature (see <Link href={\"/experimental-data/connection-anatomy/\"}>connection anatomy</Link>)</p>\n          <p>For <u>uncharacterized pathways</u> we can use the average of the values from the characterized pathways (0.2260 &#181;m<sup>-1</sup>).</p>\n        </Collapsible>\n\n      </DataContainer >\n    </>\n  );\n};\n\n\nexport default ConnectionsView;\n","import Head from 'next/head';\nimport ConnectionAnatomyView from '@/views/2_reconstruction-data/ConnectionAnatomy';\n\nexport default function ConnectionAnatomyPage() {\n  const metadata = {\n    title: 'Connection Anatomy - Reconstruction Data | The Hippocampus Hub',\n    description:\n      'Explore the anatomical properties of neuronal connections in the hippocampus. Analyze synapse numbers, bouton density, and the relationship between synaptic appositions and connectivity pathways.',\n    keywords: [\n      'Connection Anatomy',\n      'Hippocampus',\n      'Synapses',\n      'Bouton Density',\n      'Reconstruction Data',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <ConnectionAnatomyView />\n    </>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};"],"names":["window","__NEXT_P","push","__webpack_require__","__webpack_exports__","Z","centered","children","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","styles","classNames","Chart","register","registerables","errorBarsPlugin","id","afterDatasetsDraw","chart","ctx","data","datasets","forEach","dataset","i","meta","getDatasetMeta","hidden","element","index","x","y","xErr","yErr","xScale","scales","yScale","save","lineWidth","strokeStyle","borderColor","beginPath","moveTo","getPixelForValue","lineTo","stroke","restore","synapsesPerConnection","theme","chartRef","useRef","chartSize","setChartSize","useState","setData","useEffect","fetch","dataPath","then","response","json","fetchedData","updateSize","vw","Math","max","document","documentElement","clientWidth","innerWidth","min","addEventListener","removeEventListener","current","getContext","chartConfig","type","createDatasets","valueMap","values","value_map","colors","connectionClasses","map","connectionClass","label","toUpperCase","Object","keys","connection_class","filter","key","mod_mean","bio_mean","mod_std","bio_std","backgroundColor","maxX","maxY","maxValue","borderDash","pointRadius","showLine","slopeII","value","slopeRest","options","animation","duration","responsive","maintainAspectRatio","plugins","legend","position","tooltip","callbacks","point","context","raw","toFixed","concat","title","display","text","destroy","jsx_runtime","jsxs","span","style","width","height","canvas","ref","DownloadButton","onClick","downloadAsJson","ConnectionAnatomy","Fragment","Filters","StickyContainer","Title","subtitle","role","InfoBox","p","Link","href","DataContainer","navItems","Collapsible","u","SynsPerConnectionTable","sup","ConnectionAnatomyPage","metadata","description","keywords","author","creator","publisher","Head","name","content","join","ConnectionAnatomyView","module","exports"],"sourceRoot":""}