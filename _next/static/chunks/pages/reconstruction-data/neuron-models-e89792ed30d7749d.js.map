{"version":3,"file":"static/chunks/pages/reconstruction-data/neuron-models-e89792ed30d7749d.js","mappings":"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","sources":["webpack://_N_E/?346f","webpack://_N_E/./src/components/DownloadModel/index.tsx","webpack://_N_E/./src/components/LayerSelector3D/index.tsx","webpack://_N_E/./src/views/2_reconstruction-data/neuron-model/MechanismToolTip.tsx","webpack://_N_E/./src/views/2_reconstruction-data/neuron-model/MechanismTable.tsx","webpack://_N_E/./src/views/2_reconstruction-data/neuron-model/ExperimentalRecordingsTable.tsx","webpack://_N_E/./src/views/2_reconstruction-data/neuron-model/EFeature.tsx","webpack://_N_E/./src/views/2_reconstruction-data/NeuronModels.tsx","webpack://_N_E/./src/pages/reconstruction-data/neuron-models.tsx","webpack://_N_E/./src/views/2_reconstruction-data/config.ts","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/reconstruction-data/neuron-models\",\n      function () {\n        return require(\"private-next-pages/reconstruction-data/neuron-models.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/reconstruction-data/neuron-models\"])\n      });\n    }\n  ","import React, { useState } from 'react';\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\nimport DownloadButton from '../DownloadButton';\n\ninterface DownloadModelProps {\n    theme: any; // Replace 'any' with the actual theme type\n    resources: string[];\n}\n\nconst DownloadModel: React.FC<DownloadModelProps> = ({ theme, resources }) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const addResourceToZip = async (zip: JSZip, resourcePath: string) => {\n        try {\n            const response = await fetch(resourcePath);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch resource: ${resourcePath}`);\n            }\n\n            const fileName = resourcePath.split('/').pop() || '';\n            const content = await response.blob();\n\n            if (fileName.endsWith('.zip')) {\n                // It's a zip file, add it directly\n                zip.file(fileName, content);\n            } else {\n                const contentType = response.headers.get('content-type');\n                if (contentType && contentType.includes('application/json')) {\n                    // It's likely a folder (directory listing)\n                    const files = await response.json();\n                    const folderName = resourcePath.split('/').filter(Boolean).pop() || '';\n                    const folderZip = zip.folder(folderName);\n\n                    if (folderZip) {\n                        for (const file of files) {\n                            const filePath = `${resourcePath}${file}`;\n                            await addResourceToZip(folderZip, filePath);\n                        }\n                    }\n                } else {\n                    // It's a regular file\n                    zip.file(fileName, content);\n                }\n            }\n        } catch (error) {\n            console.warn(`Failed to add resource: ${resourcePath}`, error);\n        }\n    };\n\n    const downloadResources = async () => {\n        setIsLoading(true);\n        setError(null);\n        const zip = new JSZip();\n\n        try {\n            for (const resource of resources) {\n                await addResourceToZip(zip, resource);\n            }\n\n            const zipContent = await zip.generateAsync({ type: 'blob' });\n            saveAs(zipContent, 'neuron_model.zip');\n        } catch (error) {\n            console.error('Error downloading resources:', error);\n            setError(error instanceof Error ? error.message : 'An unknown error occurred');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <>\n            <DownloadButton\n                onClick={downloadResources}\n                theme={theme}\n                isLoading={isLoading}\n            >\n                {isLoading ? 'Downloading...' : 'Download Model'}\n            </DownloadButton>\n            {error && <div style={{ color: 'red', marginTop: '10px' }}>{error}</div>}\n        </>\n    );\n};\n\nexport default DownloadModel;\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { Layer } from '../../types';\nimport { layers, theme } from '../../constants'; // Import theme\nimport { basePath } from '@/config';\n\ntype LayerSelectProps3D = {\n    value?: Layer;\n    onSelect?: (layer: Layer) => void;\n    theme?: number;\n};\n\nconst LayerSelector3D: React.FC<LayerSelectProps3D> = ({ value, onSelect, theme: themeProp = 1 }) => {\n    const mountRef = useRef<HTMLDivElement | null>(null);\n    const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n    const [trapezoids, setTrapezoids] = useState<THREE.Mesh[]>([]);\n    const [edges, setEdges] = useState<THREE.LineSegments[]>([]);\n    const [texts, setTexts] = useState<THREE.Mesh[]>([]);\n    const [sceneReady, setSceneReady] = useState(false);\n    const [scene, setScene] = useState<THREE.Scene | null>(null);\n    const [camera, setCamera] = useState<THREE.OrthographicCamera | null>(null);\n    const [renderer, setRenderer] = useState<THREE.WebGLRenderer | null>(null);\n\n    const distance = 0;\n    const angle = 10;\n    const initialTopWidth = 1.5;\n    const edgeThickness = 1;\n\n    const trapezoidHeights = {\n        SLM: 0.224 * 1.6,\n        SR: 0.42791 * 1.6,\n        SP: 0.090 * 1.6,\n        SO: 0.258 * 1.6,\n    };\n\n    useEffect(() => {\n        if (!mountRef.current) return;\n\n        const newScene = new THREE.Scene();\n        newScene.background = new THREE.Color(0x313354);\n\n        const aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\n        const frustumSize = 5;\n\n        const newCamera = new THREE.OrthographicCamera(\n            (frustumSize * aspect) / -2,\n            (frustumSize * aspect) / 2,\n            frustumSize / 2,\n            frustumSize / -2,\n            0.1,\n            1000\n        );\n        newCamera.position.set(0, -10, 90);\n        newCamera.lookAt(0, 0, 1);\n        newCamera.zoom = 2.2;\n        newCamera.updateProjectionMatrix();\n\n        const newRenderer = new THREE.WebGLRenderer({ antialias: true });\n        newRenderer.setPixelRatio(window.devicePixelRatio);\n        newRenderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n        mountRef.current.appendChild(newRenderer.domElement);\n\n        setScene(newScene);\n        setCamera(newCamera);\n        setRenderer(newRenderer);\n        setSceneReady(true);\n\n        const handleResize = () => {\n            if (mountRef.current && newRenderer && newCamera) {\n                const width = mountRef.current.clientWidth;\n                const height = mountRef.current.clientHeight;\n\n                newRenderer.setSize(width, height);\n\n                const aspect = width / height;\n                newCamera.left = (-frustumSize * aspect) / 2;\n                newCamera.right = (frustumSize * aspect) / 2;\n                newCamera.top = frustumSize / 2;\n                newCamera.bottom = -frustumSize / 2;\n                newCamera.updateProjectionMatrix();\n            }\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            if (mountRef.current) {\n                mountRef.current.removeChild(newRenderer.domElement);\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!sceneReady || !scene || !camera || !renderer) return;\n\n        const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        const trapezoidArray: THREE.Mesh[] = [];\n        const edgeArray: THREE.LineSegments[] = [];\n        const textArray: THREE.Mesh[] = [];\n        const numTrapezoids = layers.length;\n        let yOffset = 0;\n        let topWidth = initialTopWidth;\n\n        const totalHeight = layers.reduce((acc, layer) => acc + (trapezoidHeights[layer] || 1) + distance, -distance);\n        yOffset = totalHeight / 2;\n\n        const loader = new FontLoader();\n        loader.load(`${basePath}/assets/fonts/Titillium_Web_Light_.json`, (font) => {\n            for (let i = 0; i < numTrapezoids; i++) {\n                const height = trapezoidHeights[layers[i]] || 1;\n                const angleRad = THREE.MathUtils.degToRad(angle);\n                const bottomWidth = topWidth - 2 * height * Math.tan(angleRad);\n\n                const topCurve = new THREE.CatmullRomCurve3([\n                    new THREE.Vector3(-topWidth / 2, height / 2, 0),\n                    new THREE.Vector3(0, height / 2 + 0.02, 0),\n                    new THREE.Vector3(topWidth / 2, height / 2, 0),\n                ]);\n\n                const bottomCurve = new THREE.CatmullRomCurve3([\n                    new THREE.Vector3(-bottomWidth / 2, -height / 2, 0),\n                    new THREE.Vector3(0, -height / 2 + 0.02, 0),\n                    new THREE.Vector3(bottomWidth / 2, -height / 2, 0),\n                ]);\n                const topPoints = topCurve.getPoints(20);\n                const bottomPoints = bottomCurve.getPoints(20);\n\n                const shape = new THREE.Shape();\n                shape.moveTo(topPoints[0].x, topPoints[0].y);\n                topPoints.forEach((point) => shape.lineTo(point.x, point.y));\n                bottomPoints.reverse().forEach((point) => shape.lineTo(point.x, point.y));\n                shape.lineTo(topPoints[0].x, topPoints[0].y);\n\n                const geometry = new THREE.ExtrudeGeometry(shape, { depth: 1, bevelEnabled: false });\n                const trapezoid = new THREE.Mesh(geometry, material.clone());\n                trapezoid.userData.layer = layers[i];\n                trapezoid.userData.index = i;\n\n                trapezoid.position.set(0, yOffset - height / 2, 0.05);\n                scene.add(trapezoid);\n                trapezoidArray.push(trapezoid);\n\n                const edgeGeometry = new THREE.EdgesGeometry(geometry);\n                const edgeMaterial = new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: edgeThickness, linecap: 'round', linejoin: 'round' });\n                const edges = new THREE.LineSegments(edgeGeometry, edgeMaterial);\n                edges.position.set(0, yOffset - height / 2, 0.05);\n                scene.add(edges);\n                edgeArray.push(edges);\n\n                const textGeometry = new TextGeometry(layers[i], {\n                    font: font,\n                    size: 0.06,\n                    height: 0.001,\n                    curveSegments: 24,\n                    bevelEnabled: true,\n                    bevelThickness: 0.005,\n                    bevelSize: 0.002,\n                });\n                textGeometry.computeBoundingBox();\n                const textWidth = textGeometry.boundingBox!.max.x - textGeometry.boundingBox!.min.x;\n\n                const textMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n                const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n\n                textMesh.position.set(-textWidth / 2, yOffset - height + 0.12 / 2, 1.05);\n                scene.add(textMesh);\n                textArray.push(textMesh);\n\n                yOffset -= height + distance;\n                topWidth = bottomWidth;\n            }\n\n            setTrapezoids(trapezoidArray);\n            setEdges(edgeArray);\n            setTexts(textArray);\n        });\n    }, [sceneReady, scene, camera, renderer]);\n\n    useEffect(() => {\n        if (!sceneReady || !scene || !camera || !renderer || trapezoids.length === 0) return;\n\n        const raycaster = new THREE.Raycaster();\n        const mouse = new THREE.Vector2(-10, -10); // Initialize to a point outside the view\n        let hoveredTrapezoid: THREE.Mesh | null = null;\n\n        const updateMousePosition = (event: MouseEvent) => {\n            const rect = renderer.domElement.getBoundingClientRect();\n            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n        };\n\n        const onMouseMove = (event: MouseEvent) => {\n            updateMousePosition(event);\n        };\n\n        const onClick = (event: MouseEvent) => {\n            updateMousePosition(event);\n            raycaster.setFromCamera(mouse, camera);\n            const intersects = raycaster.intersectObjects(trapezoids);\n            if (intersects.length > 0) {\n                const intersectedTrapezoid = intersects[0].object as THREE.Mesh;\n                const selectedLayer = intersectedTrapezoid.userData.layer;\n                if (onSelect && selectedLayer) {\n                    onSelect(selectedLayer);\n                    setHoveredIndex(null); // Clear hover state\n                }\n            }\n        };\n\n        const onHover = () => {\n            raycaster.setFromCamera(mouse, camera);\n            const intersects = raycaster.intersectObjects(trapezoids);\n            if (intersects.length > 0) {\n                document.body.style.cursor = 'pointer';\n                const intersectedTrapezoid = intersects[0].object as THREE.Mesh;\n                const index = intersectedTrapezoid.userData.index;\n                if (hoveredTrapezoid !== intersectedTrapezoid) {\n                    setHoveredIndex(index);\n                    hoveredTrapezoid = intersectedTrapezoid;\n                }\n            } else {\n                document.body.style.cursor = 'default';\n                if (hoveredTrapezoid) {\n                    setHoveredIndex(null);\n                    hoveredTrapezoid = null;\n                }\n            }\n        };\n\n        window.addEventListener('mousemove', onMouseMove);\n        window.addEventListener('click', onClick);\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n            onHover();\n            renderer.render(scene, camera);\n        };\n        animate();\n\n        // Initial hover check\n        raycaster.setFromCamera(mouse, camera);\n        onHover();\n\n        return () => {\n            window.removeEventListener('mousemove', onMouseMove);\n            window.removeEventListener('click', onClick);\n            if (mountRef.current) {\n                mountRef.current.removeChild(renderer.domElement);\n            }\n        };\n    }, [sceneReady, scene, camera, renderer, trapezoids]);\n\n    useEffect(() => {\n        if (!sceneReady || trapezoids.length === 0) return;\n\n        trapezoids.forEach((trapezoid, index) => {\n            const material = trapezoid.material as THREE.MeshBasicMaterial;\n            const edgeMaterial = edges[index].material as THREE.LineBasicMaterial;\n            const textMaterial = texts[index].material as THREE.MeshBasicMaterial;\n\n            const currentTheme = theme[themeProp];\n\n            if (index === hoveredIndex && value !== layers[index]) {\n                material.color.set(currentTheme.hover); // hover\n                edgeMaterial.color.set(currentTheme.selected);\n                textMaterial.color.set(currentTheme.selected); // non-selected\n            } else if (value === layers[index]) {\n                material.color.set(currentTheme.selected); // Selected\n                edgeMaterial.color.set(currentTheme.selectedEdges);\n                textMaterial.color.set(0xffffff); // text same color as edge\n            } else {\n                material.color.set(currentTheme.default); // Default\n                edgeMaterial.color.set(currentTheme.selected);\n                textMaterial.color.set(currentTheme.selected); // non-selected\n            }\n            material.needsUpdate = true;\n            edgeMaterial.needsUpdate = true;\n            textMaterial.needsUpdate = true;\n        });\n    }, [hoveredIndex, value, themeProp, sceneReady, trapezoids, edges, texts]);\n\n    return (\n        <div className='flex align-middle justify-center' style={{ width: '100%', minHeight: '400px' }}>\n            <div ref={mountRef} style={{ width: 'calc(100% - 2px)', minHeight: '400px' }}></div>\n        </div>\n    );\n};\n\nexport default LayerSelector3D;\n","import React, { useMemo, useCallback } from \"react\";\nimport { MathJaxContext, MathJax } from 'better-react-mathjax';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\ntype MechanismToolTipProps = {\n    mechanism?: {\n        channel_name: string;\n        name: string;\n        value: number;\n        distribution: string;\n        function: string;\n    };\n}\n\nconst MechanismToolTip: React.FC<MechanismToolTipProps> = ({ mechanism }) => {\n    const evaluateFunction = useCallback((distance: number, func: string | undefined): number => {\n        if (!func) return 0;\n\n        // Handle constant value\n        if (!isNaN(Number(func))) {\n            return Number(func);\n        }\n\n        // Handle exponential function\n        if (func.includes('math.exp')) {\n            const match = func.match(/math\\.exp\\(\\(-\\{distance\\}\\)\\/(\\d+)\\)\\*(\\d+(?:\\.\\d+)?(?:e-?\\d+)?)/);\n            if (match) {\n                const [, scale, coefficient] = match;\n                return Math.exp(-distance / Number(scale)) * Number(coefficient);\n            }\n        }\n\n        // Handle scientific notation\n        if (func.includes('e')) {\n            return Number(func);\n        }\n\n        return 0;\n    }, []);\n\n    const chartData = useMemo(() => {\n        if (!mechanism) return [];\n        const distances = Array.from({ length: 100 }, (_, i) => i);\n        return distances.map(distance => ({\n            distance,\n            value: evaluateFunction(distance, mechanism.function)\n        }));\n    }, [mechanism, evaluateFunction]);\n\n    const formatFunction = (func: string | undefined): string => {\n        if (!func) return 'undefined';\n        if (!isNaN(Number(func))) {\n            return func;\n        }\n        if (func.includes('math.exp')) {\n            return func.replace('{distance}', 'x').replace('math.exp', 'e');\n        }\n        return func;\n    };\n\n    if (!mechanism) {\n        return <div>No mechanism data available</div>;\n    }\n\n    return (\n        <div className=\"flex flex-col justify-center h-full\">\n            <div className=\"mt-4 flex-grow h-[150px] \">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart\n                        data={chartData}\n                        margin={{ top: 5, right: 20, bottom: 5, left: 10 }}\n                    >\n                        <Line\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke=\"#3B4165\"\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n                        <XAxis\n                            dataKey=\"distance\"\n                            ticks={[0, 25, 50, 75, 100]}\n                            domain={[0, 100]}\n                            tick={{ fontSize: 10 }}\n                        />\n                        <YAxis\n                            tick={{ fontSize: 10 }}\n                            tickFormatter={(value) => value.toFixed(5)}\n                            width={40}\n                        />\n                        <Tooltip formatter={(value) => typeof value === 'number' ? value.toExponential(4) : value} />\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n            <div className=\"p-2\">\n                <MathJaxContext>\n                    <MathJax >\n                        {`\\\\[f(x) = ${formatFunction(mechanism.function)}\\\\]`}\n                    </MathJax>\n                </MathJaxContext>\n            </div>\n        </div>\n    );\n}\n\nexport default React.memo(MechanismToolTip);\n","import React, { useState, useEffect } from 'react';\nimport { Tooltip } from 'antd';\nimport MechanismToolTip from './MechanismToolTip';\n\ntype MechanismTableProps = {\n    theme?: number;\n    instance: string;\n    data: {\n        [key: string]: Array<{\n            channel_name: string;\n            name: string;\n            value: number;\n            distribution: string;\n            function: string;\n        }>;\n    };\n};\n\nconst MechanismTable: React.FC<MechanismTableProps> = ({ theme, data, instance }) => {\n    const [mechanisms, setMechanisms] = useState<{\n        [key: string]: Array<{\n            channel_name: string;\n            name: string;\n            value: number;\n            distribution: string;\n            function: string;\n        }>\n    }>({});\n\n    useEffect(() => {\n        if (data && typeof data === 'object') {\n            setMechanisms(data);\n        }\n    }, [data]);\n\n    const sections = ['axonal', 'somatic', 'alldend'];\n\n    return (\n        <div className=\"p-4\">\n            <table className=\"w-full border-collapse\">\n                <thead>\n                    <tr>\n                        <th className=\"text-left p-2 border-b-2\">Sections</th>\n                        <th className=\"text-left p-2 border-b-2\">Mechanisms</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {sections.map((section) => (\n                        <tr key={section} className=\"border-b\">\n                            <td className=\"p-2 font-medium\">{section}</td>\n                            <td className=\"p-2\">\n                                {mechanisms[section]?.map((mech) => (\n                                    <Tooltip\n                                        key={mech.channel_name}\n                                        title={<MechanismToolTip mechanism={mech} />}\n                                        trigger=\"hover\"\n                                        placement=\"top\"\n                                        overlayInnerStyle={{\n                                            boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)',\n                                            width: '350px'\n                                        }}\n                                    >\n                                        <span\n                                            className=\"inline-block mr-2 mb-1 px-2 py-1 bg-blue-100 text-blue-800 cursor-pointer\"\n                                        >\n                                            {mech.channel_name}\n                                        </span>\n                                    </Tooltip>\n                                ))}\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default MechanismTable;\n","import React, { useState, useMemo, useRef } from 'react';\nimport { Table } from 'antd';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { imagesPath } from '@/config';\nimport traces from '@/traces.json';\nimport { graphTheme } from '@/constants';\n\ntype ExperimentalRecordingsData = {\n    specimen_id: string;\n    specimen_type: string;\n    etype: string;\n    ephys_ids: string[];\n};\n\ntype ExperimentalRecordingsTableProps = {\n    data: ExperimentalRecordingsData;\n};\n\nconst ExperimentalRecordingsTable: React.FC<ExperimentalRecordingsTableProps> = ({ data }) => {\n    const [currentPage, setCurrentPage] = useState(1);\n    const entriesPerPage = 5;\n\n    const tableRef = useRef<HTMLDivElement>(null);\n\n    const columns = [\n        {\n            title: 'Electrophysiology',\n            dataIndex: 'ephys_id',\n            key: 'ephys_id',\n            width: 150,\n            render: (ephys_id: string, record: { etype: string }) => (\n                <Link href={`http://localhost:3000/hippocampus-portal-dev/experimental-data/neuronal-electrophysiology/?etype=${record.etype}&etype_instance=${ephys_id}`}>\n                    {ephys_id}\n                </Link>\n            ),\n        },\n        {\n            title: 'E-type',\n            dataIndex: 'etype',\n            key: 'etype',\n            width: 100,\n        },\n        {\n            title: 'Preview',\n            dataIndex: 'ephys_id',\n            key: 'preview',\n            width: 220,\n            render: (ephys_id: string) => (\n                <Image\n                    src={`${imagesPath}/2_neuron-models/trace-preview/${ephys_id}.png`}\n                    alt={`neuron trace preview ${ephys_id}`}\n                    width={200}\n                    height={100}\n                    style={{ height: 'auto' }}\n                />\n            ),\n        },\n    ];\n\n    const getEtypeForEphysId = (ephysId: string): string => {\n        for (const [etype, ids] of Object.entries(traces)) {\n            if (ids.includes(ephysId)) {\n                return etype;\n            }\n        }\n        return 'Unknown';  // fallback if not found\n    };\n\n    const allTableData = useMemo(() => data.ephys_ids.map((ephys_id) => ({\n        key: ephys_id,\n        etype: getEtypeForEphysId(ephys_id),\n        ephys_id: ephys_id,\n    })), [data.ephys_ids]);\n\n    const totalEntries = allTableData.length;\n    const totalPages = Math.ceil(totalEntries / entriesPerPage);\n\n    const currentTableData = useMemo(() => {\n        const start = (currentPage - 1) * entriesPerPage;\n        const end = start + entriesPerPage;\n        return allTableData.slice(start, end);\n    }, [allTableData, currentPage]);\n\n    const handlePageChange = (newPage: number) => {\n        setCurrentPage(newPage);\n        if (tableRef.current) {\n            tableRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        }\n    };\n\n    return (\n        <>\n            <div ref={tableRef}>\n                <Table\n                    columns={columns}\n                    dataSource={currentTableData}\n                    pagination={false}\n                    scroll={{ x: 'max-content' }}\n                />\n            </div>\n            {totalEntries > entriesPerPage && (\n                <div className=\"pagination\">\n                    {Array.from({ length: totalPages }, (_, index) => (\n                        <button\n                            key={index + 1}\n                            onClick={() => handlePageChange(index + 1)}\n                            className={currentPage === index + 1 ? 'active' : ''}\n                        >\n                            {index + 1}\n                        </button>\n                    ))}\n                </div>\n            )}\n            <style jsx>{`\n                .pagination {\n                    display: flex;\n                    justify-content: center;\n                    margin-top: 20px;\n                }\n                .pagination button {\n                    margin: 0 5px;\n                    padding: 5px 10px;\n                    border: 1px solid #d9d9d9;\n                    background-color: #fff;\n                    cursor: pointer;\n                    transition: all 0.3s;\n                    border-radius: 2px;\n                }\n                .pagination button:hover {\n                    color: #40a9ff;\n                    border-color: #40a9ff;\n                }\n                .pagination button.active {\n                    color: #fff;\n                    background-color: ${graphTheme.blue};\n                    border-color: ${graphTheme.blue};\n                }\n            `}</style>\n        </>\n    );\n};\n\nexport default ExperimentalRecordingsTable;\n","import React, { useState, useMemo } from 'react';\nimport Factsheet from '@/components/Factsheet';\n\n// Define the type for the efeatures data structure\ntype EFeatureProps = {\n    data: {\n        efeatures: {\n            [key: string]: {\n                soma: {\n                    [key: string]: number[];\n                };\n            };\n        };\n    };\n};\n\nconst EFeature: React.FC<EFeatureProps> = ({ data }) => {\n    const [selectedStep, setSelectedStep] = useState<string | null>(null);\n\n    // Extract available steps\n    const steps = Object.keys(data.efeatures);\n\n    // Handle step change\n    const handleStepChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedStep(event.target.value);\n    };\n\n    // Memoized value to transform the selected step's data into a format for Factsheet\n    const factsheetData = useMemo(() => {\n        if (!selectedStep) return [];\n\n        const metrics = data.efeatures[selectedStep].soma;\n\n        // Convert the metrics into the format expected by the Factsheet component\n        return Object.keys(metrics).map((metric) => ({\n            name: metric,\n            description: metric, // You can provide a better description if needed\n            values: metrics[metric],\n        }));\n    }, [selectedStep, data]);\n\n    return (\n        <div className=\"efeature-container\">\n            <div className=\"row\">\n                <div className=\"col-xs-6 gap-6 flex\">\n                    <label>Select Step:</label>\n                    <select value={selectedStep || ''} onChange={handleStepChange}>\n                        <option value=\"\">Select Step</option>\n                        {steps.map((step) => (\n                            <option key={step} value={step}>\n                                {step}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n\n            <div className=\" mt-4\">\n                {selectedStep ? (\n                    <>\n                        <Factsheet facts={factsheetData} />\n                    </>\n                ) : (\n                    <p>Please select a step to view the metrics</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default EFeature;","import React, { useEffect, useState, useMemo } from \"react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\n\nimport Title from \"@/components/Title\";\nimport InfoBox from \"@/components/InfoBox\";\nimport Filters from \"@/layouts/Filters\";\nimport DataContainer from \"@/components/DataContainer\";\nimport { QuickSelectorEntry } from \"@/types\";\nimport List from \"@/components/List\";\nimport Collapsible from \"@/components/Collapsible\";\n\nimport { defaultSelection } from \"@/constants\";\nimport withPreselection from \"@/hoc/with-preselection\";\nimport { colorName } from \"./config\";\nimport { basePath, dataPath } from \"@/config\";\nimport { downloadAsJson, downloadFile } from \"@/utils\";\nimport DownloadButton from \"@/components/DownloadButton\";\nimport TraceGraph from \"../5_predictions/components/Trace\";\nimport Factsheet from \"@/components/Factsheet\";\nimport MorphologyData from \"@/models.json\";\nimport modelsData from \"./neuron-model.json\";\nimport LayerSelector3D from \"@/components/LayerSelector3D\";\nimport MechanismTable from \"./neuron-model/MechanismTable\";\nimport ExperimentalMorphologyTable from \"@/components/ExperiementalMorphologyUsed\";\nimport ExperimentalRecordingsTable from \"./neuron-model/ExperimentalRecordingsTable\";\nimport EFeature from \"./neuron-model/EFeature\";\nimport DownloadModel from \"@/components/DownloadModel\";\n\nimport { Layer } from \"@/types\";\nimport { SwcViewer } from \"../MorphoViewer/SwcViewer\";\nimport JSZip from \"jszip\";\nimport { saveAs } from \"file-saver\";\nimport { PranavViewer } from \"@/components/PranavViewer\";\n\ntype ModelData = {\n  layer: Layer;\n  mtype: string;\n  etype: string;\n  instance: string;\n};\n\nconst getUniqueValues = (\n  key: keyof ModelData,\n  filterKey1?: keyof ModelData,\n  filterValue1?: string | Layer,\n  filterKey2?: keyof ModelData,\n  filterValue2?: string\n): (string | Layer)[] => {\n  return Array.from(\n    new Set(\n      modelsData\n        .filter(\n          (model) =>\n            (!filterKey1 ||\n              !filterValue1 ||\n              model[filterKey1] === filterValue1) &&\n            (!filterKey2 || !filterValue2 || model[filterKey2] === filterValue2)\n        )\n        .map((model) => model[key])\n    )\n  ).sort((a, b) => a.toString().localeCompare(b.toString()));\n};\n\nconst getFilteredInstances = (\n  layer: Layer | \"\",\n  mtype: string,\n  etype: string\n): string[] => {\n  return modelsData\n    .filter(\n      (model) =>\n        (!layer || model.layer === layer) &&\n        (!mtype || model.mtype === mtype) &&\n        (!etype || model.etype === etype)\n    )\n    .map((model) => model.instance);\n};\n\nconst Neurons: React.FC = () => {\n  const router = useRouter();\n  const theme = 3;\n\n  const { query } = router;\n  const [currentLayer, setCurrentLayer] = useState<Layer | \"\">(\"\");\n  const [currentMtype, setCurrentMtype] = useState<string>(\"\");\n  const [currentEtype, setCurrentEtype] = useState<string>(\"\");\n  const [currentInstance, setCurrentInstance] = useState<string>(\"\");\n  const [traceData, setTraceData] = useState<any>(null);\n  const [factsheetData, setFactsheetData] = useState<any>(null);\n  const [experimentalRecordingData, setExperimentalRecordingData] =\n    useState<any>(null);\n  const [efeatureData, setEFeatureData] = useState<any>(null);\n  const [mechanismsData, setMechanismsData] = useState<any>(null);\n\n  const layers = useMemo(() => getUniqueValues(\"layer\") as Layer[], []);\n  const mtypes = useMemo(\n    () => getUniqueValues(\"mtype\", \"layer\", currentLayer) as string[],\n    [currentLayer]\n  );\n  const etypes = useMemo(\n    () =>\n      getUniqueValues(\n        \"etype\",\n        \"layer\",\n        currentLayer,\n        \"mtype\",\n        currentMtype\n      ) as string[],\n    [currentLayer, currentMtype]\n  );\n  const instances = useMemo(\n    () => getFilteredInstances(currentLayer, currentMtype, currentEtype),\n    [currentLayer, currentMtype, currentEtype]\n  );\n\n  useEffect(() => {\n    if (Object.keys(query).length === 0) return;\n\n    const newLayer =\n      query.layer &&\n      typeof query.layer === \"string\" &&\n      layers.includes(query.layer as Layer)\n        ? (query.layer as Layer)\n        : layers[0] || \"\";\n\n    const newMtypes = getUniqueValues(\"mtype\", \"layer\", newLayer) as string[];\n    const newMtype =\n      query.mtype &&\n      typeof query.mtype === \"string\" &&\n      newMtypes.includes(query.mtype)\n        ? query.mtype\n        : newMtypes[0] || \"\";\n\n    const newEtypes = getUniqueValues(\n      \"etype\",\n      \"layer\",\n      newLayer,\n      \"mtype\",\n      newMtype\n    ) as string[];\n    const newEtype =\n      query.etype &&\n      typeof query.etype === \"string\" &&\n      newEtypes.includes(query.etype)\n        ? query.etype\n        : newEtypes[0] || \"\";\n\n    const newInstances = getFilteredInstances(newLayer, newMtype, newEtype);\n    const newInstance =\n      query.instance &&\n      typeof query.instance === \"string\" &&\n      newInstances.includes(query.instance)\n        ? query.instance\n        : newInstances[0] || \"\";\n\n    setCurrentLayer(newLayer);\n    setCurrentMtype(newMtype);\n    setCurrentEtype(newEtype);\n    setCurrentInstance(newInstance);\n  }, [query, layers]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (currentInstance) {\n        try {\n          const [\n            traceResponse,\n            factsheetResponse,\n            mechanismsResponse,\n            eFeatureResponse,\n            experimentalRecordingResponse,\n          ] = await Promise.all([\n            fetch(\n              `${dataPath}/2_reconstruction-data/neuron-models/${currentInstance}/trace.json`\n            ),\n            fetch(\n              `${dataPath}/2_reconstruction-data/neuron-models/${currentInstance}/features_with_rheobase.json`\n            ),\n            fetch(\n              `${dataPath}/2_reconstruction-data/neuron-models/${currentInstance}/mechanisms.json`\n            ),\n            fetch(\n              `${dataPath}/2_reconstruction-data/neuron-models/${currentInstance}/efeature.json`\n            ),\n            fetch(\n              `${dataPath}/2_reconstruction-data/neuron-models/${currentInstance}/experimental-recordings.json`\n            ),\n          ]);\n\n          const traceData = await traceResponse.json();\n          const factsheetData = await factsheetResponse.json();\n          const mechanismsData = await mechanismsResponse.json();\n          const eFeatureData = await eFeatureResponse.json();\n          const experimentalRecordingData =\n            await experimentalRecordingResponse.json();\n\n          setTraceData(traceData);\n          setFactsheetData(factsheetData);\n          setMechanismsData(mechanismsData);\n          setEFeatureData(eFeatureData);\n          setExperimentalRecordingData(experimentalRecordingData);\n        } catch (error) {\n          console.error(\"Error fetching data:\", error);\n          setTraceData(null);\n          setFactsheetData(null);\n          setMechanismsData(null);\n          setEFeatureData(null);\n          setExperimentalRecordingData(null);\n        }\n      }\n    };\n\n    fetchData();\n  }, [currentInstance]);\n\n  const setParams = (params: Record<string, string>): void => {\n    const newQuery = {\n      ...router.query,\n      ...params,\n    };\n    console.log(\"Setting new params:\", newQuery);\n    router.push({ query: newQuery, pathname: router.pathname }, undefined, {\n      shallow: true,\n    });\n  };\n\n  const setLayer = (layer: Layer) => {\n    const newMtypes = getUniqueValues(\"mtype\", \"layer\", layer) as string[];\n    const newMtype = newMtypes[0] || \"\";\n    const newEtypes = getUniqueValues(\n      \"etype\",\n      \"layer\",\n      layer,\n      \"mtype\",\n      newMtype\n    ) as string[];\n    const newEtype = newEtypes[0] || \"\";\n    const newInstances = getFilteredInstances(layer, newMtype, newEtype);\n    const newInstance = newInstances[0] || \"\";\n\n    setParams({\n      layer,\n      mtype: newMtype,\n      etype: newEtype,\n      instance: newInstance,\n    });\n  };\n\n  const setMtype = (mtype: string) => {\n    const newEtypes = getUniqueValues(\n      \"etype\",\n      \"layer\",\n      currentLayer,\n      \"mtype\",\n      mtype\n    ) as string[];\n    const newEtype = newEtypes[0] || \"\";\n    const newInstances = getFilteredInstances(currentLayer, mtype, newEtype);\n    const newInstance = newInstances[0] || \"\";\n\n    setParams({\n      mtype,\n      etype: newEtype,\n      instance: newInstance,\n    });\n  };\n\n  const setEtype = (etype: string) => {\n    const newInstances = getFilteredInstances(\n      currentLayer,\n      currentMtype,\n      etype\n    );\n    const newInstance = newInstances[0] || \"\";\n\n    setParams({\n      etype,\n      instance: newInstance,\n    });\n  };\n\n  const setInstance = (instance: string) => {\n    setParams({\n      instance,\n    });\n  };\n\n  const qsEntries: QuickSelectorEntry[] = [\n    {\n      title: \"Layer\",\n      key: \"layer\",\n      values: layers,\n      setFn: setLayer,\n    },\n    {\n      title: \"M-Type\",\n      key: \"mtype\",\n      values: mtypes,\n      setFn: setMtype,\n    },\n    {\n      title: \"E-Type\",\n      key: \"etype\",\n      values: etypes,\n      setFn: setEtype,\n    },\n    {\n      title: \"Instance\",\n      key: \"instance\",\n      values: instances,\n      setFn: setInstance,\n    },\n  ];\n\n  const handleDownload = async () => {\n    const zip = new JSZip();\n\n    // Add electrophysiology folder\n    const electroPhysiologyFolder = zip.folder(\"electrophysiology\");\n    const electroPhysiologyFiles = await fetchFilesFromFolder(\n      `${dataPath}2_reconstruction-data/neuron-models/${currentInstance}/electrophysiology`\n    );\n    for (const file of electroPhysiologyFiles) {\n      const content = await fetchFileContent(file.path);\n      electroPhysiologyFolder?.file(file.name, content);\n    }\n\n    // Add morphology file\n    const morphologyContent = await fetchFileContent(\n      `${dataPath}2_reconstruction-data/neuron-models/${currentInstance}/morphology.swc`\n    );\n    zip.file(\"morphology/morphology.swc\", morphologyContent);\n\n    // Add mechanisms folder\n    const mechanismsFolder = zip.folder(\"mechanisms\");\n    const mechanismFiles = await fetchFilesFromFolder(\n      `${dataPath}2_reconstruction-data/neuron-models/${currentInstance}/mechanisms`\n    );\n    for (const file of mechanismFiles) {\n      const content = await fetchFileContent(file.path);\n      mechanismsFolder?.file(file.name, content);\n    }\n\n    // Add readme and script files\n    const readmeContent = await fetchFileContent(\n      `${dataPath}/2_reconstruction-data/neuron-models/readme.md`\n    );\n    zip.file(\"readme.md\", readmeContent);\n\n    const scriptContent = await fetchFileContent(\n      `${dataPath}/2_reconstruction-data/neuron-models/script.py`\n    );\n    zip.file(\"script.py\", scriptContent);\n\n    // Generate and download the zip file\n    const content = await zip.generateAsync({ type: \"blob\" });\n    saveAs(content, \"neuron-model.zip\");\n  };\n\n  // Helper functions to fetch file content and folder structure\n  const fetchFileContent = async (path: string): Promise<string> => {\n    const response = await fetch(path);\n    return await response.text();\n  };\n\n  const fetchFilesFromFolder = async (\n    url: string\n  ): Promise<{ name: string; path: string }[]> => {\n    try {\n      console.log(\"Fetching files from URL:\", url);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const files = await response.json();\n      console.log(\"Files received:\", files);\n      return files.map((file: string) => ({\n        name: file,\n        path: `${url}/${file}`,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching files from URL:\", error);\n      return [];\n    }\n  };\n\n  return (\n    <>\n      <Filters theme={theme}>\n        <div className=\"row w-100 content-center\">\n          <div className=\"col-xs-12 col-lg-6 content-center\">\n            <Title\n              primaryColor={colorName}\n              title=\"Neuron models\"\n              subtitle=\"Reconstruction Data\"\n              theme={theme}\n            />\n            <InfoBox color={colorName}>\n              <p>\n                Starting from a subset of{\" \"}\n                <Link\n                  className={`link theme-${theme}`}\n                  href=\"/experimental-data/neuronal-morphology/\"\n                >\n                  morphological reconstructions\n                </Link>\n                , we develop an initial set of single cell models by optimizing\n                model parameters against a set of features extracted from{\" \"}\n                <Link\n                  className={`link theme-${theme}`}\n                  href=\"/experimental-data/neuronal-electrophysiology/\"\n                >\n                  electrophysiological recordings\n                </Link>\n                .\n              </p>\n            </InfoBox>\n          </div>\n\n          <div className=\"col-xs-12 col-lg-6\">\n            <div className=\"selector\">\n              <div className={`selector__column theme-${theme}`}>\n                <div className={`selector__head theme-${theme}`}>\n                  Choose a layer\n                </div>\n                <div className=\"selector__selector-container\">\n                  <LayerSelector3D\n                    value={currentLayer || undefined}\n                    onSelect={setLayer}\n                    theme={theme}\n                  />\n                </div>\n              </div>\n              <div className={`selector__column theme-${theme}`}>\n                <div className={`selector__head theme-${theme}`}>\n                  Select reconstruction\n                </div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={mtypes}\n                    value={currentMtype}\n                    title={`M-type ${\n                      mtypes.length ? `(${mtypes.length})` : \"\"\n                    }`}\n                    color={colorName}\n                    onSelect={setMtype}\n                    theme={theme}\n                  />\n                  <List\n                    block\n                    list={etypes}\n                    value={currentEtype}\n                    title={`E-type ${\n                      etypes.length ? `(${etypes.length})` : \"\"\n                    }`}\n                    color={colorName}\n                    onSelect={setEtype}\n                    theme={theme}\n                  />\n                  <List\n                    block\n                    list={instances}\n                    value={currentInstance}\n                    title={`Instance ${\n                      instances.length ? `(${instances.length})` : \"\"\n                    }`}\n                    color={colorName}\n                    onSelect={setInstance}\n                    anchor=\"data\"\n                    theme={theme}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n      <DataContainer\n        theme={theme}\n        navItems={[\n          { id: \"morphologySection\", label: \"Morphology\" },\n          { id: \"traceSection\", label: \"Trace\" },\n          { id: \"bPAPPSPSection\", label: \"bPAP & PSP\" },\n          { id: \"factsheetSection\", label: \"Factsheet\" },\n          { id: \"efeaturesSection\", label: \"E-features\" },\n          { id: \"mechansimsSection\", label: \"Mechanisms\" },\n          {\n            id: \"ExperimentalMorphologySection\",\n            label: \"Experimental morphology used for this model\",\n          },\n          {\n            id: \"experimentalRecordingsSection\",\n            label: \"Experimental recordings used for this model\",\n          },\n        ]}\n        quickSelectorEntries={qsEntries}\n      >\n        <Collapsible id=\"morphologySection\" className=\"mt-4\" title=\"Morphology\">\n          <SwcViewer\n            href={`${dataPath}/2_reconstruction-data/neuron-models/${currentInstance}/morphology.swc`}\n          />\n          <div className=\"mt-4\">\n            <DownloadModel\n              theme={theme}\n              resources={[\n                `${dataPath}/2_reconstruction-data/neuron-models/${currentInstance}/morphology.swc`,\n                `${dataPath}/2_reconstruction-data/neuron-models/README.md`,\n                `${dataPath}/2_reconstruction-data/neuron-models/neuron_simulation.py`,\n                `${dataPath}2_reconstruction-data/neuron-models/${currentInstance}/mechanisms.zip`,\n                `${dataPath}2_reconstruction-data/neuron-models/${currentInstance}/electrophysiology.zip`,\n              ]}\n            />\n          </div>\n        </Collapsible>\n\n        <Collapsible id=\"traceSection\" className=\"mt-4\" title=\"Trace\">\n          <div className=\"graph\">\n            {traceData && <TraceGraph plotData={traceData} />}\n          </div>\n\n          {traceData && (\n            <div className=\"mt-4\">\n              <DownloadButton\n                onClick={() =>\n                  downloadAsJson(\n                    traceData,\n                    `${currentLayer}-${currentMtype}-${currentEtype}-${currentInstance}-trace.json`\n                  )\n                }\n                theme={theme}\n              >\n                Trace data\n              </DownloadButton>\n            </div>\n          )}\n        </Collapsible>\n\n        <Collapsible id=\"factsheetSection\" className=\"mt-4\" title=\"Factsheet\">\n          {factsheetData && (\n            <>\n              <Factsheet facts={factsheetData} />\n              <div className=\"mt-4\">\n                <DownloadButton\n                  onClick={() =>\n                    downloadAsJson(\n                      factsheetData,\n                      `${currentLayer}-${currentMtype}-${currentEtype}-${currentInstance}-factsheet.json`\n                    )\n                  }\n                  theme={theme}\n                >\n                  Factsheet\n                </DownloadButton>\n              </div>\n            </>\n          )}\n        </Collapsible>\n\n        <PranavViewer url={`${dataPath}/epsp-bpap/neurons_model/${currentInstance}`} />\n\n        <Collapsible id=\"efeaturesSection\" className=\"mt-4\" title=\"E-features\">\n          {efeatureData && (\n            <>\n              <EFeature data={efeatureData} />\n              <div className=\"mt-4\">\n                <DownloadButton\n                  onClick={() =>\n                    downloadAsJson(\n                      factsheetData,\n                      `${currentLayer}-${currentMtype}-${currentEtype}-${currentInstance}-factsheet.json`\n                    )\n                  }\n                  theme={theme}\n                >\n                  Factsheet\n                </DownloadButton>\n              </div>\n            </>\n          )}\n        </Collapsible>\n\n        <Collapsible id=\"mechansimsSection\" className=\"mt-4\" title=\"Mechanisms\">\n          <MechanismTable data={mechanismsData} instance={currentInstance} />\n        </Collapsible>\n\n        <Collapsible\n          id=\"ExperimentalMorphologySection\"\n          className=\"mt-4\"\n          title=\"Experimental morphology used for this model\"\n        >\n          <ExperimentalMorphologyTable\n            MorphologyData={MorphologyData}\n            currentInstance={currentInstance}\n          />\n        </Collapsible>\n\n        <Collapsible\n          id=\"experimentalRecordingsSection\"\n          className=\"mt-4\"\n          title=\"Experimental recordings used for this model\"\n        >\n          {experimentalRecordingData && (\n            <ExperimentalRecordingsTable data={experimentalRecordingData} />\n          )}\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default withPreselection(Neurons, {\n  key: \"layer\",\n  defaultQuery: defaultSelection.digitalReconstruction.neurons,\n});\n","import Head from 'next/head';\nimport NeuronModelsView from '@/views/2_reconstruction-data/NeuronModels';\n\nexport default function NeuronModelsPage() {\n  const metadata = {\n    title: 'Neuron Models - Reconstruction Data | The Hippocampus Hub',\n    description:\n      'Examine neuron models developed from a subset of morphologically reconstructed neurons. These models are optimized based on electrophysiological recordings and provide insights into the functional properties of hippocampal neurons.',\n    keywords: [\n      'Neuron Models',\n      'Hippocampus',\n      'Electrophysiology',\n      'Reconstruction Data',\n      'Neuroscience',\n      'Blue Brain Project',\n      'CA1 Neurons',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <NeuronModelsView />\n    </>\n  );\n}","import { accentColors } from '@/config';\nimport { Color } from '@/types';\n\nexport const sectionTitle = 'Reconstruction Data';\nexport const colorName: Color = 'grey-2';\nexport const primaryColor = accentColors[colorName];\n"],"names":["window","__NEXT_P","push","__webpack_require__","__webpack_exports__","Z","theme","resources","param","isLoading","setIsLoading","useState","error","setError","addResourceToZip","zip","resourcePath","response","fetch","ok","concat","fileName","split","pop","content","blob","endsWith","file","contentType","headers","get","includes","files","json","folderName","filter","Boolean","folderZip","folder","filePath","console","warn","downloadResources","JSZip","resource","zipContent","generateAsync","type","saveAs","Error","message","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Fragment","jsx","DownloadButton","onClick","div","style","color","marginTop","value","onSelect","themeProp","mountRef","useRef","hoveredIndex","setHoveredIndex","trapezoids","setTrapezoids","edges","setEdges","texts","setTexts","sceneReady","setSceneReady","scene","setScene","camera","setCamera","renderer","setRenderer","trapezoidHeights","SLM","SR","SP","SO","useEffect","current","newScene","THREE","background","aspect","clientWidth","clientHeight","newCamera","frustumSize","position","set","lookAt","zoom","updateProjectionMatrix","newRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","handleResize","width","height","left","right","top","bottom","addEventListener","removeEventListener","removeChild","material","trapezoidArray","edgeArray","textArray","numTrapezoids","layers","length","yOffset","topWidth","totalHeight","reduce","acc","layer","loader","FontLoader","load","basePath","i","angleRad","degToRad","bottomWidth","Math","tan","topCurve","bottomCurve","topPoints","getPoints","bottomPoints","shape","moveTo","x","y","forEach","lineTo","point","reverse","geometry","depth","bevelEnabled","trapezoid","clone","userData","index","add","edgeGeometry","edgeMaterial","linewidth","linecap","linejoin","textGeometry","TextGeometry","font","size","curveSegments","bevelThickness","bevelSize","computeBoundingBox","textWidth","boundingBox","max","min","textMaterial","textMesh","raycaster","mouse","hoveredTrapezoid","updateMousePosition","rect","getBoundingClientRect","event","clientX","clientY","onMouseMove","setFromCamera","intersects","intersectObjects","intersectedTrapezoid","object","selectedLayer","onHover","document","body","cursor","animate","requestAnimationFrame","render","currentTheme","hover","selected","selectedEdges","default","needsUpdate","className","minHeight","ref","neuron_model_MechanismToolTip","React","func","mechanism","evaluateFunction","useCallback","distance","isNaN","Number","match","scale","coefficient","exp","chartData","useMemo","distances","Array","from","_","map","function","jsx_runtime","ResponsiveContainer","LineChart","data","margin","Line","dataKey","stroke","strokeWidth","dot","CartesianGrid","strokeDasharray","XAxis","ticks","domain","tick","fontSize","YAxis","tickFormatter","toFixed","Tooltip","formatter","toExponential","MathJaxContext","MathJax","replace","neuron_model_MechanismTable","instance","mechanisms","setMechanisms","table","thead","tr","th","tbody","sections","td","section","title","MechanismToolTip","mech","trigger","placement","overlayInnerStyle","boxShadow","span","channel_name","neuron_model_ExperimentalRecordingsTable","currentPage","setCurrentPage","tableRef","columns","dataIndex","key","ephys_id","record","Link","href","etype","Image","src","imagesPath","alt","getEtypeForEphysId","ids","Object","entries","traces","ephysId","allTableData","ephys_ids","totalEntries","currentTableData","start","end","slice","handlePageChange","newPage","scrollIntoView","behavior","block","graphTheme","blue","Table","dataSource","pagination","scroll","ceil","button","neuron_model_EFeature","selectedStep","setSelectedStep","steps","keys","efeatures","factsheetData","metrics","soma","name","metric","description","values","label","select","onChange","target","option","step","Factsheet","facts","p","getUniqueValues","filterKey1","filterValue1","filterKey2","filterValue2","Set","modelsData","model","sort","a","b","toString","localeCompare","getFilteredInstances","mtype","NeuronModels","withPreselection","router","useRouter","query","currentLayer","setCurrentLayer","currentMtype","setCurrentMtype","currentEtype","setCurrentEtype","currentInstance","setCurrentInstance","traceData","setTraceData","setFactsheetData","experimentalRecordingData","setExperimentalRecordingData","efeatureData","setEFeatureData","mechanismsData","setMechanismsData","mtypes","etypes","instances","newLayer","newMtypes","newMtype","newEtypes","newEtype","newInstances","newInstance","fetchData","traceResponse","factsheetResponse","mechanismsResponse","eFeatureResponse","experimentalRecordingResponse","Promise","all","dataPath","eFeatureData","setParams","newQuery","params","log","pathname","undefined","shallow","setLayer","setMtype","setEtype","setInstance","qsEntries","setFn","Filters","Title","primaryColor","colorName","subtitle","InfoBox","LayerSelector3D","List","list","anchor","DataContainer","navItems","id","quickSelectorEntries","Collapsible","SwcViewer","DownloadModel","TraceGraph","plotData","downloadAsJson","PranavViewer","url","EFeature","MechanismTable","ExperimentalMorphologyTable","MorphologyData","ExperimentalRecordingsTable","defaultQuery","defaultSelection","digitalReconstruction","neurons","NeuronModelsPage","metadata","keywords","author","creator","publisher","Head","meta","join","NeuronModelsView","accentColors"],"sourceRoot":""}