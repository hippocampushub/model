{"version":3,"file":"static/chunks/pages/reconstruction-data/morphology-library-1df9c75ed3b1d8ed.js","mappings":"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","sources":["webpack://_N_E/?d7ab","webpack://_N_E/./src/views/2_reconstruction-data/MorphologyLibrary.tsx","webpack://_N_E/./src/pages/reconstruction-data/morphology-library.tsx","webpack://_N_E/./src/views/2_reconstruction-data/config.ts","webpack://_N_E/./node_modules/rc-util/es/Children/toArray.js","webpack://_N_E/./node_modules/rc-util/lib/Children/toArray.js","webpack://_N_E/./node_modules/rc-util/lib/omit.js","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/reconstruction-data/morphology-library\",\n      function () {\n        return require(\"private-next-pages/reconstruction-data/morphology-library.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/reconstruction-data/morphology-library\"])\n      });\n    }\n  ","import React, { useEffect, useState, useMemo } from \"react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\n\nimport Title from \"@/components/Title\";\nimport InfoBox from \"@/components/InfoBox\";\nimport Filters from \"@/layouts/Filters\";\nimport DataContainer from \"@/components/DataContainer\";\nimport { QuickSelectorEntry } from \"@/types\";\nimport List from \"@/components/List\";\nimport Collapsible from \"@/components/Collapsible\";\n\nimport { defaultSelection } from \"@/constants\";\nimport withPreselection from \"@/hoc/with-preselection\";\nimport { colorName } from \"./config\";\nimport HttpData from \"@/components/HttpData\";\nimport { downloadAsJson, downloadFile } from \"@/utils\";\nimport DownloadButton from \"@/components/DownloadButton\";\nimport NeuronFactsheet from \"../1_experimental-data/neuronal-morphology/NeuronFactsheet\";\n\nimport LayerSelector3D from \"@/components/LayerSelector3D\";\nimport { Layer } from \"@/types\";\nimport { basePath, dataPath } from \"@/config\";\n\nimport modelsDataImport from \"./morphology-library.json\";\nimport MorphDistributionPlots from \"@/components/MorphDistributionsPlots\";\nimport { SwcViewer } from \"../MorphoViewer/SwcViewer\";\n\ntype ModelData = {\n  layer: Layer;\n  mtype: string;\n  etype: string;\n  morphology: string;\n};\n\nconst modelsData: ModelData[] = (\n  Array.isArray(modelsDataImport) ? modelsDataImport : [modelsDataImport]\n) as ModelData[];\n\nconst getUniqueValues = (\n  key: keyof ModelData,\n  filterKey1?: keyof ModelData,\n  filterValue1?: Layer | string,\n  filterKey2?: keyof ModelData,\n  filterValue2?: string\n): (Layer | string)[] => {\n  return Array.from(\n    new Set(\n      modelsData\n        .filter(\n          (model) =>\n            (!filterKey1 ||\n              !filterValue1 ||\n              model[filterKey1] === filterValue1) &&\n            (!filterKey2 || !filterValue2 || model[filterKey2] === filterValue2)\n        )\n        .map((model) => model[key])\n    )\n  )\n    .filter((value): value is Layer | string => value != null)\n    .sort((a, b) => a.toString().localeCompare(b.toString()));\n};\n\nconst getFilteredMorphologies = (\n  layer: Layer | \"\",\n  mtype: string,\n  etype: string\n): string[] => {\n  return modelsData\n    .filter(\n      (model) =>\n        (layer === \"\" || model.layer === layer) &&\n        (mtype === \"\" || model.mtype === mtype) &&\n        (etype === \"\" || model.etype === etype)\n    )\n    .map((model) => model.morphology)\n    .filter((value): value is string => value != null)\n    .filter((value, index, self) => self.indexOf(value) === index)\n    .sort();\n};\n\nconst MorphologyLibrary: React.FC = () => {\n  const router = useRouter();\n  const theme = 3;\n\n  const { query } = router;\n  const [currentLayer, setCurrentLayer] = useState<Layer | \"\">(\n    (query.layer as Layer) || \"\"\n  );\n  const [currentMtype, setCurrentMtype] = useState<string>(\n    (query.mtype as string) || \"\"\n  );\n  const [currentEtype, setCurrentEtype] = useState<string>(\n    (query.etype as string) || \"\"\n  );\n  const [currentMorphology, setCurrentMorphology] = useState<string>(\n    (query.morphology as string) || \"\"\n  );\n\n  const layers = useMemo(() => getUniqueValues(\"layer\") as Layer[], []);\n  const mtypes = useMemo(\n    () => getUniqueValues(\"mtype\", \"layer\", currentLayer) as string[],\n    [currentLayer]\n  );\n  const etypes = useMemo(\n    () =>\n      getUniqueValues(\n        \"etype\",\n        \"layer\",\n        currentLayer,\n        \"mtype\",\n        currentMtype\n      ) as string[],\n    [currentLayer, currentMtype]\n  );\n  const morphologies = useMemo(\n    () => getFilteredMorphologies(currentLayer, currentMtype, currentEtype),\n    [currentLayer, currentMtype, currentEtype]\n  );\n\n  useEffect(() => {\n    if (!currentLayer && layers.length > 0) {\n      setLayer(layers[0]);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (currentLayer) {\n      const newMtype = mtypes.length > 0 ? mtypes[0] : \"\";\n      const newEtype =\n        (getUniqueValues(\n          \"etype\",\n          \"layer\",\n          currentLayer,\n          \"mtype\",\n          newMtype\n        )[0] as string) || \"\";\n      const newMorphology =\n        getFilteredMorphologies(currentLayer, newMtype, newEtype)[0] || \"\";\n\n      setCurrentMtype(newMtype);\n      setCurrentEtype(newEtype);\n      setCurrentMorphology(newMorphology);\n      setParams({\n        layer: currentLayer,\n        mtype: newMtype,\n        etype: newEtype,\n        morphology: newMorphology,\n      });\n    }\n  }, [currentLayer, mtypes]);\n\n  useEffect(() => {\n    if (currentMtype) {\n      const newEtype = etypes.length > 0 ? etypes[0] : \"\";\n      const newMorphology =\n        getFilteredMorphologies(currentLayer, currentMtype, newEtype)[0] || \"\";\n\n      setCurrentEtype(newEtype);\n      setCurrentMorphology(newMorphology);\n      setParams({\n        mtype: currentMtype,\n        etype: newEtype,\n        morphology: newMorphology,\n      });\n    }\n  }, [currentMtype, etypes]);\n\n  useEffect(() => {\n    if (currentEtype) {\n      const newMorphology =\n        getFilteredMorphologies(currentLayer, currentMtype, currentEtype)[0] ||\n        \"\";\n      setCurrentMorphology(newMorphology);\n      setParams({\n        etype: currentEtype,\n        morphology: newMorphology,\n      });\n    }\n  }, [currentEtype]);\n\n  const setParams = (params: Record<string, string | Layer>): void => {\n    const newQuery = {\n      ...router.query,\n      ...params,\n    };\n    router.push({ query: newQuery, pathname: router.pathname }, undefined, {\n      shallow: true,\n    });\n  };\n\n  const setLayer = (layer: Layer) => {\n    setCurrentLayer(layer);\n  };\n\n  const setMtype = (mtype: string) => {\n    setCurrentMtype(mtype);\n  };\n\n  const setEtype = (etype: string) => {\n    setCurrentEtype(etype);\n  };\n\n  const setMorphology = (morphology: string) => {\n    setCurrentMorphology(morphology);\n    setParams({\n      morphology,\n    });\n  };\n\n  const qsEntries: QuickSelectorEntry[] = [\n    {\n      title: \"Layer\",\n      key: \"layer\",\n      values: layers,\n      setFn: setLayer,\n    },\n    {\n      title: \"M-Type\",\n      key: \"mtype\",\n      values: mtypes,\n      setFn: setMtype,\n    },\n    {\n      title: \"E-Type\",\n      key: \"etype\",\n      values: etypes,\n      setFn: setEtype,\n    },\n    {\n      title: \"Morphology\",\n      key: \"morphology\",\n      values: morphologies,\n      setFn: setMorphology,\n    },\n  ];\n\n  return (\n    <>\n      <Filters theme={theme}>\n        <div className=\"row w-100 content-center\">\n          <div className=\"col-xs-12 col-lg-6 content-center\">\n            <Title\n              title=\"Morphology library\"\n              subtitle=\"Reconstruction Data\"\n              theme={theme}\n            />\n            <InfoBox color={colorName}>\n              <p>\n                We scale and clone{\" \"}\n                <Link\n                  className={`link theme-${theme}`}\n                  href=\"/experimental-data/neuronal-morphology/\"\n                >\n                  morphologies\n                </Link>{\" \"}\n                to produce a morphology library.\n              </p>\n            </InfoBox>\n          </div>\n\n          <div className=\"col-xs-12 col-lg-6\">\n            <div className=\"selector\">\n              <div className={`selector__column theme-${theme}`}>\n                <div className={`selector__head theme-${theme}`}>\n                  Choose a layer\n                </div>\n                <div className=\"selector__selector-container\">\n                  <LayerSelector3D\n                    value={currentLayer || undefined}\n                    onSelect={setLayer}\n                    theme={theme}\n                  />\n                </div>\n              </div>\n              <div className={`selector__column theme-${theme}`}>\n                <div className={`selector__head theme-${theme}`}>\n                  Select reconstruction\n                </div>\n                <div className=\"selector__body\">\n                  <List\n                    block\n                    list={mtypes}\n                    value={currentMtype}\n                    title={`M-type ${mtypes.length ? `(${mtypes.length})` : \"\"\n                      }`}\n                    color={colorName}\n                    onSelect={setMtype}\n                    theme={theme}\n                  />\n                  <List\n                    block\n                    list={etypes}\n                    value={currentEtype}\n                    title={`E-type ${etypes.length ? `(${etypes.length})` : \"\"\n                      }`}\n                    color={colorName}\n                    onSelect={setEtype}\n                    theme={theme}\n                  />\n                  <List\n                    block\n                    list={morphologies}\n                    value={currentMorphology}\n                    title={`Morphology ${morphologies.length ? `(${morphologies.length})` : \"\"\n                      }`}\n                    color={colorName}\n                    onSelect={setMorphology}\n                    anchor=\"data\"\n                    theme={theme}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Filters>\n\n      <DataContainer\n        theme={theme}\n        visible={!!(currentMtype || currentMorphology)}\n        navItems={[\n          { id: \"morphologySection\", label: \"Neuron Morphology\" },\n          { id: \"populationSection\", label: \"Population\" },\n        ]}\n        quickSelectorEntries={qsEntries}\n      >\n        <Collapsible\n          id=\"morphologySection\"\n          title=\"Neuron Morphology\"\n          properties={[\n            currentLayer,\n            currentMtype,\n            currentEtype,\n            currentMorphology,\n          ]}\n        >\n          <p className=\"text-lg mb-2\">\n            We provide visualization and morphometrics for the selected\n            morphology.\n          </p>\n          <div className=\"graph no-padding\">\n            <SwcViewer\n              href={`${dataPath}/2_reconstruction-data/morphology-library/all/${currentMorphology}/morphology.swc`}\n            />\n          </div>\n          <DownloadButton\n            onClick={() =>\n              downloadFile(\n                `${dataPath}/2_reconstruction-data/morphology-library/all/${currentMorphology}/morphology.swc`,\n                `${currentMorphology}-morphology.swc`\n              )\n            }\n            theme={theme}\n          >\n            Download SWC\n          </DownloadButton>\n          <HttpData\n            path={`${dataPath}/2_reconstruction-data/morphology-library/all/${currentMorphology}/factsheet.json`}\n          >\n            {(factsheetData: any) => (\n              <>\n                {factsheetData && (\n                  <>\n                    <NeuronFactsheet\n                      id=\"morphometrics\"\n                      facts={factsheetData.values}\n                    />\n                    <div className=\"mt-4\">\n                      <DownloadButton\n                        onClick={() =>\n                          downloadAsJson(\n                            factsheetData.values,\n                            `${currentMtype}-factsheet.json`\n                          )\n                        }\n                        theme={theme}\n                      >\n                        Factsheet\n                      </DownloadButton>\n                    </div>\n                  </>\n                )}\n              </>\n            )}\n          </HttpData>\n          <div className=\"mt-4\">\n            <HttpData\n              path={`${dataPath}/2_reconstruction-data/morphology-library/section_features/${currentMorphology}/distribution-plots.json`}\n            >\n              {(plotsData) => (\n                <>\n                  {plotsData && (\n                    <>\n                      <MorphDistributionPlots\n                        type=\"singleMorphology\"\n                        data={plotsData}\n                      />\n                      <div className=\"mt-4\">\n                        <DownloadButton\n                          onClick={() =>\n                            downloadAsJson(\n                              plotsData,\n                              `${currentMorphology}-plot-data.json`\n                            )\n                          }\n                          theme={theme}\n                        >\n                          Plot Data\n                        </DownloadButton>\n                      </div>\n                    </>\n                  )}\n                </>\n              )}\n            </HttpData>\n          </div>\n        </Collapsible>\n        <Collapsible\n          id=\"populationSection\"\n          title=\"Population\"\n          properties={[currentMtype]}\n        >\n          <p className=\"text-lg mb-2\">\n            We provide morphometrics for the entire m-type group selected.\n          </p>\n          <div className=\"mb-4\">\n            <HttpData\n              path={`${dataPath}/2_reconstruction-data/morphology-library/per_mtype/${currentMtype}/factsheet.json`}\n            >\n              {(factsheetData: any) => (\n                <>\n                  {factsheetData && (\n                    <>\n                      <NeuronFactsheet\n                        id=\"morphometrics\"\n                        facts={factsheetData.values}\n                      />\n                      <div className=\"mt-4\">\n                        <DownloadButton\n                          onClick={() =>\n                            downloadAsJson(\n                              factsheetData.values,\n                              `${currentMtype}-factsheet.json`\n                            )\n                          }\n                          theme={theme}\n                        >\n                          Factsheet\n                        </DownloadButton>\n                      </div>\n                    </>\n                  )}\n                </>\n              )}\n            </HttpData>\n          </div>\n          <div className=\"mt-4\">\n            public/data/\n            <HttpData\n              path={`${dataPath}/2_reconstruction-data/morphology-library/per_mtype/${currentMtype}/distribution-plot.json`}\n            >\n              {(plotsData) => (\n                <>\n                  {plotsData && (\n                    <>\n                      <MorphDistributionPlots\n                        type=\"singleMorphology\"\n                        data={plotsData}\n                      />\n                      <div className=\"mt-4\">\n                        <DownloadButton\n                          onClick={() =>\n                            downloadAsJson(\n                              plotsData,\n                              `${currentMorphology}-plot-data.json`\n                            )\n                          }\n                          theme={theme}\n                        >\n                          Plot Data\n                        </DownloadButton>\n                      </div>\n                    </>\n                  )}\n                </>\n              )}\n            </HttpData>\n          </div>\n        </Collapsible>\n      </DataContainer>\n    </>\n  );\n};\n\nexport default withPreselection(MorphologyLibrary, {\n  key: \"mtype\",\n  defaultQuery: defaultSelection.digitalReconstruction.morphologyLibrary,\n});\n","import Head from 'next/head';\nimport MorphologyLibraryView from '@/views/2_reconstruction-data/MorphologyLibrary';\n\nexport default function MorphologyLibraryPage() {\n  const metadata = {\n    title: 'Morphology Library - Reconstruction Data | The Hippocampus Hub',\n    description:\n      'Explore a comprehensive library of neuronal morphologies reconstructed from hippocampal neurons. Analyze key morphological features such as total axon length, dendritic segments, and soma diameter.',\n    keywords: [\n      'Morphology Library',\n      'Neuronal Morphology',\n      'Hippocampus',\n      'Reconstruction Data',\n      'Neuroscience',\n      'Blue Brain Project',\n    ],\n    author: 'Blue Brain Project',\n    creator: 'EPFL Blue Brain Project',\n    publisher: 'The Hippocampus Hub',\n  };\n\n  return (\n    <>\n      <Head>\n        <title>{metadata.title}</title>\n        <meta name=\"description\" content={metadata.description} />\n        <meta name=\"keywords\" content={metadata.keywords.join(', ')} />\n        <meta name=\"author\" content={metadata.author} />\n        <meta name=\"creator\" content={metadata.creator} />\n        <meta name=\"publisher\" content={metadata.publisher} />\n      </Head>\n\n      <MorphologyLibraryView />\n    </>\n  );\n}","import { accentColors } from '@/config';\nimport { Color } from '@/types';\n\nexport const sectionTitle = 'Reconstruction Data';\nexport const colorName: Color = 'grey-2';\nexport const primaryColor = accentColors[colorName];\n","import React from 'react';\nimport { isFragment } from 'react-is';\nexport default function toArray(children) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var ret = [];\n  React.Children.forEach(children, function (child) {\n    if ((child === undefined || child === null) && !option.keepEmpty) {\n      return;\n    }\n    if (Array.isArray(child)) {\n      ret = ret.concat(toArray(child));\n    } else if (isFragment(child) && child.props) {\n      ret = ret.concat(toArray(child.props.children, option));\n    } else {\n      ret.push(child);\n    }\n  });\n  return ret;\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toArray;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactIs = require(\"react-is\");\nfunction toArray(children) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var ret = [];\n  _react.default.Children.forEach(children, function (child) {\n    if ((child === undefined || child === null) && !option.keepEmpty) {\n      return;\n    }\n    if (Array.isArray(child)) {\n      ret = ret.concat(toArray(child));\n    } else if ((0, _reactIs.isFragment)(child) && child.props) {\n      ret = ret.concat(toArray(child.props.children, option));\n    } else {\n      ret.push(child);\n    }\n  });\n  return ret;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = omit;\nfunction omit(obj, fields) {\n  var clone = Object.assign({}, obj);\n  if (Array.isArray(fields)) {\n    fields.forEach(function (key) {\n      delete clone[key];\n    });\n  }\n  return clone;\n}"],"names":["window","__NEXT_P","push","__webpack_require__","modelsData","Array","isArray","modelsDataImport","getUniqueValues","key","filterKey1","filterValue1","filterKey2","filterValue2","from","Set","filter","model","map","value","sort","a","b","toString","localeCompare","getFilteredMorphologies","layer","mtype","etype","morphology","index","self","indexOf","_2_reconstruction_data_MorphologyLibrary","withPreselection","router","useRouter","query","currentLayer","setCurrentLayer","useState","currentMtype","setCurrentMtype","currentEtype","setCurrentEtype","currentMorphology","setCurrentMorphology","layers","useMemo","mtypes","etypes","morphologies","useEffect","length","setLayer","newMtype","newEtype","newMorphology","setParams","newQuery","params","pathname","undefined","shallow","setMtype","setEtype","setMorphology","qsEntries","title","values","setFn","jsx_runtime","jsxs","Fragment","jsx","Filters","theme","div","className","Title","subtitle","InfoBox","color","colorName","p","Link","concat","href","LayerSelector3D","onSelect","List","block","list","anchor","DataContainer","visible","navItems","id","label","quickSelectorEntries","Collapsible","properties","SwcViewer","dataPath","DownloadButton","onClick","downloadFile","HttpData","path","factsheetData","NeuronFactsheet","facts","downloadAsJson","plotsData","MorphDistributionPlots","type","data","defaultQuery","defaultSelection","digitalReconstruction","morphologyLibrary","MorphologyLibraryPage","metadata","description","keywords","author","creator","publisher","Head","meta","name","content","join","MorphologyLibraryView","accentColors","toArray","children","option","arguments","ret","react__WEBPACK_IMPORTED_MODULE_0__","Children","forEach","child","keepEmpty","react_is__WEBPACK_IMPORTED_MODULE_1__","isFragment","props","_interopRequireDefault","Object","defineProperty","exports","_react","default","_reactIs","obj","fields","clone","assign"],"sourceRoot":""}