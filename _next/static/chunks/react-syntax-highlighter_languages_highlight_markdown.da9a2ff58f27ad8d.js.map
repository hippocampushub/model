{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_highlight_markdown.da9a2ff58f27ad8d.js","mappings":"waAiQAA,EAAAC,OAAA,CAhOA,SAAAC,CAAA,EACA,IAAAC,EAAA,CACAC,MAAA,gBACAC,IAAA,IACAC,YAAA,MACAC,UAAA,CACA,EAmEAC,EAAA,CACAC,SAAA,CAGA,CACAL,MAAA,iBACAG,UAAA,CACA,EAEA,CACAH,MAAA,gEACAG,UAAA,CACA,EACA,CACAH,MAAAM,WAnGA,IAAAC,EAAAC,CAmGA,YAfA,0BAeA,aApGA,CACAC,GAAA,IAXA,EACA,iBAUAC,EAAAA,EARAC,EAAAC,MAAA,CAHA,MAWAC,IAAA,KACA,OAAAN,CACA,EAiGA,YAfA,0BAeA,cACAJ,UAAA,CACA,EAEA,CACAH,MAAA,wBACAG,UAAA,CACA,EAEA,CACAH,MAAA,iBACAG,UAAA,CACA,EACA,CACAW,YAAA,GACAC,SAAA,CACA,CACAC,UAAA,SACAb,UAAA,EACAH,MAAA,MACAC,IAAA,MACAgB,aAAA,GACAC,UAAA,EACA,EACA,CACAF,UAAA,OACAb,UAAA,EACAH,MAAA,SACAC,IAAA,MACAgB,aAAA,GACAE,WAAA,EACA,EACA,CACAH,UAAA,SACAb,UAAA,EACAH,MAAA,SACAC,IAAA,MACAgB,aAAA,GACAE,WAAA,EACA,EACA,EAEAC,EAAA,CACAJ,UAAA,SACAD,SAAA,GACAV,SAAA,CACA,CACAL,MAAA,OACAC,IAAA,MACA,EACA,CACAD,MAAA,QACAC,IAAA,OACA,EACA,EAEAoB,EAAA,CACAL,UAAA,WACAD,SAAA,GACAV,SAAA,CACA,CACAL,MAAA,WACAC,IAAA,IACA,EACA,CACAD,MAAA,SACAC,IAAA,IACAE,UAAA,CACA,EACA,EAEAiB,EAAAL,QAAA,CAAAO,IAAA,CAAAD,GACAA,EAAAN,QAAA,CAAAO,IAAA,CAAAF,GAEA,IAAAG,EAAA,CACAxB,EACAK,EACA,CAEAgB,EAAAL,QAAA,CAAAK,EAAAL,QAAA,CAAAT,MAAA,CAAAiB,GACAF,EAAAN,QAAA,CAAAM,EAAAN,QAAA,CAAAT,MAAA,CAAAiB,GAEAA,EAAAA,EAAAjB,MAAA,CAAAc,EAAAC,GAEA,IAAAG,EAAA,CACAR,UAAA,UACAX,SAAA,CACA,CACAL,MAAA,UACAC,IAAA,IACAc,SAAAQ,CACA,EACA,CACAvB,MAAA,uBACAe,SAAA,CACA,CACAf,MAAA,SACA,EACA,CACAA,MAAA,IACAC,IAAA,MACAc,SAAAQ,CACA,EACA,EAEA,EAGAE,EAAA,CACAT,UAAA,QACAhB,MAAA,SACAe,SAAAQ,EACAtB,IAAA,GACA,EAEA,OACAyB,KAAA,WACAC,QAAA,CACA,KACA,SACA,MACA,CACAZ,SAAA,CACAS,EACAzB,EApKA,CACAiB,UAAA,SACAhB,MAAA,kCACAC,IAAA,OACAkB,WAAA,EACA,EAiKAC,EACAC,EACAI,EA5MA,CACAT,UAAA,OACAX,SAAA,CAEA,CACAL,MAAA,+BACA,EACA,CACAA,MAAA,+BACA,EAEA,CACAA,MAAA,MACAC,IAAA,WACA,EACA,CACAD,MAAA,MACAC,IAAA,WACA,EACA,CACAD,MAAA,OACA,EACA,CACAA,MAAA,kBAGAe,SAAA,CACA,CACAf,MAAA,cACAC,IAAA,QACA,EACA,CACAE,UAAA,CACA,EACA,EAtCA,CACAH,MAAA,cACAC,IAAA,GACA,EAgNAG,EArKA,CACAJ,MAAA,eACAc,YAAA,GACAC,SAAA,CACA,CACAC,UAAA,SACAhB,MAAA,KACAC,IAAA,KACAgB,aAAA,GACAE,WAAA,EACA,EACA,CACAH,UAAA,OACAhB,MAAA,OACAC,IAAA,IACAgB,aAAA,EACA,EACA,EAsJA,CAEA","sources":["webpack://_N_E/./node_modules/highlight.js/lib/languages/markdown.js","webpack://_N_E/<anon>"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\n\nfunction markdown(hljs) {\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [\n      // TODO: fix to allow these to work with sublanguage also\n      {\n        begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\n      },\n      {\n        begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\n      },\n      // needed to allow markdown as a sublanguage to work\n      {\n        begin: '```',\n        end: '```+[ ]*$'\n      },\n      {\n        begin: '~~~',\n        end: '~~~+[ ]*$'\n      },\n      {\n        begin: '`.+?`'\n      },\n      {\n        begin: '(?=^( {4}|\\\\t))',\n        // use contains to gobble up multiple lines to allow the block to be whatever size\n        // but only have a single open/close tag vs one per line\n        contains: [\n          {\n            begin: '^( {4}|\\\\t)',\n            end: '(\\\\n)$'\n          }\n        ],\n        relevance: 0\n      }\n    ]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [\n      {\n        className: 'symbol',\n        begin: /\\[/,\n        end: /\\]/,\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'link',\n        begin: /:\\s*/,\n        end: /$/,\n        excludeBegin: true\n      }\n    ]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [\n      // too much like nested array access in so many languages\n      // to have any real relevance\n      {\n        begin: /\\[.+?\\]\\[.*?\\]/,\n        relevance: 0\n      },\n      // popular internet URLs\n      {\n        begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n        relevance: 2\n      },\n      {\n        begin: concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n        relevance: 2\n      },\n      // relative urls\n      {\n        begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n        relevance: 1\n      },\n      // whatever else, lower relevance (might not be a link at all)\n      {\n        begin: /\\[.+?\\]\\(.*?\\)/,\n        relevance: 0\n      }\n    ],\n    returnBegin: true,\n    contains: [\n      {\n        className: 'string',\n        relevance: 0,\n        begin: '\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        returnEnd: true\n      },\n      {\n        className: 'link',\n        relevance: 0,\n        begin: '\\\\]\\\\(',\n        end: '\\\\)',\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'symbol',\n        relevance: 0,\n        begin: '\\\\]\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        excludeEnd: true\n      }\n    ]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /_{2}/,\n        end: /_{2}/\n      },\n      {\n        begin: /\\*{2}/,\n        end: /\\*{2}/\n      }\n    ]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /\\*(?!\\*)/,\n        end: /\\*/\n      },\n      {\n        begin: /_(?!_)/,\n        end: /_/,\n        relevance: 0\n      }\n    ]\n  };\n  BOLD.contains.push(ITALIC);\n  ITALIC.contains.push(BOLD);\n\n  let CONTAINABLE = [\n    INLINE_HTML,\n    LINK\n  ];\n\n  BOLD.contains = BOLD.contains.concat(CONTAINABLE);\n  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\n\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n\n  const HEADER = {\n    className: 'section',\n    variants: [\n      {\n        begin: '^#{1,6}',\n        end: '$',\n        contains: CONTAINABLE\n      },\n      {\n        begin: '(?=^.+?\\\\n[=-]{2,}$)',\n        contains: [\n          {\n            begin: '^[=-]*$'\n          },\n          {\n            begin: '^',\n            end: \"\\\\n\",\n            contains: CONTAINABLE\n          }\n        ]\n      }\n    ]\n  };\n\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n\n  return {\n    name: 'Markdown',\n    aliases: [\n      'md',\n      'mkdown',\n      'mkd'\n    ],\n    contains: [\n      HEADER,\n      INLINE_HTML,\n      LIST,\n      BOLD,\n      ITALIC,\n      BLOCKQUOTE,\n      CODE,\n      HORIZONTAL_RULE,\n      LINK,\n      LINK_REFERENCE\n    ]\n  };\n}\n\nmodule.exports = markdown;\n"],"names":["module","exports","hljs","INLINE_HTML","begin","end","subLanguage","relevance","LINK","variants","concat","joined","args","map","x","re","source","join","returnBegin","contains","className","excludeBegin","returnEnd","excludeEnd","BOLD","ITALIC","push","CONTAINABLE","HEADER","BLOCKQUOTE","name","aliases"],"sourceRoot":""}