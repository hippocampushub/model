{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_highlight_cal.5055f1baaa7572d1.js","mappings":"waAuGAA,EAAAC,OAAA,CA/FA,SAAAC,CAAA,EACA,IAAAC,EACA,yHAGAC,EAAA,CACAF,EAAAG,mBAAA,CACAH,EAAAI,OAAA,CACA,KACA,KACA,CACAC,UAAA,CACA,GAEAL,EAAAI,OAAA,CACA,OACA,OACA,CACAC,UAAA,EACA,GAEA,CACAC,EAAA,CACAC,UAAA,SACAC,MAAA,IACAC,IAAA,IACAC,SAAA,EACAF,MAAA,IACA,EAAK,EAELG,EAAA,CACAJ,UAAA,SACAC,MAAA,SACA,EAYAI,EAAA,CACAL,UAAA,WACAM,cAAA,YACAJ,IAAA,OACAK,SAAA,eACAJ,SAAA,CACAV,EAAAe,UAAA,CACA,CACAR,UAAA,SACAC,MAAA,KACAC,IAAA,KACAK,SAAAb,EACAS,SAAA,CACAJ,EACAK,EACA,EAEA,CAAAK,MAAA,CAAAd,EACA,EAEAe,EAAA,CACAV,UAAA,QACAC,MAAA,gGACAU,YAAA,GACAR,SAAA,CACAV,EAAAe,UAAA,CACAH,EACA,EAGA,OACAO,KAAA,OACAC,iBAAA,GACAN,SAAA,CACAO,QAAApB,EACAqB,QA5EA,YA6EA,EACAC,QAAA,OACAb,SAAA,CACAJ,EACAK,EAnDA,CACAJ,UAAA,SACAC,MAAA,4BACAH,UAAA,CACA,EACA,CACAE,UAAA,SACAC,MAAA,IACAC,IAAA,GACA,EA6CAT,EAAAwB,WAAA,CACAP,EACAL,EACA,CAEA","sources":["webpack://_N_E/./node_modules/highlight.js/lib/languages/cal.js","webpack://_N_E/<anon>"],"sourcesContent":["/*\nLanguage: C/AL\nAuthor: Kenneth Fuglsang Christensen <kfuglsang@gmail.com>\nDescription: Provides highlighting of Microsoft Dynamics NAV C/AL code files\nWebsite: https://docs.microsoft.com/en-us/dynamics-nav/programming-in-c-al\n*/\n\n/** @type LanguageFn */\nfunction cal(hljs) {\n  const KEYWORDS =\n    'div mod in and or not xor asserterror begin case do downto else end exit for if of repeat then to ' +\n    'until while with var';\n  const LITERALS = 'false true';\n  const COMMENT_MODES = [\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.COMMENT(\n      /\\{/,\n      /\\}/,\n      {\n        relevance: 0\n      }\n    ),\n    hljs.COMMENT(\n      /\\(\\*/,\n      /\\*\\)/,\n      {\n        relevance: 10\n      }\n    )\n  ];\n  const STRING = {\n    className: 'string',\n    begin: /'/,\n    end: /'/,\n    contains: [{\n      begin: /''/\n    }]\n  };\n  const CHAR_STRING = {\n    className: 'string',\n    begin: /(#\\d+)+/\n  };\n  const DATE = {\n    className: 'number',\n    begin: '\\\\b\\\\d+(\\\\.\\\\d+)?(DT|D|T)',\n    relevance: 0\n  };\n  const DBL_QUOTED_VARIABLE = {\n    className: 'string', // not a string technically but makes sense to be highlighted in the same style\n    begin: '\"',\n    end: '\"'\n  };\n\n  const PROCEDURE = {\n    className: 'function',\n    beginKeywords: 'procedure',\n    end: /[:;]/,\n    keywords: 'procedure|10',\n    contains: [\n      hljs.TITLE_MODE,\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        contains: [\n          STRING,\n          CHAR_STRING\n        ]\n      }\n    ].concat(COMMENT_MODES)\n  };\n\n  const OBJECT = {\n    className: 'class',\n    begin: 'OBJECT (Table|Form|Report|Dataport|Codeunit|XMLport|MenuSuite|Page|Query) (\\\\d+) ([^\\\\r\\\\n]+)',\n    returnBegin: true,\n    contains: [\n      hljs.TITLE_MODE,\n      PROCEDURE\n    ]\n  };\n\n  return {\n    name: 'C/AL',\n    case_insensitive: true,\n    keywords: {\n      keyword: KEYWORDS,\n      literal: LITERALS\n    },\n    illegal: /\\/\\*/,\n    contains: [\n      STRING,\n      CHAR_STRING,\n      DATE,\n      DBL_QUOTED_VARIABLE,\n      hljs.NUMBER_MODE,\n      OBJECT,\n      PROCEDURE\n    ]\n  };\n}\n\nmodule.exports = cal;\n"],"names":["module","exports","hljs","KEYWORDS","COMMENT_MODES","C_LINE_COMMENT_MODE","COMMENT","relevance","STRING","className","begin","end","contains","CHAR_STRING","PROCEDURE","beginKeywords","keywords","TITLE_MODE","concat","OBJECT","returnBegin","name","case_insensitive","keyword","literal","illegal","NUMBER_MODE"],"sourceRoot":""}