{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_highlight_htmlbars.16746b52a11a417e.js","mappings":"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","sources":["webpack://_N_E/./node_modules/highlight.js/lib/languages/htmlbars.js","webpack://_N_E/<anon>"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction anyNumberOfTimes(re) {\n  return concat('(', re, ')*');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: Handlebars\nRequires: xml.js\nAuthor: Robin Ward <robin.ward@gmail.com>\nDescription: Matcher for Handlebars as well as EmberJS additions.\nWebsite: https://handlebarsjs.com\nCategory: template\n*/\n\nfunction handlebars(hljs) {\n  const BUILT_INS = {\n    'builtin-name': [\n      'action',\n      'bindattr',\n      'collection',\n      'component',\n      'concat',\n      'debugger',\n      'each',\n      'each-in',\n      'get',\n      'hash',\n      'if',\n      'in',\n      'input',\n      'link-to',\n      'loc',\n      'log',\n      'lookup',\n      'mut',\n      'outlet',\n      'partial',\n      'query-params',\n      'render',\n      'template',\n      'textarea',\n      'unbound',\n      'unless',\n      'view',\n      'with',\n      'yield'\n    ]\n  };\n\n  const LITERALS = {\n    literal: [\n      'true',\n      'false',\n      'undefined',\n      'null'\n    ]\n  };\n\n  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\n  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\n  // like a/b, ./abc/cde, and abc.bcd\n\n  const DOUBLE_QUOTED_ID_REGEX = /\"\"|\"[^\"]+\"/;\n  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;\n  const BRACKET_QUOTED_ID_REGEX = /\\[\\]|\\[[^\\]]+\\]/;\n  const PLAIN_ID_REGEX = /[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\n  const PATH_DELIMITER_REGEX = /(\\.|\\/)/;\n  const ANY_ID = either(\n    DOUBLE_QUOTED_ID_REGEX,\n    SINGLE_QUOTED_ID_REGEX,\n    BRACKET_QUOTED_ID_REGEX,\n    PLAIN_ID_REGEX\n    );\n\n  const IDENTIFIER_REGEX = concat(\n    optional(/\\.|\\.\\/|\\//), // relative or absolute path\n    ANY_ID,\n    anyNumberOfTimes(concat(\n      PATH_DELIMITER_REGEX,\n      ANY_ID\n    ))\n  );\n\n  // identifier followed by a equal-sign (without the equal sign)\n  const HASH_PARAM_REGEX = concat(\n    '(',\n    BRACKET_QUOTED_ID_REGEX, '|',\n    PLAIN_ID_REGEX,\n    ')(?==)'\n  );\n\n  const HELPER_NAME_OR_PATH_EXPRESSION = {\n    begin: IDENTIFIER_REGEX,\n    lexemes: /[\\w.\\/]+/\n  };\n\n  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: LITERALS\n  });\n\n  const SUB_EXPRESSION = {\n    begin: /\\(/,\n    end: /\\)/\n    // the \"contains\" is added below when all necessary sub-modes are defined\n  };\n\n  const HASH = {\n    // fka \"attribute-assignment\", parameters of the form 'key=value'\n    className: 'attr',\n    begin: HASH_PARAM_REGEX,\n    relevance: 0,\n    starts: {\n      begin: /=/,\n      end: /=/,\n      starts: {\n        contains: [\n          hljs.NUMBER_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          HELPER_PARAMETER,\n          SUB_EXPRESSION\n        ]\n      }\n    }\n  };\n\n  const BLOCK_PARAMS = {\n    // parameters of the form '{{#with x as | y |}}...{{/with}}'\n    begin: /as\\s+\\|/,\n    keywords: {\n      keyword: 'as'\n    },\n    end: /\\|/,\n    contains: [\n      {\n        // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\n        begin: /\\w+/\n      }\n    ]\n  };\n\n  const HELPER_PARAMETERS = {\n    contains: [\n      hljs.NUMBER_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      BLOCK_PARAMS,\n      HASH,\n      HELPER_PARAMETER,\n      SUB_EXPRESSION\n    ],\n    returnEnd: true\n    // the property \"end\" is defined through inheritance when the mode is used. If depends\n    // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\n    // end-token of the surrounding mode)\n  };\n\n  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\)/\n    })\n  });\n\n  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\n\n  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name',\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n\n  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name'\n  });\n\n  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n\n  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\{\\{/,\n    skip: true\n  };\n  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\\\(?=\\{\\{)/,\n    skip: true\n  };\n\n  return {\n    name: 'Handlebars',\n    aliases: [\n      'hbs',\n      'html.hbs',\n      'html.handlebars',\n      'htmlbars'\n    ],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,\n      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,\n      hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/),\n      hljs.COMMENT(/\\{\\{!/, /\\}\\}/),\n      {\n        // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{(?!\\/)/,\n        end: /\\}\\}\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n        starts: {\n          end: /\\{\\{\\{\\{\\//,\n          returnEnd: true,\n          subLanguage: 'xml'\n        }\n      },\n      {\n        // close raw block\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{\\//,\n        end: /\\}\\}\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // open block statement\n        className: 'template-tag',\n        begin: /\\{\\{#/,\n        end: /\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        className: 'template-tag',\n        begin: /\\{\\{(?=else\\}\\})/,\n        end: /\\}\\}/,\n        keywords: 'else'\n      },\n      {\n        className: 'template-tag',\n        begin: /\\{\\{(?=else if)/,\n        end: /\\}\\}/,\n        keywords: 'else if'\n      },\n      {\n        // closing block statement\n        className: 'template-tag',\n        begin: /\\{\\{\\//,\n        end: /\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is NOT html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{\\{/,\n        end: /\\}\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{/,\n        end: /\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      }\n    ]\n  };\n}\n\n/*\n Language: HTMLBars (legacy)\n Requires: xml.js\n Description: Matcher for Handlebars as well as EmberJS additions.\n Website: https://github.com/tildeio/htmlbars\n Category: template\n */\n\nfunction htmlbars(hljs) {\n  const definition = handlebars(hljs);\n\n  definition.name = \"HTMLbars\";\n\n  // HACK: This lets handlebars do the auto-detection if it's been loaded (by\n  // default the build script will load in alphabetical order) and if not (perhaps\n  // an install is only using `htmlbars`, not `handlebars`) then this will still\n  // allow HTMLBars to participate in the auto-detection\n\n  // worse case someone will have HTMLbars and handlebars competing for the same\n  // content and will need to change their setup to only require handlebars, but\n  // I don't consider this a breaking change\n  if (hljs.getLanguage(\"handlebars\")) {\n    definition.disableAutodetect = true;\n  }\n\n  return definition;\n}\n\nmodule.exports = htmlbars;\n"],"names":["source","re","concat","args","joined","map","x","join","module","exports","hljs","definition","handlebars","BUILT_INS","BRACKET_QUOTED_ID_REGEX","PLAIN_ID_REGEX","ANY_ID","either","IDENTIFIER_REGEX","HASH_PARAM_REGEX","HELPER_NAME_OR_PATH_EXPRESSION","begin","lexemes","HELPER_PARAMETER","inherit","keywords","literal","SUB_EXPRESSION","end","HASH","className","relevance","starts","contains","NUMBER_MODE","QUOTE_STRING_MODE","APOS_STRING_MODE","HELPER_PARAMETERS","keyword","returnEnd","SUB_EXPRESSION_CONTENTS","OPENING_BLOCK_MUSTACHE_CONTENTS","CLOSING_BLOCK_MUSTACHE_CONTENTS","BASIC_MUSTACHE_CONTENTS","name","aliases","case_insensitive","subLanguage","skip","COMMENT","getLanguage","disableAutodetect"],"sourceRoot":""}