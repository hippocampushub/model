{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_highlight_haskell.51f19ab1c9ad4a2a.js","mappings":"waA4KAA,EAAAC,OAAA,CApKA,SAAAC,CAAA,EACA,IAAAC,EAAA,CACAC,SAAA,CACAF,EAAAC,OAAA,WACAD,EAAAC,OAAA,CACA,MACA,MACA,CACAE,SAAA,WAGA,EAGAC,EAAA,CACAC,UAAA,OACAC,MAAA,OACAC,IAAA,MACA,EAEAC,EAAA,CACAH,UAAA,OACAC,MAAA,KACAC,IAAA,GACA,EAEAE,EAAA,CACAJ,UAAA,OACAC,MAAA,kBACAI,UAAA,CACA,EAEAC,EAAA,CACAL,MAAA,MACAC,IAAA,MACAK,QAAA,IACAT,SAAA,CACAC,EACAI,EACA,CACAH,UAAA,OACAC,MAAA,wCACA,EACAN,EAAAa,OAAA,CAAAb,EAAAc,UAAA,EACAR,MAAA,eACA,GACAL,EACA,EAGAc,EAAA,CACAT,MAAA,KACAC,IAAA,KACAJ,SAAAQ,EAAAR,QAAA,EAGA,OACAa,KAAA,UACAC,QAAA,OACAC,SACA,wOAIAf,SAAA,CAEA,CACAgB,cAAA,SACAZ,IAAA,QACAW,SAAA,eACAf,SAAA,CACAQ,EACAV,EACA,CACAW,QAAA,UACA,EACA,CACAN,MAAA,eACAC,IAAA,IACAW,SAAA,6BACAf,SAAA,CACAQ,EACAV,EACA,CACAW,QAAA,UACA,EACA,CACAP,UAAA,QACAC,MAAA,8BACAC,IAAA,QACAW,SAAA,8BACAf,SAAA,CACAM,EACAE,EACAV,EACA,EAEA,CACAI,UAAA,QACAC,MAAA,0BACAC,IAAA,IACAW,SAAA,oCACAf,SAAA,CACAC,EACAK,EACAE,EACAI,EACAd,EACA,EAEA,CACAkB,cAAA,UACAZ,IAAA,IACAJ,SAAA,CACAM,EACAE,EACAV,EACA,EAEA,CACAkB,cAAA,sBACAZ,IAAA,IACAJ,SAAA,CACAH,EAAAoB,aAAA,CACAnB,EACA,EAEA,CACAK,MAAA,gBACAC,IAAA,IACAW,SAAA,uEAEAf,SAAA,CACAM,EACAT,EAAAqB,iBAAA,CACApB,EACA,EAEA,CACAI,UAAA,OACAC,MAAA,kCACAC,IAAA,GACA,EAEAH,EACAI,EAKAR,EAAAqB,iBAAA,CACArB,EAAAoB,aAAA,CACAX,EACAT,EAAAa,OAAA,CAAAb,EAAAc,UAAA,EACAR,MAAA,gBACA,GACAL,EACA,CACAK,MAAA,OACA,EACA,CAEA","sources":["webpack://_N_E/./node_modules/highlight.js/lib/languages/haskell.js","webpack://_N_E/<anon>"],"sourcesContent":["/*\nLanguage: Haskell\nAuthor: Jeremy Hull <sourdrums@gmail.com>\nContributors: Zena Treep <zena.treep@gmail.com>\nWebsite: https://www.haskell.org\nCategory: functional\n*/\n\nfunction haskell(hljs) {\n  const COMMENT = {\n    variants: [\n      hljs.COMMENT('--', '$'),\n      hljs.COMMENT(\n        /\\{-/,\n        /-\\}/,\n        {\n          contains: ['self']\n        }\n      )\n    ]\n  };\n\n  const PRAGMA = {\n    className: 'meta',\n    begin: /\\{-#/,\n    end: /#-\\}/\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: '^#',\n    end: '$'\n  };\n\n  const CONSTRUCTOR = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\']*', // TODO: other constructors (build-in, infix).\n    relevance: 0\n  };\n\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)',\n    illegal: '\"',\n    contains: [\n      PRAGMA,\n      PREPROCESSOR,\n      {\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w]*(\\\\((\\\\.\\\\.|,|\\\\w+)\\\\))?'\n      },\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: '[_a-z][\\\\w\\']*'\n      }),\n      COMMENT\n    ]\n  };\n\n  const RECORD = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: LIST.contains\n  };\n\n  return {\n    name: 'Haskell',\n    aliases: ['hs'],\n    keywords:\n      'let in if then else case of where do module import hiding ' +\n      'qualified type data newtype deriving class instance as default ' +\n      'infix infixl infixr foreign export ccall stdcall cplusplus ' +\n      'jvm dotnet safe unsafe family forall mdo proc rec',\n    contains: [\n      // Top-level constructions.\n      {\n        beginKeywords: 'module',\n        end: 'where',\n        keywords: 'module where',\n        contains: [\n          LIST,\n          COMMENT\n        ],\n        illegal: '\\\\W\\\\.|;'\n      },\n      {\n        begin: '\\\\bimport\\\\b',\n        end: '$',\n        keywords: 'import qualified as hiding',\n        contains: [\n          LIST,\n          COMMENT\n        ],\n        illegal: '\\\\W\\\\.|;'\n      },\n      {\n        className: 'class',\n        begin: '^(\\\\s*)?(class|instance)\\\\b',\n        end: 'where',\n        keywords: 'class family instance where',\n        contains: [\n          CONSTRUCTOR,\n          LIST,\n          COMMENT\n        ]\n      },\n      {\n        className: 'class',\n        begin: '\\\\b(data|(new)?type)\\\\b',\n        end: '$',\n        keywords: 'data family type newtype deriving',\n        contains: [\n          PRAGMA,\n          CONSTRUCTOR,\n          LIST,\n          RECORD,\n          COMMENT\n        ]\n      },\n      {\n        beginKeywords: 'default',\n        end: '$',\n        contains: [\n          CONSTRUCTOR,\n          LIST,\n          COMMENT\n        ]\n      },\n      {\n        beginKeywords: 'infix infixl infixr',\n        end: '$',\n        contains: [\n          hljs.C_NUMBER_MODE,\n          COMMENT\n        ]\n      },\n      {\n        begin: '\\\\bforeign\\\\b',\n        end: '$',\n        keywords: 'foreign import export ccall stdcall cplusplus jvm ' +\n                  'dotnet safe unsafe',\n        contains: [\n          CONSTRUCTOR,\n          hljs.QUOTE_STRING_MODE,\n          COMMENT\n        ]\n      },\n      {\n        className: 'meta',\n        begin: '#!\\\\/usr\\\\/bin\\\\/env\\ runhaskell',\n        end: '$'\n      },\n      // \"Whitespaces\".\n      PRAGMA,\n      PREPROCESSOR,\n\n      // Literals and names.\n\n      // TODO: characters.\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE,\n      CONSTRUCTOR,\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: '^[_a-z][\\\\w\\']*'\n      }),\n      COMMENT,\n      { // No markup, relevance booster\n        begin: '->|<-'\n      }\n    ]\n  };\n}\n\nmodule.exports = haskell;\n"],"names":["module","exports","hljs","COMMENT","variants","contains","PRAGMA","className","begin","end","PREPROCESSOR","CONSTRUCTOR","relevance","LIST","illegal","inherit","TITLE_MODE","RECORD","name","aliases","keywords","beginKeywords","C_NUMBER_MODE","QUOTE_STRING_MODE"],"sourceRoot":""}