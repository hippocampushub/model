{"version":3,"file":"static/chunks/1604.4b2ccb13246ac9fe.js","mappings":"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","sources":["webpack://_N_E/./src/components/Histogram/histogram.tsx","webpack://_N_E/./src/components/Histogram/histogram.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["import React, {\n  useRef,\n  useEffect,\n  useMemo,\n  useState,\n  useCallback,\n} from \"react\";\nimport Plotly from \"plotly.js-cartesian-dist\";\n\nimport styles from \"./histogram.module.scss\";\n\nexport type HistogramProps = {\n  color: string;\n  title: string;\n  values?: number[];\n  bins?: number[];\n  counts?: number[];\n};\n\ntype AxisLayout = {\n  tickmode: string;\n  nticks: number;\n  range?: [number, number];\n  fixedrange?: boolean;\n  tickformat?: (d: number) => string; // Add this line\n};\n\ntype PlotlyLayout = {\n  margin: { l: number; t: number; r: number; b: number };\n  font: { size: number; family: string };\n  paper_bgcolor: string;\n  plot_bgcolor: string;\n  bargap: number;\n  title: string;\n  xaxis: AxisLayout;\n  yaxis: AxisLayout;\n};\n\nconst plotlyConfig: Partial<Plotly.Config> = {\n  responsive: true,\n  displayModeBar: false,\n  staticPlot: true,\n};\n\n// Custom hook for intersection observer\nconst useIntersectionObserver = (options?: IntersectionObserverInit) => {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const elementRef = useRef<HTMLDivElement | null>(null);\n\n  const callback = useCallback((entries: IntersectionObserverEntry[]) => {\n    const [entry] = entries;\n    setIsIntersecting(entry.isIntersecting);\n  }, []);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(callback, options);\n    if (elementRef.current) observer.observe(elementRef.current);\n\n    return () => {\n      if (elementRef.current) observer.unobserve(elementRef.current);\n    };\n  }, [callback, options]);\n\n  return [elementRef, isIntersecting] as const;\n};\n\nconst getPlotData = (\n  values: number[] | undefined,\n  bins: number[] | undefined,\n  counts: number[] | undefined,\n  color: string\n): Partial<Plotly.PlotData>[] => {\n  if (values) {\n    return [\n      {\n        type: \"histogram\",\n        x: values,\n        nbinsx: 10,\n        marker: {\n          color,\n          opacity: 0.8,\n        },\n      },\n    ];\n  }\n\n  if (bins && counts) {\n    return [\n      {\n        type: \"bar\",\n        x: bins,\n        y: counts,\n        marker: {\n          color,\n          opacity: 0.8,\n        },\n      },\n    ];\n  }\n\n  return [];\n};\n\nconst formatScientificNotation = (value: number): string => {\n  if (Math.abs(value) < 1000 && Number.isInteger(value)) {\n    return value.toString();\n  }\n  if (value === 0) return '0';\n  const exponent = Math.floor(Math.log10(Math.abs(value)));\n  const mantissa = value / Math.pow(10, exponent);\n  const roundedMantissa = Math.round(mantissa * 100) / 100;\n  const superscriptDigits = ['⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹'];\n  const superscriptExponent = Math.abs(exponent)\n    .toString()\n    .split('')\n    .map((digit) => superscriptDigits[parseInt(digit)])\n    .join('');\n  return `${roundedMantissa}×10${exponent < 0 ? '⁻' : ''}${superscriptExponent}`;\n};\n\nconst Histogram: React.FC<HistogramProps> = ({\n  title,\n  color,\n  values,\n  bins,\n  counts,\n}) => {\n  const [ref, isIntersecting] = useIntersectionObserver({\n    rootMargin: \"200px 0px\",\n  });\n\n  const plotlyLayout: PlotlyLayout = useMemo(() => {\n    const baseLayout: PlotlyLayout = {\n      margin: { l: 24, t: 24, r: 16, b: 16 },\n      font: { size: 10, family: \"Titillium Web\" },\n      paper_bgcolor: \"transparent\",\n      plot_bgcolor: \"transparent\",\n      bargap: 0,\n      title,\n      xaxis: {\n        tickmode: \"auto\",\n        nticks: 5,\n        tickformat: formatScientificNotation,\n      },\n      yaxis: {\n        tickmode: \"auto\",\n        nticks: 5,\n        tickformat: formatScientificNotation,\n      },\n    };\n\n    const dataArray = values || bins;\n    if (dataArray && dataArray.length === 1) {\n      const singleValue = dataArray[0];\n      baseLayout.xaxis.range = [singleValue - 1, singleValue + 1];\n      baseLayout.xaxis.fixedrange = true;\n    }\n\n    return baseLayout;\n  }, [title, values, bins]);\n\n  useEffect(() => {\n    if (!isIntersecting || !ref.current) return;\n\n    const chartEl = ref.current;\n    const data = getPlotData(values, bins, counts, color);\n\n    const drawPlot = () => {\n      Plotly.newPlot(chartEl, data, plotlyLayout, plotlyConfig);\n    };\n\n    if (\"requestIdleCallback\" in window) {\n      window.requestIdleCallback(drawPlot);\n    } else {\n      setTimeout(drawPlot, 0);\n    }\n\n    return () => {\n      Plotly.purge(chartEl);\n    };\n  }, [plotlyLayout, values, bins, counts, color, isIntersecting]);\n\n  return <div className={styles.container} ref={ref} />;\n};\n\nexport default Histogram;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"histogram_container__5TzzG\"};"],"names":["plotlyConfig","responsive","displayModeBar","staticPlot","useIntersectionObserver","isIntersecting","setIsIntersecting","useState","elementRef","useRef","callback","useCallback","entry","entries","useEffect","observer","IntersectionObserver","options","current","observe","unobserve","getPlotData","values","bins","counts","color","type","x","nbinsx","marker","opacity","y","formatScientificNotation","Math","abs","value","Number","isInteger","toString","exponent","floor","log10","mantissa","pow","superscriptDigits","superscriptExponent","split","map","parseInt","digit","join","round","concat","__webpack_exports__","title","param","ref","rootMargin","plotlyLayout","useMemo","baseLayout","margin","l","t","r","b","font","size","family","paper_bgcolor","plot_bgcolor","bargap","xaxis","tickmode","nticks","tickformat","yaxis","dataArray","length","singleValue","range","fixedrange","chartEl","data","drawPlot","Plotly","window","requestIdleCallback","setTimeout","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","styles","module","exports"],"sourceRoot":""}