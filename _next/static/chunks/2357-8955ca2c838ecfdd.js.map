{"version":3,"file":"static/chunks/2357-8955ca2c838ecfdd.js","mappings":"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","sources":["webpack://_N_E/./src/components/List/index.tsx","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/views/5_predictions/components/MeanFiringRatePlot.tsx","webpack://_N_E/./src/views/5_predictions/components/TimeSpikePlot.tsx","webpack://_N_E/./src/views/5_predictions/components/Trace.tsx","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\n\nimport { Color } from '../../types';\n\n\nconst classPrefixList = 'list__';\nconst classPrefixListElement = 'list-element__';\n\ntype ListProps = {\n  title?: string;\n  list: string[];\n  value?: string;\n  onSelect?: (s: string) => void;\n  color?: Color;\n  anchor?: string;\n  block?: boolean;\n  className?: string;\n  theme?: number;\n  grow?: boolean\n};\n\nconst List: React.FC<ListProps> = ({\n  title,\n  list,\n  value,\n  onSelect = () => { },\n  color,\n  theme = 1,\n  className = '',\n  block = false,\n  grow\n}) => {\n  const handleSelectedElement = (element: string) => onSelect(element);\n\n  return (\n    <div\n      className={`${classPrefixList}basis  ${grow && 'flex-1 !flex flex-col'} set-accent-color--${color} selected theme-${theme} ${className} ${block ? 'block' : ''}`}\n      role=\"radiogroup\"\n    >\n      {title && <p className={`theme-${theme}`}>{title}</p>}\n      <div className={`elements ${grow && 'flex-grow'}`}>\n        {list.map(element => (\n          <div\n            key={element}\n            role=\"radio\"\n            aria-checked={value === element}\n            tabIndex={0}\n            className={`${classPrefixListElement}basis theme-${theme} ${value === element ? 'selected ' : ''}`}\n            onClick={() => handleSelectedElement(element)}\n            title={element}\n          >\n            {element}\n          </div>\n\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import { Layer, NeuriteType, VolumeSection, AchConcentration, CellGroup, Theme, GraphTheme, ThemeColors } from './types';\nimport NeuronModelLibrary from './views/2_reconstruction-data/NeuronModelLibrary';\nimport AcetylcholineView from './views/4_validations/Acetylcholine';\n\nexport const layers: Layer[] = [\n  'SLM',\n  'SR',\n  'SP',\n  'SO',\n];\n\nexport const theme: Theme = {\n  1: { default: 0x44405B, hover: 0x7D656F, selected: 0xB68983, selectedEdges: 0xEFAE97 },\n  2: { default: 0x44405B, hover: 0x7B5B6A, selected: 0xB37579, selectedEdges: 0xEA9088 },\n  3: { default: 0x44405B, hover: 0x715970, selected: 0x9F7184, selectedEdges: 0xCC8A99 },\n  4: { default: 0x44405B, hover: 0x625D77, selected: 0x807B92, selectedEdges: 0x9E98AE },\n  5: { default: 0x393D5E, hover: 0x595D79, selected: 0x6E7B97, selectedEdges: 0x8398B5 },\n};\n\nexport const graphTheme: GraphTheme = {\n  red: \"#C46785\",\n  blue: \"#3b4165\",\n  green: \"#7FD982\",\n  purple: \"#7F5482\",\n  yellow: \"#f9f871\",\n};\n\nexport const themeColors: ThemeColors = {\n  experimental_data: \"#EFAE97\",\n  reconstruction_data: \"#EA9088\",\n  digital_reconstruction: \"#CC8A99\",\n  validations: \"#9E98AE\",\n  predictions: \"#8398B5\",\n};\n\n\n\nexport const neuriteTypes: NeuriteType[] = [\n  'all',\n  'axon',\n  'apical',\n  'basal',\n  'dendrite',\n  'soma',\n\n];\n\nexport const volumeSections: VolumeSection[] = [\n  'region',\n  'slice',\n  'cylinder',\n];\n\n\nexport const achConcentrations: AchConcentration[] = [\n  '0um',\n  '10um',\n  '100um'\n];\n\nexport const cellGroup: CellGroup[] = [\n  'All',\n  'Excitatory',\n  'Inhibitory',\n  'SLM_PPA',\n  'SO_BP',\n  'SO_BS',\n  'SO_OLM',\n  'SO_Tri',\n  'SP_AA',\n  'SP_BS',\n  'SP_CCKBC',\n  'SP_Ivy',\n  'SP_PC',\n  'SP_PVBC',\n  'SR_SCA'\n]\n\nexport const defaultSelection = {\n  experimentalData: {\n    layerAnatomy: {\n      layer: 'SLM',\n    },\n    neuronMorphology: {\n      layer: 'SLM',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    neuronElectrophysiology: {\n      etype: 'bAC',\n      etype_instance: '95810035',\n    },\n  },\n  reconstructionData: {\n    volume: {\n      volume_section: 'region',\n    },\n    cellComposition: {\n      volume_section: 'region',\n    },\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: 'CA1_int_bAC_011127HP1_20190329115610',\n    },\n  },\n  digitalReconstruction: {\n    region: {\n      volume_section: 'region',\n    },\n    morphologyLibrary: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      morphology: '011127HP1',\n    },\n    schafferCollateral: {\n      volume_section: 'region',\n      prelayer: 'SC',\n      postlayer: 'All'\n    },\n    connectionAnatomy: {\n      volume_section: 'region',\n      prelayer: 'All',\n      postlayer: 'All'\n    },\n    connectionPhysiology: {\n      volume_section: 'region',\n      prelayer: 'all',\n      postlayer: 'all'\n    },\n    acetylcholineEffectsOnCell: {\n      morphology: \"450290\",\n      etype: \"cNAC\",\n      mtype: \"SO_BP\"\n    },\n    acetylcholineEffectsOnSynapses: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory'\n    },\n\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    NeuronModelLibrary: {\n      mtype: 'SO_BP',\n      etype: 'cNAC',\n      morphology: '980120A_-_Scale_x1.000_y0.900_z1.000'\n    },\n    synapticPathways: {\n      volume_section: 'slice',\n      prelayer: 'All',\n      postlayer: 'All',\n    },\n    acetylcholine: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory',\n    },\n  },\n\n};\n\nexport const neuriteColor: Record<NeuriteType, string> = {\n  all: '#1fcf1f',\n  axon: '#1111ff',\n  apical: '#f442ad',\n  basal: '#ff1111',\n  dendrite: '#ff1111',\n  soma: '#000',\n};\n","import React, { useMemo } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { graphTheme } from '@/constants';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\ninterface MeanFiringRatePlotProps {\n    plotData: any;\n    xAxis?: string;\n    yAxis?: string;\n    xAxisTickStep?: number;\n}\n\nconst MeanFiringRatePlot: React.FC<MeanFiringRatePlotProps> = ({ plotData, xAxis, yAxis, xAxisTickStep }) => {\n    const options = useMemo(() => ({\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n            legend: {\n                display: false,\n            },\n            title: {\n                display: false,\n                text: plotData?.name || 'Mean Firing Rate Distribution',\n            },\n            tooltip: {\n                callbacks: {\n                    label: (context) => `Count: ${context.parsed.y}`,\n                    title: (tooltipItems) => {\n                        const value = parseFloat(tooltipItems[0].label);\n                        return `${value.toFixed(6)} ${plotData?.units || 'Hz'}`;\n                    }\n                }\n            },\n        },\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: xAxis || 'Firing Rate (Hz)',\n                },\n                ticks: {\n                    maxRotation: 0,\n                    autoSkip: true,\n                    maxTicksLimit: 10,\n                    callback: (value) => value,\n                    stepSize: xAxisTickStep,\n                },\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: yAxis || 'Count',\n                },\n                beginAtZero: true,\n                ticks: {\n                    maxTicksLimit: 10, // Limit the number of ticks to 5\n                    precision: 0\n                }\n            },\n        },\n    }), [plotData, xAxis, yAxis, xAxisTickStep]);\n\n    const chartData = useMemo(() => {\n        if (!plotData || !Array.isArray(plotData.values)) {\n            return null;\n        }\n\n        const values = plotData.values;\n        const binCount = 10; // You can adjust this for more or fewer bins\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        const binWidth = (max - min) / binCount;\n\n        const bins = Array(binCount).fill(0);\n        values.forEach(value => {\n            const binIndex = Math.min(Math.floor((value - min) / binWidth), binCount - 1);\n            bins[binIndex]++;\n        });\n\n        return {\n            labels: bins.map((_, index) => ((min + (index + 0.5) * binWidth).toFixed(2))),\n            datasets: [{\n                data: bins,\n                backgroundColor: graphTheme.blue,\n                borderColor: graphTheme.blue,\n                borderWidth: 1,\n            }],\n        };\n    }, [plotData]);\n\n    if (!chartData) {\n        return <p className=\"text-center text-gray-500\">No data available.</p>;\n    }\n\n    return (\n        <div style={{ width: '100%', height: '400px' }}>\n            <Bar options={options} data={chartData} />\n        </div>\n    );\n};\n\nexport default React.memo(MeanFiringRatePlot);\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport dynamic from 'next/dynamic';\nimport { Loader2 } from 'lucide-react';\nimport { graphTheme } from '@/constants';\nimport debounce from 'lodash/debounce';\n\nconst Plot = dynamic(() => import('react-plotly.js'), {\n    ssr: false,\n    loading: () => <Loader2 className=\"w-8 h-8 animate-spin\" />,\n}) as any;\n\ninterface PlotData {\n    name: string;\n    description: string;\n    units: string | null;\n    value_map: {\n        t: { [key: string]: number };\n        gid: { [key: string]: number };\n    };\n}\n\ninterface PlotDetailsProps {\n    plotData: PlotData | PlotData[] | null;\n}\n\nconst LargeDatasetScatterPlot: React.FC<PlotDetailsProps> = ({ plotData }) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [chartData, setChartData] = useState<any>(null);\n    const [dataRange, setDataRange] = useState<{ x: [number, number], y: [number, number] }>({ x: [0, 0], y: [0, 0] });\n\n    const formatScientificNotation = (value: number): string => {\n        if (value === 0) return '0';\n        const exponent = Math.floor(Math.log10(Math.abs(value)));\n        const mantissa = value / Math.pow(10, exponent);\n        const roundedMantissa = Math.round(mantissa * 100) / 100;\n        const superscriptDigits = ['⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹'];\n        const superscriptExponent = Math.abs(exponent).toString().split('').map(digit => superscriptDigits[parseInt(digit)]).join('');\n        return `${roundedMantissa}*10${exponent < 0 ? '⁻' : ''}${superscriptExponent}`;\n    };\n\n    const processData = useCallback((data: PlotData) => {\n        if (!data || !data.value_map || !data.value_map.t || !data.value_map.gid) {\n            setChartData(null);\n            setIsLoading(false);\n            return;\n        }\n\n        setIsLoading(true);\n\n        const { t, gid } = data.value_map;\n        const x = Object.values(t);\n        const y = Object.values(gid);\n\n        const maxPoints = 100000;\n        let finalX = x;\n        let finalY = y;\n        if (x.length > maxPoints) {\n            const skipFactor = Math.ceil(x.length / maxPoints);\n            finalX = x.filter((_, index) => index % skipFactor === 0);\n            finalY = y.filter((_, index) => index % skipFactor === 0);\n        }\n\n        setChartData([{\n            x: finalX,\n            y: finalY,\n            type: 'scatter',\n            mode: 'markers',\n            marker: { color: graphTheme.blue, size: 2 },\n        }]);\n\n        setDataRange({\n            x: [Math.min(...finalX), Math.max(...finalX)],\n            y: [Math.min(...finalY), Math.max(...finalY)],\n        });\n\n        setIsLoading(false);\n    }, []);\n\n    const debouncedProcessData = useCallback(debounce(processData, 300), [processData]);\n\n    useEffect(() => {\n        if (Array.isArray(plotData)) {\n            debouncedProcessData(plotData[0]);\n        } else if (plotData) {\n            debouncedProcessData(plotData);\n        } else {\n            setChartData(null);\n            setIsLoading(false);\n        }\n\n        return () => {\n            debouncedProcessData.cancel();\n        };\n    }, [plotData, debouncedProcessData]);\n\n    const generateTicks = useCallback((min: number, max: number, count: number = 6) => {\n        const range = max - min;\n        const step = range / (count - 1);\n        return Array.from({ length: count }, (_, i) => min + i * step);\n    }, []);\n\n    const layout = useMemo(() => {\n        const xTicks = generateTicks(dataRange.x[0], dataRange.x[1]);\n        const yTicks = generateTicks(dataRange.y[0], dataRange.y[1]);\n\n        return {\n            xaxis: {\n                title: 'Time (ms)',\n                color: '#666666',\n                titlefont: { size: 12 },\n                tickfont: { color: '#666666', size: 10 },\n                showgrid: false,\n                tickmode: 'array',\n                tickvals: xTicks,\n                ticktext: xTicks.map(value => Math.round(value).toString()),\n            },\n            yaxis: {\n                title: {\n                    text: 'Neuron Index',\n                    standoff: 20,\n                },\n                color: '#666666',\n                titlefont: { size: 12 },\n                tickfont: { color: '#666666', size: 10 },\n                showgrid: false,\n                tickmode: 'array',\n                tickvals: yTicks,\n                ticktext: yTicks.map(formatScientificNotation),\n            },\n            autosize: true,\n            plot_bgcolor: '#EFF1F8',\n            paper_bgcolor: '#EFF1F8',\n            showlegend: false,\n            margin: { l: 60, r: 10, b: 50, t: 10, pad: 4 }\n        };\n    }, [dataRange, generateTicks, formatScientificNotation]);\n\n    const config = {\n        responsive: true,\n        displayModeBar: true,\n    };\n\n    return (\n        <div style={{ width: '100%', height: '400px', position: 'relative', backgroundColor: '#EFF1F8' }}>\n            {isLoading ? (\n                <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n                    <Loader2 className=\"w-8 h-8 animate-spin\" />\n                </div>\n            ) : !chartData ? (\n                <p className=\"text-center text-gray-500 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">No data available.</p>\n            ) : (\n                <Plot\n                    data={chartData}\n                    layout={layout}\n                    config={config}\n                    style={{ width: '100%', height: '100%' }}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default LargeDatasetScatterPlot;\n","import React, { useEffect, useState } from 'react';\nimport { Loader2 } from 'lucide-react';\nimport dynamic from 'next/dynamic';\nimport { PlotParams } from 'react-plotly.js';\nimport { graphTheme, themeColors } from '@/constants';\n\nconst Plot = dynamic(() => import('react-plotly.js'), { ssr: false }) as React.ComponentType<PlotParams>;\n\ninterface TraceDataProps {\n    plotData?: {\n        name: string;\n        description: string;\n        units: string | null;\n        value_map: { [key: string]: number[] } | number[][];\n    };\n}\n\nconst PlotlyTraceGraph: React.FC<TraceDataProps> = ({ plotData }) => {\n    const [data, setData] = useState<any[]>([]);\n    const [layout, setLayout] = useState<any>({});\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [hasError, setHasError] = useState<boolean>(false);\n    const [hoveredTraceIndex, setHoveredTraceIndex] = useState<number | null>(null);\n    const [allTracesVisible, setAllTracesVisible] = useState<boolean>(true);\n\n    useEffect(() => {\n        if (!plotData || !plotData.value_map || (Array.isArray(plotData.value_map) && plotData.value_map.length === 0) || Object.keys(plotData.value_map).length === 0) {\n            console.log('No plot data available');\n            setIsLoading(false);\n            setHasError(true);\n            return;\n        }\n\n        try {\n            setIsLoading(true);\n            setHasError(false);\n\n            // Prepare data for Plotly\n            let traces;\n            const maxTime = 5000; // Maximum time in milliseconds\n            if (Array.isArray(plotData.value_map)) {\n                traces = plotData.value_map.map((trace, index) => ({\n                    x: Array.from({ length: trace.length }, (_, i) => i * (maxTime / (trace.length - 1))),\n                    y: trace,\n                    type: 'scatter' as const,\n                    mode: 'lines' as const,\n                    name: `Trace ${index + 1}`,\n                    line: {\n                        color: `hsl(${index * 137.5 % 360}, 70%, 50%)`,\n                        width: 1,\n                    },\n                    visible: allTracesVisible ? true : 'legendonly',\n                }));\n            } else {\n                traces = Object.entries(plotData.value_map).map(([key, trace], index) => ({\n                    x: Array.from({ length: trace.length }, (_, i) => i * (maxTime / (trace.length - 1))),\n                    y: trace,\n                    type: 'scatter' as const,\n                    mode: 'lines' as const,\n                    name: key,\n                    line: {\n                        color: `hsl(${index * 137.5 % 360}, 70%, 50%)`,\n                        width: 1,\n                    },\n                    visible: allTracesVisible ? true : 'legendonly',\n                }));\n            }\n\n            setData(traces);\n\n            // Set up the layout\n            setLayout({\n                xaxis: {\n                    title: { text: 'Time(s)', standoff: 20 },\n                    showticklabels: true,\n                    tickmode: 'array',\n                    tickvals: [0, 1000, 2000, 3000, 4000, 5000],\n                    ticktext: ['0 ms', '1', '2', '3', '4', '5'],\n                    range: [0, maxTime],\n                },\n                yaxis: {\n                    title: { text: plotData.units ? `Voltage (${plotData.units})` : 'Voltage', standoff: 40 },\n                    showticklabels: true,\n                },\n                autosize: true,\n                margin: { l: 60, r: 50, b: 100, t: 50, pad: 4 },\n                hovermode: 'x unified' as const,\n                showlegend: true,\n                legend: { orientation: 'h', x: 0, y: 1.2 },\n                plot_bgcolor: '#EFF1F8',\n                paper_bgcolor: '#EFF1F8',\n            });\n\n            setIsLoading(false);\n        } catch (error) {\n            console.error('Error processing plot data:', error);\n            setIsLoading(false);\n            setHasError(true);\n        }\n    }, [plotData, allTracesVisible]);\n\n    const containerStyle = {\n        width: '100%',\n        height: '500px',\n        position: 'relative' as const,\n    };\n\n    const loaderStyle = {\n        position: 'absolute' as const,\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n    };\n\n    const handleLegendHover = (event: any) => {\n        setHoveredTraceIndex(event.curveNumber);\n    };\n\n    const handleLegendUnhover = () => {\n        setHoveredTraceIndex(null);\n    };\n\n    const toggleAllTraces = () => {\n        setAllTracesVisible(!allTracesVisible);\n        const updatedData = data.map(trace => ({\n            ...trace,\n            visible: !allTracesVisible ? true : 'legendonly',\n        }));\n        setData(updatedData);\n    };\n\n    return (\n        <div>\n            <button\n                onClick={toggleAllTraces}\n                style={{\n                    marginBottom: '1rem',\n                    padding: '0.25rem .5rem',\n                    backgroundColor: graphTheme.blue,\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '3px',\n                    cursor: 'pointer'\n                }}\n            >\n                {allTracesVisible ? 'Hide All Traces' : 'Show All Traces'}\n            </button>\n            <div style={containerStyle}>\n                {isLoading ? (\n                    <div style={loaderStyle}>\n                        <Loader2 className=\"w-8 h-8 animate-spin\" />\n                    </div>\n                ) : hasError || !data.length ? (\n                    <p className=\"text-center text-gray-500 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                        No data available.\n                    </p>\n                ) : (\n                    <Plot\n                        data={data}\n                        layout={layout}\n                        useResizeHandler={true}\n                        style={{ width: '100%', height: '100%' }}\n                        config={{ responsive: true }}\n                        onLegendItemClick={() => false}\n                        onLegendItemHover={handleLegendHover}\n                        onLegendItemUnhover={handleLegendUnhover}\n                    />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default PlotlyTraceGraph;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};"],"names":["__webpack_exports__","Z","title","list","value","onSelect","color","theme","className","block","grow","param","handleSelectedElement","element","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","concat","role","jsx","p","map","aria-checked","tabIndex","onClick","centered","children","styles","classNames","layers","default","hover","selected","selectedEdges","graphTheme","red","blue","green","purple","yellow","themeColors","experimental_data","reconstruction_data","digital_reconstruction","validations","predictions","neuriteTypes","volumeSections","achConcentrations","cellGroup","defaultSelection","experimentalData","layerAnatomy","layer","neuronMorphology","mtype","instance","neuronElectrophysiology","etype","etype_instance","reconstructionData","volume","volume_section","cellComposition","neurons","digitalReconstruction","region","morphologyLibrary","morphology","schafferCollateral","prelayer","postlayer","connectionAnatomy","connectionPhysiology","acetylcholineEffectsOnCell","acetylcholineEffectsOnSynapses","ach_concentration","NeuronModelLibrary","synapticPathways","acetylcholine","neuriteColor","all","axon","apical","basal","dendrite","soma","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","React","plotData","xAxis","yAxis","xAxisTickStep","options","useMemo","responsive","maintainAspectRatio","plugins","legend","display","text","name","tooltip","callbacks","label","context","parsed","y","parseFloat","tooltipItems","toFixed","units","scales","x","ticks","maxRotation","autoSkip","maxTicksLimit","callback","stepSize","beginAtZero","precision","chartData","Array","isArray","values","min","Math","binWidth","max","bins","fill","forEach","binIndex","floor","binCount","labels","_","index","datasets","data","backgroundColor","borderColor","borderWidth","style","width","height","Bar","Plot","dynamic","Promise","__webpack_require__","e","then","bind","ssr","loading","Loader2","isLoading","setIsLoading","useState","setChartData","dataRange","setDataRange","formatScientificNotation","exponent","log10","abs","mantissa","pow","superscriptDigits","superscriptExponent","toString","split","digit","parseInt","join","round","processData","useCallback","value_map","t","gid","Object","finalX","finalY","length","skipFactor","ceil","filter","type","mode","marker","size","debouncedProcessData","debounce","useEffect","cancel","generateTicks","count","range","step","from","i","layout","xTicks","yTicks","xaxis","titlefont","tickfont","showgrid","tickmode","tickvals","ticktext","yaxis","standoff","autosize","plot_bgcolor","paper_bgcolor","showlegend","margin","l","r","b","pad","position","top","left","transform","config","displayModeBar","setData","setLayout","hasError","setHasError","hoveredTraceIndex","setHoveredTraceIndex","allTracesVisible","setAllTracesVisible","keys","console","log","traces","trace","maxTime","line","visible","entries","key","showticklabels","hovermode","orientation","error","button","updatedData","marginBottom","padding","border","borderRadius","cursor","useResizeHandler","onLegendItemClick","onLegendItemHover","event","curveNumber","onLegendItemUnhover","module","exports"],"sourceRoot":""}