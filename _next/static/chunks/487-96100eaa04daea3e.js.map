{"version":3,"file":"static/chunks/487-96100eaa04daea3e.js","mappings":"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","sources":["webpack://_N_E/./src/components/Unit/index.tsx","webpack://_N_E/./src/components/Factsheet/index.tsx","webpack://_N_E/./src/components/HttpData/index.tsx","webpack://_N_E/./src/components/LayerSelector3D/index.tsx","webpack://_N_E/./src/components/Histogram/index.tsx","webpack://_N_E/./src/components/MorphDistributionsPlots/index.tsx","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/Term/index.tsx","webpack://_N_E/./src/hoc/with-preselection.tsx","webpack://_N_E/./src/views/1_experimental-data/neuronal-morphology/NeuronFactsheet.tsx","webpack://_N_E/./src/components/Term/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\n\ntype UnitProps = {\n  value?: string;\n}\n\nconst replacement = {\n  MOhm: 'MΩ',\n};\n\nconst Unit: React.FC<UnitProps> = ({ value = '' }) => {\n  return (\n    <>\n      {replacement[value] ?? value}\n    </>\n  );\n};\n\n\nexport default Unit;\n","import React from 'react';\nimport NumberFormat from '../NumberFormat';\nimport isNil from 'lodash/isNil';\n\nimport Unit from '../Unit';\nimport { termFactory } from '@/components/Term';\n\nconst Term = termFactory();\n\nconst classPrefix = 'factsheet__';\n\nexport type FactsheetEntryType = {\n  name: string;\n  description: string;\n  units?: string;\n  unit?: string;\n  value?: number | string;\n  values?: number[];\n  value_map?: {\n    [key: string]: string | number;\n  };\n};\n\ntype FactsheetProps = {\n  facts: FactsheetEntryType[];\n  className?: string;\n};\n\nconst FactsheetSingleValueEntry: React.FC<{\n  fact: FactsheetEntryType;\n}> = ({\n  fact\n}) => {\n    return (\n      <div className=\"row mt-1\">\n        <div className=\"col-xs-6 col-sm-4 name\">\n          <Term term={fact.name} description={fact.description} />\n        </div>\n        <div className=\"col-xs-6 col-sm-8 value\">\n          {isNil(fact.value)\n            ? (<span>-</span>)\n            : (<span>\n              <NumberFormat value={fact.value} /> <Unit value={fact.units || fact.unit} />\n            </span>)\n          }\n        </div>\n      </div>\n    );\n  };\n\nconst FactsheetSingleMeanStdEntry: React.FC<{\n  fact: FactsheetEntryType;\n}> = ({\n  fact,\n}) => {\n    const mean = fact.value_map?.mean ?? (fact.values?.[0] ?? '-');\n    const std = fact.value_map?.std ?? (fact.values?.[1] ?? '-');\n\n    const formatValue = (value: string | number) => {\n      if (typeof value === 'number') {\n        return value.toFixed(3);\n      }\n      return value;\n    };\n\n    const formatNumberWithoutCommas = (value: string | number) => {\n      if (typeof value === 'number') {\n        return value.toString().replace(/,/g, '');\n      }\n      return value;\n    };\n\n    return (\n      <div className=\"row mt-1\">\n        <div className=\"col-xs-4 name\">\n          <Term term={fact.name} description={fact.description} />\n        </div>\n        <div className=\"col-xs-4 value\">\n          {formatNumberWithoutCommas(formatValue(mean))}\n          {std !== '-' ? <> ± {formatNumberWithoutCommas(formatValue(std))}</> : ''}\n          {fact.units || fact.unit && <> {fact.units || fact.unit}</>}\n        </div>\n      </div>\n    );\n  };\n\nconst FactsheetMapValueEntry: React.FC<{\n  fact: FactsheetEntryType\n}> = ({\n  fact,\n}) => {\n    // @ts-ignore\n    const maxVal = Math.max.apply(null, Object.values(fact.value_map).map(s => parseFloat(s as string)));\n    const unitCode = fact.units || fact.unit;\n\n    // @ts-ignore\n    const valueColumn = Object.entries(fact.value_map).map(([label, value]) => {\n      const barMaxFillRatio = 0.8;\n      const barWidthPct = (parseFloat(value as string) / maxVal) * 100 * barMaxFillRatio;\n\n      return (\n        <div key={label} className=\"row mb-1\">\n          <div className=\"col-xs-6 pos-relative\">\n            {label}\n            <div className=\"bar\" style={{ width: `${barWidthPct}%` }} />\n          </div>\n          <div className=\"col-xs-6\">\n            <NumberFormat value={value} /> <Unit value={unitCode} />\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"row mt-1\">\n        <div className=\"col-xs-6 col-lg-4 name\">\n          <Term term={fact.name} description={fact.description} />\n        </div>\n        <div className=\"col-xs-6 col-lg-8\">{valueColumn}</div>\n      </div>\n    );\n  };\n\nconst FactsheetEntry: React.FC<{\n  fact: FactsheetEntryType\n}> = ({\n  fact\n}) => {\n    if (\n      fact.value_map &&\n      !isNil(fact.value_map.mean) &&\n      !isNil(fact.value_map.std)\n    ) {\n      return (<FactsheetSingleMeanStdEntry fact={fact} />);\n    }\n\n    if (Array.isArray(fact.values)) {\n      return (<FactsheetSingleMeanStdEntry fact={fact} />);\n    }\n\n    if (fact.value_map) {\n      return (<FactsheetMapValueEntry fact={fact} />);\n    }\n\n    return (<FactsheetSingleValueEntry fact={fact} />);\n  };\n\nconst Factsheet: React.FC<FactsheetProps> = ({\n  facts,\n  className = '',\n}) => {\n  return (\n    <div className={`${classPrefix}basis ${className}`}>\n      {facts.map((fact, index) => (\n        <FactsheetEntry key={`${fact.name}-${index}`} fact={fact} />\n      ))}\n    </div>\n  );\n};\n\nexport default Factsheet;\n","import React from 'react';\nimport { captureException } from '@sentry/nextjs';\nimport { decodeAsync } from \"@msgpack/msgpack\";\n\ntype HttpDataProps = {\n  path: string;\n  label?: string;\n  children: (\n    data: any,\n    loading: boolean,\n    error: any,\n  ) => React.ReactNode;\n};\n\nconst HttpData: React.FC<HttpDataProps> = ({ path, children, label = '' }) => {\n  const msgpackEncoded = path?.match(/\\.msgpack/);\n\n  const [state, setState] = React.useState<{\n    data: any;\n    loading: boolean;\n    error: any;\n  }>({\n    data: null,\n    loading: true,\n    error: null,\n  });\n\n  React.useEffect(() => {\n    if (!path) return;\n\n    setState({ ...state, loading: true });\n    fetch(path)\n      .then(async res => {\n        // TODO: remove when factesheets don't longer contain NaN values\n        if (res.ok) {\n          if (msgpackEncoded) {\n            if (res.body) {\n              return decodeAsync(res.body);\n            }\n            const err = new Error(`Response body is null for ${path}`);\n            captureException(err);\n            return Promise.reject(err);\n          }\n\n          const resBody = await res.text();\n          return JSON.parse(resBody.replace(/NaN/g, 'null'));\n        }\n\n        const err = new Error(`Can't fetch ${path}`);\n        captureException(err);\n\n        return Promise.reject(err);\n      })\n      .then(data => setState({ ...state, data, error: null, loading: false }))\n      .catch(error => setState({ ...state, error, data: null, loading: false }));\n  }, [path]);\n\n  if (!path) {\n    return null;\n  }\n\n  if (state.error) {\n    return (\n      <p>\n        {path}\n      </p>\n    );\n  }\n\n  return (\n    <>\n      {children(state.data, state.loading, state.error)}\n    </>\n  );\n};\n\nexport default HttpData;","import React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { Layer } from '../../types';\nimport { layers, theme } from '../../constants'; // Import theme\nimport { basePath } from '@/config';\n\ntype LayerSelectProps3D = {\n    value?: Layer;\n    onSelect?: (layer: Layer) => void;\n    theme?: number;\n};\n\nconst LayerSelector3D: React.FC<LayerSelectProps3D> = ({ value, onSelect, theme: themeProp = 1 }) => {\n    const mountRef = useRef<HTMLDivElement | null>(null);\n    const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n    const [trapezoids, setTrapezoids] = useState<THREE.Mesh[]>([]);\n    const [edges, setEdges] = useState<THREE.LineSegments[]>([]);\n    const [texts, setTexts] = useState<THREE.Mesh[]>([]);\n    const [sceneReady, setSceneReady] = useState(false);\n    const [scene, setScene] = useState<THREE.Scene | null>(null);\n    const [camera, setCamera] = useState<THREE.OrthographicCamera | null>(null);\n    const [renderer, setRenderer] = useState<THREE.WebGLRenderer | null>(null);\n\n    const distance = 0;\n    const angle = 10;\n    const initialTopWidth = 1.5;\n    const edgeThickness = 1;\n\n    const trapezoidHeights = {\n        SLM: 0.224 * 1.6,\n        SR: 0.42791 * 1.6,\n        SP: 0.090 * 1.6,\n        SO: 0.258 * 1.6,\n    };\n\n    useEffect(() => {\n        if (!mountRef.current) return;\n\n        const newScene = new THREE.Scene();\n        newScene.background = new THREE.Color(0x313354);\n\n        const aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\n        const frustumSize = 5;\n\n        const newCamera = new THREE.OrthographicCamera(\n            (frustumSize * aspect) / -2,\n            (frustumSize * aspect) / 2,\n            frustumSize / 2,\n            frustumSize / -2,\n            0.1,\n            1000\n        );\n        newCamera.position.set(0, -10, 90);\n        newCamera.lookAt(0, 0, 1);\n        newCamera.zoom = 2.2;\n        newCamera.updateProjectionMatrix();\n\n        const newRenderer = new THREE.WebGLRenderer({ antialias: true });\n        newRenderer.setPixelRatio(window.devicePixelRatio);\n        newRenderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n        mountRef.current.appendChild(newRenderer.domElement);\n\n        setScene(newScene);\n        setCamera(newCamera);\n        setRenderer(newRenderer);\n        setSceneReady(true);\n\n        const handleResize = () => {\n            if (mountRef.current && newRenderer && newCamera) {\n                const width = mountRef.current.clientWidth;\n                const height = mountRef.current.clientHeight;\n\n                newRenderer.setSize(width, height);\n\n                const aspect = width / height;\n                newCamera.left = (-frustumSize * aspect) / 2;\n                newCamera.right = (frustumSize * aspect) / 2;\n                newCamera.top = frustumSize / 2;\n                newCamera.bottom = -frustumSize / 2;\n                newCamera.updateProjectionMatrix();\n            }\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            if (mountRef.current) {\n                mountRef.current.removeChild(newRenderer.domElement);\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!sceneReady || !scene || !camera || !renderer) return;\n\n        const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        const trapezoidArray: THREE.Mesh[] = [];\n        const edgeArray: THREE.LineSegments[] = [];\n        const textArray: THREE.Mesh[] = [];\n        const numTrapezoids = layers.length;\n        let yOffset = 0;\n        let topWidth = initialTopWidth;\n\n        const totalHeight = layers.reduce((acc, layer) => acc + (trapezoidHeights[layer] || 1) + distance, -distance);\n        yOffset = totalHeight / 2;\n\n        const loader = new FontLoader();\n        loader.load(`${basePath}/assets/fonts/Titillium_Web_Light_.json`, (font) => {\n            for (let i = 0; i < numTrapezoids; i++) {\n                const height = trapezoidHeights[layers[i]] || 1;\n                const angleRad = THREE.MathUtils.degToRad(angle);\n                const bottomWidth = topWidth - 2 * height * Math.tan(angleRad);\n\n                const topCurve = new THREE.CatmullRomCurve3([\n                    new THREE.Vector3(-topWidth / 2, height / 2, 0),\n                    new THREE.Vector3(0, height / 2 + 0.02, 0),\n                    new THREE.Vector3(topWidth / 2, height / 2, 0),\n                ]);\n\n                const bottomCurve = new THREE.CatmullRomCurve3([\n                    new THREE.Vector3(-bottomWidth / 2, -height / 2, 0),\n                    new THREE.Vector3(0, -height / 2 + 0.02, 0),\n                    new THREE.Vector3(bottomWidth / 2, -height / 2, 0),\n                ]);\n                const topPoints = topCurve.getPoints(20);\n                const bottomPoints = bottomCurve.getPoints(20);\n\n                const shape = new THREE.Shape();\n                shape.moveTo(topPoints[0].x, topPoints[0].y);\n                topPoints.forEach((point) => shape.lineTo(point.x, point.y));\n                bottomPoints.reverse().forEach((point) => shape.lineTo(point.x, point.y));\n                shape.lineTo(topPoints[0].x, topPoints[0].y);\n\n                const geometry = new THREE.ExtrudeGeometry(shape, { depth: 1, bevelEnabled: false });\n                const trapezoid = new THREE.Mesh(geometry, material.clone());\n                trapezoid.userData.layer = layers[i];\n                trapezoid.userData.index = i;\n\n                trapezoid.position.set(0, yOffset - height / 2, 0.05);\n                scene.add(trapezoid);\n                trapezoidArray.push(trapezoid);\n\n                const edgeGeometry = new THREE.EdgesGeometry(geometry);\n                const edgeMaterial = new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: edgeThickness, linecap: 'round', linejoin: 'round' });\n                const edges = new THREE.LineSegments(edgeGeometry, edgeMaterial);\n                edges.position.set(0, yOffset - height / 2, 0.05);\n                scene.add(edges);\n                edgeArray.push(edges);\n\n                const textGeometry = new TextGeometry(layers[i], {\n                    font: font,\n                    size: 0.06,\n                    height: 0.001,\n                    curveSegments: 24,\n                    bevelEnabled: true,\n                    bevelThickness: 0.005,\n                    bevelSize: 0.002,\n                });\n                textGeometry.computeBoundingBox();\n                const textWidth = textGeometry.boundingBox!.max.x - textGeometry.boundingBox!.min.x;\n\n                const textMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n                const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n\n                textMesh.position.set(-textWidth / 2, yOffset - height + 0.12 / 2, 1.05);\n                scene.add(textMesh);\n                textArray.push(textMesh);\n\n                yOffset -= height + distance;\n                topWidth = bottomWidth;\n            }\n\n            setTrapezoids(trapezoidArray);\n            setEdges(edgeArray);\n            setTexts(textArray);\n        });\n    }, [sceneReady, scene, camera, renderer]);\n\n    useEffect(() => {\n        if (!sceneReady || !scene || !camera || !renderer || trapezoids.length === 0) return;\n\n        const raycaster = new THREE.Raycaster();\n        const mouse = new THREE.Vector2(-10, -10); // Initialize to a point outside the view\n        let hoveredTrapezoid: THREE.Mesh | null = null;\n\n        const updateMousePosition = (event: MouseEvent) => {\n            const rect = renderer.domElement.getBoundingClientRect();\n            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n        };\n\n        const onMouseMove = (event: MouseEvent) => {\n            updateMousePosition(event);\n        };\n\n        const onClick = (event: MouseEvent) => {\n            updateMousePosition(event);\n            raycaster.setFromCamera(mouse, camera);\n            const intersects = raycaster.intersectObjects(trapezoids);\n            if (intersects.length > 0) {\n                const intersectedTrapezoid = intersects[0].object as THREE.Mesh;\n                const selectedLayer = intersectedTrapezoid.userData.layer;\n                if (onSelect && selectedLayer) {\n                    onSelect(selectedLayer);\n                    setHoveredIndex(null); // Clear hover state\n                }\n            }\n        };\n\n        const onHover = () => {\n            raycaster.setFromCamera(mouse, camera);\n            const intersects = raycaster.intersectObjects(trapezoids);\n            if (intersects.length > 0) {\n                document.body.style.cursor = 'pointer';\n                const intersectedTrapezoid = intersects[0].object as THREE.Mesh;\n                const index = intersectedTrapezoid.userData.index;\n                if (hoveredTrapezoid !== intersectedTrapezoid) {\n                    setHoveredIndex(index);\n                    hoveredTrapezoid = intersectedTrapezoid;\n                }\n            } else {\n                document.body.style.cursor = 'default';\n                if (hoveredTrapezoid) {\n                    setHoveredIndex(null);\n                    hoveredTrapezoid = null;\n                }\n            }\n        };\n\n        window.addEventListener('mousemove', onMouseMove);\n        window.addEventListener('click', onClick);\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n            onHover();\n            renderer.render(scene, camera);\n        };\n        animate();\n\n        // Initial hover check\n        raycaster.setFromCamera(mouse, camera);\n        onHover();\n\n        return () => {\n            window.removeEventListener('mousemove', onMouseMove);\n            window.removeEventListener('click', onClick);\n            if (mountRef.current) {\n                mountRef.current.removeChild(renderer.domElement);\n            }\n        };\n    }, [sceneReady, scene, camera, renderer, trapezoids]);\n\n    useEffect(() => {\n        if (!sceneReady || trapezoids.length === 0) return;\n\n        trapezoids.forEach((trapezoid, index) => {\n            const material = trapezoid.material as THREE.MeshBasicMaterial;\n            const edgeMaterial = edges[index].material as THREE.LineBasicMaterial;\n            const textMaterial = texts[index].material as THREE.MeshBasicMaterial;\n\n            const currentTheme = theme[themeProp];\n\n            if (index === hoveredIndex && value !== layers[index]) {\n                material.color.set(currentTheme.hover); // hover\n                edgeMaterial.color.set(currentTheme.selected);\n                textMaterial.color.set(currentTheme.selected); // non-selected\n            } else if (value === layers[index]) {\n                material.color.set(currentTheme.selected); // Selected\n                edgeMaterial.color.set(currentTheme.selectedEdges);\n                textMaterial.color.set(0xffffff); // text same color as edge\n            } else {\n                material.color.set(currentTheme.default); // Default\n                edgeMaterial.color.set(currentTheme.selected);\n                textMaterial.color.set(currentTheme.selected); // non-selected\n            }\n            material.needsUpdate = true;\n            edgeMaterial.needsUpdate = true;\n            textMaterial.needsUpdate = true;\n        });\n    }, [hoveredIndex, value, themeProp, sceneReady, trapezoids, edges, texts]);\n\n    return (\n        <div className='flex align-middle justify-center' style={{ width: '100%', minHeight: '400px' }}>\n            <div ref={mountRef} style={{ width: 'calc(100% - 2px)', minHeight: '400px' }}></div>\n        </div>\n    );\n};\n\nexport default LayerSelector3D;\n","import React from 'react';\nimport dynamic from 'next/dynamic';\n\nimport { HistogramProps } from './histogram';\n\n\nconst HistogramLazy = dynamic(() => import('./histogram'), { ssr: false });\n\nconst Histogram: React.FC<HistogramProps> = (props) => {\n  return (\n    <HistogramLazy {...props} />\n  );\n};\n\n\nexport default Histogram;\n","import React from 'react';\nimport groupBy from 'lodash/groupBy';\nimport sortBy from 'lodash/sortBy';\nimport capitalize from 'lodash/capitalize';\nimport { Row, Col, Collapse } from 'antd';\n\nimport { NeuriteType } from '@/types';\nimport { neuriteTypes, neuriteColor } from '@/constants';\nimport Histogram from '@/components/Histogram';\n\nconst { Panel } = Collapse;\n\nexport type MorphDistributionPlotsProps = {\n  data:\n  | {\n    [key: string]: {\n      values: number[];\n      unit: string;\n      n: number;\n      title: string;\n      neuriteType: NeuriteType;\n    };\n  }\n  | Array<{\n    all_segment_length: {\n      neuriteType: NeuriteType;\n      unit: string;\n      counts: number[];\n      bins: number[];\n      name: string;\n      n: number;\n    };\n  }>;\n  type: 'population' | 'singleMorphology';\n};\n\nconst histogramTitle = (entry) => {\n  const titleSub = entry.name\n    ? entry.name.replace(entry.neuriteType, '')\n    : entry.key.replace(entry.neuriteType, '');\n\n  const cleanedTitle = titleSub\n    .replace(/_/g, ' ')\n    .replace(/  /g, ' ')\n    .replace(/ of$/, '')\n    .replace(/ of $/, '')\n    .trim();\n\n  const unitSub = entry.unit ? `, ${entry.unit}` : '';\n\n  return capitalize(cleanedTitle) + unitSub;\n};\n\nconst MorphDistributionPlots: React.FC<MorphDistributionPlotsProps> = ({ data, type }) => {\n  let plotEntries;\n\n  if (Array.isArray(data)) {\n    // New structure (array format)\n    plotEntries = data.map((entry) => ({\n      ...entry.all_segment_length,\n      key: entry.all_segment_length.name,\n      values: entry.all_segment_length.counts || entry.all_segment_length.bins, // Using counts or bins\n    }));\n  } else {\n    // Old structure (object format)\n    plotEntries = Object.entries(data).map(([key, val]) => ({\n      ...val,\n      key,\n      values: val.values, // In the old format we directly use the values field\n    }));\n  }\n\n  // Sort and group entries by neuriteType\n  const sortedEntries = sortBy(plotEntries, 'key');\n  const groupedEntries = groupBy(sortedEntries, 'neuriteType');\n\n  // Filter out available neurite types based on the provided data\n  const availableNeuriteTypes = neuriteTypes.filter(\n    (neuriteType) => groupedEntries[neuriteType]\n  );\n  const defaultOpenNeuriteTypes = availableNeuriteTypes.filter(\n    (neuriteType) => neuriteType !== 'all'\n  );\n\n  return (\n    <>\n      <Collapse defaultActiveKey={defaultOpenNeuriteTypes}>\n        {availableNeuriteTypes.map((neuriteType) => (\n          <Panel header={<strong>{capitalize(neuriteType)}</strong>} key={neuriteType}>\n            <Row\n              key={neuriteType}\n              className=\"w-100 mt-1 mb-1\"\n              gutter={[16, 24]}\n              justify={type === 'singleMorphology' ? 'space-between' : undefined}\n            >\n              {groupedEntries[neuriteType].map((entry) => (\n                <Col key={entry.key} xs={12} sm={8} lg={6}>\n                  <Histogram\n                    title={histogramTitle(entry)}\n                    values={entry.values}\n                    bins={entry.bins}\n                    counts={entry.counts}\n                    color={neuriteColor[entry.neuriteType]}\n                  />\n                </Col>\n              ))}\n            </Row>\n          </Panel>\n        ))}\n      </Collapse>\n    </>\n  );\n};\n\nexport default MorphDistributionPlots;","import React from 'react';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nexport function formatNumber(value, significantFigures = 5, thousandSeparator = true, prefix = '', suffix = '') {\n  const num = parseFloat(value);\n\n  if (!Number.isFinite(num)) return value;\n\n  const formatted = thousandSeparator\n    ? num.toLocaleString('en', { maximumSignificantDigits: significantFigures })\n    : num.toPrecision(significantFigures);\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  return formatNumber(value, significantFigures, thousandSeparator, prefix, suffix);\n}\n\n\nexport default NumberFormat;\n","import React from 'react';\nimport { Tooltip } from 'antd';\n\nimport { TermDescription } from '@/terms';\n\nimport style from './styles.module.scss';\n\ntype TermProps = {\n  term: string;\n  description?: any;\n  className?: string;\n};\n\ntype TermFormatter = (term: string) => string;\n\nexport const termFactory = (termDescription: TermDescription = {}, termFormatter?: TermFormatter) => {\n  const Term: React.FC<TermProps> = ({ className, term, description }) => {\n    const currentDescription = description || termDescription[term];\n    const formattedTerm = termFormatter\n      ? termFormatter(term)\n      : term;\n\n    if (!currentDescription) {\n      return (<span className={className}>{formattedTerm}</span>);\n    }\n\n    return (\n      <Tooltip title={currentDescription} destroyTooltipOnHide={true}>\n        <span className={`${style.container} ${className ?? ''}`}>{formattedTerm}</span>\n      </Tooltip>\n    );\n  };\n\n  return Term;\n};\n","import React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\ntype PreselectionProps = {\n  key: string,\n  defaultQuery: any,\n};\n\nconst withPreselection = (WrappedComponent, options: PreselectionProps) => {\n\n  const WithPreselectionComponent: React.FC = () => {\n    const router = useRouter();\n\n    useEffect(() => {\n      if (!router.isReady) return;\n\n      if (!router.query[options.key]) {\n        const query = options.defaultQuery;\n        router.replace({ query }, undefined, { shallow: true });\n      }\n    }, [router.query]);\n\n    return (<WrappedComponent />);\n  };\n\n  return WithPreselectionComponent;\n}\n\nexport default withPreselection;\n","// React and Next.js imports\nimport React, { useMemo } from 'react';\nimport groupBy from 'lodash/groupBy';\n\nimport { neuriteTypes } from '../../../constants'\nimport Factsheet from '@/components/Factsheet';\nimport DownloadButton from '@/components/DownloadButton';\nimport { downloadAsJson } from '@/utils';\n\n\n\nexport type InstanceViewerProps = {\n    theme?: number,\n    facts: any,\n    id: any\n};\n\nconst NeuronFactsheet: React.FC<InstanceViewerProps> = ({ theme, facts, id }) => {\n    const factsGrouped = groupBy(facts, fact => neuriteTypes.find(entryType => fact.type === entryType));\n\n    return (\n        <>\n            <h3 className=\"text-xl mb-2 mt-10\">Factsheet</h3>\n            <div id={id}>\n                {neuriteTypes\n                    .filter(entryType => factsGrouped[entryType])\n                    .map(entryType => (\n                        <div key={entryType}>\n                            <h4 className=\"capitalize text-right\">{entryType}</h4>\n                            <Factsheet facts={factsGrouped[entryType]} />\n                        </div>\n                    )\n                    )}\n            </div>\n\n        </>\n\n    );\n}\n\nexport default NeuronFactsheet\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__pHcWR\"};"],"names":["replacement","MOhm","components_Unit","value","param","jsx_runtime","jsx","Fragment","Term","termFactory","FactsheetSingleValueEntry","fact","jsxs","div","className","term","name","description","isNil","span","NumberFormat","Unit","units","unit","FactsheetSingleMeanStdEntry","mean","value_map","values","std","formatValue","toFixed","formatNumberWithoutCommas","toString","replace","FactsheetMapValueEntry","maxVal","Math","max","apply","Object","map","s","parseFloat","unitCode","valueColumn","entries","label","barWidthPct","style","width","concat","FactsheetEntry","Array","isArray","components_Factsheet","facts","index","__webpack_exports__","Z","path","children","msgpackEncoded","match","state","setState","React","data","loading","error","fetch","then","res","ok","body","decodeAsync","err","captureException","Promise","reject","resBody","text","JSON","parse","catch","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","p","onSelect","theme","themeProp","mountRef","useRef","hoveredIndex","setHoveredIndex","useState","trapezoids","setTrapezoids","edges","setEdges","texts","setTexts","sceneReady","setSceneReady","scene","setScene","camera","setCamera","renderer","setRenderer","trapezoidHeights","SLM","SR","SP","SO","useEffect","current","newScene","THREE","background","aspect","clientWidth","clientHeight","newCamera","frustumSize","position","set","lookAt","zoom","updateProjectionMatrix","newRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","appendChild","domElement","handleResize","height","left","right","top","bottom","addEventListener","removeEventListener","removeChild","material","color","trapezoidArray","edgeArray","textArray","numTrapezoids","layers","length","yOffset","topWidth","totalHeight","reduce","acc","layer","loader","FontLoader","load","basePath","i","angleRad","degToRad","bottomWidth","tan","topCurve","bottomCurve","topPoints","getPoints","bottomPoints","shape","moveTo","x","y","forEach","lineTo","point","reverse","geometry","depth","bevelEnabled","trapezoid","clone","userData","add","push","edgeGeometry","edgeMaterial","linewidth","linecap","linejoin","textGeometry","TextGeometry","font","size","curveSegments","bevelThickness","bevelSize","computeBoundingBox","textWidth","boundingBox","min","textMaterial","textMesh","raycaster","mouse","hoveredTrapezoid","updateMousePosition","rect","getBoundingClientRect","event","clientX","clientY","onMouseMove","onClick","setFromCamera","intersects","intersectObjects","intersectedTrapezoid","object","selectedLayer","onHover","document","cursor","animate","requestAnimationFrame","render","currentTheme","hover","selected","selectedEdges","default","needsUpdate","minHeight","ref","HistogramLazy","dynamic","all","__webpack_require__","e","bind","ssr","components_Histogram","props","Panel","Collapse","histogramTitle","titleSub","entry","neuriteType","key","cleanedTitle","trim","unitSub","capitalize","MorphDistributionsPlots","plotEntries","type","all_segment_length","counts","bins","val","sortedEntries","sortBy","groupedEntries","groupBy","availableNeuriteTypes","neuriteTypes","filter","defaultOpenNeuriteTypes","defaultActiveKey","header","strong","Row","gutter","justify","undefined","Col","xs","sm","lg","Histogram","title","neuriteColor","significantFigures","thousandSeparator","prefix","suffix","formatNumber","num","Number","isFinite","formatted","toLocaleString","maximumSignificantDigits","toPrecision","termDescription","termFormatter","currentDescription","formattedTerm","Tooltip","destroyTooltipOnHide","WrappedComponent","options","router","useRouter","isReady","query","defaultQuery","shallow","id","factsGrouped","find","entryType","h3","h4","Factsheet","module","exports"],"sourceRoot":""}