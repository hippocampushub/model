{"version":3,"file":"static/chunks/7577-fd6f85878a76a9d9.js","mappings":"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","sources":["webpack://_N_E/./src/components/List/index.tsx","webpack://_N_E/./src/components/ScatterPlotSelector/index.tsx","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/views/5_predictions/components/MeanFiringRatePlot.tsx","webpack://_N_E/./src/views/5_predictions/components/Trace.tsx","webpack://_N_E/./src/components/ScatterPlotSelector/ScatterPlotSelector.module.scss","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\n\nimport { Color } from '../../types';\n\n\nconst classPrefixList = 'list__';\nconst classPrefixListElement = 'list-element__';\n\ntype ListProps = {\n  title?: string;\n  list: string[];\n  value?: string;\n  onSelect?: (s: string) => void;\n  color?: Color;\n  anchor?: string;\n  block?: boolean;\n  className?: string;\n  theme?: number;\n  grow?: boolean\n};\n\nconst List: React.FC<ListProps> = ({\n  title,\n  list,\n  value,\n  onSelect = () => { },\n  color,\n  theme = 1,\n  className = '',\n  block = false,\n  grow\n}) => {\n  const handleSelectedElement = (element: string) => onSelect(element);\n\n  return (\n    <div\n      className={`${classPrefixList}basis  ${grow && 'flex-1 !flex flex-col'} set-accent-color--${color} selected theme-${theme} ${className} ${block ? 'block' : ''}`}\n      role=\"radiogroup\"\n    >\n      {title && <p className={`theme-${theme}`}>{title}</p>}\n      <div className={`elements ${grow && 'flex-grow'}`}>\n        {list.map(element => (\n          <div\n            key={element}\n            role=\"radio\"\n            aria-checked={value === element}\n            tabIndex={0}\n            className={`${classPrefixListElement}basis theme-${theme} ${value === element ? 'selected ' : ''}`}\n            onClick={() => handleSelectedElement(element)}\n            title={element}\n          >\n            {element}\n          </div>\n\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","import React, { useState, useEffect, useMemo, useCallback, useRef } from \"react\";\nimport { themeColors } from \"@/constants\";\nimport { dataPath } from \"@/config\";\nimport styles from './ScatterPlotSelector.module.scss';\nimport { Loader2 } from 'lucide-react';\n\ntype ScatterPlotSelectorProps = {\n    path: string;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    xRange: number[];\n    yRange: number[];\n    theme: number;\n    onSelect: (x: number, y: number) => void;\n    selectedX?: number;\n    selectedY?: number;\n};\n\nconst ScatterPlotSelector: React.FC<ScatterPlotSelectorProps> = ({\n    path,\n    xAxisLabel,\n    yAxisLabel,\n    xRange,\n    yRange,\n    theme,\n    onSelect,\n    selectedX,\n    selectedY\n}) => {\n    const [xAxis, setXAxis] = useState<number>(selectedX || xRange[0]);\n    const [yAxis, setYAxis] = useState<number>(selectedY || yRange[0]);\n    const [svgExists, setSvgExists] = useState<boolean | null>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const timerRef = useRef<NodeJS.Timeout | null>(null);\n    const abortControllerRef = useRef<AbortController | null>(null);\n\n    const getThemeColor = useCallback((theme: number): string => {\n        const colorKeys = Object.keys(themeColors) as (keyof typeof themeColors)[];\n        return themeColors[colorKeys[theme - 1]] || themeColors.experimental_data;\n    }, []);\n\n    useEffect(() => {\n        if (selectedX !== undefined && selectedX !== xAxis) {\n            setXAxis(selectedX);\n        }\n        if (selectedY !== undefined && selectedY !== yAxis) {\n            setYAxis(selectedY);\n        }\n    }, [selectedX, selectedY]);\n\n    useEffect(() => {\n        const checkSvgExists = async () => {\n            if (abortControllerRef.current) {\n                abortControllerRef.current.abort();\n            }\n            abortControllerRef.current = new AbortController();\n\n            setIsLoading(true);\n            setSvgExists(null);\n            const svgUrl = `${dataPath}/${path}${xAxis}-${yAxis}/spike-time-all.svg`;\n            try {\n                const response = await fetch(svgUrl, {\n                    method: 'HEAD',\n                    signal: abortControllerRef.current.signal\n                });\n                setSvgExists(response.ok);\n            } catch (error) {\n                if (error.name !== 'AbortError') {\n                    setSvgExists(false);\n                }\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        if (timerRef.current) {\n            clearTimeout(timerRef.current);\n        }\n\n        timerRef.current = setTimeout(checkSvgExists, 300); // Debounce for 300ms\n\n        return () => {\n            if (timerRef.current) {\n                clearTimeout(timerRef.current);\n            }\n            if (abortControllerRef.current) {\n                abortControllerRef.current.abort();\n            }\n        };\n    }, [dataPath, path, xAxis, yAxis]);\n\n    const handleAxisChange = useCallback((axis: 'x' | 'y', value: number) => {\n        const range = axis === 'x' ? xRange : yRange;\n        const closestValue = range.reduce((prev, curr) =>\n            Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev\n        );\n        if (axis === 'x') {\n            setXAxis(closestValue);\n            onSelect(closestValue, yAxis);\n        } else {\n            setYAxis(closestValue);\n            onSelect(xAxis, closestValue);\n        }\n    }, [xRange, yRange, onSelect, xAxis, yAxis]);\n\n    const themeColor = useMemo(() => getThemeColor(theme), [getThemeColor, theme]);\n\n    return (\n        <div className={styles.container} style={{ '--current-theme-color': themeColor } as React.CSSProperties}>\n            <div className={styles.chartContainer} style={{ position: 'relative', height: '250px' }}>\n                {isLoading ? (\n                    <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n                        <Loader2 className=\"w-8 h-8 animate-spin\" style={{ color: themeColor }} />\n                    </div>\n                ) : svgExists === false ? (\n                    <p style={{ color: themeColor }} className=\"text-center absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                        Data not available.\n                    </p>\n                ) : svgExists === true ? (\n                    <img\n                        src={`${dataPath}/${path}${xAxis}-${yAxis}/spike-time-all.svg`}\n                        alt=\"Spike Time Data\"\n                        onError={() => setSvgExists(false)}\n                    />\n                ) : null}\n            </div>\n            <div className={styles.sliderContainer}>\n                <div className={styles.sliderWrapper}>\n                    <label htmlFor=\"xAxisSlider\" className={styles.sliderLabel} style={{ color: themeColor }}>\n                        {xAxisLabel}: <span className={styles.sliderValue}>{xAxis.toFixed(1)}</span>\n                    </label>\n                    <input\n                        id=\"xAxisSlider\"\n                        type=\"range\"\n                        min={0}\n                        max={xRange.length - 1}\n                        step={1}\n                        value={xRange.indexOf(xAxis)}\n                        onChange={(e) => handleAxisChange('x', xRange[parseInt(e.target.value)])}\n                        className={styles.slider}\n                        style={{ '--slider-color': themeColor } as React.CSSProperties}\n                    />\n                </div>\n                <div className={styles.sliderWrapper}>\n                    <label htmlFor=\"yAxisSlider\" className={styles.sliderLabel} style={{ color: themeColor }}>\n                        {yAxisLabel}: <span className={styles.sliderValue}>{yAxis}</span>\n                    </label>\n                    <input\n                        id=\"yAxisSlider\"\n                        type=\"range\"\n                        min={0}\n                        max={yRange.length - 1}\n                        step={1}\n                        value={yRange.indexOf(yAxis)}\n                        onChange={(e) => handleAxisChange('y', yRange[parseInt(e.target.value)])}\n                        className={styles.slider}\n                        style={{ '--slider-color': themeColor } as React.CSSProperties}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ScatterPlotSelector;","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import { Layer, NeuriteType, VolumeSection, AchConcentration, CellGroup, Theme, GraphTheme, ThemeColors } from './types';\nimport NeuronModelLibrary from './views/2_reconstruction-data/NeuronModelLibrary';\nimport AcetylcholineView from './views/4_validations/Acetylcholine';\n\nexport const layers: Layer[] = [\n  'SLM',\n  'SR',\n  'SP',\n  'SO',\n];\n\nexport const theme: Theme = {\n  1: { default: 0x44405B, hover: 0x7D656F, selected: 0xB68983, selectedEdges: 0xEFAE97 },\n  2: { default: 0x44405B, hover: 0x7B5B6A, selected: 0xB37579, selectedEdges: 0xEA9088 },\n  3: { default: 0x44405B, hover: 0x715970, selected: 0x9F7184, selectedEdges: 0xCC8A99 },\n  4: { default: 0x44405B, hover: 0x625D77, selected: 0x807B92, selectedEdges: 0x9E98AE },\n  5: { default: 0x393D5E, hover: 0x595D79, selected: 0x6E7B97, selectedEdges: 0x8398B5 },\n};\n\nexport const graphTheme: GraphTheme = {\n  red: \"#C46785\",\n  blue: \"#3b4165\",\n  green: \"#7FD982\",\n  purple: \"#7F5482\",\n  yellow: \"#f9f871\",\n};\n\nexport const themeColors: ThemeColors = {\n  experimental_data: \"#EFAE97\",\n  reconstruction_data: \"#EA9088\",\n  digital_reconstruction: \"#CC8A99\",\n  validations: \"#9E98AE\",\n  predictions: \"#8398B5\",\n};\n\n\n\nexport const neuriteTypes: NeuriteType[] = [\n  'all',\n  'axon',\n  'apical',\n  'basal',\n  'dendrite',\n  'soma',\n\n];\n\nexport const volumeSections: VolumeSection[] = [\n  'region',\n  'slice',\n  'cylinder',\n];\n\n\nexport const achConcentrations: AchConcentration[] = [\n  '0um',\n  '10um',\n  '100um'\n];\n\nexport const cellGroup: CellGroup[] = [\n  'All',\n  'Excitatory',\n  'Inhibitory',\n  'SLM_PPA',\n  'SO_BP',\n  'SO_BS',\n  'SO_OLM',\n  'SO_Tri',\n  'SP_AA',\n  'SP_BS',\n  'SP_CCKBC',\n  'SP_Ivy',\n  'SP_PC',\n  'SP_PVBC',\n  'SR_SCA'\n]\n\nexport const defaultSelection = {\n  experimentalData: {\n    layerAnatomy: {\n      layer: 'SLM',\n    },\n    neuronMorphology: {\n      layer: 'SLM',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    neuronElectrophysiology: {\n      etype: 'bAC',\n      etype_instance: '95810035',\n    },\n  },\n  reconstructionData: {\n    volume: {\n      volume_section: 'region',\n    },\n    cellComposition: {\n      volume_section: 'region',\n    },\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: 'CA1_int_bAC_011127HP1_20190329115610',\n    },\n  },\n  digitalReconstruction: {\n    region: {\n      volume_section: 'region',\n    },\n    morphologyLibrary: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      morphology: '011127HP1',\n    },\n    schafferCollateral: {\n      volume_section: 'region',\n      prelayer: 'SC',\n      postlayer: 'All'\n    },\n    connectionAnatomy: {\n      volume_section: 'region',\n      prelayer: 'All',\n      postlayer: 'All'\n    },\n    connectionPhysiology: {\n      volume_section: 'region',\n      prelayer: 'all',\n      postlayer: 'all'\n    },\n    acetylcholineEffectsOnCell: {\n      morphology: \"450290\",\n      etype: \"cNAC\",\n      mtype: \"SO_BP\"\n    },\n    acetylcholineEffectsOnSynapses: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory'\n    },\n\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    NeuronModelLibrary: {\n      mtype: 'SO_BP',\n      etype: 'cNAC',\n      morphology: '980120A_-_Scale_x1.000_y0.900_z1.000'\n    },\n    synapticPathways: {\n      volume_section: 'slice',\n      prelayer: 'All',\n      postlayer: 'All',\n    },\n    acetylcholine: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory',\n    },\n  },\n\n};\n\nexport const neuriteColor: Record<NeuriteType, string> = {\n  all: '#1fcf1f',\n  axon: '#1111ff',\n  apical: '#f442ad',\n  basal: '#ff1111',\n  dendrite: '#ff1111',\n  soma: '#000',\n};\n","import React, { useMemo } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { graphTheme } from '@/constants';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\ninterface MeanFiringRatePlotProps {\n    plotData: any;\n    xAxis?: string;\n    yAxis?: string;\n    xAxisTickStep?: number;\n}\n\nconst MeanFiringRatePlot: React.FC<MeanFiringRatePlotProps> = ({ plotData, xAxis, yAxis, xAxisTickStep }) => {\n    const options = useMemo(() => ({\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n            legend: {\n                display: false,\n            },\n            title: {\n                display: false,\n                text: plotData?.name || 'Mean Firing Rate Distribution',\n            },\n            tooltip: {\n                callbacks: {\n                    label: (context) => `Count: ${context.parsed.y}`,\n                    title: (tooltipItems) => {\n                        const value = parseFloat(tooltipItems[0].label);\n                        return `${value.toFixed(6)} ${plotData?.units || 'Hz'}`;\n                    }\n                }\n            },\n        },\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: xAxis || 'Firing Rate (Hz)',\n                },\n                ticks: {\n                    maxRotation: 0,\n                    autoSkip: true,\n                    maxTicksLimit: 10,\n                    callback: (value) => value,\n                    stepSize: xAxisTickStep,\n                },\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: yAxis || 'Count',\n                },\n                beginAtZero: true,\n                ticks: {\n                    maxTicksLimit: 10, // Limit the number of ticks to 5\n                    precision: 0\n                }\n            },\n        },\n    }), [plotData, xAxis, yAxis, xAxisTickStep]);\n\n    const chartData = useMemo(() => {\n        if (!plotData || !Array.isArray(plotData.values)) {\n            return null;\n        }\n\n        const values = plotData.values;\n        const binCount = 10; // You can adjust this for more or fewer bins\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        const binWidth = (max - min) / binCount;\n\n        const bins = Array(binCount).fill(0);\n        values.forEach(value => {\n            const binIndex = Math.min(Math.floor((value - min) / binWidth), binCount - 1);\n            bins[binIndex]++;\n        });\n\n        return {\n            labels: bins.map((_, index) => ((min + (index + 0.5) * binWidth).toFixed(2))),\n            datasets: [{\n                data: bins,\n                backgroundColor: graphTheme.blue,\n                borderColor: graphTheme.blue,\n                borderWidth: 1,\n            }],\n        };\n    }, [plotData]);\n\n    if (!chartData) {\n        return <p className=\"text-center text-gray-500\">No data available.</p>;\n    }\n\n    return (\n        <div style={{ width: '100%', height: '400px' }}>\n            <Bar options={options} data={chartData} />\n        </div>\n    );\n};\n\nexport default React.memo(MeanFiringRatePlot);\n","import React, { useEffect, useState } from 'react';\nimport { Loader2 } from 'lucide-react';\nimport dynamic from 'next/dynamic';\nimport { PlotParams } from 'react-plotly.js';\nimport { graphTheme, themeColors } from '@/constants';\n\nconst Plot = dynamic(() => import('react-plotly.js'), { ssr: false }) as React.ComponentType<PlotParams>;\n\ninterface TraceDataProps {\n    plotData?: {\n        name: string;\n        description: string;\n        units: string | null;\n        value_map: { [key: string]: number[] } | number[][];\n    };\n}\n\nconst PlotlyTraceGraph: React.FC<TraceDataProps> = ({ plotData }) => {\n    const [data, setData] = useState<any[]>([]);\n    const [layout, setLayout] = useState<any>({});\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [hasError, setHasError] = useState<boolean>(false);\n    const [hoveredTraceIndex, setHoveredTraceIndex] = useState<number | null>(null);\n    const [allTracesVisible, setAllTracesVisible] = useState<boolean>(true);\n\n    useEffect(() => {\n        if (!plotData || !plotData.value_map || (Array.isArray(plotData.value_map) && plotData.value_map.length === 0) || Object.keys(plotData.value_map).length === 0) {\n            console.log('No plot data available');\n            setIsLoading(false);\n            setHasError(true);\n            return;\n        }\n\n        try {\n            setIsLoading(true);\n            setHasError(false);\n\n            // Prepare data for Plotly\n            let traces;\n            const maxTime = 5000; // Maximum time in milliseconds\n            if (Array.isArray(plotData.value_map)) {\n                traces = plotData.value_map.map((trace, index) => ({\n                    x: Array.from({ length: trace.length }, (_, i) => i * (maxTime / (trace.length - 1))),\n                    y: trace,\n                    type: 'scatter' as const,\n                    mode: 'lines' as const,\n                    name: `Trace ${index + 1}`,\n                    line: {\n                        color: `hsl(${index * 137.5 % 360}, 70%, 50%)`,\n                        width: 1,\n                    },\n                    visible: allTracesVisible ? true : 'legendonly',\n                }));\n            } else {\n                traces = Object.entries(plotData.value_map).map(([key, trace], index) => ({\n                    x: Array.from({ length: trace.length }, (_, i) => i * (maxTime / (trace.length - 1))),\n                    y: trace,\n                    type: 'scatter' as const,\n                    mode: 'lines' as const,\n                    name: key,\n                    line: {\n                        color: `hsl(${index * 137.5 % 360}, 70%, 50%)`,\n                        width: 1,\n                    },\n                    visible: allTracesVisible ? true : 'legendonly',\n                }));\n            }\n\n            setData(traces);\n\n            // Set up the layout\n            setLayout({\n                xaxis: {\n                    title: { text: 'Time(s)', standoff: 20 },\n                    showticklabels: true,\n                    tickmode: 'array',\n                    tickvals: [0, 1000, 2000, 3000, 4000, 5000],\n                    ticktext: ['0 ms', '1', '2', '3', '4', '5'],\n                    range: [0, maxTime],\n                },\n                yaxis: {\n                    title: { text: plotData.units ? `Voltage (${plotData.units})` : 'Voltage', standoff: 40 },\n                    showticklabels: true,\n                },\n                autosize: true,\n                margin: { l: 60, r: 50, b: 100, t: 50, pad: 4 },\n                hovermode: 'x unified' as const,\n                showlegend: true,\n                legend: { orientation: 'h', x: 0, y: 1.2 },\n                plot_bgcolor: '#EFF1F8',\n                paper_bgcolor: '#EFF1F8',\n            });\n\n            setIsLoading(false);\n        } catch (error) {\n            console.error('Error processing plot data:', error);\n            setIsLoading(false);\n            setHasError(true);\n        }\n    }, [plotData, allTracesVisible]);\n\n    const containerStyle = {\n        width: '100%',\n        height: '500px',\n        position: 'relative' as const,\n    };\n\n    const loaderStyle = {\n        position: 'absolute' as const,\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n    };\n\n    const handleLegendHover = (event: any) => {\n        setHoveredTraceIndex(event.curveNumber);\n    };\n\n    const handleLegendUnhover = () => {\n        setHoveredTraceIndex(null);\n    };\n\n    const toggleAllTraces = () => {\n        setAllTracesVisible(!allTracesVisible);\n        const updatedData = data.map(trace => ({\n            ...trace,\n            visible: !allTracesVisible ? true : 'legendonly',\n        }));\n        setData(updatedData);\n    };\n\n    return (\n        <div>\n            <button\n                onClick={toggleAllTraces}\n                style={{\n                    marginBottom: '1rem',\n                    padding: '0.25rem .5rem',\n                    backgroundColor: graphTheme.blue,\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '3px',\n                    cursor: 'pointer'\n                }}\n            >\n                {allTracesVisible ? 'Hide All Traces' : 'Show All Traces'}\n            </button>\n            <div style={containerStyle}>\n                {isLoading ? (\n                    <div style={loaderStyle}>\n                        <Loader2 className=\"w-8 h-8 animate-spin\" />\n                    </div>\n                ) : hasError || !data.length ? (\n                    <p className=\"text-center text-gray-500 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                        No data available.\n                    </p>\n                ) : (\n                    <Plot\n                        data={data}\n                        layout={layout}\n                        useResizeHandler={true}\n                        style={{ width: '100%', height: '100%' }}\n                        config={{ responsive: true }}\n                        onLegendItemClick={() => false}\n                        onLegendItemHover={handleLegendHover}\n                        onLegendItemUnhover={handleLegendUnhover}\n                    />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default PlotlyTraceGraph;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ScatterPlotSelector_container__KEr_k\",\"chartContainer\":\"ScatterPlotSelector_chartContainer__DWFji\",\"sliderContainer\":\"ScatterPlotSelector_sliderContainer__wkVNH\",\"sliderWrapper\":\"ScatterPlotSelector_sliderWrapper__UVPqW\",\"sliderLabel\":\"ScatterPlotSelector_sliderLabel__vcVBM\",\"sliderValue\":\"ScatterPlotSelector_sliderValue__P16oL\",\"slider\":\"ScatterPlotSelector_slider__hfs9z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};"],"names":["__webpack_exports__","Z","title","list","value","onSelect","color","theme","className","block","grow","param","handleSelectedElement","element","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","concat","role","jsx","p","map","aria-checked","tabIndex","onClick","path","xAxisLabel","yAxisLabel","xRange","yRange","selectedX","selectedY","xAxis","setXAxis","useState","yAxis","setYAxis","svgExists","setSvgExists","isLoading","setIsLoading","timerRef","useRef","abortControllerRef","getThemeColor","useCallback","colorKeys","Object","keys","themeColors","experimental_data","useEffect","undefined","checkSvgExists","current","abort","AbortController","svgUrl","dataPath","response","fetch","method","signal","ok","error","name","clearTimeout","setTimeout","handleAxisChange","axis","range","closestValue","reduce","prev","curr","Math","abs","themeColor","useMemo","styles","style","position","height","top","left","transform","Loader2","img","src","alt","onError","label","htmlFor","span","toFixed","input","id","type","min","max","length","step","indexOf","onChange","parseInt","e","target","centered","children","classNames","layers","default","hover","selected","selectedEdges","graphTheme","red","blue","green","purple","yellow","reconstruction_data","digital_reconstruction","validations","predictions","neuriteTypes","volumeSections","achConcentrations","cellGroup","defaultSelection","experimentalData","layerAnatomy","layer","neuronMorphology","mtype","instance","neuronElectrophysiology","etype","etype_instance","reconstructionData","volume","volume_section","cellComposition","neurons","digitalReconstruction","region","morphologyLibrary","morphology","schafferCollateral","prelayer","postlayer","connectionAnatomy","connectionPhysiology","acetylcholineEffectsOnCell","acetylcholineEffectsOnSynapses","ach_concentration","NeuronModelLibrary","synapticPathways","acetylcholine","neuriteColor","all","axon","apical","basal","dendrite","soma","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","React","plotData","xAxisTickStep","options","responsive","maintainAspectRatio","plugins","legend","display","text","tooltip","callbacks","context","parsed","y","parseFloat","tooltipItems","units","scales","x","ticks","maxRotation","autoSkip","maxTicksLimit","callback","stepSize","beginAtZero","precision","chartData","Array","isArray","values","binWidth","bins","fill","forEach","binIndex","floor","binCount","labels","_","index","datasets","data","backgroundColor","borderColor","borderWidth","width","Bar","Plot","dynamic","Promise","__webpack_require__","then","bind","ssr","setData","layout","setLayout","hasError","setHasError","hoveredTraceIndex","setHoveredTraceIndex","allTracesVisible","setAllTracesVisible","value_map","console","log","traces","trace","from","i","maxTime","mode","line","visible","entries","key","xaxis","standoff","showticklabels","tickmode","tickvals","ticktext","yaxis","autosize","margin","l","r","b","t","pad","hovermode","showlegend","orientation","plot_bgcolor","paper_bgcolor","button","updatedData","marginBottom","padding","border","borderRadius","cursor","useResizeHandler","config","onLegendItemClick","onLegendItemHover","event","curveNumber","onLegendItemUnhover","module","exports"],"sourceRoot":""}