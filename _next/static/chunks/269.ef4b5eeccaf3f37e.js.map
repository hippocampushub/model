{"version":3,"file":"static/chunks/269.ef4b5eeccaf3f37e.js","mappings":"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","sources":["webpack://_N_E/./src/components/NeuronMorphology/withFixedFocusOnMorphology.ts","webpack://_N_E/./src/components/NeuronMorphology/libs/dom.ts","webpack://_N_E/./src/components/NeuronMorphology/libs/text.ts","webpack://_N_E/./src/components/NeuronMorphology/libs/OrientationViewer.ts","webpack://_N_E/./src/components/NeuronMorphology/libs/ScaleViewer.ts","webpack://_N_E/./src/components/NeuronMorphology/MorphoLegend.tsx","webpack://_N_E/./src/components/NeuronMorphology/MorphologyViewer.tsx","webpack://_N_E/./src/components/NeuronMorphology/MorphoWrapper.tsx","webpack://_N_E/./src/components/NeuronMorphology/MorphoViewerContainer.tsx"],"sourcesContent":["// @ts-nocheck\nimport * as THREE from 'three';\nimport { Object3D } from 'three';\n\nconst CAMERA_DISTANCE_OFFSET = 1;\n\n// This is a temporary fix\n// THIS CODE IS MEANT TO BE REMOVED\n// that addresses focus problems in the morphoviewer library\n// this higher order function patches a morphoviewer instance\n// with a working focus funciton.\n// https://discourse.threejs.org/t/camera-zoom-to-fit-object/936/24\nconst withFixedFocusOnMorphology = morphoViewer => {\n  morphoViewer._threeContext.getMorphoFromCollection = function(name = null) {\n    let morphoName = name;\n    // if no name of morphology is provided, we take the first one\n    if (!morphoName) {\n      const allNames = Object.keys(this._morphologyMeshCollection);\n      if (allNames.length) {\n        morphoName = allNames[0];\n      } else {\n        return;\n      }\n    }\n    const morphoMesh = this._morphologyMeshCollection[morphoName];\n    return morphoMesh;\n  };\n\n  morphoViewer.isInterneuron = function(): boolean {\n    // Interneurons do not have an apical dendrite, the pinkish colored dendrites\n    const morphoMesh = this._threeContext.getMorphoFromCollection();\n    return !morphoMesh.children.find(\n      child => child?.userData?.typename === 'apical_dendrite'\n    );\n  };\n\n  morphoViewer._threeContext.getSomaChildren = function(): Object3D[] {\n    const morphoMesh = this.getMorphoFromCollection();\n    return (morphoMesh.children as Object3D[]).filter(\n      object => object.userData.typename === 'soma'\n    );\n  };\n\n  morphoViewer._threeContext.getOrphanedSomaChildren = function(): Object3D {\n    // it looks like the orphaned soma construction doesn't have a name\n    // we can use that to reliably get the orphaned soma\n    const morphoMesh = this.getMorphoFromCollection();\n    return (morphoMesh.children as Object3D[]).filter(\n      object => object.name === ''\n    )[0];\n  };\n\n  morphoViewer._threeContext.removeOrphanedSomaChildren = function(): Object3D {\n    // it looks like the orphaned soma construction doesn't have a name\n    // we can use that to reliably get the orphaned soma\n    const morphoMesh = this.getMorphoFromCollection();\n    const orphanedSoma = this.getOrphanedSomaChildren();\n    morphoMesh.remove(orphanedSoma);\n  };\n\n  morphoViewer._threeContext.getTargetPointFromSoma = function(): THREE.Vecor3 {\n    const morphoMesh = this.getMorphoFromCollection();\n    // Get the coordinates for the center of the soma\n    // This will be the point we want the camera to focus on!\n\n    // NOTE: this function falls back to bounding box center even if soma is generated\n    // via orphaned sections\n    let targetPoint = morphoMesh.getTargetPoint();\n\n    // Does the soma exist or was it automatically generated?\n    const somaCenterTargetExists = !!morphoMesh._pointToTarget;\n\n    // If soma was generated using orphaned sections\n    // then we need to get the soma mesh and use the coordintates from that\n    if (!somaCenterTargetExists) {\n      // in the case where the soma was automatically generated\n      // by guessing the shape from the orphaned sections\n      // the soma will be added to the Morphology Object3D last\n      const soma = morphoMesh.children[morphoMesh.children.length - 1];\n\n      const somaBoundingBox = new THREE.Box3();\n      somaBoundingBox.expandByObject(soma);\n\n      // set the new target point from the soma's bounding box\n      // instead of the entire neuron bounding box\n      targetPoint = somaBoundingBox.getCenter(new THREE.Vector3());\n    }\n    return targetPoint;\n  };\n\n  morphoViewer._threeContext.getCameraHeightAtMorpho = function(): number {\n    const targetPoint = this.getTargetPointFromSoma();\n\n    this._camera.updateMatrixWorld();\n\n    const cameraPosVector = (this\n      ._camera as THREE.PerspectiveCamera).position.clone();\n\n    const distance = cameraPosVector.distanceTo(targetPoint);\n\n    // Calculate the visible height (the height of camera frustrum)\n    // at the point it intersects with the morphology soma\n    const vFOV = (this._camera.fov * Math.PI) / 180; // convert vertical fov to radians\n    const height = 2 * Math.tan(vFOV / 2) * distance; // visible height\n\n    return height;\n  };\n\n  morphoViewer._threeContext.focusOnMorphology = function(name = null) {\n    const morphoMesh = this.getMorphoFromCollection(name);\n\n    const fitOffset = CAMERA_DISTANCE_OFFSET;\n\n    const box = new THREE.Box3();\n\n    box.expandByObject(morphoMesh);\n\n    const size = box.getSize(new THREE.Vector3());\n\n    const maxSize = Math.max(size.x, size.y, size.z);\n    const fitHeightDistance =\n      maxSize / (2 * Math.atan((Math.PI * this._camera.fov) / 360));\n    const fitWidthDistance = fitHeightDistance / this._camera.aspect;\n    const distance = fitOffset * Math.max(fitHeightDistance, fitWidthDistance);\n\n    const direction = this._controls.target\n      .clone()\n      .sub(this._camera.position)\n      .normalize()\n      .multiplyScalar(distance);\n\n    this._controls.maxDistance = distance * 10;\n\n    const targetPoint = this.getTargetPointFromSoma();\n\n    // Look at our new center point\n    this._camera.lookAt(targetPoint);\n    // apply soma center coordinates as OrbitControls target\n    // this will center the controls around it for rotation\n    this._controls.target.copy(targetPoint);\n\n    this._camera.near = distance / 100;\n    this._camera.far = distance * 100;\n    this._camera.updateProjectionMatrix();\n\n    this._camera.position.copy(this._controls.target).sub(direction);\n    this._camera.rotation.set(new THREE.Vector3());\n\n    this._controls.update();\n\n    this._render();\n  };\n  return morphoViewer;\n};\n\nexport default withFixedFocusOnMorphology;\n","export const removeChildren = (div: HTMLDivElement) => {\n  while (div.lastChild) {\n    div.removeChild(div.lastChild);\n  }\n};\n","import * as THREE from 'three';\n\nexport type TextProps = {\n  apparentFontSize?: number;\n  fontSize?: number;\n  font?: string;\n  color?: string;\n  align?: CanvasTextAlign;\n  baseline?: CanvasTextBaseline;\n};\n\nexport const createTextCanvas = (text: string, textProps: TextProps) => {\n  const {\n    fontSize = 48,\n    font = 'monospace',\n    align = 'center',\n    baseline = 'middle',\n    color = 'black',\n  } = textProps;\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    return;\n  }\n\n  // Prepare the font to be able to measure\n  ctx.font = `${fontSize}px ${font}`;\n\n  const textMetrics = ctx.measureText(text);\n\n  const width = textMetrics.width;\n  const height = fontSize;\n\n  // Resize canvas to match text size\n  canvas.width = width;\n  canvas.height = height;\n  canvas.style.width = width + 'px';\n  canvas.style.height = height + 'px';\n\n  // Re-apply font since canvas is resized.\n  ctx.font = `${fontSize}px ${font}`;\n  ctx.textAlign = align;\n  ctx.textBaseline = baseline;\n\n  // Make the canvas transparent for simplicity\n  ctx.fillStyle = 'transparent';\n  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  ctx.fillStyle = color;\n  ctx.fillText(text, width / 2, height / 2);\n\n  return canvas;\n};\n\nexport const makeText = (text: string, textProps: TextProps) => {\n  const { apparentFontSize = 5 } = textProps;\n  const canvas = createTextCanvas(text, textProps);\n  if (!canvas) {\n    console.warn('no canvas found when making text');\n    return;\n  }\n  const texture = new THREE.Texture(canvas);\n  texture.magFilter = THREE.NearestFilter;\n  texture.needsUpdate = true;\n  const material = new THREE.SpriteMaterial({ map: texture });\n  const sprite = new THREE.Sprite(material);\n\n  const textObject = new THREE.Object3D();\n\n  sprite.scale.set(\n    (canvas.width / canvas.height) * apparentFontSize,\n    apparentFontSize,\n    1\n  );\n\n  sprite.position.set(0, 1.5, 0);\n\n  textObject.add(sprite);\n  return textObject;\n};\n","import * as THREE from 'three';\nimport { removeChildren } from './dom';\nimport { makeText } from './text';\n\nconst AXES_HELPER_SCALE = 15;\n\nconst createOrientationHelper = (): THREE.Object3D => {\n  const orientationHelper = new THREE.Object3D();\n\n  const colors = ['red', 'green', 'blue'];\n  const axes = ['X', 'Y', 'Z'];\n\n  // We need to swap Y for Z\n  // because three.js uses an uncommon orientation format\n  // therefore we will generate the Axes Helper ourselves\n  const positions = [\n    [AXES_HELPER_SCALE, 0, 0],\n    [0, 0, AXES_HELPER_SCALE],\n    [0, AXES_HELPER_SCALE, 0],\n  ];\n\n  for (let i = 0; i <= 2; i++) {\n    const color = colors[i];\n    const position = new THREE.Vector3(\n      positions[i][0],\n      positions[i][1],\n      positions[i][2]\n    );\n\n    const geometry = new THREE.Geometry();\n    geometry.vertices.push(position, new THREE.Vector3(0, 0, 0));\n    const material = new THREE.LineBasicMaterial({\n      color,\n      linewidth: 1,\n    });\n    const line = new THREE.LineSegments(geometry, material);\n\n    const label = axes[i];\n    const axisLabel = makeText(label, { color });\n    // Make sure the label has a little margin\n    const labelPosition = position.clone().multiplyScalar(1.2);\n    axisLabel?.position.set(labelPosition.x, labelPosition.y, labelPosition.z);\n\n    axisLabel && orientationHelper.add(axisLabel, line);\n  }\n\n  return orientationHelper;\n};\n\nexport default class OrientationViewer {\n  private renderer: THREE.WebGLRenderer | null;\n  private scene: THREE.Scene | null;\n  private camera: THREE.Camera | null;\n  private orientationHelper: THREE.Object3D;\n  private requestedAnimationFrameID: number = 0;\n\n  public followCamera: THREE.Camera | null = null;\n\n  constructor(private div: HTMLDivElement) {\n    const canvas = document.createElement('canvas');\n    div.appendChild(canvas);\n    const context = canvas.getContext('webgl2', {\n      // preserveDrawingBuffer: true,\n      alpha: true,\n      antialias: true,\n    });\n\n    this.renderer = new THREE.WebGLRenderer({\n      canvas,\n      context: context || undefined,\n    });\n    this.renderer.setClearColor(0xffffff, 0);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(div.clientWidth, div.clientHeight);\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      27,\n      div.clientWidth / div.clientHeight,\n      1,\n      50000\n    );\n    const camPos = { x: 0, y: 0, z: 100 };\n    this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n    this.camera.position.x = camPos.x;\n    this.camera.position.y = camPos.y;\n    this.camera.position.z = camPos.z;\n    this.scene.add(this.camera);\n\n    this.orientationHelper = createOrientationHelper();\n    this.scene.add(this.orientationHelper);\n\n    window.addEventListener('resize', () => {\n      this.renderer?.setSize(div.clientWidth, div.clientHeight);\n    });\n\n    this.animate();\n  }\n\n  setFollowCamera(camera: THREE.Camera) {\n    this.followCamera = camera;\n  }\n\n  animate() {\n    this.requestedAnimationFrameID = requestAnimationFrame(\n      this.animate.bind(this)\n    );\n    this.render();\n  }\n\n  render() {\n    if (this.followCamera) {\n      this.camera?.lookAt(this.orientationHelper.position.clone());\n      this.orientationHelper.rotation.copy(this.followCamera.rotation.clone());\n\n      // Invert the orientation of the object\n      // because the camera is inverted (see MorphologyViewer.tsx)\n      this.orientationHelper.scale.x = -1;\n      this.orientationHelper.scale.y = -1;\n      this.orientationHelper.scale.z = -1;\n    }\n    if (this.scene && this.camera && this.renderer) {\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n\n  destroy() {\n    removeChildren(this.div);\n    cancelAnimationFrame(this.requestedAnimationFrameID);\n    this.scene = null;\n    this.renderer = null;\n    this.camera = null;\n  }\n}\n","import * as d3 from 'd3';\nimport { removeChildren } from './dom';\n\nconst min = 0;\n\nexport default class ScaleViewer {\n  private svg: d3.Selection<SVGSVGElement, unknown, null, undefined>;\n  private scale: d3.ScaleLinear<number, number>;\n  private axis: d3.Axis<d3.NumberValue>;\n  constructor(private div: HTMLDivElement, max: number) {\n    const { clientWidth: width, clientHeight: height } = div;\n    const margins = {\n      top: 20,\n      bottom: 20,\n    };\n\n    const data = [min, max];\n    this.svg = d3\n      .select(div)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height);\n\n    this.scale = d3\n      .scaleLinear()\n      .range([height - margins.top, margins.bottom])\n      .domain([d3.min(data) || min, d3.max(data) || max]);\n\n    this.axis = d3.axisRight(this.scale);\n\n    this.svg.append('g').call(this.axis);\n\n    this.onScaleChange(max);\n  }\n\n  onScaleChange(max: number) {\n    this.scale.domain([min, max]);\n    this.svg.call(d3.axisRight(this.scale).tickFormat(x => `${x} μm`));\n  }\n\n  destroy() {\n    this.svg.remove();\n    removeChildren(this.div);\n  }\n}\n","import React from 'react';\n\n// import './morpho-legend.css';\n\nconst MorphoLegend: React.FC<{\n  isInterneuron: boolean;\n  hasApproximatedSoma: boolean;\n}> = ({ isInterneuron, hasApproximatedSoma }) => {\n  return (\n    <div className=\"morpho-legend\">\n      <ul>\n        <li className=\"soma\">Soma {hasApproximatedSoma && '(Approximated)'}</li>\n        <li className=\"axon\">Axon</li>\n\n        {// Interneurons don't have a distinction between Basal / Apical Dendrites\n        isInterneuron ? (\n          <li className=\"basal-dendrites\">Dendrites</li>\n        ) : (\n          <>\n            <li className=\"basal-dendrites\">Basal Dendrites</li>\n            <li className=\"apical-dendrites\">Apical Dendrites</li>\n          </>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default MorphoLegend;\n","import React from 'react';\n\nimport withFixedFocusOnMorphology from './withFixedFocusOnMorphology';\nimport OrientationViewer from './libs/OrientationViewer';\nimport ScaleViewer from './libs/ScaleViewer';\nimport MorphoLegend from './MorphoLegend';\n\n// import './morpho-viewer.css';\n\n// TODO update morphoviewer library with typings\nconst morphoviewer = require('morphoviewer').default;\nconst swcmorphologyparser = require('swcmorphologyparser').default;\n\nexport type MorphoViewerOptions = {\n  asPolyline?: boolean;\n  focusOn?: boolean;\n  onDone?: VoidFunction;\n  somaMode?: string;\n};\n\nexport const MorphologyViewer: React.FC<{\n  data: any;\n  options: MorphoViewerOptions;\n}> = ({ data, options }) => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const orientationRef = React.useRef<HTMLDivElement>(null);\n  const scaleRef = React.useRef<HTMLDivElement>(null);\n  const [mv, setMorphoViewer] = React.useState(null);\n  const [\n    orientationViewer,\n    setOrientationViewer,\n  ] = React.useState<OrientationViewer | null>(null);\n  const [scaleViewer, setScaleViewer] = React.useState<ScaleViewer | null>(\n    null\n  );\n\n  React.useEffect(() => {\n    if (!mv) {\n      return;\n    }\n\n    if (!mv.hasSomaData) {\n      // Change soma color to black\n      const somaMesh = mv._threeContext.getOrphanedSomaChildren();\n      (somaMesh as any)?.material.color.setHex(0x000000);\n    }\n\n    if (mv.hasSomaData && !options.asPolyline) {\n      // remove orphaned soma because real one exists, but two are shown\n      // this is a bug with morphoviewer and will be fixed\n      // TODO update morphoviewer and remove this code.\n      mv._threeContext.removeOrphanedSomaChildren();\n\n      // Change soma color to black\n      mv._threeContext.getSomaChildren().forEach((somaMesh: any) => {\n        somaMesh?.material.color.setHex(0x000000);\n      });\n      mv._threeContext._render();\n    }\n  }, [mv && mv._threeContext]);\n\n  React.useEffect(() => {\n    let morphoViewer: any;\n    if (!ref.current) {\n      return;\n    }\n    try {\n      const swcParser = new swcmorphologyparser.SwcParser();\n      swcParser.parse(data);\n      const parsedFile = swcParser.getRawMorphology();\n\n      const hasSomaData = parsedFile.soma.points.length > 1;\n\n      morphoViewer = withFixedFocusOnMorphology(\n        new morphoviewer.MorphoViewer(ref.current)\n      );\n      morphoViewer.hasSomaData = hasSomaData;\n\n      morphoViewer._threeContext._camera.up.negate();\n      setMorphoViewer(morphoViewer);\n      const morphoViewerOptions = {\n        name: 'morphology',\n        ...options,\n      };\n      morphoViewer.addMorphology(parsedFile, morphoViewerOptions);\n    } catch (error) {\n      throw new Error(`Morphology parsing error: ${error.message}`);\n    }\n    return () => {\n      morphoViewer && morphoViewer.destroy();\n    };\n  }, [ref, data, options]);\n\n  // Orientation Viewer Operations\n  React.useEffect(() => {\n    if (!orientationRef.current) {\n      return;\n    }\n    if (!orientationViewer) {\n      setOrientationViewer(new OrientationViewer(orientationRef.current));\n    }\n    if (mv && orientationViewer) {\n      orientationViewer.setFollowCamera(mv._threeContext._camera);\n    }\n    return () => {\n      orientationViewer?.destroy();\n      setOrientationViewer(null);\n    };\n  }, [orientationRef, mv, options]);\n\n  // Scale Axis Operations\n  React.useEffect(() => {\n    let controlEventListenerChangedEvent: VoidFunction | null = null;\n    if (!scaleRef.current) {\n      return;\n    }\n    if (!scaleViewer) {\n      setScaleViewer(new ScaleViewer(scaleRef.current, 0));\n    }\n    if (mv && scaleViewer) {\n      scaleViewer.onScaleChange(mv._threeContext.getCameraHeightAtMorpho());\n      controlEventListenerChangedEvent = () => {\n        scaleViewer.onScaleChange(mv._threeContext.getCameraHeightAtMorpho());\n      };\n      mv._threeContext._controls.addEventListener(\n        'change',\n        controlEventListenerChangedEvent\n      );\n    }\n    return () => {\n      scaleViewer?.destroy();\n      setScaleViewer(null);\n      mv?._threeContext?._controls?.removeEventListener(\n        'change',\n        controlEventListenerChangedEvent\n      );\n    };\n  }, [scaleRef, mv, options]);\n\n  const handleOrientationClick = () => {\n    mv?._threeContext._controls.reset();\n    mv?._threeContext._camera.up.negate();\n    mv?._threeContext.focusOnMorphology();\n  };\n\n  return (\n    <>\n      <MorphoLegend\n        isInterneuron={!!mv?.isInterneuron()}\n        hasApproximatedSoma={!mv?.hasSomaData}\n      />\n      <div>\n        <div className=\"morpho-viewer\" ref={ref}></div>\n        <div\n          className=\"scale\"\n          ref={scaleRef}\n          onClick={handleOrientationClick}\n        ></div>\n        <div\n          className=\"orientation\"\n          ref={orientationRef}\n          onClick={handleOrientationClick}\n        ></div>\n      </div>\n    </>\n  );\n};\n\nexport default MorphologyViewer;\n","import React from 'react';\nimport { Button } from 'antd';\n\nimport MorphologyViewer, { MorphoViewerOptions } from './MorphologyViewer';\n\n// import './morpho-wrapper.css';\n\nconst MorphoWrapper: React.FC<{\n  loading: boolean;\n  error: Error | null;\n  data: any;\n  options: MorphoViewerOptions;\n  onPolylineClick: VoidFunction;\n}> = ({ loading, error, data, options, onPolylineClick }) => {\n  return (\n    <div className={loading ? 'morpho-wrapper loading' : 'morpho-wrapper'}>\n      <div className=\"actions\">\n        <Button size=\"small\" disabled={loading} onClick={onPolylineClick}>\n          {options.asPolyline ? 'Show as Geometry' : 'Show as Lines'}\n        </Button>\n      </div>\n      {error && <p>{error.message}</p>}\n      {data && !error && <MorphologyViewer data={data} options={options} />}\n    </div>\n  );\n};\n\nexport default MorphoWrapper;\n","import React from 'react';\n\nimport MorphoWrapper from './MorphoWrapper';\nimport { MorphoViewerOptions } from './MorphologyViewer';\n\n\nconst MorphoViewerContainer: React.FC<{\n  path: string;\n}> = ({ path }) => {\n  const [{ loading, error, data }, setData] = React.useState<{\n    loading: boolean;\n    error: Error | null;\n    data: any;\n  }>({\n    loading: true,\n    error: null,\n    data: null,\n  });\n\n  const [options, setOptions] = React.useState<MorphoViewerOptions>({\n    asPolyline: true,\n    focusOn: true,\n    somaMode: 'fromOrphanSections',\n  });\n\n  React.useEffect(() => {\n    fetch(path)\n      .then(res => res.text())\n      .then(data => setData({ data, error: null, loading: false }))\n      .catch(error => setData({ error, data: null, loading: false }));\n  }, [path]);\n\n  const handleAsPolyline = () => {\n    setOptions({\n      ...options,\n      asPolyline: !options.asPolyline,\n    });\n  };\n\n  return (\n    <MorphoWrapper\n      {...{\n        loading,\n        error,\n        data,\n        options,\n        onPolylineClick: handleAsPolyline,\n      }}\n    />\n  );\n};\n\nexport default MorphoViewerContainer;\n"],"names":["morphoViewer","_threeContext","getMorphoFromCollection","name","morphoName","allNames","Object","keys","this","_morphologyMeshCollection","length","morphoMesh","isInterneuron","children","find","child","userData","typename","getSomaChildren","filter","object","getOrphanedSomaChildren","removeOrphanedSomaChildren","orphanedSoma","remove","getTargetPointFromSoma","targetPoint","getTargetPoint","_pointToTarget","soma","somaBoundingBox","THREE","expandByObject","getCenter","getCameraHeightAtMorpho","_camera","updateMatrixWorld","distance","position","clone","distanceTo","vFOV","fov","Math","PI","tan","focusOnMorphology","fitOffset","box","size","getSize","maxSize","max","x","y","z","fitHeightDistance","atan","fitWidthDistance","aspect","direction","_controls","target","sub","normalize","multiplyScalar","maxDistance","lookAt","copy","near","far","updateProjectionMatrix","rotation","set","update","_render","removeChildren","div","lastChild","removeChild","makeText","text","textProps","apparentFontSize","canvas","fontSize","font","align","baseline","color","document","createElement","ctx","getContext","width","measureText","height","style","textAlign","textBaseline","fillStyle","fillRect","fillText","createTextCanvas","texture","magFilter","needsUpdate","material","map","sprite","textObject","scale","add","console","warn","OrientationViewer","requestedAnimationFrameID","followCamera","appendChild","context","alpha","antialias","renderer","undefined","setClearColor","setPixelRatio","window","devicePixelRatio","setSize","clientWidth","clientHeight","scene","camera","camPos","orientationHelper","colors","axes","positions","i","geometry","vertices","push","linewidth","line","axisLabel","labelPosition","createOrientationHelper","addEventListener","animate","setFollowCamera","requestAnimationFrame","bind","render","destroy","cancelAnimationFrame","ScaleViewer","margins","data","svg","d3","append","attr","range","domain","axis","call","onScaleChange","tickFormat","hasApproximatedSoma","className","ul","li","morphoviewer","require","swcmorphologyparser","options","ref","React","orientationRef","scaleRef","mv","setMorphoViewer","orientationViewer","setOrientationViewer","scaleViewer","setScaleViewer","hasSomaData","setHex","asPolyline","forEach","somaMesh","current","swcParser","SwcParser","parse","parsedFile","getRawMorphology","points","withFixedFocusOnMorphology","MorphoViewer","up","negate","morphoViewerOptions","addMorphology","error","Error","message","controlEventListenerChangedEvent","removeEventListener","handleOrientationClick","reset","MorphoLegend","onClick","loading","onPolylineClick","Button","disabled","p","MorphologyViewer","path","setData","focusOn","somaMode","setOptions","fetch","then","res","catch","MorphoWrapper"],"sourceRoot":""}