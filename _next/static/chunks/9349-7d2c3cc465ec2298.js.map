{"version":3,"file":"static/chunks/9349-7d2c3cc465ec2298.js","mappings":"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","sources":["webpack://_N_E/./src/components/ESData/index.tsx","webpack://_N_E/./src/components/NumberFormat/index.tsx","webpack://_N_E/./src/components/StickyContainer/index.tsx","webpack://_N_E/./src/components/Term/index.tsx","webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/hoc/with-preselection.tsx","webpack://_N_E/./src/queries/es/index.ts","webpack://_N_E/./src/views/1_experimental-data/config.ts","webpack://_N_E/./src/components/StickyContainer/styles.module.scss","webpack://_N_E/./src/components/Term/styles.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\nimport { useNexusContext } from '@bbp/react-nexus';\nimport { ElasticSearchViewQueryResponse } from '@bbp/nexus-sdk';\n\nimport { hippocampus } from '../../config';\n\n\ntype ESDataProps = {\n  query: Record<string, unknown> | null;\n  children: (\n    data: ElasticSearchViewQueryResponse<any>['hits']['hits'] | null,\n    loading: boolean,\n    error: any,\n  ) => React.ReactNode;\n};\n\nconst ESData: React.FC<ESDataProps> = ({\n  query,\n  children,\n}) => {\n  const [state, setState] = React.useState<{\n    data: ElasticSearchViewQueryResponse<any>['hits']['hits'] | null;\n    loading: boolean;\n    error: any;\n  }>({\n    data: null,\n    loading: false,\n    error: null,\n  });\n  const nexus = useNexusContext();\n\n  React.useEffect(() => {\n    if (query) {\n      setState({ ...state, loading: true, data: null });\n      nexus.View.elasticSearchQuery(\n        hippocampus.org,\n        hippocampus.project,\n        hippocampus.datasetViewId,\n        query,\n      )\n        .then(data =>\n          setState({ ...state, loading: false, data: data.hits.hits }),\n        )\n        .catch(error => setState({ ...state, loading: false, error }));\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query]);\n\n  return (\n    <>\n      {children(state.data, state.loading, state.error)}\n    </>\n  );\n};\n\nexport default ESData;\n","import React from 'react';\n\n\ntype NumberFormatProps = {\n  value?: any;\n  significantFigures?: number;\n  thousandSeparator?: boolean;\n  prefix?: string;\n  suffix?: string;\n};\n\nexport function formatNumber(value, significantFigures = 5, thousandSeparator = true, prefix = '', suffix = '') {\n  const num = parseFloat(value);\n\n  if (!Number.isFinite(num)) return value;\n\n  const formatted = thousandSeparator\n    ? num.toLocaleString('en', { maximumSignificantDigits: significantFigures })\n    : num.toPrecision(significantFigures);\n\n  return `${prefix}${formatted}${suffix}`;\n}\n\nconst NumberFormat: React.FC<NumberFormatProps> = ({\n  value,\n  significantFigures = 5,\n  thousandSeparator = true,\n  prefix = '',\n  suffix = '',\n}) => {\n  return formatNumber(value, significantFigures, thousandSeparator, prefix, suffix);\n}\n\n\nexport default NumberFormat;\n","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface StickyContainerProps {\n  centered?: boolean;\n  children: React.ReactNode;\n}\n\nconst StickyContainer: React.FC<StickyContainerProps> = ({ centered, children }) => (\n  <div className={styles.flexWrapper}>\n    <div className={classNames(styles.container, centered ? styles['container--centered'] : '')}>\n      {children}\n    </div>\n  </div >\n);\n\nexport default StickyContainer;","import React from 'react';\nimport { Tooltip } from 'antd';\n\nimport { TermDescription } from '@/terms';\n\nimport style from './styles.module.scss';\n\ntype TermProps = {\n  term: string;\n  description?: any;\n  className?: string;\n};\n\ntype TermFormatter = (term: string) => string;\n\nexport const termFactory = (termDescription: TermDescription = {}, termFormatter?: TermFormatter) => {\n  const Term: React.FC<TermProps> = ({ className, term, description }) => {\n    const currentDescription = description || termDescription[term];\n    const formattedTerm = termFormatter\n      ? termFormatter(term)\n      : term;\n\n    if (!currentDescription) {\n      return (<span className={className}>{formattedTerm}</span>);\n    }\n\n    return (\n      <Tooltip title={currentDescription} destroyTooltipOnHide={true}>\n        <span className={`${style.container} ${className ?? ''}`}>{formattedTerm}</span>\n      </Tooltip>\n    );\n  };\n\n  return Term;\n};\n","import { Layer, NeuriteType, VolumeSection, AchConcentration, CellGroup, Theme, GraphTheme, ThemeColors } from './types';\nimport NeuronModelLibrary from './views/2_reconstruction-data/NeuronModelLibrary';\nimport AcetylcholineView from './views/4_validations/Acetylcholine';\n\nexport const layers: Layer[] = [\n  'SLM',\n  'SR',\n  'SP',\n  'SO',\n];\n\nexport const theme: Theme = {\n  1: { default: 0x44405B, hover: 0x7D656F, selected: 0xB68983, selectedEdges: 0xEFAE97 },\n  2: { default: 0x44405B, hover: 0x7B5B6A, selected: 0xB37579, selectedEdges: 0xEA9088 },\n  3: { default: 0x44405B, hover: 0x715970, selected: 0x9F7184, selectedEdges: 0xCC8A99 },\n  4: { default: 0x44405B, hover: 0x625D77, selected: 0x807B92, selectedEdges: 0x9E98AE },\n  5: { default: 0x393D5E, hover: 0x595D79, selected: 0x6E7B97, selectedEdges: 0x8398B5 },\n};\n\nexport const graphTheme: GraphTheme = {\n  red: \"#C46785\",\n  blue: \"#3b4165\",\n  green: \"#7FD982\",\n  purple: \"#7F5482\",\n  yellow: \"#f9f871\",\n};\n\nexport const themeColors: ThemeColors = {\n  experimental_data: \"#EFAE97\",\n  reconstruction_data: \"#EA9088\",\n  digital_reconstruction: \"#CC8A99\",\n  validations: \"#9E98AE\",\n  predictions: \"#8398B5\",\n};\n\n\n\nexport const neuriteTypes: NeuriteType[] = [\n  'all',\n  'axon',\n  'apical',\n  'basal',\n  'dendrite',\n  'soma',\n\n];\n\nexport const volumeSections: VolumeSection[] = [\n  'region',\n  'slice',\n  'cylinder',\n];\n\n\nexport const achConcentrations: AchConcentration[] = [\n  '0um',\n  '10um',\n  '100um'\n];\n\nexport const cellGroup: CellGroup[] = [\n  'All',\n  'Excitatory',\n  'Inhibitory',\n  'SLM_PPA',\n  'SO_BP',\n  'SO_BS',\n  'SO_OLM',\n  'SO_Tri',\n  'SP_AA',\n  'SP_BS',\n  'SP_CCKBC',\n  'SP_Ivy',\n  'SP_PC',\n  'SP_PVBC',\n  'SR_SCA'\n]\n\nexport const defaultSelection = {\n  experimentalData: {\n    layerAnatomy: {\n      layer: 'SLM',\n    },\n    neuronMorphology: {\n      layer: 'SLM',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    neuronElectrophysiology: {\n      etype: 'bAC',\n      etype_instance: '95810035',\n    },\n  },\n  reconstructionData: {\n    volume: {\n      volume_section: 'region',\n    },\n    cellComposition: {\n      volume_section: 'region',\n    },\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: 'CA1_int_bAC_011127HP1_20190329115610',\n    },\n  },\n  digitalReconstruction: {\n    region: {\n      volume_section: 'region',\n    },\n    morphologyLibrary: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      morphology: '011127HP1',\n    },\n    schafferCollateral: {\n      volume_section: 'region',\n      prelayer: 'SC',\n      postlayer: 'All'\n    },\n    connectionAnatomy: {\n      volume_section: 'region',\n      prelayer: 'All',\n      postlayer: 'All'\n    },\n    connectionPhysiology: {\n      volume_section: 'region',\n      prelayer: 'all',\n      postlayer: 'all'\n    },\n    acetylcholineEffectsOnCell: {\n      morphology: \"450290\",\n      etype: \"cNAC\",\n      mtype: \"SO_BP\"\n    },\n    acetylcholineEffectsOnSynapses: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory'\n    },\n\n    neurons: {\n      layer: 'SLM',\n      etype: 'bAC',\n      mtype: 'SLM_PPA',\n      instance: '011127HP1',\n    },\n    NeuronModelLibrary: {\n      mtype: 'SO_BP',\n      etype: 'cNAC',\n      morphology: '980120A_-_Scale_x1.000_y0.900_z1.000'\n    },\n    synapticPathways: {\n      volume_section: 'slice',\n      prelayer: 'All',\n      postlayer: 'All',\n    },\n    acetylcholine: {\n      ach_concentration: '0um',\n      prelayer: 'Excitatory',\n      postlayer: 'Excitatory',\n    },\n  },\n\n};\n\nexport const neuriteColor: Record<NeuriteType, string> = {\n  all: '#1fcf1f',\n  axon: '#1111ff',\n  apical: '#f442ad',\n  basal: '#ff1111',\n  dendrite: '#ff1111',\n  soma: '#000',\n};\n","import React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\ntype PreselectionProps = {\n  key: string,\n  defaultQuery: any,\n};\n\nconst withPreselection = (WrappedComponent, options: PreselectionProps) => {\n\n  const WithPreselectionComponent: React.FC = () => {\n    const router = useRouter();\n\n    useEffect(() => {\n      if (!router.isReady) return;\n\n      if (!router.query[options.key]) {\n        const query = options.defaultQuery;\n        router.replace({ query }, undefined, { shallow: true });\n      }\n    }, [router.query]);\n\n    return (<WrappedComponent />);\n  };\n\n  return WithPreselectionComponent;\n}\n\nexport default withPreselection;\n","\ntype ESQuery = Record<string, unknown>;\n\n/**\n * Lists get specific experiment of specific e-type\n *\n */\nexport const layerAnatomyDataQuery = {\n  from: 0,\n  size: 1000,\n  query: {\n    bool: {\n      filter: [\n        {\n          bool: {\n            should: [\n              {\n                term: {\n                  '@type': 'LayerThickness',\n                },\n              },\n              {\n                term: {\n                  '@type': 'Subject',\n                },\n              },\n              {\n                term: {\n                  '@type': 'Organization',\n                },\n              },\n              {\n                term: {\n                  '@type': 'SliceCollection',\n                },\n              },\n            ],\n          },\n        },\n      ],\n    },\n  },\n};\n\nexport const electroPhysiologyDataQuery = (\n  etype: string,\n  experiment: string,\n): ESQuery | null => {\n  if (!etype || !experiment) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: {\n                term: { _deprecated: false },\n              }\n            },\n          },\n          {\n            bool: {\n              must: {\n                term: { '@type': 'Trace' },\n              },\n            },\n          },\n          {\n            bool: {\n              must: {\n                term: { 'name.raw': experiment }\n              }\n            }\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: { term: { 'annotation.hasBody.label.raw': etype } },\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/nwb' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const ephysByNameDataQuery = (\n  names: string[],\n): ESQuery | null => {\n  if (!names) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 10000,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: {\n                term: { _deprecated: false },\n              }\n            },\n          },\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'Trace' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must: {\n                terms: { 'name.raw': names }\n              }\n            }\n          },\n          {\n            bool: {\n              must: {\n                term: { note: 'subset' }\n              }\n            }\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/nwb' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const mtypeExpMorphologyListDataQuery = (\n  mtype: string\n): ESQuery | null => {\n  if (!mtype) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 200,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    _deprecated: false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@type': 'ReconstructedCell',\n                  },\n                },\n              ],\n            },\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: [\n                    {\n                      term: {\n                        'annotation.hasBody.label.raw': mtype,\n                      },\n                    },\n                  ],\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const morphologyDataQuery = (\n  mtype: string,\n  instance: string\n): ESQuery | null => {\n  if (!mtype || !instance) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    _deprecated: false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@type': 'NeuronMorphology',\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    'name.raw': instance,\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const dataByIdQuery = (\n  id: string | string[]\n): ESQuery | null => {\n  if (!id) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    _deprecated: false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    '@id': id,\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const entriesByIdsQuery = (\n  ids: string[]\n): ESQuery | null => {\n  if (!ids) {\n    return null;\n  }\n\n  return {\n    from: 0,\n    size: 100,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: [\n                {\n                  term: {\n                    _deprecated: false,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            bool: {\n              should: [\n                {\n                  terms: {\n                    '@id': ids,\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n\n\nexport const etypeTracesDataQuery = (\n  etype: string,\n): ESQuery | null => {\n  if (!etype) {\n    return null;\n  }\n\n  // Changes based on https://bbpteam.epfl.ch/project/issues/browse/BBPP134-341\n  return {\n    from: 0,\n    size: 10000,\n    query: {\n      bool: {\n        filter: [\n          {\n            bool: {\n              must: {\n                term: { _deprecated: false },\n              }\n            },\n          },\n          {\n            bool: {\n              must: [\n                { term: { '@type': 'TraceWebDataContainer' } },\n              ],\n            },\n          },\n          {\n            bool: {\n              must_not: {\n                exists: {\n                  field: 'note',\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'annotation.hasBody',\n              query: {\n                bool: {\n                  filter: { term: { 'annotation.hasBody.label.raw': etype } },\n                },\n              },\n            },\n          },\n          {\n            nested: {\n              path: 'distribution',\n              query: {\n                bool: {\n                  must: {\n                    match: { 'distribution.encodingFormat': 'application/nwb' },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  };\n};\n","import { accentColors } from '../../config';\nimport { Color } from '../../types';\n\nexport const sectionTitle = 'Experimental Data';\nexport const colorName: Color = 'blue-2';\nexport const primaryColor = accentColors[colorName];\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__31D34\",\"container--center\":\"styles_container--center__Yuntq\",\"flexWrapper\":\"styles_flexWrapper___gDLe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__pHcWR\"};"],"names":["__webpack_exports__","Z","query","children","param","state","setState","React","data","loading","error","nexus","useNexusContext","View","elasticSearchQuery","hippocampus","org","project","datasetViewId","then","hits","catch","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Fragment","value","significantFigures","thousandSeparator","prefix","suffix","formatNumber","num","parseFloat","Number","isFinite","formatted","toLocaleString","maximumSignificantDigits","toPrecision","concat","centered","div","className","styles","classNames","termFactory","termDescription","termFormatter","term","description","currentDescription","formattedTerm","Tooltip","title","destroyTooltipOnHide","span","style","layers","theme","default","hover","selected","selectedEdges","graphTheme","red","blue","green","purple","yellow","themeColors","experimental_data","reconstruction_data","digital_reconstruction","validations","predictions","neuriteTypes","volumeSections","achConcentrations","cellGroup","defaultSelection","experimentalData","layerAnatomy","layer","neuronMorphology","mtype","instance","neuronElectrophysiology","etype","etype_instance","reconstructionData","volume","volume_section","cellComposition","neurons","digitalReconstruction","region","morphologyLibrary","morphology","schafferCollateral","prelayer","postlayer","connectionAnatomy","connectionPhysiology","acetylcholineEffectsOnCell","acetylcholineEffectsOnSynapses","ach_concentration","NeuronModelLibrary","synapticPathways","acetylcholine","neuriteColor","all","axon","apical","basal","dendrite","soma","WrappedComponent","options","router","useRouter","useEffect","isReady","key","defaultQuery","replace","undefined","shallow","layerAnatomyDataQuery","from","size","bool","filter","should","electroPhysiologyDataQuery","experiment","must","_deprecated","nested","path","match","entriesByIdsQuery","terms","ids","etypeTracesDataQuery","must_not","exists","field","colorName","accentColors","module","exports"],"sourceRoot":""}