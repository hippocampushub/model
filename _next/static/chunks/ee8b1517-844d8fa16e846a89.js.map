{"version":3,"file":"static/chunks/ee8b1517-844d8fa16e846a89.js","mappings":"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","sources":["webpack://_N_E/./node_modules/chart.js/dist/chart.js","webpack://_N_E/<anon>"],"sourcesContent":["/*!\n * Chart.js v4.4.6\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.6\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"names":["animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__","r","call","window","_update","Date","now","remaining","item","running","items","length","i","draw","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","c","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","a","_fn","_easing","e","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","Object","keys","d","animation","animatedProps","getOwnPropertyNames","key","option","b","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","$shared","assign","$animations","animations","_createAnimations","awaitAll","anim","all","then","props","charAt","value","size","scaleClip","scale","allowedOverflow","opts","reverse","end","getSortedDatasetIndices","filterVisible","ilen","metasets","_getSortedDatasetMetas","index","applyStack","stack","dsIndex","datasetIndex","otherValue","singleMode","mode","found","g","s","isStacked","meta","stacked","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","stacks","_stacks","iScale","iAxis","axis","vAxis","indexScale","id","valueScale","itemStacks","getOrCreateStack","stackKey","indexValue","subStack","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","defaults","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","dataset","getDataset","chooseId","x","y","xid","xAxisID","v","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","data","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","u","_dataCheck","convertObjectDataToArray","iAxisKey","vAxisKey","adata","isExtensible","l","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","f","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","otherMin","otherMax","getUserBounds","minDefined","maxDefined","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","t","_clip","clip","defaultClip","top","right","bottom","left","disabled","elements","area","chartArea","drawActiveElementsOnTop","element","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","parent","context","j","dataIndex","raw","_resolveElementOptions","elementType","cache","cacheKey","sharing","h","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","parseValue","entry","parseFloatBar","startValue","endValue","barStart","barEnd","abs","_custom","parseArrayOrPrimitive","isFloatBar","custom","parseEdge","edge","orig","startEnd","BarController","categoryPercentage","barPercentage","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","obj","bars","base","getBasePixel","horizontal","isHorizontal","ruler","_getRuler","vpixels","k","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","enableBorderRadius","center","height","width","setBorderSkipped","borderSkipped","setInflateAmount","inflateAmount","ratio","_getStacks","last","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","pixels","getPixelForValue","barThickness","computeMinSampleSize","curr","getAllScaleValues","_cache","$bar","visibleMetas","concat","_","sort","_length","updateMinAndPrev","ticks","getPixelForTick","_startPixel","_endPixel","stackCount","baseValue","minBarLength","actualBase","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","computeFlexCategoryTraits","next","percent","chunk","computeFitCategoryTraits","thickness","stackIndex","rects","DoughnutController","animateRotate","animateScale","cutout","rotation","circumference","radius","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","legendItem","toggleDataVisibility","innerRadius","outerRadius","offsetX","offsetY","getter","_getRotation","_getCircumference","_getRotationExtents","T","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","m","chartWeight","_getRingWeight","ratioX","ratioY","getRatioAndOffset","endAngle","startAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","p","calcMin","maxX","maxY","H","minX","P","minY","maxWidth","maxHeight","n","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","o","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","points","_dataset","animationsDisabled","q","w","_datasetIndex","_decimated","segment","animated","maxGapLength","directUpdate","pointsCount","prevParsed","point","skip","nullData","iPixel","vPixel","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","ScatterController","interaction","registry","getElement","controllers","__proto__","BubbleController","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","abstract","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","evaluateInteractionItems","position","handler","intersect","getSortedVisibleDatasetMetas","lo","hi","binarySearch","metaset","lookupMethod","_reversePixels","A","B","el","getRange","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","C","inRange","getNearestItems","getNearestCartesianItems","distanceMetric","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","minDistance","getCenterPoint","pointInArea","distance","getProps","D","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","z","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","v1","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","fitBoxes","boxes","params","layout","refit","changed","refitBoxes","getMargins","positions","margin","same","other","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","fullSize","setBoxDims","placeBoxes","userPadding","padding","placed","stackWeight","layouts","addBox","_layers","removeBox","layoutItem","minPadding","E","availableWidth","availableHeight","buildLayoutBoxes","layoutBoxes","wrapBoxes","wrap","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","verticalBoxes","horizontalBoxes","F","beforeLayout","visibleVerticalBoxCount","vBoxMaxWidth","hBoxMaxHeight","setLayoutDims","buildStacks","includes","_stack","handleMaxPadding","updatePos","change","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","K","passive","removeListener","nodeListContains","nodeList","node","contains","createAttachObserver","observer","MutationObserver","trigger","entries","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","createResizeObserver","container","I","L","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","fromNativeEvent","native","DomPlatform","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","J","displayHeight","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","G","isConnected","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","newTicks","majorStart","majorEnd","ceil","round","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","maxTicksLimit","sample","numItems","result","increment","len","getTickMarkLength","drawTicks","tickLength","getTitleHeight","fallback","font","a0","lines","lineHeight","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_maxLength","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","O","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","Q","margins","grace","tickOpts","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","R","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","autoSkip","source","determinedMaxTicks","determineMaxTicks","_tickSize","maxScale","maxChart","ticksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","skipMajors","calculateSpacing","evenMajorSpacing","getEvenSpacing","factors","N","avgMajorSpacing","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","tickWidth","maxLabelDiagonal","numTicks","minRotation","maxRotation","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","S","title","U","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","jlen","tickFont","fontString","nestedLabel","caches","widths","heights","widestLabelSize","highestLabelSize","_resolveTickFontOptions","string","gc","V","gcLen","valueAt","idx","pixel","decimal","W","X","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","borderValue","lineValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","getPixelForGridLine","offsetGridLines","validIndex","textAlign","lineCount","textOffset","crossAlign","tickAndPadding","hTickAndPadding","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","backdrop","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","Y","renderTextOptions","Z","$","drawTitle","titleX","titleY","titleArgs","a2","a1","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","parentScope","proto","getPrototypeOf","registerDefaults","itemDefaults","a4","routeDefaults","routes","propertyParts","property","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","describe","unregister","a3","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","reg","_getRegistryForType","arg","_exec","itemReg","component","camelMethod","a5","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","localIds","local","createDescriptors","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","previousDescriptors","some","getIndexAxis","datasetDefaults","datasetOptions","idMatchesAxis","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","initOptions","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","retrieveAxisFromDatasets","boundDs","defaultId","defaultScaleOptions","ab","defaultID","initData","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","a6","Array","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isScriptable","isIndexable","aa","a7","hasFunction","subResolver","a8","descriptorDefaults","resolverCache","a9","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","M","getElementById","instances","getChart","getSizeForArea","field","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","ac","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","ad","resizeDelay","_initialize","maintainAspectRatio","responsive","ae","bindEvents","af","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","ag","unbindEvents","changes","_getUniformDataChanges","moveNumericKeys","intKey","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","detached","_remove","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","ah","pluginId","replay","hoverOptions","hover","deactivated","activated","inChartArea","eventFilter","_handleEvent","lastEvent","_getActiveElements","isClick","ai","onHover","rThetaToXY","theta","pathArc","pixelMargin","innerR","spacingOffset","alpha","noSpacingOuterRadius","avNogSpacingRadius","noSpacingInnerRadius","beta","angleOffset","outerStart","outerEnd","innerStart","innerEnd","parseBorderRadius$1","angleDelta","borderRadius","ak","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","PI","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","closePath","setStyle","lineCap","borderCapStyle","lineJoin","borderJoinStyle","previous","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","pathSegment","lineMethod","stepped","ar","tension","cubicInterpolationMode","as","fastPathSegment","prevX","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","usePath2D","Path2D","LineElement","capBezierPoints","_path","_points","_segments","_pointsUpdated","al","segments","am","interpolate","an","_interpolate","ao","ap","aq","interpolated","segmentMethod","path","strokePathDirect","inRange$1","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","at","getBarBounds","bar","half","skipOrLimit","skipX","skipY","bounds","aj","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","inner","outer","boundingRects","parseBorderWidth","maxW","maxH","av","parseBorderRadius","aw","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","addRectPath","hasRadius","au","ArcElement","fullCircles","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","halfAngle","halfRadius","translate","fix","radiusOffset","drawArc","clipArc","angleMargin","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","containsColorsDefinitions","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","_getBounds","ay","_findSegmentEnd","_getEdge","_createBoundaryLine","boundary","_pointsFromSegments","linePoints","_shouldApplyFill","simpleArc","_drawfill","_getTarget","getLineByIndex","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","below","unshift","addPointsBelow","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","computeBoundary","computeCircularBoundary","computeLinearBoundary","lineOpts","fillOption","above","doFill","clipVertical","clipY","lineLoop","tpoints","targetSegments","tgt","subBounds","fillSources","ax","fillSource","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","fontLineHeight","legendItemText","calculateLegendItemHeight","adjustHitBoxes","rtl","rtlHelper","az","hitbox","leftForLtr","_draw","cursor","defaultColor","halfFontSize","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","aD","yBoxTop","xBoxLeft","fillText","strikethrough","aA","textDirection","textWidth","setWidth","realX","aB","aC","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","hoveredItem","sameItem","plugin_legend","_element","_args","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","plugin_title","createTitle","titleBlock","WeakMap","positioners","average","xSet","xAverage","eventPosition","nearestElement","aE","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineAlignment","yAlign","determineYAlign","xAlign","determineXAlign","chartWidth","doesNotFitWithAlign","caret","caretSize","caretPadding","getBackgroundPoint","alignment","cornerRadius","paddingAndSize","alignX","alignY","getAlignedX","overrideCallbacks","defaultCallbacks","beforeTitle","aF","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","formattedValue","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","createTooltipItem","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleAlign","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","textColor","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","Colors","forceOverride","chartOptions","containsColorDefenition","colorizer","Decimation","algorithm","beforeElementsUpdate","decimated","xAxis","getStartAndCountOfVisiblePointsSimplified","pointCount","threshold","lttbDecimation","maxAreaPoint","maxArea","nextA","samples","bucketWidth","sampledIndex","endIndex","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","Filler","afterDatasetsUpdate","sources","_decodeFill","firstCh","parseFillOption","parseFloat","$filler","_resolveTarget","propagate","visited","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","SubTitle","addIfString","addedLabels","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","findOrAddLabel","lastIndexOf","relativeLabelSize","minSpacing","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","maxTicks","stepSize","computeTickLimit","numericGeneratorOptions","precision","maxDigits","includeBounds","dataRange","generateTicks$1","generationOptions","niceMin","niceMax","numSpaces","unit","maxSpaces","rmin","rmax","countDefined","aH","aI","aJ","decimalPlaces","aK","tickValue","aG","LinearScale","aL","formatters","numeric","log10Floor","aM","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","LogarithmicScale","logarithmic","_zero","generateTicks","minExp","exp","startExp","significand","lastTick","getTickBackdropHeight","determineLimits","pathRadiusLine","getPointPosition","RadialLinearScale","animate","centerPointLabels","drawingArea","_pointLabels","_pointLabelItems","fitWithPointLabels","limits","valueCount","pointLabelOpts","additionalAngle","getPointLabelContext","plFont","aN","hLimits","vLimits","updateLimits","setCenterPoint","buildPointLabelItems","itemOpts","extra","createPointLabelItem","outerDistance","pointLabelPosition","isNotOverlapped","apexesInArea","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","drawPointLabels","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawRadiusLine","gridLineOpts","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","addTick","time","timestamps","aP","timestamp","ticksFromTimestamps","majorUnit","setMajorTicks","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","aO","_getLabelCapacity","determineUnitForFormatting","determineMajorUnit","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sourceRoot":""}