{"version":3,"file":"static/chunks/react-syntax-highlighter_languages_highlight_elixir.8a1071a52fee8275.js","mappings":"saAkQAA,EAAAC,OAAA,CAzPA,SAAAC,CAAA,EACA,IAAAC,EAAA,kCAEAC,EAAA,CACAC,SAAAF,EACAG,QAAA,qMAGA,EACAC,EAAA,CACAC,UAAA,QACAC,MAAA,MACAC,IAAA,KACAC,SAAAP,CACA,EACAQ,EAAA,CACAJ,UAAA,SACAC,MAAA,uGACAI,UAAA,CACA,EACAC,EAAA,cACAC,EAAA,CACAP,UAAA,SACAC,MAAA,YAAAK,EAAA,IACAE,SAAA,CACA,CACAC,WAAA,GACAD,SAAA,CACA,CACAA,SAAA,CACAd,EAAAgB,gBAAA,CACAX,EACA,CACAY,SAAA,CACA,CACAV,MAAA,IACAC,IAAA,GACA,EACA,CACAD,MAAA,IACAC,IAAA,GACA,EACA,CACAD,MAAA,KACAC,IAAA,IACA,EACA,CACAD,MAAA,KACAC,IAAA,IACA,EACA,CACAD,MAAA,KACAC,IAAA,IACA,EACA,CACAD,MAAA,KACAC,IAAA,IACA,EACA,CACAD,MAAA,KACAC,IAAA,IACA,EACA,CACAD,MAAA,IACAC,IAAA,GACA,EACA,EAEA,EAEA,EA0CAU,EAAA,CACAZ,UAAA,SACAQ,SAAA,CACAd,EAAAgB,gBAAA,CACAX,EACA,CACAY,SAAA,CACA,CACAV,MAAA,MACAC,IAAA,KACA,EACA,CACAD,MAAA,MACAC,IAAA,KACA,EACA,CACAD,MAAA,QACAC,IAAA,MACAM,SAAA,IAEA,CACAP,MAAA,MACAC,IAAA,IACAM,SAAA,IAEA,CACAP,MAAA,QACAC,IAAA,MACAM,SAAA,IAEA,CACAP,MAAA,MACAC,IAAA,IACAM,SAAA,IAEA,CACAP,MAAA,IACAC,IAAA,GACA,EACA,CACAD,MAAA,IACAC,IAAA,GACA,EACA,EAEAW,EAAA,CACAb,UAAA,WACAc,cAAA,oBACAZ,IAAA,OACAM,SAAA,CACAd,EAAAqB,OAAA,CAAArB,EAAAsB,UAAA,EACAf,MAAAN,EACAc,WAAA,EACA,GACA,EAEAQ,EAAAvB,EAAAqB,OAAA,CAAAF,EAAA,CACAb,UAAA,QACAc,cAAA,0CACAZ,IAAA,YACA,GACAgB,EAAA,CACAN,EArGA,CACAZ,UAAA,SACAC,MAAA,YAAAK,EAAA,IACAE,SAAA,CACA,CACAP,MAAA,IACAC,IAAA,GACA,EACA,CACAD,MAAA,IACAC,IAAA,GACA,EACA,CACAD,MAAA,KACAC,IAAA,IACA,EACA,CACAD,MAAA,KACAC,IAAA,IACA,EACA,CACAD,MAAA,KACAC,IAAA,IACA,EACA,CACAD,MAAA,KACAC,IAAA,IACA,EACA,CACAD,MAAA,KACAC,IAAA,IACA,EACA,CACAD,MAAA,IACAC,IAAA,GACA,EACA,EAmEAK,EACAb,EAAAyB,iBAAA,CACAF,EACAJ,EACA,CACAZ,MAAA,IACA,EACA,CACAD,UAAA,SACAC,MAAA,cACAO,SAAA,CACAI,EACA,CACAX,MA3LA,kFA4LA,EACA,CACAI,UAAA,CACA,EACA,CACAL,UAAA,SACAC,MAAAN,EAAA,SACAU,UAAA,CACA,EACAD,EACA,CACAJ,UAAA,WACAC,MAAA,4BACA,EACA,CACAA,MAAA,IACA,EACA,CACAA,MAAA,IAAAP,EAAA0B,cAAA,SACAZ,SAAA,CACAd,EAAAyB,iBAAA,CACA,CAGAlB,MAAA,sBACAI,UAAA,EACAG,SAAA,CAAAJ,EAAA,EAEA,CACAJ,UAAA,SACAqB,QAAA,MACAb,SAAA,CACAd,EAAAgB,gBAAA,CACAX,EACA,CACAY,SAAA,CACA,CACAV,MAAA,IACAC,IAAA,SACA,EACA,CACAD,MAAA,QACAC,IAAA,WACA,EACA,EAEA,CACAG,UAAA,CACA,EACA,CAGA,OAFAN,EAAAS,QAAA,CAAAU,EAEA,CACAI,KAAA,SACAnB,SAAAP,EACAY,SAAAU,CACA,CACA","sources":["webpack://_N_E/./node_modules/highlight.js/lib/languages/elixir.js","webpack://_N_E/<anon>"],"sourcesContent":["/*\nLanguage: Elixir\nAuthor: Josh Adams <josh@isotope11.com>\nDescription: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.\nCategory: functional\nWebsite: https://elixir-lang.org\n*/\n\n/** @type LanguageFn */\nfunction elixir(hljs) {\n  const ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(!|\\\\?)?';\n  const ELIXIR_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\n  const ELIXIR_KEYWORDS = {\n    $pattern: ELIXIR_IDENT_RE,\n    keyword: 'and false then defined module in return redo retry end for true self when ' +\n    'next until do begin unless nil break not case cond alias while ensure or ' +\n    'include use alias fn quote require import with|0'\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: /#\\{/,\n    end: /\\}/,\n    keywords: ELIXIR_KEYWORDS\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0o[0-7_]+)|(\\\\b0b[01_]+)|(\\\\b0x[0-9a-fA-F_]+)|(-?\\\\b[1-9][0-9_]*(\\\\.[0-9_]+([eE][-+]?[0-9]+)?)?)',\n    relevance: 0\n  };\n  const SIGIL_DELIMITERS = '[/|([{<\"\\']';\n  const LOWERCASE_SIGIL = {\n    className: 'string',\n    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [\n      {\n        endsParent: true,\n        contains: [\n          {\n            contains: [\n              hljs.BACKSLASH_ESCAPE,\n              SUBST\n            ],\n            variants: [\n              {\n                begin: /\"/,\n                end: /\"/\n              },\n              {\n                begin: /'/,\n                end: /'/\n              },\n              {\n                begin: /\\//,\n                end: /\\//\n              },\n              {\n                begin: /\\|/,\n                end: /\\|/\n              },\n              {\n                begin: /\\(/,\n                end: /\\)/\n              },\n              {\n                begin: /\\[/,\n                end: /\\]/\n              },\n              {\n                begin: /\\{/,\n                end: /\\}/\n              },\n              {\n                begin: /</,\n                end: />/\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  };\n\n  const UPCASE_SIGIL = {\n    className: 'string',\n    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [\n      {\n        begin: /\"/,\n        end: /\"/\n      },\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\\//,\n        end: /\\//\n      },\n      {\n        begin: /\\|/,\n        end: /\\|/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        begin: /\\[/,\n        end: /\\]/\n      },\n      {\n        begin: /\\{/,\n        end: /\\}/\n      },\n      {\n        begin: /</,\n        end: />/\n      }\n    ]\n  };\n\n  const STRING = {\n    className: 'string',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ],\n    variants: [\n      {\n        begin: /\"\"\"/,\n        end: /\"\"\"/\n      },\n      {\n        begin: /'''/,\n        end: /'''/\n      },\n      {\n        begin: /~S\"\"\"/,\n        end: /\"\"\"/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S\"/,\n        end: /\"/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S'''/,\n        end: /'''/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S'/,\n        end: /'/,\n        contains: [] // override default\n      },\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\"/,\n        end: /\"/\n      }\n    ]\n  };\n  const FUNCTION = {\n    className: 'function',\n    beginKeywords: 'def defp defmacro',\n    end: /\\B\\b/, // the mode is ended by the title\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: ELIXIR_IDENT_RE,\n        endsParent: true\n      })\n    ]\n  };\n  const CLASS = hljs.inherit(FUNCTION, {\n    className: 'class',\n    beginKeywords: 'defimpl defmodule defprotocol defrecord',\n    end: /\\bdo\\b|$|;/\n  });\n  const ELIXIR_DEFAULT_CONTAINS = [\n    STRING,\n    UPCASE_SIGIL,\n    LOWERCASE_SIGIL,\n    hljs.HASH_COMMENT_MODE,\n    CLASS,\n    FUNCTION,\n    {\n      begin: '::'\n    },\n    {\n      className: 'symbol',\n      begin: ':(?![\\\\s:])',\n      contains: [\n        STRING,\n        {\n          begin: ELIXIR_METHOD_RE\n        }\n      ],\n      relevance: 0\n    },\n    {\n      className: 'symbol',\n      begin: ELIXIR_IDENT_RE + ':(?!:)',\n      relevance: 0\n    },\n    NUMBER,\n    {\n      className: 'variable',\n      begin: '(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))'\n    },\n    {\n      begin: '->'\n    },\n    { // regexp container\n      begin: '(' + hljs.RE_STARTERS_RE + ')\\\\s*',\n      contains: [\n        hljs.HASH_COMMENT_MODE,\n        {\n          // to prevent false regex triggers for the division function:\n          // /:\n          begin: /\\/: (?=\\d+\\s*[,\\]])/,\n          relevance: 0,\n          contains: [NUMBER]\n        },\n        {\n          className: 'regexp',\n          illegal: '\\\\n',\n          contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n          ],\n          variants: [\n            {\n              begin: '/',\n              end: '/[a-z]*'\n            },\n            {\n              begin: '%r\\\\[',\n              end: '\\\\][a-z]*'\n            }\n          ]\n        }\n      ],\n      relevance: 0\n    }\n  ];\n  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;\n\n  return {\n    name: 'Elixir',\n    keywords: ELIXIR_KEYWORDS,\n    contains: ELIXIR_DEFAULT_CONTAINS\n  };\n}\n\nmodule.exports = elixir;\n"],"names":["module","exports","hljs","ELIXIR_IDENT_RE","ELIXIR_KEYWORDS","$pattern","keyword","SUBST","className","begin","end","keywords","NUMBER","relevance","SIGIL_DELIMITERS","LOWERCASE_SIGIL","contains","endsParent","BACKSLASH_ESCAPE","variants","STRING","FUNCTION","beginKeywords","inherit","TITLE_MODE","CLASS","ELIXIR_DEFAULT_CONTAINS","HASH_COMMENT_MODE","RE_STARTERS_RE","illegal","name"],"sourceRoot":""}